{"version":3,"sources":["../../../src/lib/oriented-bounding-box.js"],"names":["Vector3","Matrix3","BoundingSphere","INTERSECTION","scratchVector","scratchOffset","scratchVectorU","scratchVectorV","scratchVectorW","scratchCorner","scratchToCenter","fromOrientedBoundingBoxScratchU","fromOrientedBoundingBoxScratchV","fromOrientedBoundingBoxScratchW","MATRIX3","COLUMN0ROW0","COLUMN0ROW1","COLUMN0ROW2","COLUMN1ROW0","COLUMN1ROW1","COLUMN1ROW2","COLUMN2ROW0","COLUMN2ROW1","COLUMN2ROW2","OrientedBoundingBox","constructor","center","halfAxes","from","clone","equals","right","Boolean","getBoundingSphere","result","u","getColumn","v","w","cornerVector","copy","add","radius","magnitude","intersectPlane","plane","normal","normalX","x","normalY","y","normalZ","z","radEffective","Math","abs","distanceToPlane","dot","distance","OUTSIDE","INSIDE","INTERSECTING","distanceTo","point","sqrt","distanceSquaredTo","offset","subtract","uHalf","vHalf","wHalf","normalize","distanceSquared","d","computePlaneDistances","position","direction","minDist","Number","POSITIVE_INFINITY","maxDist","NEGATIVE_INFINITY","corner","toCenter","mag","min","max","getTransform"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Vector3, Matrix3} from '@math.gl/core';\nimport BoundingSphere from './bounding-sphere';\nimport {INTERSECTION} from '../constants';\n\nconst scratchVector = new Vector3();\nconst scratchOffset = new Vector3();\nconst scratchVectorU = new Vector3();\nconst scratchVectorV = new Vector3();\nconst scratchVectorW = new Vector3();\nconst scratchCorner = new Vector3();\nconst scratchToCenter = new Vector3();\n\nconst fromOrientedBoundingBoxScratchU = new Vector3();\nconst fromOrientedBoundingBoxScratchV = new Vector3();\nconst fromOrientedBoundingBoxScratchW = new Vector3();\n\nconst MATRIX3 = {\n  COLUMN0ROW0: 0,\n  COLUMN0ROW1: 1,\n  COLUMN0ROW2: 2,\n  COLUMN1ROW0: 3,\n  COLUMN1ROW1: 4,\n  COLUMN1ROW2: 5,\n  COLUMN2ROW0: 6,\n  COLUMN2ROW1: 7,\n  COLUMN2ROW2: 8\n};\n\nexport default class OrientedBoundingBox {\n  constructor(center = [0, 0, 0], halfAxes = [0, 0, 0, 0, 0, 0, 0, 0, 0]) {\n    this.center = new Vector3().from(center);\n    this.halfAxes = new Matrix3(halfAxes);\n  }\n\n  // Duplicates a OrientedBoundingBox instance.\n  clone() {\n    return new OrientedBoundingBox(this.center, this.halfAxes);\n  }\n\n  // Compares the provided OrientedBoundingBox componentwise and returns\n  equals(right) {\n    return (\n      this === right ||\n      (Boolean(right) && this.center.equals(right.center) && this.halfAxes.equals(right.halfAxes))\n    );\n  }\n\n  // Computes a tight-fitting bounding sphere enclosing the provided oriented bounding box.\n  getBoundingSphere(result = new BoundingSphere()) {\n    const halfAxes = this.halfAxes;\n    const u = halfAxes.getColumn(0, fromOrientedBoundingBoxScratchU);\n    const v = halfAxes.getColumn(1, fromOrientedBoundingBoxScratchV);\n    const w = halfAxes.getColumn(2, fromOrientedBoundingBoxScratchW);\n\n    // Calculate \"corner\" vector\n    const cornerVector = scratchVector\n      .copy(u)\n      .add(v)\n      .add(w);\n\n    result.center.copy(this.center);\n    result.radius = cornerVector.magnitude();\n\n    return result;\n  }\n\n  /**\n   * Determines which side of a plane the oriented bounding box is located.\n   *\n   * @param plane The plane to test against.\n   * @returns\n   *  - `INTERSECTION.INSIDE` if the entire box is on the side of the plane the normal is pointing.\n   *  - `INTERSECTION.OUTSIDE` if the entire box is on the opposite side.\n   *  - `INTERSECTION.INTERSECTING` if the box intersects the plane.\n   */\n  intersectPlane(plane) {\n    const center = this.center;\n    const normal = plane.normal;\n    const halfAxes = this.halfAxes;\n\n    const normalX = normal.x;\n    const normalY = normal.y;\n    const normalZ = normal.z;\n\n    // Plane is used as if it is its normal; the first three components are assumed to be normalized\n    const radEffective =\n      Math.abs(\n        normalX * halfAxes[MATRIX3.COLUMN0ROW0] +\n          normalY * halfAxes[MATRIX3.COLUMN0ROW1] +\n          normalZ * halfAxes[MATRIX3.COLUMN0ROW2]\n      ) +\n      Math.abs(\n        normalX * halfAxes[MATRIX3.COLUMN1ROW0] +\n          normalY * halfAxes[MATRIX3.COLUMN1ROW1] +\n          normalZ * halfAxes[MATRIX3.COLUMN1ROW2]\n      ) +\n      Math.abs(\n        normalX * halfAxes[MATRIX3.COLUMN2ROW0] +\n          normalY * halfAxes[MATRIX3.COLUMN2ROW1] +\n          normalZ * halfAxes[MATRIX3.COLUMN2ROW2]\n      );\n    const distanceToPlane = normal.dot(center) + plane.distance;\n\n    if (distanceToPlane <= -radEffective) {\n      // The entire box is on the negative side of the plane normal\n      return INTERSECTION.OUTSIDE;\n    } else if (distanceToPlane >= radEffective) {\n      // The entire box is on the positive side of the plane normal\n      return INTERSECTION.INSIDE;\n    }\n    return INTERSECTION.INTERSECTING;\n  }\n\n  // Computes the estimated distance from the closest point on a bounding box to a point.\n  distanceTo(point) {\n    return Math.sqrt(this.distanceSquaredTo(point));\n  }\n\n  // Computes the estimated distance squared from the closest point on a bounding box to a point.\n  // See Geometric Tools for Computer Graphics 10.4.2\n\n  // eslint-disable-next-line max-statements\n  distanceSquaredTo(point) {\n    const offset = scratchOffset.from(point).subtract(this.center);\n\n    const halfAxes = this.halfAxes;\n    const u = halfAxes.getColumn(0, scratchVectorU);\n    const v = halfAxes.getColumn(1, scratchVectorV);\n    const w = halfAxes.getColumn(2, scratchVectorW);\n\n    const uHalf = u.magnitude();\n    const vHalf = v.magnitude();\n    const wHalf = w.magnitude();\n\n    u.normalize();\n    v.normalize();\n    w.normalize();\n\n    let distanceSquared = 0.0;\n    let d;\n\n    d = Math.abs(offset.dot(u)) - uHalf;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    d = Math.abs(offset.dot(v)) - vHalf;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    d = Math.abs(offset.dot(w)) - wHalf;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    return distanceSquared;\n  }\n\n  // The distances calculated by the vector from the center of the bounding box\n  // to position projected onto direction.\n\n  // eslint-disable-next-line max-statements\n  computePlaneDistances(position, direction, result = [-0, -0]) {\n    let minDist = Number.POSITIVE_INFINITY;\n    let maxDist = Number.NEGATIVE_INFINITY;\n\n    const center = this.center;\n    const halfAxes = this.halfAxes;\n\n    const u = halfAxes.getColumn(0, scratchVectorU);\n    const v = halfAxes.getColumn(1, scratchVectorV);\n    const w = halfAxes.getColumn(2, scratchVectorW);\n\n    // project first corner\n    const corner = scratchCorner\n      .copy(u)\n      .add(v)\n      .add(w)\n      .add(center);\n\n    const toCenter = scratchToCenter.copy(corner).subtract(position);\n    let mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project second corner\n    corner\n      .copy(center)\n      .add(u)\n      .add(v)\n      .subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project third corner\n    corner\n      .copy(center)\n      .add(u)\n      .subtract(v)\n      .add(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project fourth corner\n    corner\n      .copy(center)\n      .add(u)\n      .subtract(v)\n      .subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project fifth corner\n    center\n      .copy(corner)\n      .subtract(u)\n      .add(v)\n      .add(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project sixth corner\n    center\n      .copy(corner)\n      .subtract(u)\n      .add(v)\n      .subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project seventh corner\n    center\n      .copy(corner)\n      .subtract(u)\n      .subtract(v)\n      .add(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project eighth corner\n    center\n      .copy(corner)\n      .subtract(u)\n      .subtract(v)\n      .subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    result[0] = minDist;\n    result[1] = maxDist;\n    return result;\n  }\n\n  getTransform() {\n    // const modelMatrix = Matrix4.fromRotationTranslation(this.boundingVolume.halfAxes, this.boundingVolume.center);\n    // return modelMatrix;\n  }\n}\n"],"file":"oriented-bounding-box.js"}