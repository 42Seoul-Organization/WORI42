{"version":3,"sources":["../../../../src/lib/parsers/parse-3d-tile.js"],"names":["parse3DTile","arrayBuffer","byteOffset","options","context","tile","type","TILE3D_TYPE","COMPOSITE","BATCHED_3D_MODEL","INSTANCED_3D_MODEL","POINT_CLOUD","Error"],"mappings":";;;;;;;;;;;;;AAGA;;AACA;;AAEA;;AACA;;AACA;;AACA;;SAGsBA,W;;;;;iFAAf,iBAA2BC,WAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwCC,YAAAA,UAAxC,2DAAqD,CAArD;AAAwDC,YAAAA,OAAxD;AAAiEC,YAAAA,OAAjE;AAA0EC,YAAAA,IAA1E,2DAAiF,EAAjF;AACLF,YAAAA,OAAO,GAAGA,OAAO,CAAC,UAAD,CAAP,IAAuB,EAAjC;AAEAE,YAAAA,IAAI,CAACH,UAAL,GAAkBA,UAAlB;AACAG,YAAAA,IAAI,CAACC,IAAL,GAAY,gCAAeL,WAAf,EAA4BC,UAA5B,CAAZ;AAJK,0BAMGG,IAAI,CAACC,IANR;AAAA,4CAOEC,uBAAYC,SAPd,wBAkBED,uBAAYE,gBAlBd,wBAqBEF,uBAAYG,kBArBd,wBAwBEH,uBAAYI,WAxBd;AAAA;;AAAA;AAAA;AAAA,mBASY,gDACXN,IADW,EAEXJ,WAFW,EAGXC,UAHW,EAIXC,OAJW,EAKXC,OALW,EAMXJ,WANW,CATZ;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAmBY,sDAAwBK,IAAxB,EAA8BJ,WAA9B,EAA2CC,UAA3C,EAAuDC,OAAvD,EAAgEC,OAAhE,CAnBZ;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAsBY,0DAA0BC,IAA1B,EAAgCJ,WAAhC,EAA6CC,UAA7C,EAAyDC,OAAzD,EAAkEC,OAAlE,CAtBZ;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAyBY,kDAAsBC,IAAtB,EAA4BJ,WAA5B,EAAyCC,UAAzC,EAAqDC,OAArD,EAA8DC,OAA9D,CAzBZ;;AAAA;AAAA;;AAAA;AAAA,kBA4BK,IAAIQ,KAAJ,sCAAwCP,IAAI,CAACC,IAA7C,EA5BL;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {TILE3D_TYPE} from '../constants';\nimport {getMagicString} from './helpers/parse-utils';\n\nimport {parsePointCloud3DTile} from './parse-3d-tile-point-cloud';\nimport {parseBatchedModel3DTile} from './parse-3d-tile-batched-model';\nimport {parseInstancedModel3DTile} from './parse-3d-tile-instanced-model';\nimport {parseComposite3DTile} from './parse-3d-tile-composite';\n\n// Extracts\nexport async function parse3DTile(arrayBuffer, byteOffset = 0, options, context, tile = {}) {\n  options = options['3d-tiles'] || {};\n\n  tile.byteOffset = byteOffset;\n  tile.type = getMagicString(arrayBuffer, byteOffset);\n\n  switch (tile.type) {\n    case TILE3D_TYPE.COMPOSITE:\n      // Note: We pass this function as argument so that embedded tiles can be parsed recursively\n      return await parseComposite3DTile(\n        tile,\n        arrayBuffer,\n        byteOffset,\n        options,\n        context,\n        parse3DTile\n      );\n\n    case TILE3D_TYPE.BATCHED_3D_MODEL:\n      return await parseBatchedModel3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n    case TILE3D_TYPE.INSTANCED_3D_MODEL:\n      return await parseInstancedModel3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n    case TILE3D_TYPE.POINT_CLOUD:\n      return await parsePointCloud3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n    default:\n      throw new Error(`3DTileLoader: unknown type ${tile.type}`); // eslint-disable-line\n  }\n}\n"],"file":"parse-3d-tile.js"}