{"version":3,"sources":["../../src/draco-loader.js"],"names":["VERSION","DracoWorkerLoader","id","name","version","extensions","mimeTypes","binary","test","options","draco","decoderType","WebAssembly","libraryPath","workerUrl","localWorkerUrl","DracoLoader","parse","arrayBuffer","context","loader","dracoParser","DracoParser","parseSync","destroy"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;AAKA,IAAMA,OAAO,GAAG,mBAAuB,WAAvB,aAAmD,QAAnE;AAGO,IAAMC,iBAAiB,GAAG;AAC/BC,EAAAA,EAAE,EAAE,OAD2B;AAE/BC,EAAAA,IAAI,EAAE,OAFyB;AAG/BC,EAAAA,OAAO,EAAEJ,OAHsB;AAI/BK,EAAAA,UAAU,EAAE,CAAC,KAAD,CAJmB;AAK/BC,EAAAA,SAAS,EAAE,CAAC,0BAAD,CALoB;AAM/BC,EAAAA,MAAM,EAAE,IANuB;AAO/BC,EAAAA,IAAI,EAAE,OAPyB;AAQ/BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,KAAK,EAAE;AACLC,MAAAA,WAAW,EAAE,QAAOC,WAAP,0DAAOA,WAAP,OAAuB,QAAvB,GAAkC,MAAlC,GAA2C,IADnD;AAELC,MAAAA,WAAW,SAFN;AAGLC,MAAAA,SAAS,gDAAyCd,OAAzC,iCAHJ;AAILe,MAAAA,cAAc;AAJT;AADA;AARsB,CAA1B;;;AAmBA,IAAMC,WAAW,mCACnBf,iBADmB;AAEtBgB,EAAAA,KAAK,EAALA;AAFsB,EAAjB;;;;SAKQA,K;;;;;2EAAf,iBAAqBC,WAArB,EAAkCT,OAAlC,EAA2CU,OAA3C,EAAoDC,MAApD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACwB,+CAAuBX,OAAvB,CADxB;;AAAA;AAAA;AACSC,YAAAA,KADT,yBACSA,KADT;AAEQW,YAAAA,WAFR,GAEsB,IAAIC,uBAAJ,CAAgBZ,KAAhB,CAFtB;AAAA;AAAA,6CAMWW,WAAW,CAACE,SAAZ,CAAsBL,WAAtB,CANX;;AAAA;AAAA;AAQIG,YAAAA,WAAW,CAACG,OAAZ;AARJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import {loadDracoDecoderModule} from './lib/draco-module-loader';\nimport DracoParser from './lib/draco-parser';\n/** @typedef {import('@loaders.gl/loader-utils').LoaderObject} LoaderObject */\n\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\n/** @type {LoaderObject} */\nexport const DracoWorkerLoader = {\n  id: 'draco',\n  name: 'Draco',\n  version: VERSION,\n  extensions: ['drc'],\n  mimeTypes: ['application/octet-stream'],\n  binary: true,\n  test: 'DRACO',\n  options: {\n    draco: {\n      decoderType: typeof WebAssembly === 'object' ? 'wasm' : 'js', // 'js' for IE11\n      libraryPath: `libs/`,\n      workerUrl: `https://unpkg.com/@loaders.gl/draco@${VERSION}/dist/draco-loader.worker.js`,\n      localWorkerUrl: `modules/draco/dist/draco-loader.worker.dev.js`\n    }\n  }\n};\n\n/** @type {LoaderObject} */\nexport const DracoLoader = {\n  ...DracoWorkerLoader,\n  parse\n};\n\nasync function parse(arrayBuffer, options, context, loader) {\n  const {draco} = await loadDracoDecoderModule(options);\n  const dracoParser = new DracoParser(draco);\n  try {\n    // TODO passing in options causes CI failures...\n    // @ts-ignore\n    return dracoParser.parseSync(arrayBuffer);\n  } finally {\n    dracoParser.destroy();\n  }\n}\n"],"file":"draco-loader.js"}