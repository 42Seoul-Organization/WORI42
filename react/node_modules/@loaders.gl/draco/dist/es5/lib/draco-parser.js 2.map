{"version":3,"sources":["../../../src/lib/draco-parser.js"],"names":["GEOMETRY_TYPE","TRIANGULAR_MESH","POINT_CLOUD","DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP","POSITION","NORMAL","COLOR","TEX_COORD","DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP","Int8Array","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","DracoParser","draco","drawMode","dracoGeometry","destroy","arrayBuffer","options","buffer","DecoderBuffer","Init","byteLength","decoder","Decoder","data","dracoStatus","header","geometryType","GetEncodedGeometryType","Mesh","DecodeBufferToMesh","type","faceCount","num_faces","attributeCount","num_attributes","vertexCount","num_points","PointCloud","DecodeBufferToPointCloud","Error","ok","ptr","message","error_msg","loaderData","extractDRACOGeometry","boundingBox","attributes","geometry","getAttributes","positionAttribute","getPositionAttributeMetadata","indices","getMeshStripIndices","getMeshFaceIndices","mode","value","size","metadata","posTransform","AttributeQuantizationTransform","InitFromAttribute","position","isQuantized","maxRange","range","numQuantizationBits","quantization_bits","minValues","i","min_value","numPoints","attributeName","attributeType","attributeId","GetAttributeId","dracoAttribute","GetAttribute","getAttributeTypedArray","typedArray","length","numFaces","numIndices","dracoArray","DracoInt32Array","GetFaceFromMesh","index","GetValue","GetTriangleStripsFromMesh","data_type","numComponents","num_components","numValues","DracoFloat32Array","GetAttributeFloatForAllPoints","DracoInt8Array","GetAttributeInt8ForAllPoints","DracoInt16Array","GetAttributeInt16ForAllPoints","GetAttributeInt32ForAllPoints","DracoUInt8Array","GetAttributeUInt8ForAllPoints","DracoUInt16Array","GetAttributeUInt16ForAllPoints","DracoUInt32Array","GetAttributeUInt32ForAllPoints","errorMsg","components","parseSync"],"mappings":"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","sourcesContent":["// This code is a fork of example code from the DRACO repository\n// Copyright 2017 The Draco Authors.\n// Licensed under the Apache License, Version 2.0 (the 'License');\nimport {getMeshBoundingBox} from '@loaders.gl/loader-utils';\n\nconst GEOMETRY_TYPE = {\n  TRIANGULAR_MESH: 0,\n  POINT_CLOUD: 1\n};\n\n// Native Draco attribute names to GLTF attribute names.\nconst DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP = {\n  POSITION: 'POSITION',\n  NORMAL: 'NORMAL',\n  COLOR: 'COLOR_0',\n  TEX_COORD: 'TEXCOORD_0'\n};\n\nconst DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP = {\n  1: Int8Array,\n  2: Uint8Array,\n  3: Int16Array,\n  4: Uint16Array,\n  5: Int32Array,\n  6: Uint32Array,\n  9: Float32Array\n};\n\nexport default class DracoParser {\n  // draco - the draco decoder, either import `draco3d` or load dynamically\n  constructor(draco) {\n    this.draco = draco;\n    this.drawMode = 'TRIANGLE';\n  }\n\n  destroy() {}\n\n  destroyGeometry(dracoGeometry) {\n    if (dracoGeometry) {\n      this.draco.destroy(dracoGeometry.dracoGeometry);\n    }\n  }\n\n  // NOTE: caller must call `destroyGeometry` on the return value after using it\n  parseSync(arrayBuffer, options) {\n    const buffer = new this.draco.DecoderBuffer();\n    buffer.Init(new Int8Array(arrayBuffer), arrayBuffer.byteLength);\n\n    const decoder = new this.draco.Decoder();\n\n    const data = {};\n    let dracoStatus;\n    let dracoGeometry;\n    let header;\n\n    try {\n      const geometryType = decoder.GetEncodedGeometryType(buffer);\n      switch (geometryType) {\n        case this.draco.TRIANGULAR_MESH:\n          dracoGeometry = new this.draco.Mesh();\n          dracoStatus = decoder.DecodeBufferToMesh(buffer, dracoGeometry);\n          header = {\n            type: GEOMETRY_TYPE.TRIANGULAR_MESH,\n            faceCount: dracoGeometry.num_faces(),\n            attributeCount: dracoGeometry.num_attributes(),\n            vertexCount: dracoGeometry.num_points()\n          };\n          break;\n\n        case this.draco.POINT_CLOUD:\n          dracoGeometry = new this.draco.PointCloud();\n          dracoStatus = decoder.DecodeBufferToPointCloud(buffer, dracoGeometry);\n          header = {\n            type: GEOMETRY_TYPE.POINT_CLOUD,\n            attributeCount: dracoGeometry.num_attributes(),\n            vertexCount: dracoGeometry.num_points()\n          };\n          break;\n\n        default:\n          throw new Error('Unknown DRACO geometry type.');\n      }\n\n      if (!dracoStatus.ok() || !dracoGeometry.ptr) {\n        const message = `DRACO decompression failed: ${dracoStatus.error_msg()}`;\n        // console.error(message);\n        if (dracoGeometry) {\n          this.draco.destroy(dracoGeometry);\n        }\n        throw new Error(message);\n      }\n\n      data.loaderData = {header};\n\n      this.extractDRACOGeometry(decoder, dracoGeometry, geometryType, data);\n\n      data.header = {\n        vertexCount: header.vertexCount,\n        boundingBox: getMeshBoundingBox(data.attributes)\n      };\n    } finally {\n      this.draco.destroy(decoder);\n      this.draco.destroy(buffer);\n    }\n\n    return data;\n  }\n\n  extractDRACOGeometry(decoder, dracoGeometry, geometryType, geometry) {\n    // const numPoints = dracoGeometry.num_points();\n    // const numAttributes = dracoGeometry.num_attributes();\n\n    // Structure for converting to WebGL framework specific attributes later\n    const attributes = this.getAttributes(decoder, dracoGeometry);\n\n    const positionAttribute = attributes.POSITION;\n    if (!positionAttribute) {\n      throw new Error('DRACO decompressor: No position attribute found.');\n    }\n\n    this.getPositionAttributeMetadata(positionAttribute);\n\n    // For meshes, we need indices to define the faces.\n    if (geometryType === this.draco.TRIANGULAR_MESH) {\n      attributes.indices =\n        this.drawMode === 'TRIANGLE_STRIP'\n          ? this.getMeshStripIndices(decoder, dracoGeometry)\n          : this.getMeshFaceIndices(decoder, dracoGeometry);\n      geometry.mode =\n        this.drawMode === 'TRIANGLE_STRIP'\n          ? 5 // GL.TRIANGLE_STRIP\n          : 4; // GL.TRIANGLES\n    } else {\n      geometry.mode = 0; // GL.POINTS\n    }\n\n    if (attributes.indices) {\n      geometry.indices = {value: attributes.indices, size: 1};\n      delete attributes.indices;\n    }\n    geometry.attributes = attributes;\n\n    return geometry;\n  }\n\n  getPositionAttributeMetadata(positionAttribute) {\n    this.metadata = this.metadata || {};\n    this.metadata.attributes = this.metadata.attributes || {};\n\n    const posTransform = new this.draco.AttributeQuantizationTransform();\n    if (posTransform.InitFromAttribute(positionAttribute)) {\n      // Quantized attribute. Store the quantization parameters into the attribute\n      this.metadata.attributes.position.isQuantized = true;\n      this.metadata.attributes.position.maxRange = posTransform.range();\n      this.metadata.attributes.position.numQuantizationBits = posTransform.quantization_bits();\n      this.metadata.attributes.position.minValues = new Float32Array(3);\n      for (let i = 0; i < 3; ++i) {\n        this.metadata.attributes.position.minValues[i] = posTransform.min_value(i);\n      }\n    }\n    this.draco.destroy(posTransform);\n  }\n\n  getAttributes(decoder, dracoGeometry) {\n    const attributes = {};\n    const numPoints = dracoGeometry.num_points();\n    // const attributeUniqueIdMap = {};\n\n    // Add native Draco attribute type to geometry.\n    for (const attributeName in DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP) {\n      // The native attribute type is only used when no unique Id is provided.\n      // For example, loading .drc files.\n\n      // if (attributeUniqueIdMap[attributeName] === undefined) {\n      const attributeType = this.draco[attributeName];\n      const attributeId = decoder.GetAttributeId(dracoGeometry, attributeType);\n      if (attributeId !== -1) {\n        const dracoAttribute = decoder.GetAttribute(dracoGeometry, attributeId);\n        const {typedArray} = this.getAttributeTypedArray(\n          decoder,\n          dracoGeometry,\n          dracoAttribute,\n          attributeName\n        );\n        attributes[DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP[attributeName]] = {\n          value: typedArray,\n          size: typedArray.length / numPoints\n        };\n      }\n      // }\n    }\n\n    // // Add attributes of user specified unique id. E.g. GLTF models.\n    // for (const attributeName in attributeUniqueIdMap) {\n    //   const attributeType = attributeTypeMap[attributeName] || Float32Array;\n    //   const attributeId = attributeUniqueIdMap[attributeName];\n    //   const attribute = decoder.GetAttributeByUniqueId(dracoGeometry, attributeId);\n    //   this.getAttributeTypedArray(decoder, dracoGeometry, attribute,attributeName,attributeType);\n    // }\n\n    return attributes;\n  }\n\n  // For meshes, we need indices to define the faces.\n  getMeshFaceIndices(decoder, dracoGeometry) {\n    // Example on how to retrieve mesh and attributes.\n    const numFaces = dracoGeometry.num_faces();\n\n    const numIndices = numFaces * 3;\n    const indices = new Uint32Array(numIndices);\n    const dracoArray = new this.draco.DracoInt32Array();\n    for (let i = 0; i < numFaces; ++i) {\n      decoder.GetFaceFromMesh(dracoGeometry, i, dracoArray);\n      const index = i * 3;\n      indices[index] = dracoArray.GetValue(0);\n      indices[index + 1] = dracoArray.GetValue(1);\n      indices[index + 2] = dracoArray.GetValue(2);\n    }\n\n    this.draco.destroy(dracoArray);\n    return indices;\n  }\n\n  // For meshes, we need indices to define the faces.\n  getMeshStripIndices(decoder, dracoGeometry) {\n    const dracoArray = new this.draco.DracoInt32Array();\n    /* const numStrips = */ decoder.GetTriangleStripsFromMesh(dracoGeometry, dracoArray);\n    const indices = new Uint32Array(dracoArray.size());\n    for (let i = 0; i < dracoArray.size(); ++i) {\n      indices[i] = dracoArray.GetValue(i);\n    }\n    this.draco.destroy(dracoArray);\n    return indices;\n  }\n\n  getAttributeTypedArray(decoder, dracoGeometry, dracoAttribute, attributeName) {\n    if (dracoAttribute.ptr === 0) {\n      const message = `DRACO decode bad attribute ${attributeName}`;\n      // console.error(message);\n      throw new Error(message);\n    }\n\n    const attributeType = DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP[dracoAttribute.data_type()];\n    const numComponents = dracoAttribute.num_components();\n    const numPoints = dracoGeometry.num_points();\n    const numValues = numPoints * numComponents;\n\n    let dracoArray;\n    let typedArray;\n\n    switch (attributeType) {\n      case Float32Array:\n        dracoArray = new this.draco.DracoFloat32Array();\n        decoder.GetAttributeFloatForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n        typedArray = new Float32Array(numValues);\n        break;\n\n      case Int8Array:\n        dracoArray = new this.draco.DracoInt8Array();\n        decoder.GetAttributeInt8ForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n        typedArray = new Int8Array(numValues);\n        break;\n\n      case Int16Array:\n        dracoArray = new this.draco.DracoInt16Array();\n        decoder.GetAttributeInt16ForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n        typedArray = new Int16Array(numValues);\n        break;\n\n      case Int32Array:\n        dracoArray = new this.draco.DracoInt32Array();\n        decoder.GetAttributeInt32ForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n        typedArray = new Int32Array(numValues);\n        break;\n\n      case Uint8Array:\n        dracoArray = new this.draco.DracoUInt8Array();\n        decoder.GetAttributeUInt8ForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n        typedArray = new Uint8Array(numValues);\n        break;\n\n      case Uint16Array:\n        dracoArray = new this.draco.DracoUInt16Array();\n        decoder.GetAttributeUInt16ForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n        typedArray = new Uint16Array(numValues);\n        break;\n\n      case Uint32Array:\n        dracoArray = new this.draco.DracoUInt32Array();\n        decoder.GetAttributeUInt32ForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n        typedArray = new Uint32Array(numValues);\n        break;\n\n      default:\n        const errorMsg = 'DRACO decoder: unexpected attribute type.';\n        // console.error(errorMsg);\n        throw new Error(errorMsg);\n    }\n\n    // Copy data from decoder.\n    for (let i = 0; i < numValues; i++) {\n      typedArray[i] = dracoArray.GetValue(i);\n    }\n\n    this.draco.destroy(dracoArray);\n\n    return {typedArray, components: numComponents};\n  }\n\n  // DEPRECATED\n\n  decode(arrayBuffer, options) {\n    return this.parseSync(arrayBuffer, options);\n  }\n}\n"],"file":"draco-parser.js"}