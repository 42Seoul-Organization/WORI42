{"version":3,"sources":["../../../src/lib/draco-module-loader.js"],"names":["loadDecoderPromise","loadEncoderPromise","loadDracoDecoderModule","options","modules","draco3d","draco","createDecoderModule","loadDracoDecoder","loadDracoEncoderModule","createEncoderModule","loadDracoEncoder","decoderType","DracoDecoderModule","Promise","all","wasmBinary","global","initializeDracoDecoder","resolve","onModuleLoaded","DracoEncoderModule"],"mappings":"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","sourcesContent":["// Dynamic DRACO module loading inspired by THREE.DRACOLoader\n// https://github.com/mrdoob/three.js/blob/398c4f39ebdb8b23eefd4a7a5ec49ec0c96c7462/examples/jsm/loaders/DRACOLoader.js\n// by Don McCurdy / https://www.donmccurdy.com / MIT license\n\nimport {loadLibrary, global} from '@loaders.gl/loader-utils';\n\nlet loadDecoderPromise;\nlet loadEncoderPromise;\n\nexport async function loadDracoDecoderModule(options) {\n  const modules = options.modules || {};\n\n  // Check if a bundled draco3d library has been supplied by application\n  if (modules.draco3d) {\n    return {\n      draco: modules.draco3d.createDecoderModule()\n    };\n  }\n\n  // If not, dynamically load the WASM script from our CDN\n  loadDecoderPromise = loadDecoderPromise || loadDracoDecoder(options);\n  return await loadDecoderPromise;\n}\n\nexport async function loadDracoEncoderModule(options) {\n  const modules = options.modules || {};\n\n  // Check if a bundled draco3d library has been supplied by application\n  if (modules.draco3d) {\n    return {\n      draco: modules.draco3d.createEncoderModule()\n    };\n  }\n\n  // If not, dynamically load the WASM script from our CDN\n  loadEncoderPromise = loadEncoderPromise || loadDracoEncoder(options);\n  return await loadEncoderPromise;\n}\n\n// DRACO DECODER LOADING\n\nasync function loadDracoDecoder(options) {\n  let DracoDecoderModule;\n  let wasmBinary;\n  switch (options.draco && options.draco.decoderType) {\n    case 'js':\n      DracoDecoderModule = await loadLibrary('draco_decoder.js', 'draco', options);\n      break;\n\n    case 'wasm':\n    default:\n      [DracoDecoderModule, wasmBinary] = await Promise.all([\n        await loadLibrary('draco_wasm_wrapper.js', 'draco', options),\n        await loadLibrary('draco_decoder.wasm', 'draco', options)\n      ]);\n  }\n  // Depends on how import happened...\n  // @ts-ignore\n  DracoDecoderModule = DracoDecoderModule || global.DracoDecoderModule;\n  return await initializeDracoDecoder(DracoDecoderModule, wasmBinary);\n}\n\nfunction initializeDracoDecoder(DracoDecoderModule, wasmBinary) {\n  const options = {};\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n\n  return new Promise(resolve => {\n    DracoDecoderModule({\n      ...options,\n      onModuleLoaded: draco => resolve({draco}) // Module is Promise-like. Wrap in object to avoid loop.\n    });\n  });\n}\n\n// ENCODER\n\nasync function loadDracoEncoder(options) {\n  let DracoEncoderModule = await loadLibrary('draco_encoder.js', 'draco', options);\n  // @ts-ignore\n  DracoEncoderModule = DracoEncoderModule || global.DracoEncoderModule;\n\n  return new Promise(resolve => {\n    DracoEncoderModule({\n      onModuleLoaded: draco => resolve({draco}) // Module is Promise-like. Wrap in object to avoid loop.\n    });\n  });\n}\n"],"file":"draco-module-loader.js"}