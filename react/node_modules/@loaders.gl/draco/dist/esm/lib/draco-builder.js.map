{"version":3,"sources":["../../../src/lib/draco-builder.js"],"names":["GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP","POSITION","NORMAL","COLOR_0","TEXCOORD_0","noop","dracoInt8ArrayToArrayBuffer","dracoData","byteLength","size","outputBuffer","ArrayBuffer","outputData","Int8Array","i","GetValue","DracoBuilder","draco","options","dracoEncoder","Encoder","dracoMeshBuilder","MeshBuilder","log","destroyEncodedObject","object","destroy","mesh","_setOptions","pointcloud","_encodePointCloud","_encodeMesh","attributes","indices","_getAttributesFromMesh","dracoPointCloud","_createDracoPointCloud","DracoInt8Array","encodedLen","EncodePointCloudToDracoBuffer","Error","num_points","num_attributes","dracoMesh","_createDracoMesh","EncodeMeshToDracoBuffer","SetSpeedOptions","speed","dracoMethod","method","SetEncodingMethod","attribute","quantization","bits","dracoPosition","SetAttributeQuantization","Mesh","positions","_getPositionAttribute","vertexCount","length","attributeName","_addAttributeToMesh","error","PointCloud","isView","dracoAttributeType","_getDracoAttributeType","numFaces","AddFacesToMesh","constructor","name","AddInt8Attribute","AddInt16Attribute","AddInt32Attribute","AddUInt8Attribute","AddUInt16Attribute","AddUInt32Attribute","AddFloatAttribute","toLowerCase","COLOR","TEX_COORD","GENERIC","dracoType"],"mappings":"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","sourcesContent":["// This code is a fork of example code from the DRACO repository\n// Copyright 2017 The Draco Authors.\n// Licensed under the Apache License, Version 2.0 (the 'License');\n\n// TODO - seems to be some valid TS failures in this file\n// @ts-nocheck\n\n// const DEFAULT_ENCODING_OPTIONS = {\n//   method: 'MESH_EDGEBREAKER_ENCODING',\n//   speed: [5, 5],\n//   quantization: {\n//     POSITION: 10\n//   }\n// };\n\n// Native Draco attribute names to GLTF attribute names.\nconst GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP = {\n  POSITION: 'POSITION',\n  NORMAL: 'NORMAL',\n  COLOR_0: 'COLOR',\n  TEXCOORD_0: 'TEX_COORD'\n};\n\nfunction noop() {}\n\n// Copy encoded data to buffer\nfunction dracoInt8ArrayToArrayBuffer(dracoData) {\n  const byteLength = dracoData.size();\n  const outputBuffer = new ArrayBuffer(byteLength);\n  const outputData = new Int8Array(outputBuffer);\n  for (let i = 0; i < byteLength; ++i) {\n    outputData[i] = dracoData.GetValue(i);\n  }\n  return outputBuffer;\n}\n\n/* Encoder API:\nhttps://github.com/google/draco/blob/master/src/draco/javascript/emscripten/draco_web_encoder.idl\n   Example:\nhttps://github.com/google/draco/blob/master/javascript/npm/draco3d/draco_nodejs_example.js\n */\nexport default class DracoBuilder {\n  // draco - the draco decoder, either import `draco3d` or load dynamically\n  constructor(draco, options = {}) {\n    this.draco = draco;\n    this.dracoEncoder = new this.draco.Encoder();\n    this.dracoMeshBuilder = new this.draco.MeshBuilder();\n    this.log = options.log || noop;\n  }\n\n  destroy() {\n    this.destroyEncodedObject(this.dracoMeshBuilder);\n    this.destroyEncodedObject(this.dracoEncoder);\n    this.dracoMeshBuilder = null;\n    this.dracoEncoder = null;\n    this.draco = null;\n  }\n\n  // TBD - when does this need to be called?\n  destroyEncodedObject(object) {\n    if (object) {\n      this.draco.destroy(object);\n    }\n  }\n\n  // Encode mesh=({})\n  encodeSync(mesh, options) {\n    this._setOptions(options);\n    return options.pointcloud ? this._encodePointCloud(mesh) : this._encodeMesh(mesh);\n  }\n\n  // PRIVATE\n\n  _getAttributesFromMesh(mesh) {\n    // TODO - Change the encodePointCloud interface instead?\n    const attributes = {...mesh, ...mesh.attributes};\n    // Fold indices into the attributes\n    if (mesh.indices) {\n      attributes.indices = mesh.indices;\n    }\n    return attributes;\n  }\n\n  _encodePointCloud(pointcloud) {\n    const attributes = this._getAttributesFromMesh(pointcloud);\n\n    // Build a `DracoPointCloud` from the input data\n    const dracoPointCloud = this._createDracoPointCloud(attributes);\n\n    const dracoData = new this.draco.DracoInt8Array();\n\n    try {\n      const encodedLen = this.dracoEncoder.EncodePointCloudToDracoBuffer(\n        dracoPointCloud,\n        false,\n        dracoData\n      );\n\n      if (!(encodedLen > 0)) {\n        throw new Error('Draco encoding failed.');\n      }\n\n      this.log(`DRACO encoded ${dracoPointCloud.num_points()} points\n        with ${dracoPointCloud.num_attributes()} attributes into ${encodedLen} bytes`);\n\n      return dracoInt8ArrayToArrayBuffer(dracoData);\n    } finally {\n      this.destroyEncodedObject(dracoData);\n      this.destroyEncodedObject(dracoPointCloud);\n    }\n  }\n\n  _encodeMesh(mesh) {\n    const attributes = this._getAttributesFromMesh(mesh);\n    // Build a `DracoMesh` from the input data\n    const dracoMesh = this._createDracoMesh(attributes);\n\n    const dracoData = new this.draco.DracoInt8Array();\n\n    try {\n      const encodedLen = this.dracoEncoder.EncodeMeshToDracoBuffer(dracoMesh, dracoData);\n      if (encodedLen <= 0) {\n        throw new Error('Draco encoding failed.');\n      }\n\n      this.log(`DRACO encoded ${dracoMesh.num_points()} points\n        with ${dracoMesh.num_attributes()} attributes into ${encodedLen} bytes`);\n\n      return dracoInt8ArrayToArrayBuffer(dracoData);\n    } finally {\n      this.destroyEncodedObject(dracoData);\n      this.destroyEncodedObject(dracoMesh);\n    }\n  }\n\n  /**\n   * Set encoding options.\n   * @param {{speed?: any; method?: any; quantization?: any;}} options\n   */\n  _setOptions(options) {\n    if ('speed' in options) {\n      this.dracoEncoder.SetSpeedOptions(...options.speed);\n    }\n    if ('method' in options) {\n      const dracoMethod = this.draco[options.method];\n      // if (dracoMethod === undefined) {}\n      this.dracoEncoder.SetEncodingMethod(dracoMethod);\n    }\n    if ('quantization' in options) {\n      for (const attribute in options.quantization) {\n        const bits = options.quantization[attribute];\n        const dracoPosition = this.draco[attribute];\n        this.dracoEncoder.SetAttributeQuantization(dracoPosition, bits);\n      }\n    }\n  }\n\n  _createDracoMesh(attributes) {\n    const dracoMesh = new this.draco.Mesh();\n\n    try {\n      const positions = this._getPositionAttribute(attributes);\n      if (!positions) {\n        throw new Error('positions');\n      }\n      const vertexCount = positions.length / 3;\n\n      for (let attributeName in attributes) {\n        const attribute = attributes[attributeName];\n        attributeName = GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP[attributeName] || attributeName;\n        this._addAttributeToMesh(dracoMesh, attributeName, attribute, vertexCount);\n      }\n    } catch (error) {\n      this.destroyEncodedObject(dracoMesh);\n      throw error;\n    }\n\n    return dracoMesh;\n  }\n\n  _createDracoPointCloud(attributes) {\n    const dracoPointCloud = new this.draco.PointCloud();\n\n    try {\n      const positions = this._getPositionAttribute(attributes);\n      if (!positions) {\n        throw new Error('positions');\n      }\n      const vertexCount = positions.length / 3;\n\n      for (let attributeName in attributes) {\n        const attribute = attributes[attributeName];\n        attributeName = GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP[attributeName] || attributeName;\n        this._addAttributeToMesh(dracoPointCloud, attributeName, attribute, vertexCount);\n      }\n    } catch (error) {\n      this.destroyEncodedObject(dracoPointCloud);\n      throw error;\n    }\n\n    return dracoPointCloud;\n  }\n\n  _addAttributeToMesh(dracoMesh, attributeName, attribute, vertexCount) {\n    if (!ArrayBuffer.isView(attribute)) {\n      return;\n    }\n\n    const dracoAttributeType = this._getDracoAttributeType(attributeName, attribute);\n    const size = attribute.length / vertexCount;\n\n    if (dracoAttributeType === 'indices') {\n      const numFaces = attribute.length / 3;\n      this.log(`Adding attribute ${attributeName}, size ${numFaces}`);\n      this.dracoMeshBuilder.AddFacesToMesh(dracoMesh, numFaces, attribute);\n      return;\n    }\n\n    this.log(`Adding attribute ${attributeName}, size ${size}`);\n\n    switch (attribute.constructor.name) {\n      case 'Int8Array':\n        this.dracoMeshBuilder.AddInt8Attribute(\n          dracoMesh,\n          dracoAttributeType,\n          vertexCount,\n          size,\n          attribute\n        );\n        break;\n\n      case 'Int16Array':\n        this.dracoMeshBuilder.AddInt16Attribute(\n          dracoMesh,\n          dracoAttributeType,\n          vertexCount,\n          size,\n          attribute\n        );\n        break;\n\n      case 'Int32Array':\n        this.dracoMeshBuilder.AddInt32Attribute(\n          dracoMesh,\n          dracoAttributeType,\n          vertexCount,\n          size,\n          attribute\n        );\n        break;\n\n      case 'Uint8Array':\n      case 'Uint8ClampedArray':\n        this.dracoMeshBuilder.AddUInt8Attribute(\n          dracoMesh,\n          dracoAttributeType,\n          vertexCount,\n          size,\n          attribute\n        );\n        break;\n\n      case 'Uint16Array':\n        this.dracoMeshBuilder.AddUInt16Attribute(\n          dracoMesh,\n          dracoAttributeType,\n          vertexCount,\n          size,\n          attribute\n        );\n        break;\n\n      case 'Uint32Array':\n        this.dracoMeshBuilder.AddUInt32Attribute(\n          dracoMesh,\n          dracoAttributeType,\n          vertexCount,\n          size,\n          attribute\n        );\n        break;\n\n      case 'Float32Array':\n      default:\n        this.dracoMeshBuilder.AddFloatAttribute(\n          dracoMesh,\n          dracoAttributeType,\n          vertexCount,\n          size,\n          attribute\n        );\n    }\n  }\n\n  // DRACO can compress attributes of know type better\n  // TODO - expose an attribute type map?\n  _getDracoAttributeType(attributeName, attribute) {\n    switch (attributeName.toLowerCase()) {\n      case 'indices':\n        return 'indices';\n      case 'position':\n      case 'positions':\n      case 'vertices':\n        return this.draco.POSITION;\n      case 'normal':\n      case 'normals':\n        return this.draco.NORMAL;\n      case 'color':\n      case 'colors':\n        return this.draco.COLOR;\n      case 'texCoord':\n      case 'texCoords':\n        return this.draco.TEX_COORD;\n      default:\n        return this.draco.GENERIC;\n    }\n  }\n\n  _getPositionAttribute(attributes) {\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const dracoType = this._getDracoAttributeType(attributeName, attribute);\n      if (dracoType === this.draco.POSITION) {\n        return attribute;\n      }\n    }\n    return null;\n  }\n}\n"],"file":"draco-builder.js"}