{"version":3,"sources":["../../../../src/lib/category-api/parsed-image-api.js"],"names":["assert","isImage","image","Boolean","getImageTypeOrNull","deleteImage","getImageType","close","format","Error","getImageData","canvas","document","createElement","context","getContext","width","height","drawImage","imageData","getImageSize","ImageBitmap","Image","data"],"mappings":"AACA,OAAOA,MAAP,MAAmB,iBAAnB;AAEA,OAAO,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAC7B,SAAOC,OAAO,CAACC,kBAAkB,CAACF,KAAD,CAAnB,CAAd;AACD;AAED,OAAO,SAASG,WAAT,CAAqBH,KAArB,EAA4B;AACjC,UAAQI,YAAY,CAACJ,KAAD,CAApB;AACE,SAAK,aAAL;AACEA,MAAAA,KAAK,CAACK,KAAN;AACA;;AACF;AAJF;AAOD;AAED,OAAO,SAASD,YAAT,CAAsBJ,KAAtB,EAA6B;AAClC,QAAMM,MAAM,GAAGJ,kBAAkB,CAACF,KAAD,CAAjC;;AACA,MAAI,CAACM,MAAL,EAAa;AACX,UAAM,IAAIC,KAAJ,CAAU,cAAV,CAAN;AACD;;AACD,SAAOD,MAAP;AACD;AAED,OAAO,SAASE,YAAT,CAAsBR,KAAtB,EAA6B;AAClC,UAAQI,YAAY,CAACJ,KAAD,CAApB;AACE,SAAK,MAAL;AACE,aAAOA,KAAP;;AAEF,SAAK,OAAL;AACA,SAAK,aAAL;AAGE,YAAMS,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AAEA,YAAMC,OAAO,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAhB;AACAJ,MAAAA,MAAM,CAACK,KAAP,GAAed,KAAK,CAACc,KAArB;AACAL,MAAAA,MAAM,CAACM,MAAP,GAAgBf,KAAK,CAACe,MAAtB;AACAH,MAAAA,OAAO,CAACI,SAAR,CAAkBhB,KAAlB,EAAyB,CAAzB,EAA4B,CAA5B;AACA,YAAMiB,SAAS,GAAGL,OAAO,CAACJ,YAAR,CAAqB,CAArB,EAAwB,CAAxB,EAA2BR,KAAK,CAACc,KAAjC,EAAwCd,KAAK,CAACe,MAA9C,CAAlB;AACA,aAAOE,SAAP;;AACF;AACE,aAAOnB,MAAM,CAAC,KAAD,CAAb;AAjBJ;AAmBD;AAGD,SAAQU,YAAY,IAAIU,YAAxB;;AAKA,SAAShB,kBAAT,CAA4BF,KAA5B,EAAmC;AACjC,MAAI,OAAOmB,WAAP,KAAuB,WAAvB,IAAsCnB,KAAK,YAAYmB,WAA3D,EAAwE;AACtE,WAAO,aAAP;AACD;;AACD,MAAI,OAAOC,KAAP,KAAiB,WAAjB,IAAgCpB,KAAK,YAAYoB,KAArD,EAA4D;AAC1D,WAAO,OAAP;AACD;;AACD,MAAIpB,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA1B,IAAsCA,KAAK,CAACqB,IAA5C,IAAoDrB,KAAK,CAACc,KAA1D,IAAmEd,KAAK,CAACe,MAA7E,EAAqF;AACnF,WAAO,MAAP;AACD;;AACD,SAAO,IAAP;AACD","sourcesContent":["/* global Image, ImageBitmap */\nimport assert from '../utils/assert';\n\nexport function isImage(image) {\n  return Boolean(getImageTypeOrNull(image));\n}\n\nexport function deleteImage(image) {\n  switch (getImageType(image)) {\n    case 'imagebitmap':\n      image.close();\n      break;\n    default:\n    // Nothing to do for images and image data objects\n  }\n}\n\nexport function getImageType(image) {\n  const format = getImageTypeOrNull(image);\n  if (!format) {\n    throw new Error('Not an image');\n  }\n  return format;\n}\n\nexport function getImageData(image) {\n  switch (getImageType(image)) {\n    case 'data':\n      return image;\n\n    case 'image':\n    case 'imagebitmap':\n      // Extract the image data from the image via a canvas\n      /* global document */\n      const canvas = document.createElement('canvas');\n      // TODO - reuse the canvas?\n      const context = canvas.getContext('2d');\n      canvas.width = image.width;\n      canvas.height = image.height;\n      context.drawImage(image, 0, 0);\n      const imageData = context.getImageData(0, 0, image.width, image.height);\n      return imageData;\n    default:\n      return assert(false);\n  }\n}\n\n// TODO DEPRECATED not needed (use getImageData)\nexport {getImageData as getImageSize};\n\n// PRIVATE\n\n// eslint-disable-next-line complexity\nfunction getImageTypeOrNull(image) {\n  if (typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n    return 'imagebitmap';\n  }\n  if (typeof Image !== 'undefined' && image instanceof Image) {\n    return 'image';\n  }\n  if (image && typeof image === 'object' && image.data && image.width && image.height) {\n    return 'data';\n  }\n  return null;\n}\n"],"file":"parsed-image-api.js"}