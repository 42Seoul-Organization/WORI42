import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import assert from '../utils/assert';
import parseImage from '../parsers/parse-image';
import { getImageSize } from '../category-api/parsed-image-api';
import { generateUrl } from './generate-url';
import { deepLoad, shallowLoad } from './deep-load';
export async function loadImage(getUrl, options = {}) {
  const imageUrls = await getImageUrls(getUrl, options);
  return await deepLoad(imageUrls, parseImage, options);
}
export async function getImageUrls(getUrl, options, urlOptions = {}) {
  const mipLevels = options && options.image && options.image.mipLevels || 0;
  return mipLevels !== 0 ? await getMipmappedImageUrls(getUrl, mipLevels, options, urlOptions) : generateUrl(getUrl, options, urlOptions);
}

async function getMipmappedImageUrls(getUrl, mipLevels, options, urlOptions) {
  const urls = [];

  if (mipLevels === 'auto') {
    const url = generateUrl(getUrl, options, _objectSpread(_objectSpread({}, urlOptions), {}, {
      lod: 0
    }));
    const image = await shallowLoad(url, parseImage, options);
    const {
      width,
      height
    } = getImageSize(image);
    mipLevels = getMipLevels({
      width,
      height
    });
    urls.push(url);
  }

  assert(mipLevels > 0);

  for (let mipLevel = urls.length; mipLevel < mipLevels; ++mipLevel) {
    const url = generateUrl(getUrl, options, _objectSpread(_objectSpread({}, urlOptions), {}, {
      lod: mipLevel
    }));
    urls.push(url);
  }

  return urls;
}

export function getMipLevels({
  width,
  height
}) {
  return 1 + Math.floor(Math.log2(Math.max(width, height)));
}
//# sourceMappingURL=load-image.js.map