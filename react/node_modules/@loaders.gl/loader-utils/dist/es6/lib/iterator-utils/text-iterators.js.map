{"version":3,"sources":["../../../../src/lib/iterator-utils/text-iterators.js"],"names":["makeTextDecoderIterator","arrayBufferIterator","options","textDecoder","TextDecoder","arrayBuffer","decode","stream","makeTextEncoderIterator","textIterator","textEncoder","TextEncoder","text","encode","makeLineIterator","previous","textChunk","eolIndex","indexOf","line","slice","length","makeNumberedLineIterator","lineIterator","counter"],"mappings":";;;AAKA,gBAAuBA,uBAAvB;AAAA;AAAA;;;iDAAO,WAAwCC,mBAAxC,EAA6DC,OAA7D,EAAsE;AAC3E,UAAMC,WAAW,GAAG,IAAIC,WAAJ,CAAgBF,OAAhB,CAApB;AAD2E;AAAA;;AAAA;;AAAA;AAE3E,0CAAgCD,mBAAhC,gOAAqD;AAAA,cAApCI,WAAoC;AACnD,cAAM,OAAOA,WAAP,KAAuB,QAAvB,GACFA,WADE,GAEFF,WAAW,CAACG,MAAZ,CAAmBD,WAAnB,EAAgC;AAACE,UAAAA,MAAM,EAAE;AAAT,SAAhC,CAFJ;AAGD;AAN0E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAO5E,G;;;;AAOD,gBAAuBC,uBAAvB;AAAA;AAAA;;;iDAAO,WAAwCC,YAAxC,EAAsDP,OAAtD,EAA+D;AACpE,UAAMQ,WAAW,GAAG,IAAIC,WAAJ,EAApB;AADoE;AAAA;;AAAA;;AAAA;AAEpE,2CAAyBF,YAAzB,0OAAuC;AAAA,cAAtBG,IAAsB;AACrC,cAAM,OAAOA,IAAP,KAAgB,QAAhB,GAA2BF,WAAW,CAACG,MAAZ,CAAmBD,IAAnB,CAA3B,GAAsDA,IAA5D;AACD;AAJmE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKrE,G;;;;AAQD,gBAAuBE,gBAAvB;AAAA;AAAA;;;0CAAO,WAAiCL,YAAjC,EAA+C;AACpD,QAAIM,QAAQ,GAAG,EAAf;AADoD;AAAA;;AAAA;;AAAA;AAEpD,2CAA8BN,YAA9B,0OAA4C;AAAA,cAA3BO,SAA2B;AAC1CD,QAAAA,QAAQ,IAAIC,SAAZ;AACA,YAAIC,QAAJ;;AACA,eAAO,CAACA,QAAQ,GAAGF,QAAQ,CAACG,OAAT,CAAiB,IAAjB,CAAZ,KAAuC,CAA9C,EAAiD;AAE/C,gBAAMC,IAAI,GAAGJ,QAAQ,CAACK,KAAT,CAAe,CAAf,EAAkBH,QAAQ,GAAG,CAA7B,CAAb;AACAF,UAAAA,QAAQ,GAAGA,QAAQ,CAACK,KAAT,CAAeH,QAAQ,GAAG,CAA1B,CAAX;AACA,gBAAME,IAAN;AACD;AACF;AAXmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAapD,QAAIJ,QAAQ,CAACM,MAAT,GAAkB,CAAtB,EAAyB;AACvB,YAAMN,QAAN;AACD;AACF,G;;;;AAQD,gBAAuBO,wBAAvB;AAAA;AAAA;;;kDAAO,WAAyCC,YAAzC,EAAuD;AAC5D,QAAIC,OAAO,GAAG,CAAd;AAD4D;AAAA;;AAAA;;AAAA;AAE5D,2CAAyBD,YAAzB,0OAAuC;AAAA,cAAtBJ,IAAsB;AACrC,cAAM;AAACK,UAAAA,OAAD;AAAUL,UAAAA;AAAV,SAAN;AACAK,QAAAA,OAAO;AACR;AAL2D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAM7D,G","sourcesContent":["// TextDecoder iterators\n// TextDecoder will keep any partial undecoded bytes between calls to `decode`\n\n/* global TextDecoder, TextEncoder */\n\nexport async function* makeTextDecoderIterator(arrayBufferIterator, options) {\n  const textDecoder = new TextDecoder(options);\n  for await (const arrayBuffer of arrayBufferIterator) {\n    yield typeof arrayBuffer === 'string'\n      ? arrayBuffer\n      : textDecoder.decode(arrayBuffer, {stream: true});\n  }\n}\n\n// TextEncoder iterator\n// TODO - this is not useful unless min chunk size is given\n// TextEncoder will keep any partial undecoded bytes between calls to `encode`\n// If iterator does not yield strings, assume arrayBuffer and return unencoded\n\nexport async function* makeTextEncoderIterator(textIterator, options) {\n  const textEncoder = new TextEncoder();\n  for await (const text of textIterator) {\n    yield typeof text === 'string' ? textEncoder.encode(text) : text;\n  }\n}\n\n/**\n * @param textIterator async iterable yielding strings\n * @returns an async iterable over lines\n * See http://2ality.com/2018/04/async-iter-nodejs.html\n */\n\nexport async function* makeLineIterator(textIterator) {\n  let previous = '';\n  for await (const textChunk of textIterator) {\n    previous += textChunk;\n    let eolIndex;\n    while ((eolIndex = previous.indexOf('\\n')) >= 0) {\n      // line includes the EOL\n      const line = previous.slice(0, eolIndex + 1);\n      previous = previous.slice(eolIndex + 1);\n      yield line;\n    }\n  }\n\n  if (previous.length > 0) {\n    yield previous;\n  }\n}\n\n/**\n * @param lineIterator async iterable yielding lines\n * @returns async iterable yielding numbered lines\n *\n * See http://2ality.com/2018/04/async-iter-nodejs.html\n */\nexport async function* makeNumberedLineIterator(lineIterator) {\n  let counter = 1;\n  for await (const line of lineIterator) {\n    yield {counter, line};\n    counter++;\n  }\n}\n"],"file":"text-iterators.js"}