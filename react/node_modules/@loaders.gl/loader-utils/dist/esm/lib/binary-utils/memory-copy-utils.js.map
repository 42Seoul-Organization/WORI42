{"version":3,"sources":["../../../../src/lib/binary-utils/memory-copy-utils.js"],"names":["padTo4Bytes","byteLength","getZeroOffsetArrayBuffer","arrayBuffer","byteOffset","subArray","Uint8Array","subarray","arrayCopy","buffer","copyArrayBuffer","targetBuffer","sourceBuffer","targetArray","sourceArray","set","copyToArray","source","target","targetOffset","ArrayBuffer","srcByteOffset","srcByteLength"],"mappings":"AAAA,OAAO,SAASA,WAAT,CAAqBC,UAArB,EAAiC;AACtC,SAAQA,UAAU,GAAG,CAAd,GAAmB,CAAC,CAA3B;AACD;AAGD,OAAO,SAASC,wBAAT,CAAkCC,WAAlC,EAA+CC,UAA/C,EAA2DH,UAA3D,EAAuE;AAC5E,MAAMI,QAAQ,GAAGJ,UAAU,GACvB,IAAIK,UAAJ,CAAeH,WAAf,EAA4BI,QAA5B,CAAqCH,UAArC,EAAiDA,UAAU,GAAGH,UAA9D,CADuB,GAEvB,IAAIK,UAAJ,CAAeH,WAAf,EAA4BI,QAA5B,CAAqCH,UAArC,CAFJ;AAGA,MAAMI,SAAS,GAAG,IAAIF,UAAJ,CAAeD,QAAf,CAAlB;AACA,SAAOG,SAAS,CAACC,MAAjB;AACD;AAQD,OAAO,SAASC,eAAT,CACLC,YADK,EAELC,YAFK,EAGLR,UAHK,EAKL;AAAA,MADAH,UACA,uEADaW,YAAY,CAACX,UAC1B;AACA,MAAMY,WAAW,GAAG,IAAIP,UAAJ,CAAeK,YAAf,EAA6BP,UAA7B,EAAyCH,UAAzC,CAApB;AACA,MAAMa,WAAW,GAAG,IAAIR,UAAJ,CAAeM,YAAf,CAApB;AACAC,EAAAA,WAAW,CAACE,GAAZ,CAAgBD,WAAhB;AACA,SAAOH,YAAP;AACD;AAWD,OAAO,SAASK,WAAT,CAAqBC,MAArB,EAA6BC,MAA7B,EAAqCC,YAArC,EAAmD;AACxD,MAAIL,WAAJ;;AAEA,MAAIG,MAAM,YAAYG,WAAtB,EAAmC;AACjCN,IAAAA,WAAW,GAAG,IAAIR,UAAJ,CAAeW,MAAf,CAAd;AACD,GAFD,MAEO;AAOL,QAAMI,aAAa,GAAGJ,MAAM,CAACb,UAA7B;AACA,QAAMkB,aAAa,GAAGL,MAAM,CAAChB,UAA7B;AACAa,IAAAA,WAAW,GAAG,IAAIR,UAAJ,CAAeW,MAAM,CAACR,MAAtB,EAA8BY,aAA9B,EAA6CC,aAA7C,CAAd;AACD;;AAGDJ,EAAAA,MAAM,CAACH,GAAP,CAAWD,WAAX,EAAwBK,YAAxB;AAEA,SAAOA,YAAY,GAAGnB,WAAW,CAACc,WAAW,CAACb,UAAb,CAAjC;AACD","sourcesContent":["export function padTo4Bytes(byteLength) {\n  return (byteLength + 3) & ~3;\n}\n\n// Copy a view of an ArrayBuffer into new ArrayBuffer with byteOffset = 0\nexport function getZeroOffsetArrayBuffer(arrayBuffer, byteOffset, byteLength) {\n  const subArray = byteLength\n    ? new Uint8Array(arrayBuffer).subarray(byteOffset, byteOffset + byteLength)\n    : new Uint8Array(arrayBuffer).subarray(byteOffset);\n  const arrayCopy = new Uint8Array(subArray);\n  return arrayCopy.buffer;\n}\n\n/* Creates a new Uint8Array based on two different ArrayBuffers\n * @private\n * @param {ArrayBuffers} buffer1 The first buffer.\n * @param {ArrayBuffers} buffer2 The second buffer.\n * @return {ArrayBuffers} The new ArrayBuffer created out of the two.\n */\nexport function copyArrayBuffer(\n  targetBuffer,\n  sourceBuffer,\n  byteOffset,\n  byteLength = sourceBuffer.byteLength\n) {\n  const targetArray = new Uint8Array(targetBuffer, byteOffset, byteLength);\n  const sourceArray = new Uint8Array(sourceBuffer);\n  targetArray.set(sourceArray);\n  return targetBuffer;\n}\n\n/**\n * Copy from source to target at the targetOffset\n *\n * @param {ArrayBuffer|any} source - The data to copy\n * @param {any} target - The destination to copy data into\n * @param {Number} targetOffset - The start offset into target to place the copied data\n *\n * @return {Number} Returns the new offset taking into account proper padding\n */\nexport function copyToArray(source, target, targetOffset) {\n  let sourceArray;\n\n  if (source instanceof ArrayBuffer) {\n    sourceArray = new Uint8Array(source);\n  } else {\n    // Pack buffer onto the big target array\n    //\n    // 'source.data.buffer' could be a view onto a larger buffer.\n    // We MUST use this constructor to ensure the byteOffset and byteLength is\n    // set to correct values from 'source.data' and not the underlying\n    // buffer for target.set() to work properly.\n    const srcByteOffset = source.byteOffset;\n    const srcByteLength = source.byteLength;\n    sourceArray = new Uint8Array(source.buffer, srcByteOffset, srcByteLength);\n  }\n\n  // Pack buffer onto the big target array\n  target.set(sourceArray, targetOffset);\n\n  return targetOffset + padTo4Bytes(sourceArray.byteLength);\n}\n"],"file":"memory-copy-utils.js"}