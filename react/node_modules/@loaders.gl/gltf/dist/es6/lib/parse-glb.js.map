{"version":3,"sources":["../../../src/lib/parse-glb.js"],"names":["padTo4Bytes","assert","MAGIC_glTF","GLB_FILE_HEADER_SIZE","GLB_CHUNK_HEADER_SIZE","GLB_CHUNK_TYPE_JSON","GLB_CHUNK_TYPE_BIN","GLB_CHUNK_TYPE_JSON_XVIZ_DEPRECATED","GLB_CHUNK_TYPE_BIX_XVIZ_DEPRECATED","LE","getMagicString","dataView","byteOffset","String","fromCharCode","getUint8","isGLB","arrayBuffer","options","DataView","magic","magic1","getUint32","parseGLBSync","glb","type","version","byteLength","header","json","binChunks","parseGLBChunksSync","chunkLength","chunkFormat","parseJSONChunk","parseBINChunk","strict","jsonChunk","Uint8Array","buffer","textDecoder","TextDecoder","jsonText","decode","JSON","parse","hasBinChunk","push"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase, max-statements */\n/* global TextDecoder */\n// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#glb-file-format-specification\n\nimport {padTo4Bytes, assert} from '@loaders.gl/loader-utils';\n\nconst MAGIC_glTF = 0x676c5446; // glTF in Big-Endian ASCII\n\nconst GLB_FILE_HEADER_SIZE = 12;\nconst GLB_CHUNK_HEADER_SIZE = 8;\n\nconst GLB_CHUNK_TYPE_JSON = 0x4e4f534a;\nconst GLB_CHUNK_TYPE_BIN = 0x004e4942;\nconst GLB_CHUNK_TYPE_JSON_XVIZ_DEPRECATED = 0; // DEPRECATED - Backward compatibility for old xviz files\nconst GLB_CHUNK_TYPE_BIX_XVIZ_DEPRECATED = 1; // DEPRECATED - Backward compatibility for old xviz files\n\nconst LE = true; // Binary GLTF is little endian.\n\nfunction getMagicString(dataView, byteOffset = 0) {\n  return `\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 0))}\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 1))}\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 2))}\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 3))}`;\n}\n\n// Check if a data view is a GLB\nexport function isGLB(arrayBuffer, byteOffset = 0, options = {}) {\n  const dataView = new DataView(arrayBuffer);\n  // Check that GLB Header starts with the magic number\n  const {magic = MAGIC_glTF} = options;\n  const magic1 = dataView.getUint32(byteOffset, false);\n  return magic1 === magic || magic1 === MAGIC_glTF;\n}\n\nexport default function parseGLBSync(glb, arrayBuffer, byteOffset = 0, options = {}) {\n  // Check that GLB Header starts with the magic number\n  const dataView = new DataView(arrayBuffer);\n\n  // Compare format with GLBLoader documentation\n  glb.type = getMagicString(dataView, byteOffset + 0);\n  glb.version = dataView.getUint32(byteOffset + 4, LE); // Version 2 of binary glTF container format\n  const byteLength = dataView.getUint32(byteOffset + 8, LE); // Total byte length of generated file\n\n  // Put less important stuff in a header, to avoid clutter\n  glb.header = {\n    byteOffset, // Byte offset into the initial arrayBuffer\n    byteLength\n  };\n\n  assert(glb.version === 2, `Invalid GLB version ${glb.version}. Only supports v2.`);\n  assert(glb.header.byteLength > GLB_FILE_HEADER_SIZE + GLB_CHUNK_HEADER_SIZE);\n\n  // Per spec we must iterate over chunks, ignoring all except JSON and BIN\n  glb.json = {};\n  glb.binChunks = [];\n\n  parseGLBChunksSync(glb, dataView, byteOffset + GLB_FILE_HEADER_SIZE, options);\n\n  return byteOffset + glb.header.byteLength;\n}\n\nfunction parseGLBChunksSync(glb, dataView, byteOffset, options) {\n  // Iterate as long as there is space left for another chunk header\n  while (byteOffset + 8 <= glb.header.byteLength) {\n    const chunkLength = dataView.getUint32(byteOffset + 0, LE); // Byte length of chunk\n    const chunkFormat = dataView.getUint32(byteOffset + 4, LE); // Chunk format as uint32\n    byteOffset += GLB_CHUNK_HEADER_SIZE;\n\n    // Per spec we must iterate over chunks, ignoring all except JSON and BIN\n    switch (chunkFormat) {\n      case GLB_CHUNK_TYPE_JSON:\n        parseJSONChunk(glb, dataView, byteOffset, chunkLength, options);\n        break;\n      case GLB_CHUNK_TYPE_BIN:\n        parseBINChunk(glb, dataView, byteOffset, chunkLength, options);\n        break;\n\n      // Backward compatibility for very old xviz files\n      case GLB_CHUNK_TYPE_JSON_XVIZ_DEPRECATED:\n        if (!options.glb.strict) {\n          parseJSONChunk(glb, dataView, byteOffset, chunkLength, options);\n        }\n        break;\n      case GLB_CHUNK_TYPE_BIX_XVIZ_DEPRECATED:\n        if (!options.glb.strict) {\n          parseBINChunk(glb, dataView, byteOffset, chunkLength, options);\n        }\n        break;\n\n      default:\n        // Ignore, per spec\n        // console.warn(`Unknown GLB chunk type`); // eslint-disable-line\n        break;\n    }\n\n    byteOffset += padTo4Bytes(chunkLength);\n  }\n\n  return byteOffset;\n}\n\n// Parse a GLB JSON chunk\nfunction parseJSONChunk(glb, dataView, byteOffset, chunkLength, options) {\n  // 1. Create a \"view\" of the binary encoded JSON data inside the GLB\n  const jsonChunk = new Uint8Array(dataView.buffer, byteOffset, chunkLength);\n\n  // 2. Decode the JSON binary array into clear text\n  const textDecoder = new TextDecoder('utf8');\n  const jsonText = textDecoder.decode(jsonChunk);\n\n  // 3. Parse the JSON text into a JavaScript data structure\n  glb.json = JSON.parse(jsonText);\n}\n\n// Parse a GLB BIN chunk\nfunction parseBINChunk(glb, dataView, byteOffset, chunkLength, options) {\n  // Note: BIN chunk can be optional\n  glb.header.hasBinChunk = true;\n  glb.binChunks.push({\n    byteOffset,\n    byteLength: chunkLength,\n    arrayBuffer: dataView.buffer\n    // TODO - copy, or create typed array view?\n  });\n}\n"],"file":"parse-glb.js"}