{"version":3,"sources":["../../../../src/lib/api/parse-in-batches.js"],"names":["isLoaderObject","mergeOptions","getAsyncIteratorFromData","getLoaderContext","selectLoader","parseInBatches","data","loaders","options","url","Array","isArray","loader","context","parseWithLoaderInBatches","Error","inputIterator","outputIterator","metadata","metadataBatch","batchType","_loader","_context","bytesUsed","makeMetadataBatchIterator","iterator"],"mappings":";;;;AAAA,SAAQA,cAAR,QAA6B,kCAA7B;AACA,SAAQC,YAAR,QAA2B,+BAA3B;AACA,SAAQC,wBAAR,QAAuC,0BAAvC;AACA,SAAQC,gBAAR,QAA+B,oCAA/B;AACA,SAAQC,YAAR,QAA2B,iBAA3B;AAGA,OAAO,eAAeC,cAAf,CAA8BC,IAA9B,EAAoCC,OAApC,EAA6CC,OAA7C,EAAsDC,GAAtD,EAA2D;AAGhE,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcJ,OAAd,CAAD,IAA2B,CAACP,cAAc,CAACO,OAAD,CAA9C,EAAyD;AACvDE,IAAAA,GAAG,GAAGD,OAAN;AACAA,IAAAA,OAAO,GAAGD,OAAV;AACAA,IAAAA,OAAO,GAAG,IAAV;AACD;;AAID,QAAMK,MAAM,GAAGR,YAAY,CAAC,IAAD,EAAOG,OAAP,EAAgBC,OAAhB,EAAyB;AAACC,IAAAA;AAAD,GAAzB,CAA3B;AAGAD,EAAAA,OAAO,GAAGP,YAAY,CAACW,MAAD,EAASJ,OAAT,EAAkBC,GAAlB,CAAtB;AAEA,QAAMI,OAAO,GAAGV,gBAAgB,CAAC;AAACM,IAAAA,GAAD;AAAMF,IAAAA;AAAN,GAAD,EAAiBC,OAAjB,CAAhC;AAEA,SAAO,MAAMM,wBAAwB,CAACF,MAAD,EAASN,IAAT,EAAeE,OAAf,EAAwBK,OAAxB,CAArC;AACD;;AAED,eAAeC,wBAAf,CAAwCF,MAAxC,EAAgDN,IAAhD,EAAsDE,OAAtD,EAA+DK,OAA/D,EAAwE;AACtE,MAAI,CAACD,MAAM,CAACP,cAAZ,EAA4B;AAE1B,UAAM,IAAIU,KAAJ,CAAU,wCAAV,CAAN;AACD;;AAGD,QAAMC,aAAa,GAAG,MAAMd,wBAAwB,CAACI,IAAD,CAApD;AAKA,QAAMW,cAAc,GAAG,MAAML,MAAM,CAACP,cAAP,CAAsBW,aAAtB,EAAqCR,OAArC,EAA8CK,OAA9C,EAAuDD,MAAvD,CAA7B;;AAGA,MAAI,CAACJ,OAAO,CAACU,QAAb,EAAuB;AACrB,WAAOD,cAAP;AACD;;AAED,QAAME,aAAa,GAAG;AACpBC,IAAAA,SAAS,EAAE,UADS;AAEpBF,IAAAA,QAAQ,EAAE;AACRG,MAAAA,OAAO,EAAET,MADD;AAERU,MAAAA,QAAQ,EAAET;AAFF,KAFU;AAOpBP,IAAAA,IAAI,EAAE,EAPc;AAQpBiB,IAAAA,SAAS,EAAE;AARS,GAAtB;;AAnBsE,WA8BtDC,yBA9BsD;AAAA;AAAA;;AAAA;AAAA,qDA8BtE,WAA0CC,QAA1C,EAAoD;AAClD,YAAMN,aAAN;AACA,oDAAOM,QAAP;AACD,KAjCqE;AAAA;AAAA;;AAmCtE,SAAOD,yBAAyB,CAACP,cAAD,CAAhC;AACD","sourcesContent":["import {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {mergeOptions} from '../loader-utils/merge-options';\nimport {getAsyncIteratorFromData} from '../loader-utils/get-data';\nimport {getLoaderContext} from '../loader-utils/get-loader-context';\nimport {selectLoader} from './select-loader';\n// import {makeTextDecoderIterator} from '../../iterator-utils/text-iterators';\n\nexport async function parseInBatches(data, loaders, options, url) {\n  // Signature: parseInBatches(data, options, url)\n  // Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    url = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  // Chooses a loader and normalizes it\n  // TODO - only uses URL, need a selectLoader variant that peeks at first stream chunk...\n  const loader = selectLoader(null, loaders, options, {url});\n\n  // Normalize options\n  options = mergeOptions(loader, options, url);\n\n  const context = getLoaderContext({url, loaders}, options);\n\n  return await parseWithLoaderInBatches(loader, data, options, context);\n}\n\nasync function parseWithLoaderInBatches(loader, data, options, context) {\n  if (!loader.parseInBatches) {\n    // TODO - call parse and emit a single batch (plus metadata batch)\n    throw new Error('loader does not support parseInBatches');\n  }\n\n  // Create async iterator adapter for data, and concatenate result\n  const inputIterator = await getAsyncIteratorFromData(data);\n  // Converts ArrayBuffer chunks to text chunks (leaves text chunks alone)\n  // if (loader.text) {\n  //   inputIterator = makeTextDecoderIterator(inputIterator);\n  // }\n  const outputIterator = await loader.parseInBatches(inputIterator, options, context, loader);\n\n  // Generate metadata batch if requested\n  if (!options.metadata) {\n    return outputIterator;\n  }\n\n  const metadataBatch = {\n    batchType: 'metadata',\n    metadata: {\n      _loader: loader,\n      _context: context\n    },\n    // Populate with some default fields to avoid crashing\n    data: [],\n    bytesUsed: 0\n  };\n\n  async function* makeMetadataBatchIterator(iterator) {\n    yield metadataBatch;\n    yield* iterator;\n  }\n\n  return makeMetadataBatchIterator(outputIterator);\n}\n"],"file":"parse-in-batches.js"}