{"version":3,"sources":["../../../../src/lib/fetch/fetch-file.browser.js"],"names":["assert","FileReadableResponse","constructor","fileOrBlob","options","_fileOrBlob","bodyUsed","headers","Headers","size","type","ok","status","url","name","arrayBuffer","reader","promise","_getFileReader","readAsArrayBuffer","text","readAsText","json","JSON","parse","FileReader","Promise","resolve","reject","onerror","_","Error","onabort","onload","result","error","fetchFileReadable"],"mappings":"AACA,SAAQA,MAAR,QAAqB,0BAArB;;AAGA,MAAMC,oBAAN,CAA2B;AACzBC,EAAAA,WAAW,CAACC,UAAD,EAAaC,OAAb,EAAsB;AAC/B,SAAKC,WAAL,GAAmBF,UAAnB;AACA,SAAKG,QAAL,GAAgB,KAAhB;AACD;;AAED,MAAIC,OAAJ,GAAc;AACZ,WAAO,IAAIC,OAAJ,CAAY;AACjB,wBAAkB,KAAKH,WAAL,CAAiBI,IADlB;AAEjB,sBAAgB,KAAKJ,WAAL,CAAiBK;AAFhB,KAAZ,CAAP;AAID;;AAED,MAAIC,EAAJ,GAAS;AACP,WAAO,IAAP;AACD;;AAED,MAAIC,MAAJ,GAAa;AACX,WAAO,GAAP;AACD;;AAED,MAAIC,GAAJ,GAAU;AAGR,WAAO,KAAKR,WAAL,CAAiBS,IAAjB,IAAyB,EAAhC;AACD;;AAED,QAAMC,WAAN,GAAoB;AAClB,UAAM;AAACC,MAAAA,MAAD;AAASC,MAAAA;AAAT,QAAoB,KAAKC,cAAL,EAA1B;;AACAF,IAAAA,MAAM,CAACG,iBAAP,CAAyB,KAAKd,WAA9B;AACA,WAAOY,OAAP;AACD;;AAED,QAAMG,IAAN,GAAa;AACX,UAAM;AAACJ,MAAAA,MAAD;AAASC,MAAAA;AAAT,QAAoB,KAAKC,cAAL,EAA1B;;AACAF,IAAAA,MAAM,CAACK,UAAP,CAAkB,KAAKhB,WAAvB;AACA,WAAOY,OAAP;AACD;;AAED,QAAMK,IAAN,GAAa;AACX,UAAMF,IAAI,GAAG,MAAM,KAAKA,IAAL,EAAnB;AACA,WAAOG,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAP;AACD;;AAYDF,EAAAA,cAAc,GAAG;AACflB,IAAAA,MAAM,CAAC,CAAC,KAAKM,QAAP,CAAN;AACA,SAAKA,QAAL,GAAgB,IAAhB;AAEA,UAAMU,MAAM,GAAG,IAAIS,UAAJ,EAAf;AACA,UAAMR,OAAO,GAAG,IAAIS,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/C,UAAI;AACFZ,QAAAA,MAAM,CAACa,OAAP,GAAiBC,CAAC,IAAIF,MAAM,CAAC,IAAIG,KAAJ,CAAU,YAAV,CAAD,CAA5B;;AACAf,QAAAA,MAAM,CAACgB,OAAP,GAAiB,MAAMJ,MAAM,CAAC,IAAIG,KAAJ,CAAU,eAAV,CAAD,CAA7B;;AACAf,QAAAA,MAAM,CAACiB,MAAP,GAAgB,MAAMN,OAAO,CAACX,MAAM,CAACkB,MAAR,CAA7B;AACD,OAJD,CAIE,OAAOC,KAAP,EAAc;AACdP,QAAAA,MAAM,CAACO,KAAD,CAAN;AACD;AACF,KARe,CAAhB;AASA,WAAO;AAACnB,MAAAA,MAAD;AAASC,MAAAA;AAAT,KAAP;AACD;;AArEwB;;AA0E3B,eAAe,SAASmB,iBAAT,CAA2BjC,UAA3B,EAAuCC,OAAvC,EAAgD;AAC7D,SAAOsB,OAAO,CAACC,OAAR,CAAgB,IAAI1B,oBAAJ,CAAyBE,UAAzB,EAAqCC,OAArC,CAAhB,CAAP;AACD","sourcesContent":["/* global FileReader, Headers */\nimport {assert} from '@loaders.gl/loader-utils';\n\n// File reader fetch \"polyfill\" for the browser\nclass FileReadableResponse {\n  constructor(fileOrBlob, options) {\n    this._fileOrBlob = fileOrBlob;\n    this.bodyUsed = false;\n  }\n\n  get headers() {\n    return new Headers({\n      'Content-Length': this._fileOrBlob.size,\n      'Content-Type': this._fileOrBlob.type\n    });\n  }\n\n  get ok() {\n    return true; // Blob & File objects are already in memory\n  }\n\n  get status() {\n    return 200; // Blob & File objects are already in memory\n  }\n\n  get url() {\n    // Note: This is just the file name without path information\n    // Note: File has `name` field but the Blob baseclass does not\n    return this._fileOrBlob.name || '';\n  }\n\n  async arrayBuffer() {\n    const {reader, promise} = this._getFileReader();\n    reader.readAsArrayBuffer(this._fileOrBlob);\n    return promise;\n  }\n\n  async text() {\n    const {reader, promise} = this._getFileReader();\n    reader.readAsText(this._fileOrBlob);\n    return promise;\n  }\n\n  async json() {\n    const text = await this.text();\n    return JSON.parse(text);\n  }\n\n  // TODO - body, how to support stream?\n  // Can this be portable?\n  // eslint-disable-next-line\n  // https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Using_readable_streams#Creating_your_own_custom_readable_stream\n  // get body() {\n  //   assert(false);\n  // }\n\n  // PRIVATE\n\n  _getFileReader() {\n    assert(!this.bodyUsed);\n    this.bodyUsed = true;\n\n    const reader = new FileReader();\n    const promise = new Promise((resolve, reject) => {\n      try {\n        reader.onerror = _ => reject(new Error('Read error')); // TODO extract error\n        reader.onabort = () => reject(new Error('Read aborted.'));\n        reader.onload = () => resolve(reader.result);\n      } catch (error) {\n        reject(error);\n      }\n    });\n    return {reader, promise};\n  }\n}\n\n// @param {File|Blob} file  HTML File or Blob object to read as string\n// @returns {Promise.string}  Resolves to a string containing file contents\nexport default function fetchFileReadable(fileOrBlob, options) {\n  return Promise.resolve(new FileReadableResponse(fileOrBlob, options));\n}\n"],"file":"fetch-file.browser.js"}