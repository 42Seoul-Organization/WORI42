{"version":3,"sources":["../../../../src/lib/loader-utils/get-data.js"],"names":["isResponse","isReadableStream","isAsyncIterable","isIterable","isIterator","isBlob","isBuffer","makeIterator","concatenateChunksAsync","fetchFileReadable","checkFetchResponseStatus","ERR_DATA","getUrlFromData","data","url","name","replace","getArrayBufferOrStringFromDataSync","loader","text","ArrayBuffer","arrayBuffer","binary","textDecoder","TextDecoder","decode","isView","buffer","byteLength","length","byteOffset","slice","Error","getArrayBufferOrStringFromData","isArrayBuffer","response","getAsyncIteratorFromData","body","Symbol","asyncIterator","getIteratorFromData","oneChunk","iterator"],"mappings":"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","sourcesContent":["/* global TextDecoder */\nimport {\n  isResponse,\n  isReadableStream,\n  isAsyncIterable,\n  isIterable,\n  isIterator,\n  isBlob,\n  isBuffer\n} from '../../javascript-utils/is-type';\nimport {makeIterator} from '../../iterator-utils/make-iterator/make-iterator';\nimport {concatenateChunksAsync} from '../../iterator-utils/async-iteration';\nimport fetchFileReadable from '../fetch/fetch-file.browser';\nimport {checkFetchResponseStatus} from './check-errors';\n\nconst ERR_DATA = 'Cannot convert supplied data type';\n\n// Extract a URL from `parse` arguments if possible\n// If a fetch Response object or File/Blob were passed in get URL from those objects\nexport function getUrlFromData(data, url) {\n  if (isResponse(data)) {\n    url = url || data.url;\n  } else if (isBlob(url)) {\n    // File or Blob\n    url = url.name;\n  }\n  // Strip any query string\n  return typeof url === 'string' ? url.replace(/\\?.*/, '') : url;\n}\n\n// eslint-disable-next-line complexity\nexport function getArrayBufferOrStringFromDataSync(data, loader) {\n  if (loader.text && typeof data === 'string') {\n    return data;\n  }\n\n  if (data instanceof ArrayBuffer) {\n    const arrayBuffer = data;\n    if (loader.text && !loader.binary) {\n      const textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(arrayBuffer);\n    }\n    return arrayBuffer;\n  }\n\n  // We may need to handle offsets\n  if (ArrayBuffer.isView(data) || isBuffer(data)) {\n    // TextDecoder is invoked on typed arrays and will handle offsets\n    if (loader.text && !loader.binary) {\n      const textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(data);\n    }\n\n    let arrayBuffer = data.buffer;\n\n    // Since we are returning the underlying arrayBuffer, we must create a new copy\n    // if this typed array / Buffer is a partial view into the ArryayBuffer\n    // TODO - this is a potentially unnecessary copy\n    const byteLength = data.byteLength || data.length;\n    if (data.byteOffset !== 0 || byteLength !== arrayBuffer.byteLength) {\n      // console.warn(`loaders.gl copying arraybuffer of length ${byteLength}`);\n      arrayBuffer = arrayBuffer.slice(data.byteOffset, data.byteOffset + byteLength);\n    }\n    return arrayBuffer;\n  }\n\n  throw new Error(ERR_DATA);\n}\n\n// Convert async iterator to a promise\nexport async function getArrayBufferOrStringFromData(data, loader) {\n  // Resolve any promise\n  data = await data;\n\n  const isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);\n  if (typeof data === 'string' || isArrayBuffer) {\n    return getArrayBufferOrStringFromDataSync(data, loader);\n  }\n\n  // Blobs and files are FileReader compatible\n  if (isBlob(data)) {\n    data = await fetchFileReadable(data);\n  }\n\n  if (isResponse(data)) {\n    const response = data;\n    await checkFetchResponseStatus(response);\n    return loader.binary ? await response.arrayBuffer() : await response.text();\n  }\n\n  if (isReadableStream(data)) {\n    data = makeIterator(data);\n  }\n\n  if (isIterable(data) || isAsyncIterable(data)) {\n    // Assume arrayBuffer iterator - attempt to concatenate\n    return concatenateChunksAsync(data);\n  }\n\n  throw new Error(ERR_DATA);\n}\n\nexport async function getAsyncIteratorFromData(data) {\n  if (isIterator(data)) {\n    return data;\n  }\n\n  if (isResponse(data)) {\n    // Note Since this function is not async, we currently can't load error message, just status\n    await checkFetchResponseStatus(data);\n    // TODO - bug in polyfill, body can be a Promise under Node.js\n    return makeIterator(data.body);\n  }\n\n  if (isBlob(data) || isReadableStream(data)) {\n    return makeIterator(data);\n  }\n\n  if (isAsyncIterable(data)) {\n    return data[Symbol.asyncIterator]();\n  }\n\n  return getIteratorFromData(data);\n}\n\nexport function getIteratorFromData(data) {\n  // generate an iterator that emits a single chunk\n  if (ArrayBuffer.isView(data)) {\n    return (function* oneChunk() {\n      yield data.buffer;\n    })();\n  }\n\n  if (data instanceof ArrayBuffer) {\n    return (function* oneChunk() {\n      yield data;\n    })();\n  }\n\n  if (isIterator(data)) {\n    return data;\n  }\n\n  if (isIterable(data)) {\n    return data[Symbol.iterator]();\n  }\n\n  throw new Error(ERR_DATA);\n}\n"],"file":"get-data.js"}