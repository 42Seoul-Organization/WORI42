{"version":3,"sources":["../../../../src/lib/loader-utils/get-loader-context.js"],"names":["fetchFile","getLoaderContext","context","options","previousContext","fetch","Array","isArray","loaders","getLoaders","candidateLoaders","contextLoaders","length"],"mappings":";;;;;;AAGA,SAAQA,SAAR,QAAwB,qBAAxB;AAEA,OAAO,SAASC,gBAAT,CAA0BC,OAA1B,EAAmCC,OAAnC,EAA4CC,eAAe,GAAG,IAA9D,EAAoE;AAGzE,MAAIA,eAAJ,EAAqB;AACnB,WAAOA,eAAP;AACD;;AACDF,EAAAA,OAAO;AAELG,IAAAA,KAAK,EAAEH,OAAO,CAACG,KAAR,IAAiBL;AAFnB,KAGFE,OAHE,CAAP;;AAOA,MAAI,CAACI,KAAK,CAACC,OAAN,CAAcL,OAAO,CAACM,OAAtB,CAAL,EAAqC;AACnCN,IAAAA,OAAO,CAACM,OAAR,GAAkB,IAAlB;AACD;;AAED,SAAON,OAAP;AACD;AAED,OAAO,SAASO,UAAT,CAAoBD,OAApB,EAA6BN,OAA7B,EAAsC;AAE3C,MAAI,CAACA,OAAD,IAAY,CAACI,KAAK,CAACC,OAAN,CAAcC,OAAd,CAAjB,EAAyC;AACvC,WAAOA,OAAP;AACD;;AAGD,MAAIE,gBAAJ;;AACA,MAAIF,OAAJ,EAAa;AACXE,IAAAA,gBAAgB,GAAGJ,KAAK,CAACC,OAAN,CAAcC,OAAd,IAAyBA,OAAzB,GAAmC,CAACA,OAAD,CAAtD;AACD;;AACD,MAAIN,OAAO,IAAIA,OAAO,CAACM,OAAvB,EAAgC;AAC9B,UAAMG,cAAc,GAAGL,KAAK,CAACC,OAAN,CAAcL,OAAO,CAACM,OAAtB,IAAiCN,OAAO,CAACM,OAAzC,GAAmD,CAACN,OAAO,CAACM,OAAT,CAA1E;AACAE,IAAAA,gBAAgB,GAAGA,gBAAgB,GAAG,CAAC,GAAGA,gBAAJ,EAAsB,GAAGC,cAAzB,CAAH,GAA8CA,cAAjF;AACD;;AAED,SAAOD,gBAAgB,IAAIA,gBAAgB,CAACE,MAArC,GAA8CF,gBAA9C,GAAiE,IAAxE;AACD","sourcesContent":["// \"sub\" loaders invoked by other loaders get a \"context\" injected on `this`\n// The context will inject core methods like `parse` and contain information\n// about loaders and options passed in to the top-level `parse` call.\nimport {fetchFile} from '../fetch/fetch-file';\n\nexport function getLoaderContext(context, options, previousContext = null) {\n  // For recursive calls, we already have a context\n  // TODO - add any additional loaders to context?\n  if (previousContext) {\n    return previousContext;\n  }\n  context = {\n    // TODO - determine how to inject fetch, fetch in options etc\n    fetch: context.fetch || fetchFile,\n    ...context\n  };\n\n  // Recursive loading does not use single loader\n  if (!Array.isArray(context.loaders)) {\n    context.loaders = null;\n  }\n\n  return context;\n}\n\nexport function getLoaders(loaders, context) {\n  // A single non-array loader is force selected, but only on top-level (context === null)\n  if (!context && !Array.isArray(loaders)) {\n    return loaders;\n  }\n\n  // Create a merged list\n  let candidateLoaders;\n  if (loaders) {\n    candidateLoaders = Array.isArray(loaders) ? loaders : [loaders];\n  }\n  if (context && context.loaders) {\n    const contextLoaders = Array.isArray(context.loaders) ? context.loaders : [context.loaders];\n    candidateLoaders = candidateLoaders ? [...candidateLoaders, ...contextLoaders] : contextLoaders;\n  }\n  // If no loaders, return null to look in globally registered loaders\n  return candidateLoaders && candidateLoaders.length ? candidateLoaders : null;\n}\n"],"file":"get-loader-context.js"}