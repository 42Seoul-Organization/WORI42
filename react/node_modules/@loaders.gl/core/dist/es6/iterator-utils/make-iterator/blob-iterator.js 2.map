{"version":3,"sources":["../../../../src/iterator-utils/make-iterator/blob-iterator.js"],"names":["DEFAULT_CHUNK_SIZE","makeBlobIterator","file","options","chunkSize","offset","size","end","slice","chunk","readFileSlice","Promise","resolve","reject","fileReader","FileReader","onloadend","event","target","result","onerror","error","readAsArrayBuffer"],"mappings":";;AAEA,MAAMA,kBAAkB,GAAG,OAAO,IAAlC;AAEA,gBAAuBC,gBAAvB;AAAA;AAAA;;;0CAAO,WAAiCC,IAAjC,EAAuCC,OAAO,GAAG,EAAjD,EAAqD;AAC1D,UAAMC,SAAS,GAAGD,OAAO,CAACC,SAAR,IAAqBJ,kBAAvC;AAEA,QAAIK,MAAM,GAAG,CAAb;;AACA,WAAOA,MAAM,GAAGH,IAAI,CAACI,IAArB,EAA2B;AACzB,YAAMC,GAAG,GAAGF,MAAM,GAAGD,SAArB;AAKA,YAAMI,KAAK,GAAGN,IAAI,CAACM,KAAL,CAAWH,MAAX,EAAmBE,GAAnB,CAAd;AAEA,YAAME,KAAK,8BAASC,aAAa,CAACF,KAAD,CAAtB,CAAX;AAEAH,MAAAA,MAAM,GAAGE,GAAT;AACA,YAAME,KAAN;AACD;AACF,G;;;;AAED,eAAeC,aAAf,CAA6BF,KAA7B,EAAoC;AAClC,SAAO,MAAM,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC5C,UAAMC,UAAU,GAAG,IAAIC,UAAJ,EAAnB;;AACAD,IAAAA,UAAU,CAACE,SAAX,GAAuBC,KAAK,IAAIL,OAAO,CAACK,KAAK,CAACC,MAAN,CAAaC,MAAd,CAAvC;;AACAL,IAAAA,UAAU,CAACM,OAAX,GAAqBC,KAAK,IAAIR,MAAM,CAACQ,KAAD,CAApC;;AACAP,IAAAA,UAAU,CAACQ,iBAAX,CAA6Bd,KAA7B;AACD,GALY,CAAb;AAMD","sourcesContent":["/* global FileReader */\n\nconst DEFAULT_CHUNK_SIZE = 1024 * 1024; // 1MB â€” biggest value that keeps UI responsive\n\nexport async function* makeBlobIterator(file, options = {}) {\n  const chunkSize = options.chunkSize || DEFAULT_CHUNK_SIZE;\n\n  let offset = 0;\n  while (offset < file.size) {\n    const end = offset + chunkSize;\n\n    // The trick when reading File objects is to read successive \"slices\" of the File\n    // Per spec https://w3c.github.io/FileAPI/, slicing a File should only update the start and end fields\n    // Actually reading from file should happen in `readAsArrayBuffer` (and as far we can tell it does)\n    const slice = file.slice(offset, end);\n\n    const chunk = await readFileSlice(slice);\n\n    offset = end;\n    yield chunk;\n  }\n}\n\nasync function readFileSlice(slice) {\n  return await new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onloadend = event => resolve(event.target.result);\n    fileReader.onerror = error => reject(error);\n    fileReader.readAsArrayBuffer(slice);\n  });\n}\n"],"file":"blob-iterator.js"}