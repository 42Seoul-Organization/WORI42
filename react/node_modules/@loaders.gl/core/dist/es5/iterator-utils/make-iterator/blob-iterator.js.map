{"version":3,"sources":["../../../../src/iterator-utils/make-iterator/blob-iterator.js"],"names":["DEFAULT_CHUNK_SIZE","makeBlobIterator","file","options","chunkSize","offset","size","end","slice","readFileSlice","chunk","Promise","resolve","reject","fileReader","FileReader","onloadend","event","target","result","onerror","error","readAsArrayBuffer"],"mappings":";;;;;;;;;;;;;;;;;AAEA,IAAMA,kBAAkB,GAAG,OAAO,IAAlC;;SAEuBC,gB;;;;;wFAAhB,iBAAiCC,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuCC,YAAAA,OAAvC,2DAAiD,EAAjD;AACCC,YAAAA,SADD,GACaD,OAAO,CAACC,SAAR,IAAqBJ,kBADlC;AAGDK,YAAAA,MAHC,GAGQ,CAHR;;AAAA;AAAA,kBAIEA,MAAM,GAAGH,IAAI,CAACI,IAJhB;AAAA;AAAA;AAAA;;AAKGC,YAAAA,GALH,GAKSF,MAAM,GAAGD,SALlB;AAUGI,YAAAA,KAVH,GAUWN,IAAI,CAACM,KAAL,CAAWH,MAAX,EAAmBE,GAAnB,CAVX;AAAA;AAAA,yDAYiBE,aAAa,CAACD,KAAD,CAZ9B;;AAAA;AAYGE,YAAAA,KAZH;AAcHL,YAAAA,MAAM,GAAGE,GAAT;AAdG;AAeH,mBAAMG,KAAN;;AAfG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAmBQD,a;;;;;mFAAf,kBAA6BD,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACe,IAAIG,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC5C,kBAAMC,UAAU,GAAG,IAAIC,UAAJ,EAAnB;;AACAD,cAAAA,UAAU,CAACE,SAAX,GAAuB,UAAAC,KAAK;AAAA,uBAAIL,OAAO,CAACK,KAAK,CAACC,MAAN,CAAaC,MAAd,CAAX;AAAA,eAA5B;;AACAL,cAAAA,UAAU,CAACM,OAAX,GAAqB,UAAAC,KAAK;AAAA,uBAAIR,MAAM,CAACQ,KAAD,CAAV;AAAA,eAA1B;;AACAP,cAAAA,UAAU,CAACQ,iBAAX,CAA6Bd,KAA7B;AACD,aALY,CADf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/* global FileReader */\n\nconst DEFAULT_CHUNK_SIZE = 1024 * 1024; // 1MB â€” biggest value that keeps UI responsive\n\nexport async function* makeBlobIterator(file, options = {}) {\n  const chunkSize = options.chunkSize || DEFAULT_CHUNK_SIZE;\n\n  let offset = 0;\n  while (offset < file.size) {\n    const end = offset + chunkSize;\n\n    // The trick when reading File objects is to read successive \"slices\" of the File\n    // Per spec https://w3c.github.io/FileAPI/, slicing a File should only update the start and end fields\n    // Actually reading from file should happen in `readAsArrayBuffer` (and as far we can tell it does)\n    const slice = file.slice(offset, end);\n\n    const chunk = await readFileSlice(slice);\n\n    offset = end;\n    yield chunk;\n  }\n}\n\nasync function readFileSlice(slice) {\n  return await new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onloadend = event => resolve(event.target.result);\n    fileReader.onerror = error => reject(error);\n    fileReader.readAsArrayBuffer(slice);\n  });\n}\n"],"file":"blob-iterator.js"}