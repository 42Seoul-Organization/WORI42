{"version":3,"sources":["../../../../src/lib/api/parse-in-batches.js"],"names":["parseInBatches","data","loaders","options","url","Array","isArray","loader","context","parseWithLoaderInBatches","makeMetadataBatchIterator","iterator","metadataBatch","Error","inputIterator","outputIterator","metadata","batchType","_loader","_context","bytesUsed"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;SAGsBA,c;;;;;oFAAf,iBAA8BC,IAA9B,EAAoCC,OAApC,EAA6CC,OAA7C,EAAsDC,GAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAGL,gBAAI,CAACC,KAAK,CAACC,OAAN,CAAcJ,OAAd,CAAD,IAA2B,CAAC,qCAAeA,OAAf,CAAhC,EAAyD;AACvDE,cAAAA,GAAG,GAAGD,OAAN;AACAA,cAAAA,OAAO,GAAGD,OAAV;AACAA,cAAAA,OAAO,GAAG,IAAV;AACD;;AAIKK,YAAAA,MAXD,GAWU,gCAAa,IAAb,EAAmBL,OAAnB,EAA4BC,OAA5B,EAAqC;AAACC,cAAAA,GAAG,EAAHA;AAAD,aAArC,CAXV;AAcLD,YAAAA,OAAO,GAAG,gCAAaI,MAAb,EAAqBJ,OAArB,EAA8BC,GAA9B,CAAV;AAEMI,YAAAA,OAhBD,GAgBW,wCAAiB;AAACJ,cAAAA,GAAG,EAAHA,GAAD;AAAMF,cAAAA,OAAO,EAAPA;AAAN,aAAjB,EAAiCC,OAAjC,CAhBX;AAAA;AAAA,mBAkBQM,wBAAwB,CAACF,MAAD,EAASN,IAAT,EAAeE,OAAf,EAAwBK,OAAxB,CAlBhC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAqBQC,wB;;;;;8FAAf,kBAAwCF,MAAxC,EAAgDN,IAAhD,EAAsDE,OAAtD,EAA+DK,OAA/D;AAAA,sDA8BkBE,yBA9BlB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6GA8BE,kBAA0CC,QAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,+BAAMC,aAAN;;AADF;AAEE,gIAAOD,QAAP;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eA9BF;AAAA;AAAA;;AA8BkBD,YAAAA,yBA9BlB;AAAA;AAAA;;AAAA,gBACOH,MAAM,CAACP,cADd;AAAA;AAAA;AAAA;;AAAA,kBAGU,IAAIa,KAAJ,CAAU,wCAAV,CAHV;;AAAA;AAAA;AAAA,mBAO8B,uCAAyBZ,IAAzB,CAP9B;;AAAA;AAOQa,YAAAA,aAPR;AAAA;AAAA,mBAY+BP,MAAM,CAACP,cAAP,CAAsBc,aAAtB,EAAqCX,OAArC,EAA8CK,OAA9C,EAAuDD,MAAvD,CAZ/B;;AAAA;AAYQQ,YAAAA,cAZR;;AAAA,gBAeOZ,OAAO,CAACa,QAff;AAAA;AAAA;AAAA;;AAAA,8CAgBWD,cAhBX;;AAAA;AAmBQH,YAAAA,aAnBR,GAmBwB;AACpBK,cAAAA,SAAS,EAAE,UADS;AAEpBD,cAAAA,QAAQ,EAAE;AACRE,gBAAAA,OAAO,EAAEX,MADD;AAERY,gBAAAA,QAAQ,EAAEX;AAFF,eAFU;AAOpBP,cAAAA,IAAI,EAAE,EAPc;AAQpBmB,cAAAA,SAAS,EAAE;AARS,aAnBxB;AAAA,8CAmCSV,yBAAyB,CAACK,cAAD,CAnClC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {mergeOptions} from '../loader-utils/merge-options';\nimport {getAsyncIteratorFromData} from '../loader-utils/get-data';\nimport {getLoaderContext} from '../loader-utils/get-loader-context';\nimport {selectLoader} from './select-loader';\n// import {makeTextDecoderIterator} from '../../iterator-utils/text-iterators';\n\nexport async function parseInBatches(data, loaders, options, url) {\n  // Signature: parseInBatches(data, options, url)\n  // Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    url = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  // Chooses a loader and normalizes it\n  // TODO - only uses URL, need a selectLoader variant that peeks at first stream chunk...\n  const loader = selectLoader(null, loaders, options, {url});\n\n  // Normalize options\n  options = mergeOptions(loader, options, url);\n\n  const context = getLoaderContext({url, loaders}, options);\n\n  return await parseWithLoaderInBatches(loader, data, options, context);\n}\n\nasync function parseWithLoaderInBatches(loader, data, options, context) {\n  if (!loader.parseInBatches) {\n    // TODO - call parse and emit a single batch (plus metadata batch)\n    throw new Error('loader does not support parseInBatches');\n  }\n\n  // Create async iterator adapter for data, and concatenate result\n  const inputIterator = await getAsyncIteratorFromData(data);\n  // Converts ArrayBuffer chunks to text chunks (leaves text chunks alone)\n  // if (loader.text) {\n  //   inputIterator = makeTextDecoderIterator(inputIterator);\n  // }\n  const outputIterator = await loader.parseInBatches(inputIterator, options, context, loader);\n\n  // Generate metadata batch if requested\n  if (!options.metadata) {\n    return outputIterator;\n  }\n\n  const metadataBatch = {\n    batchType: 'metadata',\n    metadata: {\n      _loader: loader,\n      _context: context\n    },\n    // Populate with some default fields to avoid crashing\n    data: [],\n    bytesUsed: 0\n  };\n\n  async function* makeMetadataBatchIterator(iterator) {\n    yield metadataBatch;\n    yield* iterator;\n  }\n\n  return makeMetadataBatchIterator(outputIterator);\n}\n"],"file":"parse-in-batches.js"}