{"version":3,"sources":["../../../../src/lib/api/select-loader.js"],"names":["EXT_PATTERN","selectLoader","data","loaders","options","context","Array","isArray","normalizeLoaders","url","type","loader","findLoaderByUrl","findLoaderByContentType","findLoaderByExamingInitialData","nothrow","Error","getNoValidLoaderMessage","contentType","message","getFirstCharacters","match","extension","findLoaderByExtension","toLowerCase","extensions","loaderExtension","mimeType","mimeTypes","includes","id","testText","ArrayBuffer","isView","testBinary","buffer","byteOffset","test","tests","some","magic","getMagicString","length","slice","arrayBuffer","byteLength","dataView","DataView","i","String","fromCharCode","getUint8"],"mappings":"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","sourcesContent":["import {normalizeLoader} from '../loader-utils/normalize-loader';\nimport {getResourceUrlAndType} from '../utils/resource-utils';\nimport {getRegisteredLoaders} from './register-loaders';\n\nconst EXT_PATTERN = /\\.([^.]+)$/;\n\n// TODO - Need a variant that peeks at streams for parseInBatches\n// TODO - Detect multiple matching loaders? Use heuristics to grade matches?\n// TODO - Allow apps to pass context to disambiguate between multiple matches (e.g. multiple .json formats)?\n\n// eslint-disable-next-line complexity\nexport function selectLoader(data, loaders = [], options = {}, context = {}) {\n  // if only a single loader was provided (not as array), force its use\n  // TODO - Should this behaviour be kept and documented?\n  if (loaders && !Array.isArray(loaders)) {\n    return normalizeLoader(loaders);\n  }\n\n  // Add registered loaders\n  loaders = [...(loaders || []), ...getRegisteredLoaders()];\n  normalizeLoaders(loaders);\n\n  const {url, type} = getResourceUrlAndType(data);\n\n  let loader = findLoaderByUrl(loaders, url || context.url);\n  loader = loader || findLoaderByContentType(loaders, type);\n  loader = loader || findLoaderByExamingInitialData(loaders, data);\n\n  // no loader available\n  if (!loader && !options.nothrow) {\n    throw new Error(getNoValidLoaderMessage(data, url, type));\n  }\n\n  return loader;\n}\n\nfunction getNoValidLoaderMessage(data, url, contentType) {\n  let message = 'No valid loader found';\n  if (data) {\n    message += ` data: \"${getFirstCharacters(data)}\"`;\n  }\n  if (url) {\n    message += ` for ${url}`;\n  }\n  return message;\n}\n\nfunction normalizeLoaders(loaders) {\n  for (const loader of loaders) {\n    normalizeLoader(loader);\n  }\n}\n\n// TODO - Would be nice to support http://example.com/file.glb?parameter=1\n// E.g: x = new URL('http://example.com/file.glb?load=1'; x.pathname\nfunction findLoaderByUrl(loaders, url) {\n  // Get extension\n  const match = url && url.match(EXT_PATTERN);\n  const extension = match && match[1];\n  return extension && findLoaderByExtension(loaders, extension);\n}\n\nfunction findLoaderByExtension(loaders, extension) {\n  extension = extension.toLowerCase();\n\n  for (const loader of loaders) {\n    for (const loaderExtension of loader.extensions) {\n      if (loaderExtension.toLowerCase() === extension) {\n        return loader;\n      }\n    }\n  }\n  return null;\n}\n\nfunction findLoaderByContentType(loaders, mimeType) {\n  for (const loader of loaders) {\n    if (loader.mimeTypes && loader.mimeTypes.includes(mimeType)) {\n      return loader;\n    }\n\n    // Support referring to loaders using the \"unregistered tree\"\n    // https://en.wikipedia.org/wiki/Media_type#Unregistered_tree\n    if (mimeType === `application/x.${loader.id}`) {\n      return loader;\n    }\n  }\n  return null;\n}\n\nfunction findLoaderByExamingInitialData(loaders, data) {\n  if (!data) {\n    return null;\n  }\n\n  for (const loader of loaders) {\n    if (typeof data === 'string') {\n      if (testText(data, loader)) {\n        return loader;\n      }\n    } else if (ArrayBuffer.isView(data)) {\n      // Typed Arrays can have offsets into underlying buffer\n      if (testBinary(data.buffer, data.byteOffset, loader)) {\n        return loader;\n      }\n    } else if (data instanceof ArrayBuffer) {\n      const byteOffset = 0;\n      if (testBinary(data, byteOffset, loader)) {\n        return loader;\n      }\n    }\n    // TODO Handle streaming case (requires creating a new AsyncIterator)\n  }\n  return null;\n}\n\nfunction testText(data, loader) {\n  return loader.testText && loader.testText(data);\n}\n\nfunction testBinary(data, byteOffset, loader) {\n  const type = Array.isArray(loader.test) ? 'array' : typeof loader.test;\n  switch (type) {\n    case 'function':\n      return loader.test(data, loader);\n\n    case 'string':\n    case 'array':\n      // Magic bytes check: If `loader.test` is a string or array of strings,\n      // check if binary data starts with one of those strings\n      const tests = Array.isArray(loader.test) ? loader.test : [loader.test];\n      return tests.some(test => {\n        const magic = getMagicString(data, byteOffset, test.length);\n        return test === magic;\n      });\n\n    default:\n      return false;\n  }\n}\n\nfunction getFirstCharacters(data, length = 5) {\n  if (typeof data === 'string') {\n    return data.slice(0, length);\n  } else if (ArrayBuffer.isView(data)) {\n    // Typed Arrays can have offsets into underlying buffer\n    return getMagicString(data.buffer, data.byteOffset, length);\n  } else if (data instanceof ArrayBuffer) {\n    const byteOffset = 0;\n    return getMagicString(data, byteOffset, length);\n  }\n  return '';\n}\n\nfunction getMagicString(arrayBuffer, byteOffset, length) {\n  if (arrayBuffer.byteLength <= byteOffset + length) {\n    return '';\n  }\n  const dataView = new DataView(arrayBuffer);\n  let magic = '';\n  for (let i = 0; i < length; i++) {\n    magic += String.fromCharCode(dataView.getUint8(byteOffset + i));\n  }\n  return magic;\n}\n"],"file":"select-loader.js"}