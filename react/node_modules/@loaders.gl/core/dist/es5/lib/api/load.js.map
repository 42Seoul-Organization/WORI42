{"version":3,"sources":["../../../../src/lib/api/load.js"],"names":["load","url","loaders","options","Array","isArray","data"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;SAIsBA,I;;;;;0EAAf,iBAAoBC,GAApB,EAAyBC,OAAzB,EAAkCC,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAEL,gBAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,OAAd,CAAD,IAA2B,CAAC,qCAAeA,OAAf,CAAhC,EAAyD;AACvDC,cAAAA,OAAO,GAAGD,OAAV;AACAA,cAAAA,OAAO,GAAG,IAAV;AACD;;AAGGI,YAAAA,IARC,GAQML,GARN;;AAAA,kBAWD,OAAOA,GAAP,KAAe,QAXd;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAYU,0BAAUA,GAAV,EAAeE,OAAf,CAZV;;AAAA;AAYHG,YAAAA,IAZG;AAAA;AAAA;;AAAA;AAcHL,YAAAA,GAAG,GAAG,IAAN;;AAdG;AAAA,iBAkBD,oBAAOA,GAAP,CAlBC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAoBU,0BAAUA,GAAV,EAAeE,OAAf,CApBV;;AAAA;AAoBHG,YAAAA,IApBG;AAqBHL,YAAAA,GAAG,GAAG,IAAN;;AArBG;AAAA;AAAA,mBAyBQ,kBAAMK,IAAN,EAAYJ,OAAZ,EAAqBC,OAArB,EAA8BF,GAA9B,CAzBR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import {isBlob} from '../../javascript-utils/is-type';\nimport {fetchFile} from '../fetch/fetch-file';\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\n\nimport {parse} from './parse';\n\n// Note: Load does duplicate a lot of parse.\n// it can also call fetchFile on string urls, which `parse` won't do.\nexport async function load(url, loaders, options) {\n  // Signature: load(url, options)\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    options = loaders;\n    loaders = null;\n  }\n\n  // at this point, `url` could be already loaded binary data\n  let data = url;\n\n  // url is a string, fetch the url\n  if (typeof url === 'string') {\n    data = await fetchFile(url, options);\n  } else {\n    url = null;\n  }\n\n  // URL is Blob or File, fetchFile handles it (alt: we could generate ObjectURL here)\n  if (isBlob(url)) {\n    // The fetch response object will contain blob.name\n    data = await fetchFile(url, options);\n    url = null;\n  }\n\n  // Data is loaded (at least we have a `Response` object) so time to hand over to `parse`\n  return await parse(data, loaders, options, url);\n}\n"],"file":"load.js"}