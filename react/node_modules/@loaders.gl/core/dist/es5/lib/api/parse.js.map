{"version":3,"sources":["../../../../src/lib/api/parse.js"],"names":["parse","data","loaders","options","context","Array","isArray","url","autoUrl","candidateLoaders","loader","parseWithLoader","parseTextSync","dataType","parseSync"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;SAEsBA,K;;;;;2EAAf,iBAAqBC,IAArB,EAA2BC,OAA3B,EAAoCC,OAApC,EAA6CC,OAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAGL,gBAAIF,OAAO,IAAI,CAACG,KAAK,CAACC,OAAN,CAAcJ,OAAd,CAAZ,IAAsC,CAAC,qCAAeA,OAAf,CAA3C,EAAoE;AAClEE,cAAAA,OAAO,GAAGD,OAAV;AACAA,cAAAA,OAAO,GAAGD,OAAV;AACAA,cAAAA,OAAO,GAAG,IAAV;AACD;;AAGGK,YAAAA,GAVC,GAUK,EAVL;;AAWL,gBAAI,OAAOH,OAAP,KAAmB,QAAvB,EAAiC;AAC/BG,cAAAA,GAAG,GAAGH,OAAN;AACAA,cAAAA,OAAO,GAAG,IAAV;AACD;;AAEDD,YAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAGMK,YAAAA,OAnBD,GAmBW,6BAAeP,IAAf,EAAqBM,GAArB,CAnBX;AAuBCE,YAAAA,gBAvBD,GAuBoB,kCAAWP,OAAX,EAAoBE,OAApB,CAvBpB;AAwBCM,YAAAA,MAxBD,GAwBU,gCAAaT,IAAb,EAAmBQ,gBAAnB,EAAqCN,OAArC,EAA8C;AAACI,cAAAA,GAAG,EAAEC;AAAN,aAA9C,CAxBV;;AAAA,gBA0BAE,MA1BA;AAAA;AAAA;AAAA;;AAAA,6CA2BI,IA3BJ;;AAAA;AA+BLP,YAAAA,OAAO,GAAG,gCAAaO,MAAb,EAAqBP,OAArB,EAA8BK,OAA9B,CAAV;AAGAJ,YAAAA,OAAO,GAAG,wCAAiB;AAACG,cAAAA,GAAG,EAAEC,OAAN;AAAeR,cAAAA,KAAK,EAALA,KAAf;AAAsBE,cAAAA,OAAO,EAAEO;AAA/B,aAAjB,EAAmEN,OAAnE,EAA4EC,OAA5E,CAAV;AAlCK;AAAA,mBAoCQO,eAAe,CAACD,MAAD,EAAST,IAAT,EAAeE,OAAf,EAAwBC,OAAxB,CApCvB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAyCQO,e;;;;;qFAAf,kBAA+BD,MAA/B,EAAuCT,IAAvC,EAA6CE,OAA7C,EAAsDC,OAAtD;AAAA;AAAA;AAAA;AAAA;AACE,oDAAsBM,MAAtB;AADF;AAAA,mBAGe,6CAA+BT,IAA/B,EAAqCS,MAArC,CAHf;;AAAA;AAGET,YAAAA,IAHF;;AAAA,kBAMMS,MAAM,CAACE,aAAP,IAAwB,OAAOX,IAAP,KAAgB,QAN9C;AAAA;AAAA;AAAA;;AAOIE,YAAAA,OAAO,CAACU,QAAR,GAAmB,MAAnB;AAPJ,8CAQWH,MAAM,CAACE,aAAP,CAAqBX,IAArB,EAA2BE,OAA3B,EAAoCC,OAApC,EAA6CM,MAA7C,CARX;;AAAA;AAAA,iBAYM,yCAAmBA,MAAnB,EAA2BT,IAA3B,EAAiCE,OAAjC,EAA0CC,OAA1C,CAZN;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAaiB,iCAAgBM,MAAhB,EAAwBT,IAAxB,EAA8BE,OAA9B,EAAuCC,OAAvC,CAbjB;;AAAA;AAAA;;AAAA;AAAA,iBAiBMM,MAAM,CAACV,KAjBb;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAkBiBU,MAAM,CAACV,KAAP,CAAaC,IAAb,EAAmBE,OAAnB,EAA4BC,OAA5B,EAAqCM,MAArC,CAlBjB;;AAAA;AAAA;;AAAA;AAsBE,qCAAO,CAACA,MAAM,CAACI,SAAf;AAtBF,8CAyBS,yBAAO,KAAP,CAzBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import {assert, validateLoaderVersion} from '@loaders.gl/loader-utils';\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {mergeOptions} from '../loader-utils/merge-options';\nimport {getUrlFromData} from '../loader-utils/get-data';\nimport {getArrayBufferOrStringFromData} from '../loader-utils/get-data';\nimport {getLoaders, getLoaderContext} from '../loader-utils/get-loader-context';\nimport parseWithWorker, {canParseWithWorker} from '../loader-utils/parse-with-worker';\nimport {selectLoader} from './select-loader';\n\nexport async function parse(data, loaders, options, context) {\n  // Signature: parse(data, options, context | url)\n  // Uses registered loaders\n  if (loaders && !Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  // DEPRECATED - backwards compatibility, last param can be URL...\n  let url = '';\n  if (typeof context === 'string') {\n    url = context;\n    context = null;\n  }\n\n  options = options || {};\n\n  // Extract a url for auto detection\n  const autoUrl = getUrlFromData(data, url);\n\n  // Chooses a loader (and normalizes it)\n  // Also use any loaders in the context, new loaders take priority\n  const candidateLoaders = getLoaders(loaders, context);\n  const loader = selectLoader(data, candidateLoaders, options, {url: autoUrl});\n  // Note: if nothrow option was set, it is possible that no loader was found, if so just return null\n  if (!loader) {\n    return null;\n  }\n\n  // Normalize options\n  options = mergeOptions(loader, options, autoUrl);\n\n  // Get a context (if already present, will be unchanged)\n  context = getLoaderContext({url: autoUrl, parse, loaders: candidateLoaders}, options, context);\n\n  return await parseWithLoader(loader, data, options, context);\n}\n\n// TODO: support progress and abort\n// TODO - should accept loader.parseAsyncIterator and concatenate.\nasync function parseWithLoader(loader, data, options, context) {\n  validateLoaderVersion(loader);\n\n  data = await getArrayBufferOrStringFromData(data, loader);\n\n  // First check for synchronous text parser, wrap results in promises\n  if (loader.parseTextSync && typeof data === 'string') {\n    options.dataType = 'text';\n    return loader.parseTextSync(data, options, context, loader);\n  }\n\n  // If we have a workerUrl and the loader can parse the given options efficiently in a worker\n  if (canParseWithWorker(loader, data, options, context)) {\n    return await parseWithWorker(loader, data, options, context);\n  }\n\n  // Check for asynchronous parser\n  if (loader.parse) {\n    return await loader.parse(data, options, context, loader);\n  }\n\n  // This should not happen, all sync loaders should also offer `parse` function\n  assert(!loader.parseSync);\n\n  // TBD - If asynchronous parser not available, return null\n  return assert(false);\n}\n"],"file":"parse.js"}