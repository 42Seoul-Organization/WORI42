{"version":3,"sources":["../../../../src/lib/loader-utils/merge-options.js"],"names":["isPureObject","value","constructor","getGlobalLoaderState","global","loaders","_state","getGlobalLoaderOptions","state","globalOptions","DEFAULT_LOADER_OPTIONS","setGlobalOptions","options","mergeOptionsInternal","mergeOptions","loader","url","topOptions","validateLoaderOptions","log","console","key","warn","idOptions","id","loaderOptions","deprecatedOptions","defaultOptions","name","loaderDefaultOptions","mergedOptions","addUrlOptions","NullLog","mergeNestedFields","baseUri"],"mappings":"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","sourcesContent":["import {global} from '@loaders.gl/loader-utils';\nimport {DEFAULT_LOADER_OPTIONS} from '../constants';\nimport {NullLog} from './loggers';\n\nconst isPureObject = value =>\n  value && typeof value === 'object' && value.constructor === {}.constructor;\n\n// Helper to reliably get global loader state\n// Wraps initialization of global variable in function to defeat overly agressive tree-shakers\nexport const getGlobalLoaderState = () => {\n  // @ts-ignore\n  global.loaders = global.loaders || {};\n  // @ts-ignore\n  const {loaders} = global;\n\n  // Add _state object to keep separate from modules added to global.loaders\n  loaders._state = loaders._state || {};\n  return loaders._state;\n};\n\n// Store global loader options on the global object to increase chances of cross loaders-version interoperability\n// NOTE: This use case is not reliable but can help when testing new versions of loaders.gl with existing frameworks\nconst getGlobalLoaderOptions = () => {\n  const state = getGlobalLoaderState();\n  // Ensure all default loader options from this library are mentioned\n  state.globalOptions = state.globalOptions || {...DEFAULT_LOADER_OPTIONS};\n  return state.globalOptions;\n};\n\n// Set global loader options\nexport function setGlobalOptions(options) {\n  const state = getGlobalLoaderState();\n  const globalOptions = getGlobalLoaderOptions();\n  state.globalOptions = mergeOptionsInternal(globalOptions, options);\n}\n\n// Merges options with global opts and loader defaults, also injects baseUri\nexport function mergeOptions(loader, options, url, topOptions = null) {\n  validateLoaderOptions(loader, options, topOptions);\n  return mergeOptionsInternal(loader, options, url);\n}\n\n/**\n * Warn for unsupported options\n * @param {*} loader\n * @param {object} options\n * @param {object | null} topOptions\n * @param {*} log\n */\n// eslint-disable-next-line complexity\nfunction validateLoaderOptions(\n  loader,\n  options,\n  topOptions = DEFAULT_LOADER_OPTIONS,\n  // eslint-disable-next-line\n  log = console\n) {\n  // Check top level options\n  if (topOptions) {\n    for (const key in options) {\n      // Only check non-object valued top-level keys\n      if (typeof options[key] !== 'object' && !topOptions[key]) {\n        log.warn(`Top-level loader option ${key} not recognized`);\n      }\n    }\n  }\n\n  // Get the scoped, loader specific options from the user supplied options\n  const idOptions = (options && options[loader.id]) || {};\n\n  // Get scoped, loader specific default and deprecated options from the selected loader\n  const loaderOptions = (loader.options && loader.options[loader.id]) || {};\n  const deprecatedOptions = (loader.defaultOptions && loader.defaultOptions[loader.id]) || {};\n\n  // Validate loader specific options\n  for (const key in idOptions) {\n    if (!(key in loaderOptions)) {\n      // Issue deprecation warnings\n      if (key in deprecatedOptions) {\n        log.warn(\n          `${loader.name} loader option ${loader.id}.${key} deprecated, use ${\n            deprecatedOptions[key]\n          }`\n        );\n        // TODO - auto set updated option?\n      } else {\n        log.warn(`${loader.name} loader option ${loader.id}.${key} not recognized`);\n      }\n    }\n  }\n}\n\nfunction mergeOptionsInternal(loader, options, url) {\n  const loaderDefaultOptions = loader.options || {};\n\n  const mergedOptions = {...loaderDefaultOptions};\n\n  addUrlOptions(mergedOptions, url);\n\n  // LOGGING: options.log can be set to `null` to defeat logging\n  if (mergedOptions.log === null) {\n    mergedOptions.log = new NullLog();\n  }\n\n  mergeNestedFields(mergedOptions, getGlobalLoaderOptions());\n  mergeNestedFields(mergedOptions, options);\n\n  return mergedOptions;\n}\n\n// Merge nested options objects\nfunction mergeNestedFields(mergedOptions, options) {\n  for (const key in options) {\n    // Check for nested options\n    // object in options => either no key in defaultOptions or object in defaultOptions\n    if (key in options) {\n      const value = options[key];\n      if (isPureObject(value) && isPureObject(mergedOptions[key])) {\n        mergedOptions[key] = {\n          ...mergedOptions[key],\n          ...options[key]\n        };\n      } else {\n        mergedOptions[key] = options[key];\n      }\n    }\n    // else: No need to merge nested opts, and the initial merge already copied over the nested options\n  }\n}\n\n// Harvest information from the url\n// TODO - baseUri should be a directory, i.e. remove file component from baseUri\n// TODO - extract extension?\n// TODO - extract query parameters?\n// TODO - should these be injected on context instead of options?\nfunction addUrlOptions(options, url) {\n  if (url && !('baseUri' in options)) {\n    options.baseUri = url;\n  }\n}\n"],"file":"merge-options.js"}