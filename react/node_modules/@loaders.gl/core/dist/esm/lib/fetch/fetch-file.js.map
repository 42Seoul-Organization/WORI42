{"version":3,"sources":["../../../../src/lib/fetch/fetch-file.js"],"names":["resolvePath","isBlob","fetchFileReadable","getErrorMessageFromResponse","fetchFile","url","options","fetch","response","ok","Error"],"mappings":";;AACA,SAAQA,WAAR,QAA0B,0BAA1B;AACA,SAAQC,MAAR,QAAqB,gCAArB;AACA,OAAOC,iBAAP,MAA8B,sBAA9B;AACA,SAAQC,2BAAR,QAA0C,uBAA1C;AAOA,gBAAsBC,SAAtB;AAAA;AAAA;;;0DAAO,iBAAyBC,GAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8BC,YAAAA,OAA9B,2DAAwC,EAAxC;;AAAA,iBACDL,MAAM,CAACI,GAAD,CADL;AAAA;AAAA;AAAA;;AAAA,6CAEIH,iBAAiB,CAACG,GAAD,EAAMC,OAAN,CAFrB;;AAAA;AAILD,YAAAA,GAAG,GAAGL,WAAW,CAACK,GAAD,CAAjB;AAJK;AAAA,mBAMkBE,KAAK,CAACF,GAAD,EAAMC,OAAN,CANvB;;AAAA;AAMCE,YAAAA,QAND;;AAAA,kBAOD,CAACA,QAAQ,CAACC,EAAV,IAAgBH,OAAO,UAPtB;AAAA;AAAA;AAAA;;AAAA,0BAQOI,KARP;AAAA;AAAA,mBAQmBP,2BAA2B,CAACK,QAAD,CAR9C;;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAUEA,QAVF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/* global fetch */\nimport {resolvePath} from '@loaders.gl/loader-utils';\nimport {isBlob} from '../../javascript-utils/is-type';\nimport fetchFileReadable from './fetch-file.browser';\nimport {getErrorMessageFromResponse} from './fetch-error-message';\n\n// As fetch but respects pathPrefix and file aliases\n// Reads file data from:\n// * data urls\n// * http/http urls\n// * File/Blob objects\nexport async function fetchFile(url, options = {}) {\n  if (isBlob(url)) {\n    return fetchFileReadable(url, options);\n  }\n  url = resolvePath(url);\n  // TODO - SUPPORT reading from `File` objects\n  const response = await fetch(url, options);\n  if (!response.ok && options.throws) {\n    throw new Error(await getErrorMessageFromResponse(response));\n  }\n  return response;\n}\n"],"file":"fetch-file.js"}