{"version":3,"sources":["../../../../src/lib/fetch/fetch-file.browser.js"],"names":["assert","FileReadableResponse","fileOrBlob","options","_fileOrBlob","bodyUsed","_getFileReader","reader","promise","readAsArrayBuffer","readAsText","text","JSON","parse","FileReader","Promise","resolve","reject","onerror","_","Error","onabort","onload","result","error","Headers","size","type","name","fetchFileReadable"],"mappings":";;;;AACA,SAAQA,MAAR,QAAqB,0BAArB;;IAGMC,oB;AACJ,gCAAYC,UAAZ,EAAwBC,OAAxB,EAAiC;AAAA;;AAC/B,SAAKC,WAAL,GAAmBF,UAAnB;AACA,SAAKG,QAAL,GAAgB,KAAhB;AACD;;;;;;;;;;;;uCAwB2B,KAAKC,cAAL,E,EAAnBC,M,wBAAAA,M,EAAQC,O,wBAAAA,O;AACfD,gBAAAA,MAAM,CAACE,iBAAP,CAAyB,KAAKL,WAA9B;iDACOI,O;;;;;;;;;;;;;;;;;;;;;;;;;;wCAImB,KAAKF,cAAL,E,EAAnBC,M,yBAAAA,M,EAAQC,O,yBAAAA,O;AACfD,gBAAAA,MAAM,CAACG,UAAP,CAAkB,KAAKN,WAAvB;kDACOI,O;;;;;;;;;;;;;;;;;;;;;;;;;;uBAIY,KAAKG,IAAL,E;;;AAAbA,gBAAAA,I;kDACCC,IAAI,CAACC,KAAL,CAAWF,IAAX,C;;;;;;;;;;;;;;;;;;qCAaQ;AACfX,MAAAA,MAAM,CAAC,CAAC,KAAKK,QAAP,CAAN;AACA,WAAKA,QAAL,GAAgB,IAAhB;AAEA,UAAME,MAAM,GAAG,IAAIO,UAAJ,EAAf;AACA,UAAMN,OAAO,GAAG,IAAIO,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/C,YAAI;AACFV,UAAAA,MAAM,CAACW,OAAP,GAAiB,UAAAC,CAAC;AAAA,mBAAIF,MAAM,CAAC,IAAIG,KAAJ,CAAU,YAAV,CAAD,CAAV;AAAA,WAAlB;;AACAb,UAAAA,MAAM,CAACc,OAAP,GAAiB;AAAA,mBAAMJ,MAAM,CAAC,IAAIG,KAAJ,CAAU,eAAV,CAAD,CAAZ;AAAA,WAAjB;;AACAb,UAAAA,MAAM,CAACe,MAAP,GAAgB;AAAA,mBAAMN,OAAO,CAACT,MAAM,CAACgB,MAAR,CAAb;AAAA,WAAhB;AACD,SAJD,CAIE,OAAOC,KAAP,EAAc;AACdP,UAAAA,MAAM,CAACO,KAAD,CAAN;AACD;AACF,OARe,CAAhB;AASA,aAAO;AAACjB,QAAAA,MAAM,EAANA,MAAD;AAASC,QAAAA,OAAO,EAAPA;AAAT,OAAP;AACD;;;wBA/Da;AACZ,aAAO,IAAIiB,OAAJ,CAAY;AACjB,0BAAkB,KAAKrB,WAAL,CAAiBsB,IADlB;AAEjB,wBAAgB,KAAKtB,WAAL,CAAiBuB;AAFhB,OAAZ,CAAP;AAID;;;wBAEQ;AACP,aAAO,IAAP;AACD;;;wBAEY;AACX,aAAO,GAAP;AACD;;;wBAES;AAGR,aAAO,KAAKvB,WAAL,CAAiBwB,IAAjB,IAAyB,EAAhC;AACD;;;;;;AAiDH,eAAe,SAASC,iBAAT,CAA2B3B,UAA3B,EAAuCC,OAAvC,EAAgD;AAC7D,SAAOY,OAAO,CAACC,OAAR,CAAgB,IAAIf,oBAAJ,CAAyBC,UAAzB,EAAqCC,OAArC,CAAhB,CAAP;AACD","sourcesContent":["/* global FileReader, Headers */\nimport {assert} from '@loaders.gl/loader-utils';\n\n// File reader fetch \"polyfill\" for the browser\nclass FileReadableResponse {\n  constructor(fileOrBlob, options) {\n    this._fileOrBlob = fileOrBlob;\n    this.bodyUsed = false;\n  }\n\n  get headers() {\n    return new Headers({\n      'Content-Length': this._fileOrBlob.size,\n      'Content-Type': this._fileOrBlob.type\n    });\n  }\n\n  get ok() {\n    return true; // Blob & File objects are already in memory\n  }\n\n  get status() {\n    return 200; // Blob & File objects are already in memory\n  }\n\n  get url() {\n    // Note: This is just the file name without path information\n    // Note: File has `name` field but the Blob baseclass does not\n    return this._fileOrBlob.name || '';\n  }\n\n  async arrayBuffer() {\n    const {reader, promise} = this._getFileReader();\n    reader.readAsArrayBuffer(this._fileOrBlob);\n    return promise;\n  }\n\n  async text() {\n    const {reader, promise} = this._getFileReader();\n    reader.readAsText(this._fileOrBlob);\n    return promise;\n  }\n\n  async json() {\n    const text = await this.text();\n    return JSON.parse(text);\n  }\n\n  // TODO - body, how to support stream?\n  // Can this be portable?\n  // eslint-disable-next-line\n  // https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Using_readable_streams#Creating_your_own_custom_readable_stream\n  // get body() {\n  //   assert(false);\n  // }\n\n  // PRIVATE\n\n  _getFileReader() {\n    assert(!this.bodyUsed);\n    this.bodyUsed = true;\n\n    const reader = new FileReader();\n    const promise = new Promise((resolve, reject) => {\n      try {\n        reader.onerror = _ => reject(new Error('Read error')); // TODO extract error\n        reader.onabort = () => reject(new Error('Read aborted.'));\n        reader.onload = () => resolve(reader.result);\n      } catch (error) {\n        reject(error);\n      }\n    });\n    return {reader, promise};\n  }\n}\n\n// @param {File|Blob} file  HTML File or Blob object to read as string\n// @returns {Promise.string}  Resolves to a string containing file contents\nexport default function fetchFileReadable(fileOrBlob, options) {\n  return Promise.resolve(new FileReadableResponse(fileOrBlob, options));\n}\n"],"file":"fetch-file.browser.js"}