{"version":3,"sources":["../../../../src/lib/api/parse-sync.js"],"names":["selectLoader","isLoaderObject","mergeOptions","getArrayBufferOrStringFromDataSync","getLoaders","getLoaderContext","parseSync","data","loaders","options","context","Array","isArray","url","candidateLoaders","loader","parseWithLoaderSync","parseTextSync","Error","name"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,iBAA3B;AACA,SAAQC,cAAR,QAA6B,kCAA7B;AACA,SAAQC,YAAR,QAA2B,+BAA3B;AACA,SAAQC,kCAAR,QAAiD,0BAAjD;AACA,SAAQC,UAAR,EAAoBC,gBAApB,QAA2C,oCAA3C;AAEA,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,OAAzB,EAAkCC,OAAlC,EAA2CC,OAA3C,EAAoD;AAGzD,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcJ,OAAd,CAAD,IAA2B,CAACP,cAAc,CAACO,OAAD,CAA9C,EAAyD;AACvDE,IAAAA,OAAO,GAAGD,OAAV;AACAA,IAAAA,OAAO,GAAGD,OAAV;AACAA,IAAAA,OAAO,GAAG,IAAV;AACD;;AAGD,MAAIK,GAAG,GAAG,EAAV;;AACA,MAAI,OAAOH,OAAP,KAAmB,QAAvB,EAAiC;AAC/BG,IAAAA,GAAG,GAAGH,OAAN;AACAA,IAAAA,OAAO,GAAG,IAAV;AACD;;AAEDD,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAIA,MAAMK,gBAAgB,GAAGV,UAAU,CAACI,OAAD,EAAUE,OAAV,CAAnC;AACA,MAAMK,MAAM,GAAGf,YAAY,CAACO,IAAD,EAAOO,gBAAP,EAAyBL,OAAzB,EAAkC;AAACI,IAAAA,GAAG,EAAHA;AAAD,GAAlC,CAA3B;;AAEA,MAAI,CAACE,MAAL,EAAa;AACX,WAAO,IAAP;AACD;;AAGDN,EAAAA,OAAO,GAAGP,YAAY,CAACa,MAAD,EAASN,OAAT,EAAkBI,GAAlB,CAAtB;AAEAH,EAAAA,OAAO,GAAGL,gBAAgB,CAAC;AAACQ,IAAAA,GAAG,EAAHA,GAAD;AAAMP,IAAAA,SAAS,EAATA,SAAN;AAAiBE,IAAAA,OAAO,EAAPA;AAAjB,GAAD,EAA4BC,OAA5B,CAA1B;AAEA,SAAOO,mBAAmB,CAACD,MAAD,EAASR,IAAT,EAAeE,OAAf,EAAwBC,OAAxB,CAA1B;AACD;;AAGD,SAASM,mBAAT,CAA6BD,MAA7B,EAAqCR,IAArC,EAA2CE,OAA3C,EAAoDC,OAApD,EAA6D;AAC3DH,EAAAA,IAAI,GAAGJ,kCAAkC,CAACI,IAAD,EAAOQ,MAAP,CAAzC;;AAEA,MAAIA,MAAM,CAACE,aAAP,IAAwB,OAAOV,IAAP,KAAgB,QAA5C,EAAsD;AACpD,WAAOQ,MAAM,CAACE,aAAP,CAAqBV,IAArB,EAA2BE,OAA3B,EAAoCC,OAApC,EAA6CK,MAA7C,CAAP;AACD;;AAED,MAAIA,MAAM,CAACT,SAAX,EAAsB;AACpB,WAAOS,MAAM,CAACT,SAAP,CAAiBC,IAAjB,EAAuBE,OAAvB,EAAgCC,OAAhC,EAAyCK,MAAzC,CAAP;AACD;;AAGD,QAAM,IAAIG,KAAJ,WAEFH,MAAM,CAACI,IAFL,qFAGuET,OAAO,CAACG,GAAR,IAAe,EAHtF,EAAN;AAKD","sourcesContent":["import {selectLoader} from './select-loader';\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {mergeOptions} from '../loader-utils/merge-options';\nimport {getArrayBufferOrStringFromDataSync} from '../loader-utils/get-data';\nimport {getLoaders, getLoaderContext} from '../loader-utils/get-loader-context';\n\nexport function parseSync(data, loaders, options, context) {\n  // Signature: parseSync(data, options, url)\n  // Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  // DEPRECATED - backwards compatibility, last param can be URL...\n  let url = '';\n  if (typeof context === 'string') {\n    url = context;\n    context = null;\n  }\n\n  options = options || {};\n\n  // Chooses a loader (and normalizes it)\n  // Also use any loaders in the context, new loaders take priority\n  const candidateLoaders = getLoaders(loaders, context);\n  const loader = selectLoader(data, candidateLoaders, options, {url});\n  // Note: if nothrow option was set, it is possible that no loader was found, if so just return null\n  if (!loader) {\n    return null;\n  }\n\n  // Normalize options\n  options = mergeOptions(loader, options, url);\n\n  context = getLoaderContext({url, parseSync, loaders}, options);\n\n  return parseWithLoaderSync(loader, data, options, context);\n}\n\n// TODO - should accept loader.parseSync/parse and generate 1 chunk asyncIterator\nfunction parseWithLoaderSync(loader, data, options, context) {\n  data = getArrayBufferOrStringFromDataSync(data, loader);\n\n  if (loader.parseTextSync && typeof data === 'string') {\n    return loader.parseTextSync(data, options, context, loader);\n  }\n\n  if (loader.parseSync) {\n    return loader.parseSync(data, options, context, loader);\n  }\n\n  // TBD - If synchronous parser not available, return null\n  throw new Error(\n    `${\n      loader.name\n    } loader: 'parseSync' not supported by this loader, use 'parse' instead. ${context.url || ''}`\n  );\n}\n"],"file":"parse-sync.js"}