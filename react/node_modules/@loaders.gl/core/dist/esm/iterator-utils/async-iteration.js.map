{"version":3,"sources":["../../../src/iterator-utils/async-iteration.js"],"names":["concatenateArrayBuffers","forEach","iterator","visitor","next","done","value","cancel","concatenateChunksAsync","asyncIterator","arrayBuffer","ArrayBuffer","string","chunk"],"mappings":";;;AAAA,SAAQA,uBAAR,QAAsC,uCAAtC;AAgBA,gBAAsBC,OAAtB;AAAA;AAAA;;;wDAAO,iBAAuBC,QAAvB,EAAiCC,OAAjC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEE,IAFF;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAGyBD,QAAQ,CAACE,IAAT,EAHzB;;AAAA;AAAA;AAGIC,YAAAA,IAHJ,wBAGIA,IAHJ;AAGUC,YAAAA,KAHV,wBAGUA,KAHV;;AAAA,iBAICD,IAJD;AAAA;AAAA;AAAA;;AAKDH,YAAAA,QAAQ,UAAR;AALC;;AAAA;AAQGK,YAAAA,MARH,GAQYJ,OAAO,CAACG,KAAD,CARnB;;AAAA,iBASCC,MATD;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAuBP,gBAAsBC,sBAAtB;AAAA;AAAA;;;uEAAO,kBAAsCC,aAAtC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACDC,YAAAA,WADC,GACa,IAAIC,WAAJ,CAAgB,CAAhB,CADb;AAEDC,YAAAA,MAFC,GAEQ,EAFR;AAAA;AAAA;AAAA;AAAA,uCAGqBH,aAHrB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAGYI,YAAAA,KAHZ;;AAIH,gBAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7BD,cAAAA,MAAM,IAAIC,KAAV;AACD,aAFD,MAEO;AACLH,cAAAA,WAAW,GAAGV,uBAAuB,CAACU,WAAD,EAAcG,KAAd,CAArC;AACD;;AARE;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,8CAUED,MAAM,IAAIF,WAVZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import {concatenateArrayBuffers} from '../javascript-utils/memory-copy-utils';\n\n// GENERAL UTILITIES\n\n/**\n * Iterate over async iterator, without resetting iterator if end is not reached\n * - forEach intentionally does not reset iterator if exiting loop prematurely\n *   so that iteration can continue in a second loop\n * - It is recommended to use a standard for-await as last loop to ensure\n *   iterator gets properly reset\n *\n * TODO - optimize using sync iteration if argument is an Iterable?\n *\n * @param iterator\n * @param visitor\n */\nexport async function forEach(iterator, visitor) {\n  // eslint-disable-next-line\n  while (true) {\n    const {done, value} = await iterator.next();\n    if (done) {\n      iterator.return();\n      return;\n    }\n    const cancel = visitor(value);\n    if (cancel) {\n      return;\n    }\n  }\n}\n\n// Breaking big data into iterable chunks, concatenating iterable chunks into big data objects\n\n/**\n * Concatenates all data chunks yielded by an (async) iterator\n * Supports strings and ArrayBuffers\n *\n * This function can e.g. be used to enable atomic parsers to work on (async) iterator inputs\n */\nexport async function concatenateChunksAsync(asyncIterator) {\n  let arrayBuffer = new ArrayBuffer(0);\n  let string = '';\n  for await (const chunk of asyncIterator) {\n    if (typeof chunk === 'string') {\n      string += chunk;\n    } else {\n      arrayBuffer = concatenateArrayBuffers(arrayBuffer, chunk);\n    }\n  }\n  return string || arrayBuffer;\n}\n"],"file":"async-iteration.js"}