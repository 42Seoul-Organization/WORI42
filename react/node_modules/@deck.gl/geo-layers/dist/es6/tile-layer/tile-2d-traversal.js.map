{"version":3,"sources":["../../../src/tile-layer/tile-2d-traversal.js"],"names":["CullingVolume","Plane","AxisAlignedBoundingBox","TILE_SIZE","MAX_MAPS","OSMNode","constructor","x","y","z","children","_children","update","params","viewport","cullingVolume","elevationBounds","minZ","maxZ","offset","boundingVolume","getBoundingVolume","isInside","computeVisibility","childVisible","distance","distanceTo","cameraPosition","scale","height","Math","floor","log2","selected","child","getSelected","result","push","node","zRange","worldOffset","pow","extent","originX","originY","getOSMTileIndices","planes","Object","values","getFrustumPlanes","map","normal","clone","negate","unitsPerMeter","distanceScales","elevationMin","elevationMax","pitch","root","traversalParams","subViewports","length"],"mappings":"AACA,SAAQA,aAAR,EAAuBC,KAAvB,EAA8BC,sBAA9B,QAA2D,kBAA3D;AAEA,MAAMC,SAAS,GAAG,GAAlB;AAEA,MAAMC,QAAQ,GAAG,CAAjB;;AAEA,MAAMC,OAAN,CAAc;AACZC,EAAAA,WAAW,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAU;AACnB,SAAKF,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACD;;AAED,MAAIC,QAAJ,GAAe;AACb,QAAI,CAAC,KAAKC,SAAV,EAAqB;AACnB,YAAMJ,CAAC,GAAG,KAAKA,CAAL,GAAS,CAAnB;AACA,YAAMC,CAAC,GAAG,KAAKA,CAAL,GAAS,CAAnB;AACA,YAAMC,CAAC,GAAG,KAAKA,CAAL,GAAS,CAAnB;AACA,WAAKE,SAAL,GAAiB,CACf,IAAIN,OAAJ,CAAYE,CAAZ,EAAeC,CAAf,EAAkBC,CAAlB,CADe,EAEf,IAAIJ,OAAJ,CAAYE,CAAZ,EAAeC,CAAC,GAAG,CAAnB,EAAsBC,CAAtB,CAFe,EAGf,IAAIJ,OAAJ,CAAYE,CAAC,GAAG,CAAhB,EAAmBC,CAAnB,EAAsBC,CAAtB,CAHe,EAIf,IAAIJ,OAAJ,CAAYE,CAAC,GAAG,CAAhB,EAAmBC,CAAC,GAAG,CAAvB,EAA0BC,CAA1B,CAJe,CAAjB;AAMD;;AACD,WAAO,KAAKE,SAAZ;AACD;;AAEDC,EAAAA,MAAM,CAACC,MAAD,EAAS;AACb,UAAM;AAACC,MAAAA,QAAD;AAAWC,MAAAA,aAAX;AAA0BC,MAAAA,eAA1B;AAA2CC,MAAAA,IAA3C;AAAiDC,MAAAA,IAAjD;AAAuDC,MAAAA;AAAvD,QAAiEN,MAAvE;AACA,UAAMO,cAAc,GAAG,KAAKC,iBAAL,CAAuBL,eAAvB,EAAwCG,MAAxC,CAAvB;AAGA,UAAMG,QAAQ,GAAGP,aAAa,CAACQ,iBAAd,CAAgCH,cAAhC,CAAjB;;AACA,QAAIE,QAAQ,GAAG,CAAf,EAAkB;AAChB,aAAO,KAAP;AACD;;AAGD,QAAI,CAAC,KAAKE,YAAV,EAAwB;AACtB,UAAI;AAACf,QAAAA;AAAD,UAAM,IAAV;;AACA,UAAIA,CAAC,GAAGS,IAAJ,IAAYT,CAAC,IAAIQ,IAArB,EAA2B;AAGzB,cAAMQ,QAAQ,GACXL,cAAc,CAACM,UAAf,CAA0BZ,QAAQ,CAACa,cAAnC,IAAqDb,QAAQ,CAACc,KAA/D,GAAwEd,QAAQ,CAACe,MADnF;AAEApB,QAAAA,CAAC,IAAIqB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,IAAL,CAAUP,QAAV,CAAX,CAAL;AACD;;AACD,UAAIhB,CAAC,IAAIS,IAAT,EAAe;AAEb,aAAKe,QAAL,GAAgB,IAAhB;AACA,eAAO,IAAP;AACD;AACF;;AAGD,SAAKA,QAAL,GAAgB,KAAhB;AACA,SAAKT,YAAL,GAAoB,IAApB;;AACA,SAAK,MAAMU,KAAX,IAAoB,KAAKxB,QAAzB,EAAmC;AACjCwB,MAAAA,KAAK,CAACtB,MAAN,CAAaC,MAAb;AACD;;AACD,WAAO,IAAP;AACD;;AAEDsB,EAAAA,WAAW,CAACC,MAAM,GAAG,EAAV,EAAc;AACvB,QAAI,KAAKH,QAAT,EAAmB;AACjBG,MAAAA,MAAM,CAACC,IAAP,CAAY,IAAZ;AACD;;AACD,QAAI,KAAK1B,SAAT,EAAoB;AAClB,WAAK,MAAM2B,IAAX,IAAmB,KAAK3B,SAAxB,EAAmC;AACjC2B,QAAAA,IAAI,CAACH,WAAL,CAAiBC,MAAjB;AACD;AACF;;AACD,WAAOA,MAAP;AACD;;AAEDf,EAAAA,iBAAiB,CAACkB,MAAD,EAASC,WAAT,EAAsB;AACrC,UAAMZ,KAAK,GAAGE,IAAI,CAACW,GAAL,CAAS,CAAT,EAAY,KAAKhC,CAAjB,CAAd;AACA,UAAMiC,MAAM,GAAGvC,SAAS,GAAGyB,KAA3B;AACA,UAAMe,OAAO,GAAG,KAAKpC,CAAL,GAASmC,MAAT,GAAkBF,WAAW,GAAGrC,SAAhD;AAEA,UAAMyC,OAAO,GAAGzC,SAAS,GAAG,CAAC,KAAKK,CAAL,GAAS,CAAV,IAAekC,MAA3C;AAEA,WAAO,IAAIxC,sBAAJ,CACL,CAACyC,OAAD,EAAUC,OAAV,EAAmBL,MAAM,CAAC,CAAD,CAAzB,CADK,EAEL,CAACI,OAAO,GAAGD,MAAX,EAAmBE,OAAO,GAAGF,MAA7B,EAAqCH,MAAM,CAAC,CAAD,CAA3C,CAFK,CAAP;AAID;;AAjFW;;AAoFd,OAAO,SAASM,iBAAT,CAA2B/B,QAA3B,EAAqCI,IAArC,EAA2CqB,MAA3C,EAAmD;AAExD,QAAMO,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAclC,QAAQ,CAACmC,gBAAT,EAAd,EAA2CC,GAA3C,CACb,CAAC;AAACC,IAAAA,MAAD;AAAS1B,IAAAA;AAAT,GAAD,KAAwB,IAAIxB,KAAJ,CAAUkD,MAAM,CAACC,KAAP,GAAeC,MAAf,EAAV,EAAmC5B,QAAnC,CADX,CAAf;AAGA,QAAMV,aAAa,GAAG,IAAIf,aAAJ,CAAkB8C,MAAlB,CAAtB;AAGA,QAAMQ,aAAa,GAAGxC,QAAQ,CAACyC,cAAT,CAAwBD,aAAxB,CAAsC,CAAtC,CAAtB;AACA,QAAME,YAAY,GAAIjB,MAAM,IAAIA,MAAM,CAAC,CAAD,CAAN,GAAYe,aAAvB,IAAyC,CAA9D;AACA,QAAMG,YAAY,GAAIlB,MAAM,IAAIA,MAAM,CAAC,CAAD,CAAN,GAAYe,aAAvB,IAAyC,CAA9D;AAGA,QAAMrC,IAAI,GAAGH,QAAQ,CAAC4C,KAAT,IAAkB,EAAlB,GAAuBxC,IAAvB,GAA8B,CAA3C;AAEA,QAAMyC,IAAI,GAAG,IAAItD,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAb;AACA,QAAMuD,eAAe,GAAG;AACtB9C,IAAAA,QADsB;AAEtBC,IAAAA,aAFsB;AAGtBC,IAAAA,eAAe,EAAE,CAACwC,YAAD,EAAeC,YAAf,CAHK;AAItBxC,IAAAA,IAJsB;AAKtBC,IAAAA,IALsB;AAOtBC,IAAAA,MAAM,EAAE;AAPc,GAAxB;AAUAwC,EAAAA,IAAI,CAAC/C,MAAL,CAAYgD,eAAZ;;AAEA,MAAI9C,QAAQ,CAAC+C,YAAT,IAAyB/C,QAAQ,CAAC+C,YAAT,CAAsBC,MAAtB,GAA+B,CAA5D,EAA+D;AAE7DF,IAAAA,eAAe,CAACzC,MAAhB,GAAyB,CAAC,CAA1B;;AACA,WAAOwC,IAAI,CAAC/C,MAAL,CAAYgD,eAAZ,CAAP,EAAqC;AACnC,UAAI,EAAEA,eAAe,CAACzC,MAAlB,GAA2B,CAACf,QAAhC,EAA0C;AACxC;AACD;AACF;;AACDwD,IAAAA,eAAe,CAACzC,MAAhB,GAAyB,CAAzB;;AACA,WAAOwC,IAAI,CAAC/C,MAAL,CAAYgD,eAAZ,CAAP,EAAqC;AACnC,UAAI,EAAEA,eAAe,CAACzC,MAAlB,GAA2Bf,QAA/B,EAAyC;AACvC;AACD;AACF;AACF;;AAED,SAAOuD,IAAI,CAACxB,WAAL,EAAP;AACD","sourcesContent":["/* eslint-disable complexity */\nimport {CullingVolume, Plane, AxisAlignedBoundingBox} from '@math.gl/culling';\n\nconst TILE_SIZE = 512;\n// number of world copies to check\nconst MAX_MAPS = 3;\n\nclass OSMNode {\n  constructor(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  get children() {\n    if (!this._children) {\n      const x = this.x * 2;\n      const y = this.y * 2;\n      const z = this.z + 1;\n      this._children = [\n        new OSMNode(x, y, z),\n        new OSMNode(x, y + 1, z),\n        new OSMNode(x + 1, y, z),\n        new OSMNode(x + 1, y + 1, z)\n      ];\n    }\n    return this._children;\n  }\n\n  update(params) {\n    const {viewport, cullingVolume, elevationBounds, minZ, maxZ, offset} = params;\n    const boundingVolume = this.getBoundingVolume(elevationBounds, offset);\n\n    // First, check if this tile is visible\n    const isInside = cullingVolume.computeVisibility(boundingVolume);\n    if (isInside < 0) {\n      return false;\n    }\n\n    // Avoid loading overlapping tiles - if a descendant is requested, do not request the ancester\n    if (!this.childVisible) {\n      let {z} = this;\n      if (z < maxZ && z >= minZ) {\n        // Adjust LOD\n        // If the tile is far enough from the camera, accept a lower zoom level\n        const distance =\n          (boundingVolume.distanceTo(viewport.cameraPosition) * viewport.scale) / viewport.height;\n        z += Math.floor(Math.log2(distance));\n      }\n      if (z >= maxZ) {\n        // LOD is acceptable\n        this.selected = true;\n        return true;\n      }\n    }\n\n    // LOD is not enough, recursively test child tiles\n    this.selected = false;\n    this.childVisible = true;\n    for (const child of this.children) {\n      child.update(params);\n    }\n    return true;\n  }\n\n  getSelected(result = []) {\n    if (this.selected) {\n      result.push(this);\n    }\n    if (this._children) {\n      for (const node of this._children) {\n        node.getSelected(result);\n      }\n    }\n    return result;\n  }\n\n  getBoundingVolume(zRange, worldOffset) {\n    const scale = Math.pow(2, this.z);\n    const extent = TILE_SIZE / scale;\n    const originX = this.x * extent + worldOffset * TILE_SIZE;\n    // deck's common space is y-flipped\n    const originY = TILE_SIZE - (this.y + 1) * extent;\n\n    return new AxisAlignedBoundingBox(\n      [originX, originY, zRange[0]],\n      [originX + extent, originY + extent, zRange[1]]\n    );\n  }\n}\n\nexport function getOSMTileIndices(viewport, maxZ, zRange) {\n  // Get the culling volume of the current camera\n  const planes = Object.values(viewport.getFrustumPlanes()).map(\n    ({normal, distance}) => new Plane(normal.clone().negate(), distance)\n  );\n  const cullingVolume = new CullingVolume(planes);\n\n  // Project zRange from meters to common space\n  const unitsPerMeter = viewport.distanceScales.unitsPerMeter[2];\n  const elevationMin = (zRange && zRange[0] * unitsPerMeter) || 0;\n  const elevationMax = (zRange && zRange[1] * unitsPerMeter) || 0;\n\n  // Always load at the current zoom level if pitch is small\n  const minZ = viewport.pitch <= 60 ? maxZ : 0;\n\n  const root = new OSMNode(0, 0, 0);\n  const traversalParams = {\n    viewport,\n    cullingVolume,\n    elevationBounds: [elevationMin, elevationMax],\n    minZ,\n    maxZ,\n    // num. of worlds from the center. For repeated maps\n    offset: 0\n  };\n\n  root.update(traversalParams);\n\n  if (viewport.subViewports && viewport.subViewports.length > 1) {\n    // Check worlds in repeated maps\n    traversalParams.offset = -1;\n    while (root.update(traversalParams)) {\n      if (--traversalParams.offset < -MAX_MAPS) {\n        break;\n      }\n    }\n    traversalParams.offset = 1;\n    while (root.update(traversalParams)) {\n      if (++traversalParams.offset > MAX_MAPS) {\n        break;\n      }\n    }\n  }\n\n  return root.getSelected();\n}\n"],"file":"tile-2d-traversal.js"}