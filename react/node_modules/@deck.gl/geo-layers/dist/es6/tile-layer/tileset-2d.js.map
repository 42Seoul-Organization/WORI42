{"version":3,"sources":["../../../src/tile-layer/tileset-2d.js"],"names":["Tile2DHeader","getTileIndices","tileToBoundingBox","RequestScheduler","TILE_STATE_UNKNOWN","TILE_STATE_VISIBLE","TILE_STATE_PLACEHOLDER","TILE_STATE_HIDDEN","TILE_STATE_SELECTED","STRATEGY_NEVER","STRATEGY_REPLACE","STRATEGY_DEFAULT","DEFAULT_CACHE_SCALE","Tileset2D","constructor","opts","_getTileData","getTileData","onTileError","onTileLoad","tile","maxCacheByteSize","_cacheByteSize","byteLength","_resizeCache","_requestScheduler","maxRequests","throttleRequests","_cache","Map","_tiles","_dirty","_viewport","_selectedTiles","_frameNumber","setOptions","tiles","selectedTiles","isLoaded","every","Object","assign","Number","isFinite","maxZoom","_maxZoom","Math","floor","minZoom","_minZoom","ceil","update","viewport","zRange","equals","tileIndices","map","index","_getTile","_rebuildTree","changed","updateTileStates","tileSize","extent","getTileMetadata","x","y","z","bbox","getParentIndex","tileIndex","_updateTileStates","values","isVisible","Boolean","state","isSelected","parent","children","length","_getNearestAncestor","push","refinementStrategy","getPlaceholderInAncestors","needsPlaceholder","getPlaceholderInChildren","maxCacheSize","Infinity","overflown","size","tileId","delete","Array","from","sort","t1","t2","create","get","loadData","set","isCancelled","t","max","child"],"mappings":"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","sourcesContent":["import Tile2DHeader from './tile-2d-header';\nimport {getTileIndices, tileToBoundingBox} from './utils';\nimport {RequestScheduler} from '@loaders.gl/loader-utils';\n\nconst TILE_STATE_UNKNOWN = 0;\nconst TILE_STATE_VISIBLE = 1;\n/*\n   show cached parent tile if children are loading\n   +-----------+       +-----+            +-----+-----+\n   |           |       |     |            |     |     |\n   |           |       |     |            |     |     |\n   |           |  -->  +-----+-----+  ->  +-----+-----+\n   |           |             |     |      |     |     |\n   |           |             |     |      |     |     |\n   +-----------+             +-----+      +-----+-----+\n\n   show cached children tiles when parent is loading\n   +-------+----       +------------\n   |       |           |\n   |       |           |\n   |       |           |\n   +-------+----  -->  |\n   |       |           |\n */\nconst TILE_STATE_PLACEHOLDER = 3;\nconst TILE_STATE_HIDDEN = 4;\n// tiles that should be displayed in the current viewport\nconst TILE_STATE_SELECTED = 5;\n\nexport const STRATEGY_NEVER = 'never';\nexport const STRATEGY_REPLACE = 'no-overlap';\nexport const STRATEGY_DEFAULT = 'best-available';\n\nconst DEFAULT_CACHE_SCALE = 5;\n\n/**\n * Manages loading and purging of tiles data. This class caches recently visited tiles\n * and only create new tiles if they are present.\n */\n\nexport default class Tileset2D {\n  /**\n   * Takes in a function that returns tile data, a cache size, and a max and a min zoom level.\n   * Cache size defaults to 5 * number of tiles in the current viewport\n   */\n  constructor(opts) {\n    this.opts = opts;\n    this._getTileData = opts.getTileData;\n\n    this.onTileError = opts.onTileError;\n    this.onTileLoad = tile => {\n      opts.onTileLoad(tile);\n      if (this.opts.maxCacheByteSize) {\n        this._cacheByteSize += tile.byteLength;\n        this._resizeCache();\n      }\n    };\n\n    this._requestScheduler = new RequestScheduler({\n      maxRequests: opts.maxRequests,\n      throttleRequests: opts.maxRequests > 0\n    });\n\n    // Maps tile id in string {z}-{x}-{y} to a Tile object\n    this._cache = new Map();\n    this._tiles = [];\n    this._dirty = false;\n    this._cacheByteSize = 0;\n\n    // Cache the last processed viewport\n    this._viewport = null;\n    this._selectedTiles = null;\n    this._frameNumber = 0;\n\n    this.setOptions(opts);\n  }\n\n  /* Public API */\n  get tiles() {\n    return this._tiles;\n  }\n\n  get selectedTiles() {\n    return this._selectedTiles;\n  }\n\n  get isLoaded() {\n    return this._selectedTiles.every(tile => tile.isLoaded);\n  }\n\n  setOptions(opts) {\n    Object.assign(this.opts, opts);\n    if (Number.isFinite(opts.maxZoom)) {\n      this._maxZoom = Math.floor(opts.maxZoom);\n    }\n    if (Number.isFinite(opts.minZoom)) {\n      this._minZoom = Math.ceil(opts.minZoom);\n    }\n  }\n\n  /**\n   * Update the cache with the given viewport and triggers callback onUpdate.\n   * @param {*} viewport\n   * @param {*} onUpdate\n   */\n  update(viewport, {zRange} = {}) {\n    if (!viewport.equals(this._viewport)) {\n      this._viewport = viewport;\n      const tileIndices = this.getTileIndices({\n        viewport,\n        maxZoom: this._maxZoom,\n        minZoom: this._minZoom,\n        zRange\n      });\n      this._selectedTiles = tileIndices.map(index => this._getTile(index, true));\n\n      if (this._dirty) {\n        // Some new tiles are added\n        this._rebuildTree();\n      }\n    }\n\n    // Update tile states\n    const changed = this.updateTileStates();\n\n    if (this._dirty) {\n      // cache size is either the user defined maxSize or 5 * number of current tiles in the viewport.\n      this._resizeCache();\n    }\n\n    if (changed) {\n      this._frameNumber++;\n    }\n    return this._frameNumber;\n  }\n\n  /* Public interface for subclassing */\n\n  // Returns array of {x, y, z}\n  getTileIndices({viewport, maxZoom, minZoom, zRange}) {\n    const {tileSize, extent} = this.opts;\n    return getTileIndices({viewport, maxZoom, minZoom, zRange, tileSize, extent});\n  }\n\n  // Add custom metadata to tiles\n  getTileMetadata({x, y, z}) {\n    return {bbox: tileToBoundingBox(this._viewport, x, y, z)};\n  }\n\n  // Returns {x, y, z} of the parent tile\n  getParentIndex(tileIndex) {\n    // Perf: mutate the input object to avoid GC\n    tileIndex.x = Math.floor(tileIndex.x / 2);\n    tileIndex.y = Math.floor(tileIndex.y / 2);\n    tileIndex.z -= 1;\n    return tileIndex;\n  }\n\n  // Returns true if any tile's visibility changed\n  updateTileStates() {\n    this._updateTileStates(this.selectedTiles);\n\n    let changed = false;\n    for (const tile of this._cache.values()) {\n      const isVisible = Boolean(tile.state & TILE_STATE_VISIBLE);\n      if (tile.isVisible !== isVisible) {\n        changed = true;\n        tile.isVisible = isVisible;\n      }\n\n      // isSelected used in request scheduler\n      tile.isSelected = tile.state === TILE_STATE_SELECTED;\n    }\n\n    return changed;\n  }\n\n  /* Private methods */\n\n  // This needs to be called every time some tiles have been added/removed from cache\n  _rebuildTree() {\n    const {_cache} = this;\n\n    // Reset states\n    for (const tile of _cache.values()) {\n      tile.parent = null;\n      tile.children.length = 0;\n    }\n\n    // Rebuild tree\n    for (const tile of _cache.values()) {\n      const parent = this._getNearestAncestor(tile.x, tile.y, tile.z);\n      tile.parent = parent;\n      if (parent) {\n        parent.children.push(tile);\n      }\n    }\n  }\n\n  // A selected tile is always visible.\n  // Never show two overlapping tiles.\n  // If a selected tile is loading, try showing a cached ancester with the closest z\n  // If a selected tile is loading, and no ancester is shown - try showing cached\n  // descendants with the closest z\n  _updateTileStates(selectedTiles) {\n    const {_cache} = this;\n    const refinementStrategy = this.opts.refinementStrategy || STRATEGY_DEFAULT;\n\n    // Reset states\n    for (const tile of _cache.values()) {\n      tile.state = TILE_STATE_UNKNOWN;\n    }\n\n    // For all the selected && pending tiles:\n    // - pick the closest ancestor as placeholder\n    // - if no ancestor is visible, pick the closest children as placeholder\n    for (const tile of selectedTiles) {\n      tile.state = TILE_STATE_SELECTED;\n    }\n\n    if (refinementStrategy === STRATEGY_NEVER) {\n      return;\n    }\n    for (const tile of selectedTiles) {\n      getPlaceholderInAncestors(tile, refinementStrategy);\n    }\n    for (const tile of selectedTiles) {\n      if (needsPlaceholder(tile)) {\n        getPlaceholderInChildren(tile);\n      }\n    }\n  }\n\n  /**\n   * Clear tiles that are not visible when the cache is full\n   */\n  /* eslint-disable complexity */\n  _resizeCache() {\n    const {_cache, opts} = this;\n\n    const maxCacheSize =\n      opts.maxCacheSize ||\n      (opts.maxCacheByteSize ? Infinity : DEFAULT_CACHE_SCALE * this.selectedTiles.length);\n    const maxCacheByteSize = opts.maxCacheByteSize || Infinity;\n\n    const overflown = _cache.size > maxCacheSize || this._cacheByteSize > maxCacheByteSize;\n\n    if (overflown) {\n      for (const [tileId, tile] of _cache) {\n        if (!tile.isVisible) {\n          // delete tile\n          this._cacheByteSize -= opts.maxCacheByteSize ? tile.byteLength : 0;\n          _cache.delete(tileId);\n        }\n        if (_cache.size <= maxCacheSize && this._cacheByteSize <= maxCacheByteSize) {\n          break;\n        }\n      }\n      this._rebuildTree();\n      this._dirty = true;\n    }\n    if (this._dirty) {\n      this._tiles = Array.from(this._cache.values())\n        // sort by zoom level so that smaller tiles are displayed on top\n        .sort((t1, t2) => t1.z - t2.z);\n\n      this._dirty = false;\n    }\n  }\n  /* eslint-enable complexity */\n\n  _getTile({x, y, z}, create) {\n    const tileId = `${x},${y},${z}`;\n    let tile = this._cache.get(tileId);\n\n    if (!tile && create) {\n      tile = new Tile2DHeader({\n        x,\n        y,\n        z,\n        onTileLoad: this.onTileLoad,\n        onTileError: this.onTileError\n      });\n      Object.assign(tile, this.getTileMetadata(tile));\n      tile.loadData(this._getTileData, this._requestScheduler);\n      this._cache.set(tileId, tile);\n      this._dirty = true;\n    } else if (tile && tile.isCancelled) {\n      tile.loadData(this._getTileData, this._requestScheduler);\n    }\n\n    return tile;\n  }\n\n  _getNearestAncestor(x, y, z) {\n    const {_minZoom = 0} = this;\n    let index = {x, y, z};\n\n    while (index.z > _minZoom) {\n      index = this.getParentIndex(index);\n      const parent = this._getTile(index);\n      if (parent) {\n        return parent;\n      }\n    }\n    return null;\n  }\n}\n\n// A selected tile needs placeholder from its children if\n// - it is not loaded\n// - none of its ancestors is visible and loaded\nfunction needsPlaceholder(tile) {\n  let t = tile;\n  while (t) {\n    if (t.state & (TILE_STATE_VISIBLE === 0)) {\n      return true;\n    }\n    if (t.isLoaded) {\n      return false;\n    }\n    t = t.parent;\n  }\n  return true;\n}\n\nfunction getPlaceholderInAncestors(tile, refinementStrategy) {\n  let parent;\n  let state = TILE_STATE_PLACEHOLDER;\n  while ((parent = tile.parent)) {\n    if (tile.isLoaded) {\n      // If a tile is loaded, mark all its ancestors as hidden\n      state = TILE_STATE_HIDDEN;\n      if (refinementStrategy === STRATEGY_DEFAULT) {\n        return;\n      }\n    }\n    parent.state = Math.max(parent.state, state);\n    tile = parent;\n  }\n}\n\n// Recursively set children as placeholder\nfunction getPlaceholderInChildren(tile) {\n  for (const child of tile.children) {\n    child.state = Math.max(child.state, TILE_STATE_PLACEHOLDER);\n    if (!child.isLoaded) {\n      getPlaceholderInChildren(child);\n    }\n  }\n}\n"],"file":"tileset-2d.js"}