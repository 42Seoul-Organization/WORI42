{"version":3,"sources":["../../../src/tile-layer/tile-layer.js"],"names":["CompositeLayer","_flatten","flatten","GeoJsonLayer","Tileset2D","STRATEGY_DEFAULT","urlType","getURLFromTemplate","defaultProps","data","dataComparator","equals","renderSubLayers","type","value","props","compare","getTileData","optional","onViewportLoad","onTileLoad","tile","onTileError","err","console","error","extent","tileSize","maxZoom","minZoom","maxCacheSize","maxCacheByteSize","refinementStrategy","zRange","maxRequests","TileLayer","initializeState","state","tiles","isLoaded","tileset","selectedTiles","every","layers","layer","shouldUpdateState","changeFlags","somethingChanged","updateState","oldProps","context","createTileCache","dataChanged","updateTriggersChanged","all","bind","_onTileLoad","_onTileError","setState","propsChanged","setOptions","forEach","_updateTileset","frameNumber","update","viewport","loadingStateChanged","tilesetChanged","map","getCurrentLayer","isVisible","setNeedsUpdate","fetch","url","getHighlightedObjectIndex","getPickingInfo","info","sourceLayer","renderLayers","visible","highlightedObjectIndex","Object","assign","id","x","y","z","_offset","Boolean","clone","layerName"],"mappings":"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","sourcesContent":["import {CompositeLayer, _flatten as flatten} from '@deck.gl/core';\nimport {GeoJsonLayer} from '@deck.gl/layers';\n\nimport Tileset2D, {STRATEGY_DEFAULT} from './tileset-2d';\nimport {urlType, getURLFromTemplate} from './utils';\n\nconst defaultProps = {\n  data: [],\n  dataComparator: urlType.equals,\n  renderSubLayers: {type: 'function', value: props => new GeoJsonLayer(props), compare: false},\n  getTileData: {type: 'function', optional: true, value: null, compare: false},\n  // TODO - change to onViewportLoad to align with Tile3DLayer\n  onViewportLoad: {type: 'function', optional: true, value: null, compare: false},\n  onTileLoad: {type: 'function', value: tile => {}, compare: false},\n  // eslint-disable-next-line\n  onTileError: {type: 'function', value: err => console.error(err), compare: false},\n  extent: {type: 'array', optional: true, value: null, compare: true},\n  tileSize: 512,\n  maxZoom: null,\n  minZoom: 0,\n  maxCacheSize: null,\n  maxCacheByteSize: null,\n  refinementStrategy: STRATEGY_DEFAULT,\n  zRange: null,\n  maxRequests: 8\n};\n\nexport default class TileLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      tiles: [],\n      isLoaded: false\n    };\n  }\n\n  get isLoaded() {\n    const {tileset} = this.state;\n    return tileset.selectedTiles.every(\n      tile => tile.layers && tile.layers.every(layer => layer.isLoaded)\n    );\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState({props, oldProps, context, changeFlags}) {\n    let {tileset} = this.state;\n    const createTileCache =\n      !tileset ||\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getTileData));\n\n    if (createTileCache) {\n      const {\n        maxZoom,\n        minZoom,\n        tileSize,\n        maxCacheSize,\n        maxCacheByteSize,\n        refinementStrategy,\n        extent,\n        maxRequests\n      } = props;\n      tileset = new Tileset2D({\n        getTileData: this.getTileData.bind(this),\n        maxCacheSize,\n        maxCacheByteSize,\n        maxZoom,\n        minZoom,\n        tileSize,\n        refinementStrategy,\n        extent,\n        onTileLoad: this._onTileLoad.bind(this),\n        onTileError: this._onTileError.bind(this),\n        maxRequests\n      });\n      this.setState({tileset});\n    } else if (changeFlags.propsChanged || changeFlags.updateTriggersChanged) {\n      tileset.setOptions(props);\n      // if any props changed, delete the cached layers\n      this.state.tileset.tiles.forEach(tile => {\n        tile.layers = null;\n      });\n    }\n\n    this._updateTileset();\n  }\n\n  _updateTileset() {\n    const {tileset} = this.state;\n    const {onViewportLoad, zRange} = this.props;\n    const frameNumber = tileset.update(this.context.viewport, {zRange});\n    const {isLoaded} = tileset;\n\n    const loadingStateChanged = this.state.isLoaded !== isLoaded;\n    const tilesetChanged = this.state.frameNumber !== frameNumber;\n\n    if (isLoaded && onViewportLoad && (loadingStateChanged || tilesetChanged)) {\n      onViewportLoad(tileset.selectedTiles.map(tile => tile.data));\n    }\n\n    if (tilesetChanged) {\n      // Save the tileset frame number - trigger a rerender\n      this.setState({frameNumber});\n    }\n    // Save the loaded state - should not trigger a rerender\n    this.state.isLoaded = isLoaded;\n  }\n\n  _onTileLoad(tile) {\n    const layer = this.getCurrentLayer();\n    layer.props.onTileLoad(tile);\n\n    if (tile.isVisible) {\n      this.setNeedsUpdate();\n    }\n  }\n\n  _onTileError(error, tile) {\n    const layer = this.getCurrentLayer();\n    layer.props.onTileError(error);\n    // errorred tiles should not block rendering, are considered \"loaded\" with empty data\n    layer._updateTileset();\n\n    if (tile.isVisible) {\n      this.setNeedsUpdate();\n    }\n  }\n\n  // Methods for subclass to override\n\n  getTileData(tile) {\n    const {getTileData, fetch, data} = this.props;\n\n    tile.url = getURLFromTemplate(data, tile);\n\n    if (getTileData) {\n      return getTileData(tile);\n    }\n    if (tile.url) {\n      return fetch(tile.url, {layer: this});\n    }\n    return null;\n  }\n\n  renderSubLayers(props) {\n    return this.props.renderSubLayers(props);\n  }\n\n  getHighlightedObjectIndex() {\n    return -1;\n  }\n\n  getPickingInfo({info, sourceLayer}) {\n    info.sourceLayer = sourceLayer;\n    info.tile = sourceLayer.props.tile;\n    return info;\n  }\n\n  renderLayers() {\n    const {visible} = this.props;\n    return this.state.tileset.tiles.map(tile => {\n      // For a tile to be visible:\n      // - parent layer must be visible\n      // - tile must be visible in the current viewport\n      const isVisible = visible && tile.isVisible;\n      const highlightedObjectIndex = this.getHighlightedObjectIndex(tile);\n      // cache the rendered layer in the tile\n      if (!tile.isLoaded) {\n        // no op\n      } else if (!tile.layers) {\n        const layers = this.renderSubLayers(\n          Object.assign({}, this.props, {\n            id: `${this.id}-${tile.x}-${tile.y}-${tile.z}`,\n            data: tile.data,\n            visible: isVisible,\n            _offset: 0,\n            tile,\n            highlightedObjectIndex\n          })\n        );\n        tile.layers = flatten(layers, Boolean);\n      } else if (\n        tile.layers[0] &&\n        (tile.layers[0].props.visible !== isVisible ||\n          tile.layers[0].props.highlightedObjectIndex !== highlightedObjectIndex)\n      ) {\n        tile.layers = tile.layers.map(layer =>\n          layer.clone({visible: isVisible, highlightedObjectIndex})\n        );\n      }\n      return tile.layers;\n    });\n  }\n}\n\nTileLayer.layerName = 'TileLayer';\nTileLayer.defaultProps = defaultProps;\n"],"file":"tile-layer.js"}