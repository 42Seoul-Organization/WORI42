{"version":3,"sources":["../../../src/mvt-layer/mvt-layer.js"],"names":["Matrix4","MVTLoader","load","COORDINATE_SYSTEM","TileLayer","getURLFromTemplate","ClipExtension","WORLD_SIZE","defaultProps","uniqueIdProperty","type","value","highlightedFeatureId","MVTLayer","getTileData","tile","url","props","data","Promise","reject","getLoadOptions","renderSubLayers","worldScale","Math","pow","z","xScale","yScale","xOffset","x","yOffset","y","modelMatrix","scale","autoHighlight","coordinateOrigin","coordinateSystem","CARTESIAN","extensions","onHover","info","pickingEvent","hoveredFeatureId","state","hoveredFeature","object","newHoveredFeatureId","getFeatureUniqueId","setState","getHighlightedObjectIndex","isFeatureIdPresent","isFeatureIdDefined","Array","isArray","featureIdToHighlight","findIndex","feature","properties","id","undefined","layerName"],"mappings":"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","sourcesContent":["import {Matrix4} from 'math.gl';\nimport {MVTLoader} from '@loaders.gl/mvt';\nimport {load} from '@loaders.gl/core';\nimport {COORDINATE_SYSTEM} from '@deck.gl/core';\n\nimport TileLayer from '../tile-layer/tile-layer';\nimport {getURLFromTemplate} from '../tile-layer/utils';\nimport ClipExtension from './clip-extension';\n\nconst WORLD_SIZE = 512;\n\nconst defaultProps = {\n  uniqueIdProperty: {type: 'string', value: ''},\n  highlightedFeatureId: null\n};\n\nexport default class MVTLayer extends TileLayer {\n  getTileData(tile) {\n    const url = getURLFromTemplate(this.props.data, tile);\n    if (!url) {\n      return Promise.reject('Invalid URL');\n    }\n    return load(url, MVTLoader, this.getLoadOptions());\n  }\n\n  renderSubLayers(props) {\n    const {tile} = props;\n    const worldScale = Math.pow(2, tile.z);\n\n    const xScale = WORLD_SIZE / worldScale;\n    const yScale = -xScale;\n\n    const xOffset = (WORLD_SIZE * tile.x) / worldScale;\n    const yOffset = WORLD_SIZE * (1 - tile.y / worldScale);\n\n    const modelMatrix = new Matrix4().scale([xScale, yScale, 1]);\n\n    props.autoHighlight = false;\n    props.modelMatrix = modelMatrix;\n    props.coordinateOrigin = [xOffset, yOffset, 0];\n    props.coordinateSystem = COORDINATE_SYSTEM.CARTESIAN;\n    props.extensions = [...(props.extensions || []), new ClipExtension()];\n\n    return super.renderSubLayers(props);\n  }\n\n  onHover(info, pickingEvent) {\n    const {uniqueIdProperty, autoHighlight} = this.props;\n\n    if (autoHighlight) {\n      const {hoveredFeatureId} = this.state;\n      const hoveredFeature = info.object;\n      let newHoveredFeatureId;\n\n      if (hoveredFeature) {\n        newHoveredFeatureId = getFeatureUniqueId(hoveredFeature, uniqueIdProperty);\n      }\n\n      if (hoveredFeatureId !== newHoveredFeatureId) {\n        this.setState({hoveredFeatureId: newHoveredFeatureId});\n      }\n    }\n\n    return super.onHover(info, pickingEvent);\n  }\n\n  getHighlightedObjectIndex(tile) {\n    const {hoveredFeatureId} = this.state;\n    const {uniqueIdProperty, highlightedFeatureId} = this.props;\n    const {data} = tile;\n\n    const isFeatureIdPresent =\n      isFeatureIdDefined(hoveredFeatureId) || isFeatureIdDefined(highlightedFeatureId);\n\n    if (!isFeatureIdPresent || !Array.isArray(data)) {\n      return -1;\n    }\n\n    const featureIdToHighlight = isFeatureIdDefined(highlightedFeatureId)\n      ? highlightedFeatureId\n      : hoveredFeatureId;\n\n    return data.findIndex(\n      feature => getFeatureUniqueId(feature, uniqueIdProperty) === featureIdToHighlight\n    );\n  }\n}\n\nfunction getFeatureUniqueId(feature, uniqueIdProperty) {\n  if (uniqueIdProperty) {\n    return feature.properties[uniqueIdProperty];\n  }\n\n  if ('id' in feature) {\n    return feature.id;\n  }\n\n  return -1;\n}\n\nfunction isFeatureIdDefined(value) {\n  return value !== undefined && value !== null && value !== '';\n}\n\nMVTLayer.layerName = 'MVTLayer';\nMVTLayer.defaultProps = defaultProps;\n"],"file":"mvt-layer.js"}