{"version":3,"sources":["../../../src/tile-layer/tileset-2d.js"],"names":["Tile2DHeader","getTileIndices","tileToBoundingBox","RequestScheduler","TILE_STATE_UNKNOWN","TILE_STATE_VISIBLE","TILE_STATE_PLACEHOLDER","TILE_STATE_HIDDEN","TILE_STATE_SELECTED","STRATEGY_NEVER","STRATEGY_REPLACE","STRATEGY_DEFAULT","DEFAULT_CACHE_SCALE","Tileset2D","opts","_getTileData","getTileData","onTileError","onTileLoad","tile","maxCacheByteSize","_cacheByteSize","byteLength","_resizeCache","_requestScheduler","maxRequests","throttleRequests","_cache","Map","_tiles","_dirty","_viewport","_selectedTiles","_frameNumber","setOptions","Object","assign","Number","isFinite","maxZoom","_maxZoom","Math","floor","minZoom","_minZoom","ceil","viewport","zRange","equals","tileIndices","map","index","_getTile","_rebuildTree","changed","updateTileStates","tileSize","extent","x","y","z","bbox","tileIndex","_updateTileStates","selectedTiles","values","isVisible","Boolean","state","isSelected","parent","children","length","_getNearestAncestor","push","refinementStrategy","getPlaceholderInAncestors","needsPlaceholder","getPlaceholderInChildren","maxCacheSize","Infinity","overflown","size","tileId","Array","from","sort","t1","t2","create","get","getTileMetadata","loadData","set","isCancelled","getParentIndex","every","isLoaded","t","max","child"],"mappings":"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","sourcesContent":["import Tile2DHeader from './tile-2d-header';\nimport {getTileIndices, tileToBoundingBox} from './utils';\nimport {RequestScheduler} from '@loaders.gl/loader-utils';\n\nconst TILE_STATE_UNKNOWN = 0;\nconst TILE_STATE_VISIBLE = 1;\n/*\n   show cached parent tile if children are loading\n   +-----------+       +-----+            +-----+-----+\n   |           |       |     |            |     |     |\n   |           |       |     |            |     |     |\n   |           |  -->  +-----+-----+  ->  +-----+-----+\n   |           |             |     |      |     |     |\n   |           |             |     |      |     |     |\n   +-----------+             +-----+      +-----+-----+\n\n   show cached children tiles when parent is loading\n   +-------+----       +------------\n   |       |           |\n   |       |           |\n   |       |           |\n   +-------+----  -->  |\n   |       |           |\n */\nconst TILE_STATE_PLACEHOLDER = 3;\nconst TILE_STATE_HIDDEN = 4;\n// tiles that should be displayed in the current viewport\nconst TILE_STATE_SELECTED = 5;\n\nexport const STRATEGY_NEVER = 'never';\nexport const STRATEGY_REPLACE = 'no-overlap';\nexport const STRATEGY_DEFAULT = 'best-available';\n\nconst DEFAULT_CACHE_SCALE = 5;\n\n/**\n * Manages loading and purging of tiles data. This class caches recently visited tiles\n * and only create new tiles if they are present.\n */\n\nexport default class Tileset2D {\n  /**\n   * Takes in a function that returns tile data, a cache size, and a max and a min zoom level.\n   * Cache size defaults to 5 * number of tiles in the current viewport\n   */\n  constructor(opts) {\n    this.opts = opts;\n    this._getTileData = opts.getTileData;\n\n    this.onTileError = opts.onTileError;\n    this.onTileLoad = tile => {\n      opts.onTileLoad(tile);\n      if (this.opts.maxCacheByteSize) {\n        this._cacheByteSize += tile.byteLength;\n        this._resizeCache();\n      }\n    };\n\n    this._requestScheduler = new RequestScheduler({\n      maxRequests: opts.maxRequests,\n      throttleRequests: opts.maxRequests > 0\n    });\n\n    // Maps tile id in string {z}-{x}-{y} to a Tile object\n    this._cache = new Map();\n    this._tiles = [];\n    this._dirty = false;\n    this._cacheByteSize = 0;\n\n    // Cache the last processed viewport\n    this._viewport = null;\n    this._selectedTiles = null;\n    this._frameNumber = 0;\n\n    this.setOptions(opts);\n  }\n\n  /* Public API */\n  get tiles() {\n    return this._tiles;\n  }\n\n  get selectedTiles() {\n    return this._selectedTiles;\n  }\n\n  get isLoaded() {\n    return this._selectedTiles.every(tile => tile.isLoaded);\n  }\n\n  setOptions(opts) {\n    Object.assign(this.opts, opts);\n    if (Number.isFinite(opts.maxZoom)) {\n      this._maxZoom = Math.floor(opts.maxZoom);\n    }\n    if (Number.isFinite(opts.minZoom)) {\n      this._minZoom = Math.ceil(opts.minZoom);\n    }\n  }\n\n  /**\n   * Update the cache with the given viewport and triggers callback onUpdate.\n   * @param {*} viewport\n   * @param {*} onUpdate\n   */\n  update(viewport, {zRange} = {}) {\n    if (!viewport.equals(this._viewport)) {\n      this._viewport = viewport;\n      const tileIndices = this.getTileIndices({\n        viewport,\n        maxZoom: this._maxZoom,\n        minZoom: this._minZoom,\n        zRange\n      });\n      this._selectedTiles = tileIndices.map(index => this._getTile(index, true));\n\n      if (this._dirty) {\n        // Some new tiles are added\n        this._rebuildTree();\n      }\n    }\n\n    // Update tile states\n    const changed = this.updateTileStates();\n\n    if (this._dirty) {\n      // cache size is either the user defined maxSize or 5 * number of current tiles in the viewport.\n      this._resizeCache();\n    }\n\n    if (changed) {\n      this._frameNumber++;\n    }\n    return this._frameNumber;\n  }\n\n  /* Public interface for subclassing */\n\n  // Returns array of {x, y, z}\n  getTileIndices({viewport, maxZoom, minZoom, zRange}) {\n    const {tileSize, extent} = this.opts;\n    return getTileIndices({viewport, maxZoom, minZoom, zRange, tileSize, extent});\n  }\n\n  // Add custom metadata to tiles\n  getTileMetadata({x, y, z}) {\n    return {bbox: tileToBoundingBox(this._viewport, x, y, z)};\n  }\n\n  // Returns {x, y, z} of the parent tile\n  getParentIndex(tileIndex) {\n    // Perf: mutate the input object to avoid GC\n    tileIndex.x = Math.floor(tileIndex.x / 2);\n    tileIndex.y = Math.floor(tileIndex.y / 2);\n    tileIndex.z -= 1;\n    return tileIndex;\n  }\n\n  // Returns true if any tile's visibility changed\n  updateTileStates() {\n    this._updateTileStates(this.selectedTiles);\n\n    let changed = false;\n    for (const tile of this._cache.values()) {\n      const isVisible = Boolean(tile.state & TILE_STATE_VISIBLE);\n      if (tile.isVisible !== isVisible) {\n        changed = true;\n        tile.isVisible = isVisible;\n      }\n\n      // isSelected used in request scheduler\n      tile.isSelected = tile.state === TILE_STATE_SELECTED;\n    }\n\n    return changed;\n  }\n\n  /* Private methods */\n\n  // This needs to be called every time some tiles have been added/removed from cache\n  _rebuildTree() {\n    const {_cache} = this;\n\n    // Reset states\n    for (const tile of _cache.values()) {\n      tile.parent = null;\n      tile.children.length = 0;\n    }\n\n    // Rebuild tree\n    for (const tile of _cache.values()) {\n      const parent = this._getNearestAncestor(tile.x, tile.y, tile.z);\n      tile.parent = parent;\n      if (parent) {\n        parent.children.push(tile);\n      }\n    }\n  }\n\n  // A selected tile is always visible.\n  // Never show two overlapping tiles.\n  // If a selected tile is loading, try showing a cached ancester with the closest z\n  // If a selected tile is loading, and no ancester is shown - try showing cached\n  // descendants with the closest z\n  _updateTileStates(selectedTiles) {\n    const {_cache} = this;\n    const refinementStrategy = this.opts.refinementStrategy || STRATEGY_DEFAULT;\n\n    // Reset states\n    for (const tile of _cache.values()) {\n      tile.state = TILE_STATE_UNKNOWN;\n    }\n\n    // For all the selected && pending tiles:\n    // - pick the closest ancestor as placeholder\n    // - if no ancestor is visible, pick the closest children as placeholder\n    for (const tile of selectedTiles) {\n      tile.state = TILE_STATE_SELECTED;\n    }\n\n    if (refinementStrategy === STRATEGY_NEVER) {\n      return;\n    }\n    for (const tile of selectedTiles) {\n      getPlaceholderInAncestors(tile, refinementStrategy);\n    }\n    for (const tile of selectedTiles) {\n      if (needsPlaceholder(tile)) {\n        getPlaceholderInChildren(tile);\n      }\n    }\n  }\n\n  /**\n   * Clear tiles that are not visible when the cache is full\n   */\n  /* eslint-disable complexity */\n  _resizeCache() {\n    const {_cache, opts} = this;\n\n    const maxCacheSize =\n      opts.maxCacheSize ||\n      (opts.maxCacheByteSize ? Infinity : DEFAULT_CACHE_SCALE * this.selectedTiles.length);\n    const maxCacheByteSize = opts.maxCacheByteSize || Infinity;\n\n    const overflown = _cache.size > maxCacheSize || this._cacheByteSize > maxCacheByteSize;\n\n    if (overflown) {\n      for (const [tileId, tile] of _cache) {\n        if (!tile.isVisible) {\n          // delete tile\n          this._cacheByteSize -= opts.maxCacheByteSize ? tile.byteLength : 0;\n          _cache.delete(tileId);\n        }\n        if (_cache.size <= maxCacheSize && this._cacheByteSize <= maxCacheByteSize) {\n          break;\n        }\n      }\n      this._rebuildTree();\n      this._dirty = true;\n    }\n    if (this._dirty) {\n      this._tiles = Array.from(this._cache.values())\n        // sort by zoom level so that smaller tiles are displayed on top\n        .sort((t1, t2) => t1.z - t2.z);\n\n      this._dirty = false;\n    }\n  }\n  /* eslint-enable complexity */\n\n  _getTile({x, y, z}, create) {\n    const tileId = `${x},${y},${z}`;\n    let tile = this._cache.get(tileId);\n\n    if (!tile && create) {\n      tile = new Tile2DHeader({\n        x,\n        y,\n        z,\n        onTileLoad: this.onTileLoad,\n        onTileError: this.onTileError\n      });\n      Object.assign(tile, this.getTileMetadata(tile));\n      tile.loadData(this._getTileData, this._requestScheduler);\n      this._cache.set(tileId, tile);\n      this._dirty = true;\n    } else if (tile && tile.isCancelled) {\n      tile.loadData(this._getTileData, this._requestScheduler);\n    }\n\n    return tile;\n  }\n\n  _getNearestAncestor(x, y, z) {\n    const {_minZoom = 0} = this;\n    let index = {x, y, z};\n\n    while (index.z > _minZoom) {\n      index = this.getParentIndex(index);\n      const parent = this._getTile(index);\n      if (parent) {\n        return parent;\n      }\n    }\n    return null;\n  }\n}\n\n// A selected tile needs placeholder from its children if\n// - it is not loaded\n// - none of its ancestors is visible and loaded\nfunction needsPlaceholder(tile) {\n  let t = tile;\n  while (t) {\n    if (t.state & (TILE_STATE_VISIBLE === 0)) {\n      return true;\n    }\n    if (t.isLoaded) {\n      return false;\n    }\n    t = t.parent;\n  }\n  return true;\n}\n\nfunction getPlaceholderInAncestors(tile, refinementStrategy) {\n  let parent;\n  let state = TILE_STATE_PLACEHOLDER;\n  while ((parent = tile.parent)) {\n    if (tile.isLoaded) {\n      // If a tile is loaded, mark all its ancestors as hidden\n      state = TILE_STATE_HIDDEN;\n      if (refinementStrategy === STRATEGY_DEFAULT) {\n        return;\n      }\n    }\n    parent.state = Math.max(parent.state, state);\n    tile = parent;\n  }\n}\n\n// Recursively set children as placeholder\nfunction getPlaceholderInChildren(tile) {\n  for (const child of tile.children) {\n    child.state = Math.max(child.state, TILE_STATE_PLACEHOLDER);\n    if (!child.isLoaded) {\n      getPlaceholderInChildren(child);\n    }\n  }\n}\n"],"file":"tileset-2d.js"}