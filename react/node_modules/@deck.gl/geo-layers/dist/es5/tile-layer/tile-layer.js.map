{"version":3,"sources":["../../../src/tile-layer/tile-layer.js"],"names":["defaultProps","data","dataComparator","urlType","equals","renderSubLayers","type","value","props","GeoJsonLayer","compare","getTileData","optional","onViewportLoad","onTileLoad","tile","onTileError","err","console","error","extent","tileSize","maxZoom","minZoom","maxCacheSize","maxCacheByteSize","refinementStrategy","STRATEGY_DEFAULT","zRange","maxRequests","TileLayer","state","tiles","isLoaded","changeFlags","somethingChanged","oldProps","context","tileset","createTileCache","dataChanged","updateTriggersChanged","all","Tileset2D","bind","_onTileLoad","_onTileError","setState","propsChanged","setOptions","forEach","layers","_updateTileset","frameNumber","update","viewport","loadingStateChanged","tilesetChanged","selectedTiles","map","layer","getCurrentLayer","isVisible","setNeedsUpdate","fetch","url","info","sourceLayer","visible","highlightedObjectIndex","getHighlightedObjectIndex","Object","assign","id","x","y","z","_offset","Boolean","clone","every","CompositeLayer","layerName"],"mappings":"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","sourcesContent":["import {CompositeLayer, _flatten as flatten} from '@deck.gl/core';\nimport {GeoJsonLayer} from '@deck.gl/layers';\n\nimport Tileset2D, {STRATEGY_DEFAULT} from './tileset-2d';\nimport {urlType, getURLFromTemplate} from './utils';\n\nconst defaultProps = {\n  data: [],\n  dataComparator: urlType.equals,\n  renderSubLayers: {type: 'function', value: props => new GeoJsonLayer(props), compare: false},\n  getTileData: {type: 'function', optional: true, value: null, compare: false},\n  // TODO - change to onViewportLoad to align with Tile3DLayer\n  onViewportLoad: {type: 'function', optional: true, value: null, compare: false},\n  onTileLoad: {type: 'function', value: tile => {}, compare: false},\n  // eslint-disable-next-line\n  onTileError: {type: 'function', value: err => console.error(err), compare: false},\n  extent: {type: 'array', optional: true, value: null, compare: true},\n  tileSize: 512,\n  maxZoom: null,\n  minZoom: 0,\n  maxCacheSize: null,\n  maxCacheByteSize: null,\n  refinementStrategy: STRATEGY_DEFAULT,\n  zRange: null,\n  maxRequests: 8\n};\n\nexport default class TileLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      tiles: [],\n      isLoaded: false\n    };\n  }\n\n  get isLoaded() {\n    const {tileset} = this.state;\n    return tileset.selectedTiles.every(\n      tile => tile.layers && tile.layers.every(layer => layer.isLoaded)\n    );\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState({props, oldProps, context, changeFlags}) {\n    let {tileset} = this.state;\n    const createTileCache =\n      !tileset ||\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getTileData));\n\n    if (createTileCache) {\n      const {\n        maxZoom,\n        minZoom,\n        tileSize,\n        maxCacheSize,\n        maxCacheByteSize,\n        refinementStrategy,\n        extent,\n        maxRequests\n      } = props;\n      tileset = new Tileset2D({\n        getTileData: this.getTileData.bind(this),\n        maxCacheSize,\n        maxCacheByteSize,\n        maxZoom,\n        minZoom,\n        tileSize,\n        refinementStrategy,\n        extent,\n        onTileLoad: this._onTileLoad.bind(this),\n        onTileError: this._onTileError.bind(this),\n        maxRequests\n      });\n      this.setState({tileset});\n    } else if (changeFlags.propsChanged || changeFlags.updateTriggersChanged) {\n      tileset.setOptions(props);\n      // if any props changed, delete the cached layers\n      this.state.tileset.tiles.forEach(tile => {\n        tile.layers = null;\n      });\n    }\n\n    this._updateTileset();\n  }\n\n  _updateTileset() {\n    const {tileset} = this.state;\n    const {onViewportLoad, zRange} = this.props;\n    const frameNumber = tileset.update(this.context.viewport, {zRange});\n    const {isLoaded} = tileset;\n\n    const loadingStateChanged = this.state.isLoaded !== isLoaded;\n    const tilesetChanged = this.state.frameNumber !== frameNumber;\n\n    if (isLoaded && onViewportLoad && (loadingStateChanged || tilesetChanged)) {\n      onViewportLoad(tileset.selectedTiles.map(tile => tile.data));\n    }\n\n    if (tilesetChanged) {\n      // Save the tileset frame number - trigger a rerender\n      this.setState({frameNumber});\n    }\n    // Save the loaded state - should not trigger a rerender\n    this.state.isLoaded = isLoaded;\n  }\n\n  _onTileLoad(tile) {\n    const layer = this.getCurrentLayer();\n    layer.props.onTileLoad(tile);\n\n    if (tile.isVisible) {\n      this.setNeedsUpdate();\n    }\n  }\n\n  _onTileError(error, tile) {\n    const layer = this.getCurrentLayer();\n    layer.props.onTileError(error);\n    // errorred tiles should not block rendering, are considered \"loaded\" with empty data\n    layer._updateTileset();\n\n    if (tile.isVisible) {\n      this.setNeedsUpdate();\n    }\n  }\n\n  // Methods for subclass to override\n\n  getTileData(tile) {\n    const {getTileData, fetch, data} = this.props;\n\n    tile.url = getURLFromTemplate(data, tile);\n\n    if (getTileData) {\n      return getTileData(tile);\n    }\n    if (tile.url) {\n      return fetch(tile.url, {layer: this});\n    }\n    return null;\n  }\n\n  renderSubLayers(props) {\n    return this.props.renderSubLayers(props);\n  }\n\n  getHighlightedObjectIndex() {\n    return -1;\n  }\n\n  getPickingInfo({info, sourceLayer}) {\n    info.sourceLayer = sourceLayer;\n    info.tile = sourceLayer.props.tile;\n    return info;\n  }\n\n  renderLayers() {\n    const {visible} = this.props;\n    return this.state.tileset.tiles.map(tile => {\n      // For a tile to be visible:\n      // - parent layer must be visible\n      // - tile must be visible in the current viewport\n      const isVisible = visible && tile.isVisible;\n      const highlightedObjectIndex = this.getHighlightedObjectIndex(tile);\n      // cache the rendered layer in the tile\n      if (!tile.isLoaded) {\n        // no op\n      } else if (!tile.layers) {\n        const layers = this.renderSubLayers(\n          Object.assign({}, this.props, {\n            id: `${this.id}-${tile.x}-${tile.y}-${tile.z}`,\n            data: tile.data,\n            visible: isVisible,\n            _offset: 0,\n            tile,\n            highlightedObjectIndex\n          })\n        );\n        tile.layers = flatten(layers, Boolean);\n      } else if (\n        tile.layers[0] &&\n        (tile.layers[0].props.visible !== isVisible ||\n          tile.layers[0].props.highlightedObjectIndex !== highlightedObjectIndex)\n      ) {\n        tile.layers = tile.layers.map(layer =>\n          layer.clone({visible: isVisible, highlightedObjectIndex})\n        );\n      }\n      return tile.layers;\n    });\n  }\n}\n\nTileLayer.layerName = 'TileLayer';\nTileLayer.defaultProps = defaultProps;\n"],"file":"tile-layer.js"}