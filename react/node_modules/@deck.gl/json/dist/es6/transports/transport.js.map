{"version":3,"sources":["../../../src/transports/transport.js"],"names":["state","onIninitialize","_","onFinalize","onMessage","Transport","setCallbacks","onInitialize","constructor","name","_messageQueue","userData","sendJSONMessage","console","error","sendBinaryMessage","_initialize","options","message","transport","_finalize","_destroyed","_messageReceived","debug"],"mappings":";;;;;;AAAA,MAAMA,KAAK,GAAG;AACZC,EAAAA,cAAc,EAAEC,CAAC,IAAIA,CADT;AAEZC,EAAAA,UAAU,EAAED,CAAC,IAAIA,CAFL;AAGZE,EAAAA,SAAS,EAAE;AAHC,CAAd;AAMA,eAAe,MAAMC,SAAN,CAAgB;AAC7B,SAAOC,YAAP,CAAoB;AAACC,IAAAA,YAAD;AAAeJ,IAAAA,UAAf;AAA2BC,IAAAA;AAA3B,GAApB,EAA2D;AACzD,QAAIG,YAAJ,EAAkB;AAChBP,MAAAA,KAAK,CAACO,YAAN,GAAqBA,YAArB;AACD;;AACD,QAAIJ,UAAJ,EAAgB;AACdH,MAAAA,KAAK,CAACG,UAAN,GAAmBA,UAAnB;AACD;;AACD,QAAIC,SAAJ,EAAe;AACbJ,MAAAA,KAAK,CAACI,SAAN,GAAkBA,SAAlB;AACD;AAEF;;AAEDI,EAAAA,WAAW,CAACC,IAAI,GAAG,WAAR,EAAqB;AAC9B,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACD;;AAGDC,EAAAA,eAAe,GAAG;AAEhBC,IAAAA,OAAO,CAACC,KAAR,CAAc,iDAAd;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAElBF,IAAAA,OAAO,CAACC,KAAR,CAAc,iDAAd;AACD;;AAMDE,EAAAA,WAAW,CAACC,OAAO,GAAG,EAAX,EAAe;AACxB,UAAMC,OAAO;AAAIC,MAAAA,SAAS,EAAE;AAAf,OAAwBF,OAAxB,CAAb;;AACAjB,IAAAA,KAAK,CAACO,YAAN,CAAmBW,OAAnB;AAID;;AAEDE,EAAAA,SAAS,CAACH,OAAO,GAAG,EAAX,EAAe;AACtB,UAAMC,OAAO;AAAIC,MAAAA,SAAS,EAAE;AAAf,OAAwBF,OAAxB,CAAb;;AAGAjB,IAAAA,KAAK,CAACG,UAAN,CAAiBe,OAAjB;AACA,SAAKG,UAAL,GAAkB,IAAlB;AACD;;AAEDC,EAAAA,gBAAgB,CAACJ,OAAO,GAAG,EAAX,EAAe;AAC7BA,IAAAA,OAAO;AAAIC,MAAAA,SAAS,EAAE;AAAf,OAAwBD,OAAxB,CAAP;AASAL,IAAAA,OAAO,CAACU,KAAR,CAAc,8BAAd,EAA8CL,OAA9C;AACAlB,IAAAA,KAAK,CAACI,SAAN,CAAgBc,OAAhB;AACD;;AA/D4B","sourcesContent":["const state = {\n  onIninitialize: _ => _,\n  onFinalize: _ => _,\n  onMessage: null\n};\n\nexport default class Transport {\n  static setCallbacks({onInitialize, onFinalize, onMessage}) {\n    if (onInitialize) {\n      state.onInitialize = onInitialize;\n    }\n    if (onFinalize) {\n      state.onFinalize = onFinalize;\n    }\n    if (onMessage) {\n      state.onMessage = onMessage;\n    }\n    // this._flushQueuedConnections();\n  }\n\n  constructor(name = 'Transport') {\n    this.name = name;\n    this._messageQueue = [];\n    this.userData = {};\n  }\n\n  // Back-channel messaging\n  sendJSONMessage() {\n    // eslint-disable-next-line\n    console.error('Back-channel not implemented for this transport');\n  }\n\n  sendBinaryMessage() {\n    // eslint-disable-next-line\n    console.error('Back-channel not implemented for this transport');\n  }\n\n  //\n  // API for transports (not intended for apps)\n  //\n\n  _initialize(options = {}) {\n    const message = {transport: this, ...options};\n    state.onInitialize(message);\n\n    // console.debug('Resolving init promise', options); // eslint-disable-line\n    // this._initResolvers.resolve(message);\n  }\n\n  _finalize(options = {}) {\n    const message = {transport: this, ...options};\n\n    // TODO - could potentially be called without Initialize being called\n    state.onFinalize(message);\n    this._destroyed = true;\n  }\n\n  _messageReceived(message = {}) {\n    message = {transport: this, ...message};\n\n    // TODO - this function could potentially be called before callback registered/ Initialize called\n    // if (!state.onMessage) {\n    //   console.error('Queueing transport message', message); // eslint-disable-line\n    //   this._messageQueue.push(message);\n    //   return;\n    // }\n\n    console.debug('Delivering transport message', message); // eslint-disable-line\n    state.onMessage(message);\n  }\n\n  /*\n  // This tries to handle the case that a transport connection initializes before the application\n  // has set the callbacks.\n  // Note: It is not clear that this can actually happen in the in initial Jupyter widget transport\n  _flushQueuedConnections() {\n    if (onInitialize) {\n      state._initPromise.then(initArgs => {\n        onInitialize(initArgs);\n\n        if (state._onMessage) {\n          // Send any queued messages\n          let message;\n          while ((message = this._messageQueue.pop())) {\n            console.debug('Delivering queued transport message', message); // eslint-disable-line\n            this._onMessage(message);\n          }\n        }\n      });\n    }\n  }\n  */\n}\n"],"file":"transport.js"}