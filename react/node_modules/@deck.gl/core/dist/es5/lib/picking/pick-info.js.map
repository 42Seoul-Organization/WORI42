{"version":3,"sources":["../../../../src/lib/picking/pick-info.js"],"names":["processPickInfo","pickInfo","lastPickedInfo","mode","layers","viewports","x","y","z","pixelRatio","pickedColor","pickedLayer","pickedObjectIndex","affectedLayers","lastPickedObjectIndex","index","lastPickedLayerId","layerId","pickedLayerId","props","id","lastPickedLayer","find","layer","unshift","info","viewport","getViewportFromCoordinates","coordinate","unproject","targetZ","baseInfo","color","picked","pixel","lngLat","devicePixel","pickedX","pickedY","infos","Map","set","forEach","Object","assign","getLayerPickingInfo","autoHighlight","pickingModuleParameters","pickingSelectedColor","highlightColor","pickingHighlightColor","setModuleParameters","setNeedsRedraw","sourceLayer","getPickingInfo","parent"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// TODO - break this monster function into 3+ parts\n/* eslint-disable max-depth, max-statements */\n\nexport function processPickInfo({\n  pickInfo,\n  lastPickedInfo,\n  mode,\n  layers,\n  viewports,\n  x,\n  y,\n  z,\n  pixelRatio\n}) {\n  const {pickedColor, pickedLayer, pickedObjectIndex} = pickInfo;\n\n  const affectedLayers = pickedLayer ? [pickedLayer] : [];\n\n  if (mode === 'hover') {\n    // only invoke onHover events if picked object has changed\n    const lastPickedObjectIndex = lastPickedInfo.index;\n    const lastPickedLayerId = lastPickedInfo.layerId;\n    const pickedLayerId = pickedLayer && pickedLayer.props.id;\n\n    // proceed only if picked object changed\n    if (pickedLayerId !== lastPickedLayerId || pickedObjectIndex !== lastPickedObjectIndex) {\n      if (pickedLayerId !== lastPickedLayerId) {\n        // We cannot store a ref to lastPickedLayer in the context because\n        // the state of an outdated layer is no longer valid\n        // and the props may have changed\n        const lastPickedLayer = layers.find(layer => layer.props.id === lastPickedLayerId);\n        if (lastPickedLayer) {\n          // Let leave event fire before enter event\n          affectedLayers.unshift(lastPickedLayer);\n        }\n      }\n\n      // Update layer manager context\n      lastPickedInfo.layerId = pickedLayerId;\n      lastPickedInfo.index = pickedObjectIndex;\n      lastPickedInfo.info = null;\n    }\n  }\n\n  const viewport = getViewportFromCoordinates({viewports}); // TODO - add coords\n  const coordinate = viewport && viewport.unproject([x - viewport.x, y - viewport.y], {targetZ: z});\n\n  const baseInfo = {\n    color: null,\n    layer: null,\n    index: -1,\n    picked: false,\n    x,\n    y,\n    pixel: [x, y],\n    coordinate,\n    // TODO remove the lngLat prop after compatibility check\n    lngLat: coordinate,\n    devicePixel: [pickInfo.pickedX, pickInfo.pickedY],\n    pixelRatio\n  };\n\n  // Use a Map to store all picking infos.\n  // The following two forEach loops are the result of\n  // https://github.com/visgl/deck.gl/issues/443\n  // Please be very careful when changing this pattern\n  const infos = new Map();\n\n  // Make sure infos always contain something even if no layer is affected\n  infos.set(null, baseInfo);\n\n  affectedLayers.forEach(layer => {\n    let info = Object.assign({}, baseInfo);\n\n    if (layer === pickedLayer) {\n      info.color = pickedColor;\n      info.index = pickedObjectIndex;\n      info.picked = true;\n    }\n\n    info = getLayerPickingInfo({layer, info, mode});\n\n    if (layer === pickedLayer && mode === 'hover') {\n      lastPickedInfo.info = info;\n    }\n\n    // This guarantees that there will be only one copy of info for\n    // one composite layer\n    if (info) {\n      infos.set(info.layer.id, info);\n    }\n\n    if (mode === 'hover' && layer.props.autoHighlight) {\n      const pickingModuleParameters = {\n        pickingSelectedColor: pickedLayer === layer ? pickedColor : null\n      };\n      const {highlightColor} = layer.props;\n      if (pickedLayer === layer && typeof highlightColor === 'function') {\n        pickingModuleParameters.pickingHighlightColor = highlightColor(info);\n      }\n      layer.setModuleParameters(pickingModuleParameters);\n      // setModuleParameters does not trigger redraw\n      layer.setNeedsRedraw();\n    }\n  });\n\n  return infos;\n}\n\n// Walk up the layer composite chain to populate the info object\nexport function getLayerPickingInfo({layer, info, mode}) {\n  while (layer && info) {\n    // For a composite layer, sourceLayer will point to the sublayer\n    // where the event originates from.\n    // It provides additional context for the composite layer's\n    // getPickingInfo() method to populate the info object\n    const sourceLayer = info.layer || layer;\n    info.layer = layer;\n    // layer.pickLayer() function requires a non-null ```layer.state```\n    // object to function properly. So the layer referenced here\n    // must be the \"current\" layer, not an \"out-dated\" / \"invalidated\" layer\n    info = layer.getPickingInfo({info, mode, sourceLayer});\n    layer = layer.parent;\n  }\n  return info;\n}\n\n// Indentifies which viewport, if any corresponds to x and y\n// Returns first viewport if no match\n// TODO - need to determine which viewport we are in\n// TODO - document concept of \"primary viewport\" that matches all coords?\n// TODO - static method on Viewport class?\nfunction getViewportFromCoordinates({viewports}) {\n  const viewport = viewports[0];\n  return viewport;\n}\n"],"file":"pick-info.js"}