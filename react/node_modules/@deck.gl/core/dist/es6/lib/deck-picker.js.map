{"version":3,"sources":["../../../src/lib/deck-picker.js"],"names":["Framebuffer","Texture2D","isWebGL2","readPixelsToArray","cssToDeviceRatio","cssToDevicePixels","assert","log","PickLayersPass","getClosestObject","getUniqueObjects","processPickInfo","getLayerPickingInfo","DeckPicker","constructor","gl","pickingFBO","pickLayersPass","layerFilter","lastPickedInfo","index","layerId","info","_onError","setProps","props","onError","finalize","delete","depthFBO","color","pickObject","opts","_pickClosestObject","pickObjects","_pickVisibleObjects","getLastPickedObject","x","y","layers","viewports","lastPickedLayerId","layer","id","find","l","coordinate","unproject","lngLat","Object","assign","object","_resizeBuffer","isSupported","colorBufferFloat","attach","format","type","resize","width","canvas","height","_getPickable","pickableLayers","filter","isPickable","isComposite","length","warn","slice","radius","depth","mode","unproject3D","onViewportActive","pixelRatio","devicePixelRange","devicePixel","Math","floor","deviceRadius","round","deviceRect","_getPickingRect","deviceX","deviceY","deviceWidth","deviceHeight","infos","result","affectedLayers","i","pickedColors","_drawAndSample","pass","redrawReason","pickInfo","z","pickedLayer","zValues","pickedX","pickedY","pickZ","distanceScales","metersPerUnit","position","pickedColor","clearPickingColor","values","push","restorePickingColors","emptyInfo","get","leftTop","deviceLeft","deviceTop","rightBottom","deviceRight","deviceBottom","pickInfos","uniqueInfos","Map","forEach","pickedObjectIndex","picked","has","set","Array","from","render","Float32Array","Uint8Array","sourceX","sourceY","sourceWidth","sourceHeight","target","max","min"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Framebuffer,\n  Texture2D,\n  isWebGL2,\n  readPixelsToArray,\n  cssToDeviceRatio,\n  cssToDevicePixels\n} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport assert from '../utils/assert';\nimport log from '../utils/log';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport {getClosestObject, getUniqueObjects} from './picking/query-object';\nimport {processPickInfo, getLayerPickingInfo} from './picking/pick-info';\n\nexport default class DeckPicker {\n  constructor(gl) {\n    this.gl = gl;\n    this.pickingFBO = null;\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.layerFilter = null;\n    this.lastPickedInfo = {\n      // For callback tracking and auto highlight\n      index: -1,\n      layerId: null,\n      info: null\n    };\n    this._onError = null;\n  }\n\n  setProps(props) {\n    if ('layerFilter' in props) {\n      this.layerFilter = props.layerFilter;\n    }\n\n    if ('onError' in props) {\n      this._onError = props.onError;\n    }\n  }\n\n  finalize() {\n    if (this.pickingFBO) {\n      this.pickingFBO.delete();\n    }\n    if (this.depthFBO) {\n      this.depthFBO.color.delete();\n      this.depthFBO.delete();\n    }\n  }\n\n  // Pick the closest info at given coordinate\n  pickObject(opts) {\n    return this._pickClosestObject(opts);\n  }\n\n  // Get all unique infos within a bounding box\n  pickObjects(opts) {\n    return this._pickVisibleObjects(opts);\n  }\n\n  // Returns a new picking info object by assuming the last picked object is still picked\n  getLastPickedObject({x, y, layers, viewports}, lastPickedInfo = this.lastPickedInfo.info) {\n    const lastPickedLayerId = lastPickedInfo && lastPickedInfo.layer && lastPickedInfo.layer.id;\n    const layer = lastPickedLayerId ? layers.find(l => l.id === lastPickedLayerId) : null;\n    const coordinate = viewports[0] && viewports[0].unproject([x, y]);\n\n    const info = {\n      x,\n      y,\n      coordinate,\n      // TODO remove the lngLat prop after compatibility check\n      lngLat: coordinate,\n      layer\n    };\n\n    if (layer) {\n      return Object.assign({}, lastPickedInfo, info);\n    }\n    return Object.assign(info, {color: null, object: null, index: -1});\n  }\n\n  // Private\n  _resizeBuffer() {\n    const {gl} = this;\n    // Create a frame buffer if not already available\n    if (!this.pickingFBO) {\n      this.pickingFBO = new Framebuffer(gl);\n      if (Framebuffer.isSupported(gl, {colorBufferFloat: true})) {\n        this.depthFBO = new Framebuffer(gl);\n        this.depthFBO.attach({\n          [GL.COLOR_ATTACHMENT0]: new Texture2D(gl, {\n            format: isWebGL2(gl) ? GL.RGBA32F : GL.RGBA,\n            type: GL.FLOAT\n          })\n        });\n      }\n    }\n    // Resize it to current canvas size (this is a noop if size hasn't changed)\n    this.pickingFBO.resize({width: gl.canvas.width, height: gl.canvas.height});\n    if (this.depthFBO) {\n      this.depthFBO.resize({width: gl.canvas.width, height: gl.canvas.height});\n    }\n    return this.pickingFBO;\n  }\n\n  // picking can only handle up to 255 layers. Drop non-pickable/invisible layers from the list.\n  _getPickable(layers) {\n    const pickableLayers = layers.filter(layer => layer.isPickable() && !layer.isComposite);\n    if (pickableLayers.length > 255) {\n      log.warn('Too many pickable layers, only picking the first 255')();\n      return pickableLayers.slice(0, 255);\n    }\n    return pickableLayers;\n  }\n\n  // Pick the closest object at the given (x,y) coordinate\n  // eslint-disable-next-line max-statements,complexity\n  _pickClosestObject({\n    layers,\n    viewports,\n    x,\n    y,\n    radius = 0,\n    depth = 1,\n    mode = 'query',\n    unproject3D,\n    onViewportActive\n  }) {\n    layers = this._getPickable(layers);\n\n    this._resizeBuffer();\n    // Convert from canvas top-left to WebGL bottom-left coordinates\n    // Top-left coordinates [x, y] to bottom-left coordinates [deviceX, deviceY]\n    // And compensate for pixelRatio\n    const pixelRatio = cssToDeviceRatio(this.gl);\n    const devicePixelRange = cssToDevicePixels(this.gl, [x, y], true);\n    const devicePixel = [\n      devicePixelRange.x + Math.floor(devicePixelRange.width / 2),\n      devicePixelRange.y + Math.floor(devicePixelRange.height / 2)\n    ];\n\n    const deviceRadius = Math.round(radius * pixelRatio);\n    const {width, height} = this.pickingFBO;\n    const deviceRect = this._getPickingRect({\n      deviceX: devicePixel[0],\n      deviceY: devicePixel[1],\n      deviceRadius,\n      deviceWidth: width,\n      deviceHeight: height\n    });\n\n    let infos;\n    const result = [];\n    const affectedLayers = {};\n\n    for (let i = 0; i < depth; i++) {\n      const pickedColors =\n        deviceRect &&\n        this._drawAndSample({\n          layers,\n          viewports,\n          onViewportActive,\n          deviceRect,\n          pass: `picking:${mode}`,\n          redrawReason: mode\n        });\n\n      const pickInfo = getClosestObject({\n        pickedColors,\n        layers,\n        deviceX: devicePixel[0],\n        deviceY: devicePixel[1],\n        deviceRadius,\n        deviceRect\n      });\n\n      let z;\n      if (pickInfo.pickedLayer && unproject3D && this.depthFBO) {\n        const zValues = this._drawAndSample({\n          layers: [pickInfo.pickedLayer],\n          viewports,\n          onViewportActive,\n          deviceRect: {x: pickInfo.pickedX, y: pickInfo.pickedY, width: 1, height: 1},\n          pass: `picking:${mode}`,\n          redrawReason: 'pick-z',\n          pickZ: true\n        });\n        // picked value is in common space (pixels) from the camera target (viewport.position)\n        // convert it to meters from the ground\n        z = zValues[0] * viewports[0].distanceScales.metersPerUnit[2] + viewports[0].position[2];\n      }\n\n      // Only exclude if we need to run picking again.\n      // We need to run picking again if an object is detected AND\n      // we have not exhausted the requested depth.\n      if (pickInfo.pickedColor && i + 1 < depth) {\n        const layerId = pickInfo.pickedColor[3] - 1;\n        affectedLayers[layerId] = true;\n        layers[layerId].clearPickingColor(pickInfo.pickedColor);\n      }\n\n      // This logic needs to run even if no object is picked.\n      infos = processPickInfo({\n        pickInfo,\n        lastPickedInfo: this.lastPickedInfo,\n        mode,\n        layers,\n        viewports,\n        x,\n        y,\n        z,\n        pixelRatio\n      });\n\n      for (const info of infos.values()) {\n        if (info.layer) {\n          result.push(info);\n        }\n      }\n\n      // If no object is picked stop.\n      if (!pickInfo.pickedColor) {\n        break;\n      }\n    }\n\n    // reset only affected buffers\n    for (const layerId in affectedLayers) {\n      layers[layerId].restorePickingColors();\n    }\n\n    return {result, emptyInfo: infos && infos.get(null)};\n  }\n\n  // Pick all objects within the given bounding box\n  _pickVisibleObjects({\n    layers,\n    viewports,\n    x,\n    y,\n    width = 1,\n    height = 1,\n    mode = 'query',\n    onViewportActive\n  }) {\n    layers = this._getPickable(layers);\n\n    this._resizeBuffer();\n    // Convert from canvas top-left to WebGL bottom-left coordinates\n    // And compensate for pixelRatio\n    const pixelRatio = cssToDeviceRatio(this.gl);\n    const leftTop = cssToDevicePixels(this.gl, [x, y], true);\n\n    // take left and top (y inverted in device pixels) from start location\n    const deviceLeft = leftTop.x;\n    const deviceTop = leftTop.y + leftTop.height;\n\n    // take right and bottom (y inverted in device pixels) from end location\n    const rightBottom = cssToDevicePixels(this.gl, [x + width, y + height], true);\n    const deviceRight = rightBottom.x + rightBottom.width;\n    const deviceBottom = rightBottom.y;\n\n    const deviceRect = {\n      x: deviceLeft,\n      y: deviceBottom,\n      // deviceTop and deviceRight represent the first pixel outside the desired rect\n      width: deviceRight - deviceLeft,\n      height: deviceTop - deviceBottom\n    };\n\n    const pickedColors = this._drawAndSample({\n      layers,\n      viewports,\n      onViewportActive,\n      deviceRect,\n      pass: `picking:${mode}`,\n      redrawReason: mode\n    });\n\n    const pickInfos = getUniqueObjects({pickedColors, layers});\n\n    // Only return unique infos, identified by info.object\n    const uniqueInfos = new Map();\n\n    pickInfos.forEach(pickInfo => {\n      let info = {\n        color: pickInfo.pickedColor,\n        layer: null,\n        index: pickInfo.pickedObjectIndex,\n        picked: true,\n        x,\n        y,\n        width,\n        height,\n        pixelRatio\n      };\n\n      info = getLayerPickingInfo({layer: pickInfo.pickedLayer, info, mode});\n      if (!uniqueInfos.has(info.object)) {\n        uniqueInfos.set(info.object, info);\n      }\n    });\n\n    return Array.from(uniqueInfos.values());\n  }\n\n  // returns pickedColor or null if no pickable layers found.\n  _drawAndSample({layers, viewports, onViewportActive, deviceRect, pass, redrawReason, pickZ}) {\n    assert(deviceRect.width > 0 && deviceRect.height > 0);\n\n    if (layers.length < 1) {\n      return null;\n    }\n\n    const pickingFBO = pickZ ? this.depthFBO : this.pickingFBO;\n\n    this.pickLayersPass.render({\n      layers,\n      layerFilter: this.layerFilter,\n      onError: this._onError,\n      viewports,\n      onViewportActive,\n      pickingFBO,\n      deviceRect,\n      pass,\n      redrawReason,\n      pickZ\n    });\n\n    // Read from an already rendered picking buffer\n    // Returns an Uint8ClampedArray of picked pixels\n    const {x, y, width, height} = deviceRect;\n    const pickedColors = new (pickZ ? Float32Array : Uint8Array)(width * height * 4);\n    readPixelsToArray(pickingFBO, {\n      sourceX: x,\n      sourceY: y,\n      sourceWidth: width,\n      sourceHeight: height,\n      target: pickedColors\n    });\n\n    return pickedColors;\n  }\n\n  // Calculate a picking rect centered on deviceX and deviceY and clipped to device\n  // Returns null if pixel is outside of device\n  _getPickingRect({deviceX, deviceY, deviceRadius, deviceWidth, deviceHeight}) {\n    // Create a box of size `radius * 2 + 1` centered at [deviceX, deviceY]\n    const x = Math.max(0, deviceX - deviceRadius);\n    const y = Math.max(0, deviceY - deviceRadius);\n    const width = Math.min(deviceWidth, deviceX + deviceRadius + 1) - x;\n    const height = Math.min(deviceHeight, deviceY + deviceRadius + 1) - y;\n\n    // x, y out of bounds.\n    if (width <= 0 || height <= 0) {\n      return null;\n    }\n\n    return {x, y, width, height};\n  }\n}\n"],"file":"deck-picker.js"}