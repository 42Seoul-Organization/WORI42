{"version":3,"sources":["../../../src/path-style/path-style.js"],"names":["LayerExtension","_mergeShaders","mergeShaders","dashShaders","offsetShaders","defaultProps","getDashArray","type","value","getOffset","dashJustified","PathStyleExtension","constructor","dash","offset","isEnabled","layer","state","pathTesselator","getShaders","extension","result","opts","initializeState","context","attributeManager","getAttributeManager","enabled","addInstanced","instanceDashArrays","size","accessor","instanceOffsets","updateState","params","uniforms","dashAlignMode","props","model","setUniforms","extensionName"],"mappings":"AAoBA,SAAQA,cAAR,EAAwBC,aAAa,IAAIC,YAAzC,QAA4D,eAA5D;AACA,SAAQC,WAAR,EAAqBC,aAArB,QAAyC,gBAAzC;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,YAAY,EAAE;AAACC,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;AAA1B,GADK;AAEnBC,EAAAA,SAAS,EAAE;AAACF,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GAFQ;AAGnBE,EAAAA,aAAa,EAAE;AAHI,CAArB;AAMA,eAAe,MAAMC,kBAAN,SAAiCX,cAAjC,CAAgD;AAC7DY,EAAAA,WAAW,CAAC;AAACC,IAAAA,IAAI,GAAG,KAAR;AAAeC,IAAAA,MAAM,GAAG;AAAxB,MAAiC,EAAlC,EAAsC;AAC/C,UAAM;AAACD,MAAAA,IAAD;AAAOC,MAAAA;AAAP,KAAN;AACD;;AAEDC,EAAAA,SAAS,CAACC,KAAD,EAAQ;AACf,WAAOA,KAAK,CAACC,KAAN,CAAYC,cAAnB;AACD;;AAEDC,EAAAA,UAAU,CAACC,SAAD,EAAY;AACpB,QAAI,CAACA,SAAS,CAACL,SAAV,CAAoB,IAApB,CAAL,EAAgC;AAC9B,aAAO,IAAP;AACD;;AAGD,QAAIM,MAAM,GAAG,EAAb;;AACA,QAAID,SAAS,CAACE,IAAV,CAAeT,IAAnB,EAAyB;AACvBQ,MAAAA,MAAM,GAAGnB,YAAY,CAACmB,MAAD,EAASlB,WAAT,CAArB;AACD;;AACD,QAAIiB,SAAS,CAACE,IAAV,CAAeR,MAAnB,EAA2B;AACzBO,MAAAA,MAAM,GAAGnB,YAAY,CAACmB,MAAD,EAASjB,aAAT,CAArB;AACD;;AAED,WAAOiB,MAAP;AACD;;AAEDE,EAAAA,eAAe,CAACC,OAAD,EAAUJ,SAAV,EAAqB;AAClC,UAAMK,gBAAgB,GAAG,KAAKC,mBAAL,EAAzB;;AACA,QAAI,CAACD,gBAAD,IAAqB,CAACL,SAAS,CAACL,SAAV,CAAoB,IAApB,CAA1B,EAAqD;AAEnD;AACD;;AAEDK,IAAAA,SAAS,CAACO,OAAV,GAAoB,IAApB;;AAEA,QAAIP,SAAS,CAACE,IAAV,CAAeT,IAAnB,EAAyB;AACvBY,MAAAA,gBAAgB,CAACG,YAAjB,CAA8B;AAC5BC,QAAAA,kBAAkB,EAAE;AAACC,UAAAA,IAAI,EAAE,CAAP;AAAUC,UAAAA,QAAQ,EAAE;AAApB;AADQ,OAA9B;AAGD;;AACD,QAAIX,SAAS,CAACE,IAAV,CAAeR,MAAnB,EAA2B;AACzBW,MAAAA,gBAAgB,CAACG,YAAjB,CAA8B;AAC5BI,QAAAA,eAAe,EAAE;AAACF,UAAAA,IAAI,EAAE,CAAP;AAAUC,UAAAA,QAAQ,EAAE;AAApB;AADW,OAA9B;AAGD;AACF;;AAEDE,EAAAA,WAAW,CAACC,MAAD,EAASd,SAAT,EAAoB;AAC7B,QAAI,CAACA,SAAS,CAACL,SAAV,CAAoB,IAApB,CAAL,EAAgC;AAC9B;AACD;;AAED,UAAMoB,QAAQ,GAAG,EAAjB;;AAEA,QAAIf,SAAS,CAACE,IAAV,CAAeT,IAAnB,EAAyB;AACvBsB,MAAAA,QAAQ,CAACC,aAAT,GAAyB,KAAKC,KAAL,CAAW3B,aAAX,GAA2B,CAA3B,GAA+B,CAAxD;AACD;;AAED,SAAKO,KAAL,CAAWqB,KAAX,CAAiBC,WAAjB,CAA6BJ,QAA7B;AACD;;AA3D4D;AA8D/DxB,kBAAkB,CAAC6B,aAAnB,GAAmC,oBAAnC;AACA7B,kBAAkB,CAACN,YAAnB,GAAkCA,YAAlC","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {LayerExtension, _mergeShaders as mergeShaders} from '@deck.gl/core';\nimport {dashShaders, offsetShaders} from './shaders.glsl';\n\nconst defaultProps = {\n  getDashArray: {type: 'accessor', value: [0, 0]},\n  getOffset: {type: 'accessor', value: 0},\n  dashJustified: false\n};\n\nexport default class PathStyleExtension extends LayerExtension {\n  constructor({dash = false, offset = false} = {}) {\n    super({dash, offset});\n  }\n\n  isEnabled(layer) {\n    return layer.state.pathTesselator;\n  }\n\n  getShaders(extension) {\n    if (!extension.isEnabled(this)) {\n      return null;\n    }\n\n    // Merge shader injection\n    let result = {};\n    if (extension.opts.dash) {\n      result = mergeShaders(result, dashShaders);\n    }\n    if (extension.opts.offset) {\n      result = mergeShaders(result, offsetShaders);\n    }\n\n    return result;\n  }\n\n  initializeState(context, extension) {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager || !extension.isEnabled(this)) {\n      // This extension only works with the PathLayer\n      return;\n    }\n\n    extension.enabled = true;\n\n    if (extension.opts.dash) {\n      attributeManager.addInstanced({\n        instanceDashArrays: {size: 2, accessor: 'getDashArray'}\n      });\n    }\n    if (extension.opts.offset) {\n      attributeManager.addInstanced({\n        instanceOffsets: {size: 1, accessor: 'getOffset'}\n      });\n    }\n  }\n\n  updateState(params, extension) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n\n    const uniforms = {};\n\n    if (extension.opts.dash) {\n      uniforms.dashAlignMode = this.props.dashJustified ? 1 : 0;\n    }\n\n    this.state.model.setUniforms(uniforms);\n  }\n}\n\nPathStyleExtension.extensionName = 'PathStyleExtension';\nPathStyleExtension.defaultProps = defaultProps;\n"],"file":"path-style.js"}