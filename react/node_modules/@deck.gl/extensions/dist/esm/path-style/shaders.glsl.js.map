{"version":3,"sources":["../../../src/path-style/shaders.glsl.js"],"names":["dashShaders","inject","offsetShaders"],"mappings":"AAAA,OAAO,IAAMA,WAAW,GAAG;AACzBC,EAAAA,MAAM,EAAE;AACN,kFADM;AAMN,0DANM;AAUN,sMAVM;AAgCN;AAhCM;AADiB,CAApB;AA4DP,OAAO,IAAMC,aAAa,GAAG;AAC3BD,EAAAA,MAAM,EAAE;AACN,sDADM;AAIN,kHAJM;AAQN,qPARM;AAaN;AAbM;AADmB,CAAtB","sourcesContent":["export const dashShaders = {\n  inject: {\n    'vs:#decl': `\nattribute vec2 instanceDashArrays;\nvarying vec2 vDashArray;\n`,\n\n    'vs:#main-end': `\nvDashArray = instanceDashArrays;\n`,\n\n    'fs:#decl': `\nuniform float dashAlignMode;\nvarying vec2 vDashArray;\n\n// mod doesn't work correctly for negative numbers\nfloat mod2(float a, float b) {\n  return a - floor(a / b) * b;\n}\n\nfloat round(float x) {\n  return floor(x + 0.5);\n}\n`,\n\n    // if given position is in the gap part of the dashed line\n    // dashArray.x: solid stroke length, relative to width\n    // dashArray.y: gap length, relative to width\n    // alignMode:\n    // 0 - no adjustment\n    // o----     ----     ----     ---- o----     -o----     ----     o\n    // 1 - stretch to fit, draw half dash at each end for nicer joints\n    // o--    ----    ----    ----    --o--      --o--     ----     --o\n    'fs:#main-start': `\n  float solidLength = vDashArray.x;\n  float gapLength = vDashArray.y;\n  float unitLength = solidLength + gapLength;\n\n  if (unitLength > 0.0) {\n    unitLength = mix(\n      unitLength,\n      vPathLength / round(vPathLength / unitLength),\n      dashAlignMode\n    );\n\n    float offset = dashAlignMode * solidLength / 2.0;\n\n    if (\n      gapLength > 0.0 &&\n      vPathPosition.y >= 0.0 &&\n      vPathPosition.y <= vPathLength &&\n      mod2(vPathPosition.y + offset, unitLength) > solidLength\n    ) {\n      discard;\n    }\n  }  \n`\n  }\n};\n\nexport const offsetShaders = {\n  inject: {\n    'vs:#decl': `\nattribute float instanceOffsets;\n`,\n    'vs:DECKGL_FILTER_SIZE': `\n  float offsetWidth = abs(instanceOffsets * 2.0) + 1.0;\n  size *= offsetWidth;\n`,\n    'vCornerOffset = offsetVec;': `\n  float offsetWidth = abs(instanceOffsets * 2.0) + 1.0;\n  vec2 offsetCenter = -instanceOffsets * (isCap ? perp : miterVec * miterSize) * 2.0;\n  vCornerOffset = vCornerOffset * offsetWidth - offsetCenter;\n`,\n    'fs:#main-start': `\n  float isInside;\n  isInside = step(-1.0, vPathPosition.x) * step(vPathPosition.x, 1.0);\n  if (isInside == 0.0) {\n    discard;\n  }\n`\n  }\n};\n"],"file":"shaders.glsl.js"}