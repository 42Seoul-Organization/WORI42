{"version":3,"sources":["../../src/utils.js"],"names":["Deck","MAX_LATITUDE","createDeckInstance","map","overlay","deck","props","userData","_googleMap","destroyDeckInstance","eventListeners","click","mousemove","mouseout","canvas","createDeckCanvas","initialViewState","longitude","latitude","zoom","controller","_eventListeners","eventType","addListener","evt","handleMouseEvent","container","getPanes","overlayLayer","deckCanvas","document","createElement","Object","assign","style","position","appendChild","remove","finalize","parentNode","removeChild","getViewState","getDiv","firstChild","width","offsetWidth","height","offsetHeight","projection","getProjection","bounds","getBounds","ne","getNorthEast","sw","getSouthWest","topRight","fromLatLngToDivPixel","bottomLeft","nwContainerPx","google","maps","Point","nw","fromContainerPixelToLatLng","nwDivPx","leftOffset","x","topOffset","y","mapWidth","getWorldWidth","mapCount","Math","ceil","floor","scale","log2","getZoom","centerPx","centerContainer","lat","lng","abs","center","LatLng","fromLatLngToContainerPixel","left","top","pitch","getTilt","type","event","callback","_lastPointerDownInfo","pickObject","pixel","_onEvent","_onPointerMove","offsetCenter","srcEvent"],"mappings":"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","sourcesContent":["/* global document, google */\nimport {Deck} from '@deck.gl/core';\n\n// https://en.wikipedia.org/wiki/Web_Mercator_projection#Formulas\nconst MAX_LATITUDE = 85.05113;\n\n/**\n * Get a new deck instance\n * @param map (google.maps.Map) - The parent Map instance\n * @param overlay (google.maps.OverlayView) - A maps Overlay instance\n * @param [deck] (Deck) - a previously created instances\n */\nexport function createDeckInstance(map, overlay, deck) {\n  if (deck) {\n    if (deck.props.userData._googleMap === map) {\n      return deck;\n    }\n    // deck instance was created for a different map\n    destroyDeckInstance(deck);\n  }\n\n  const eventListeners = {\n    click: null,\n    mousemove: null,\n    mouseout: null\n  };\n\n  deck = new Deck({\n    canvas: createDeckCanvas(overlay),\n    initialViewState: {\n      longitude: 0,\n      latitude: 0,\n      zoom: 1\n    },\n    controller: false,\n    userData: {\n      _googleMap: map,\n      _eventListeners: eventListeners\n    }\n  });\n\n  // Register event listeners\n  for (const eventType in eventListeners) {\n    eventListeners[eventType] = map.addListener(eventType, evt =>\n      handleMouseEvent(deck, eventType, evt)\n    );\n  }\n\n  return deck;\n}\n\nfunction createDeckCanvas(overlay) {\n  const container = overlay.getPanes().overlayLayer;\n  const deckCanvas = document.createElement('canvas');\n  Object.assign(deckCanvas.style, {\n    // map container position is always non-static\n    position: 'absolute'\n  });\n\n  container.appendChild(deckCanvas);\n  return deckCanvas;\n}\n\n/**\n * Safely remove a deck instance\n * @param deck (Deck) - a previously created instances\n */\nexport function destroyDeckInstance(deck) {\n  const {_eventListeners: eventListeners} = deck.props.userData;\n\n  // Unregister event listeners\n  for (const eventType in eventListeners) {\n    eventListeners[eventType].remove();\n  }\n\n  deck.finalize();\n\n  // Remove canvas\n  deck.canvas.parentNode.removeChild(deck.canvas);\n}\n\n/* eslint-disable max-statements */\n/**\n * Get the current view state\n * @param map (google.maps.Map) - The parent Map instance\n * @param overlay (google.maps.OverlayView) - A maps Overlay instance\n */\nexport function getViewState(map, overlay) {\n  // The map fills the container div unless it's in fullscreen mode\n  // at which point the first child of the container is promoted\n  const container = map.getDiv().firstChild;\n  const width = container.offsetWidth;\n  const height = container.offsetHeight;\n\n  // Canvas position relative to draggable map's container depends on\n  // overlayView's projection, not the map's. Have to use the center of the\n  // map for this, not the top left, for the same reason as above.\n  const projection = overlay.getProjection();\n\n  const bounds = map.getBounds();\n  const ne = bounds.getNorthEast();\n  const sw = bounds.getSouthWest();\n  const topRight = projection.fromLatLngToDivPixel(ne);\n  const bottomLeft = projection.fromLatLngToDivPixel(sw);\n\n  // google maps places overlays in a container anchored at the map center.\n  // the container CSS is manipulated during dragging.\n  // We need to update left/top of the deck canvas to match the base map.\n  const nwContainerPx = new google.maps.Point(0, 0);\n  const nw = projection.fromContainerPixelToLatLng(nwContainerPx);\n  const nwDivPx = projection.fromLatLngToDivPixel(nw);\n  let leftOffset = nwDivPx.x;\n  let topOffset = nwDivPx.y;\n\n  // Adjust horizontal offset - position the viewport at the map in the center\n  const mapWidth = projection.getWorldWidth();\n  const mapCount = Math.ceil(width / mapWidth);\n  leftOffset -= Math.floor(mapCount / 2) * mapWidth;\n\n  // Compute fractional zoom.\n  const scale = height ? (bottomLeft.y - topRight.y) / height : 1;\n  // When resizing aggressively, occasionally ne and sw are the same points\n  // See https://github.com/visgl/deck.gl/issues/4218\n  const zoom = Math.log2(scale || 1) + map.getZoom() - 1;\n\n  // Compute fractional center.\n  let centerPx = new google.maps.Point(width / 2, height / 2);\n  const centerContainer = projection.fromContainerPixelToLatLng(centerPx);\n  let latitude = centerContainer.lat();\n  const longitude = centerContainer.lng();\n\n  // Adjust vertical offset - limit latitude\n  if (Math.abs(latitude) > MAX_LATITUDE) {\n    latitude = latitude > 0 ? MAX_LATITUDE : -MAX_LATITUDE;\n    const center = new google.maps.LatLng(latitude, longitude);\n    centerPx = projection.fromLatLngToContainerPixel(center);\n    topOffset += centerPx.y - height / 2;\n  }\n\n  return {\n    width,\n    height,\n    left: leftOffset,\n    top: topOffset,\n    zoom,\n    pitch: map.getTilt(),\n    latitude,\n    longitude\n  };\n}\n/* eslint-enable max-statements */\n\n// Triggers picking on a mouse event\nfunction handleMouseEvent(deck, type, event) {\n  let callback;\n  switch (type) {\n    case 'click':\n      // Hack: because we do not listen to pointer down, perform picking now\n      deck._lastPointerDownInfo = deck.pickObject({\n        x: event.pixel.x,\n        y: event.pixel.y\n      });\n      callback = deck._onEvent;\n      break;\n\n    case 'mousemove':\n      type = 'pointermove';\n      callback = deck._onPointerMove;\n      break;\n\n    case 'mouseout':\n      type = 'pointerleave';\n      callback = deck._onPointerMove;\n      break;\n\n    default:\n      return;\n  }\n\n  callback({\n    type,\n    offsetCenter: event.pixel,\n    srcEvent: event\n  });\n}\n"],"file":"utils.js"}