{"version":3,"sources":["../../../src/simple-mesh-layer/simple-mesh-layer.js"],"names":["Layer","project32","phongLighting","picking","COORDINATE_SYSTEM","log","Model","Geometry","Texture2D","isWebGL2","hasFeature","FEATURES","MATRIX_ATTRIBUTES","shouldComposeModelMatrix","vs","fs","getTextureFromData","gl","data","opts","Object","assign","validateGeometryAttributes","attributes","assert","positions","POSITION","getGeometry","Error","DEFAULT_COLOR","defaultProps","mesh","value","type","async","texture","sizeScale","min","parameters","depthTest","depthFunc","_instanced","wireframe","material","getPosition","x","position","getColor","getOrientation","getScale","getTranslation","getTransformMatrix","SimpleMeshLayer","transpileToGLSL100","context","defines","GLSL_DERIVATIVES","DERIVATIVES_AVAILABLE","modules","attributeManager","getAttributeManager","addInstanced","instancePositions","transition","fp64","use64bitPositions","size","accessor","instanceColors","props","colorFormat","length","normalized","defaultValue","instanceModelMatrix","setState","emptyTexture","Uint8Array","width","height","oldProps","changeFlags","extensionsChanged","state","model","getModel","hasNormals","Boolean","NORMAL","normals","invalidateAll","setTexture","setDrawMode","uniforms","viewport","coordinateSystem","draw","composeModelMatrix","flatShading","getShaders","id","geometry","isInstanced","setUniforms","sampler","hasTexture","image","layerName"],"mappings":"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","sourcesContent":["// Note: This file will either be moved back to deck.gl or reformatted to web-monorepo standards\n// Disabling lint temporarily to facilitate copying code in and out of this repo\n/* eslint-disable */\n\n// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, phongLighting, picking, COORDINATE_SYSTEM, log} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, Texture2D, isWebGL2} from '@luma.gl/core';\nimport {hasFeature, FEATURES} from '@luma.gl/webgl';\n\nimport {MATRIX_ATTRIBUTES, shouldComposeModelMatrix} from '../utils/matrix';\n\nimport vs from './simple-mesh-layer-vertex.glsl';\nimport fs from './simple-mesh-layer-fragment.glsl';\n\n/*\n * Convert image data into texture\n * @returns {Texture2D} texture\n */\nfunction getTextureFromData(gl, data, opts) {\n  if (data instanceof Texture2D) {\n    return data;\n  }\n  return new Texture2D(gl, Object.assign({data}, opts));\n}\n\nfunction validateGeometryAttributes(attributes) {\n  log.assert(\n    attributes.positions || attributes.POSITION,\n    'SimpleMeshLayer requires \"postions\" or \"POSITION\" attribute in mesh property.'\n  );\n}\n\n/*\n * Convert mesh data into geometry\n * @returns {Geometry} geometry\n */\nfunction getGeometry(data) {\n  if (data.attributes) {\n    validateGeometryAttributes(data.attributes);\n    if (data instanceof Geometry) {\n      return data;\n    } else {\n      return new Geometry(data);\n    }\n  } else if (data.positions || data.POSITION) {\n    validateGeometryAttributes(data);\n    return new Geometry({\n      attributes: data\n    });\n  }\n  throw Error('Invalid mesh');\n}\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  mesh: {value: null, type: 'object', async: true},\n  texture: {type: 'object', value: null, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n  // TODO - parameters should be merged, not completely overridden\n  parameters: {\n    depthTest: true,\n    depthFunc: GL.LEQUAL\n  },\n\n  // _instanced is a hack to use world position instead of meter offsets in mesh\n  // TODO - formalize API\n  _instanced: true,\n  // NOTE(Tarek): Quick and dirty wireframe. Just draws\n  // the same mesh with LINE_STRIPS. Won't follow edges\n  // of the original mesh.\n  wireframe: false,\n  // Optional material for 'lighting' shader module\n  material: true,\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // yaw, pitch and roll are in degrees\n  // https://en.wikipedia.org/wiki/Euler_angles\n  // [pitch, yaw, roll]\n  getOrientation: {type: 'accessor', value: [0, 0, 0]},\n  getScale: {type: 'accessor', value: [1, 1, 1]},\n  getTranslation: {type: 'accessor', value: [0, 0, 0]},\n  // 4x4 matrix\n  getTransformMatrix: {type: 'accessor', value: []}\n};\n\nexport default class SimpleMeshLayer extends Layer {\n  getShaders() {\n    const transpileToGLSL100 = !isWebGL2(this.context.gl);\n\n    const defines = {};\n\n    if (hasFeature(this.context.gl, FEATURES.GLSL_DERIVATIVES)) {\n      defines.DERIVATIVES_AVAILABLE = 1;\n    }\n\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, phongLighting, picking],\n      transpileToGLSL100,\n      defines\n    });\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    attributeManager.addInstanced({\n      instancePositions: {\n        transition: true,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        size: 3,\n        accessor: 'getPosition'\n      },\n      instanceColors: {\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        size: this.props.colorFormat.length,\n        normalized: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceModelMatrix: MATRIX_ATTRIBUTES\n    });\n\n    this.setState({\n      // Avoid luma.gl's missing uniform warning\n      // TODO - add feature to luma.gl to specify ignored uniforms?\n      emptyTexture: new Texture2D(this.context.gl, {\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    if (props.mesh !== oldProps.mesh || changeFlags.extensionsChanged) {\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      if (props.mesh) {\n        this.setState({model: this.getModel(props.mesh)});\n\n        const attributes = props.mesh.attributes || props.mesh;\n        this.setState({\n          hasNormals: Boolean(attributes.NORMAL || attributes.normals)\n        });\n      }\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (props.texture !== oldProps.texture) {\n      this.setTexture(props.texture);\n    }\n\n    if (this.state.model) {\n      this.state.model.setDrawMode(this.props.wireframe ? GL.LINE_STRIP : GL.TRIANGLES);\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    this.state.emptyTexture.delete();\n    if (this.state.texture) {\n      this.state.texture.delete();\n    }\n  }\n\n  draw({uniforms}) {\n    if (!this.state.model) {\n      return;\n    }\n\n    const {viewport} = this.context;\n    const {sizeScale, coordinateSystem, _instanced} = this.props;\n\n    this.state.model.draw({\n      uniforms: Object.assign({}, uniforms, {\n        sizeScale,\n        composeModelMatrix: !_instanced || shouldComposeModelMatrix(viewport, coordinateSystem),\n        flatShading: !this.state.hasNormals\n      })\n    });\n  }\n\n  getModel(mesh) {\n    const model = new Model(\n      this.context.gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: getGeometry(mesh),\n        isInstanced: true\n      })\n    );\n\n    const {texture, emptyTexture} = this.state;\n    model.setUniforms({\n      sampler: texture || emptyTexture,\n      hasTexture: Boolean(texture)\n    });\n\n    return model;\n  }\n\n  setTexture(image) {\n    const {gl} = this.context;\n    const {emptyTexture, model} = this.state;\n\n    if (this.state.texture) {\n      this.state.texture.delete();\n    }\n\n    const texture = image ? getTextureFromData(gl, image) : null;\n    this.setState({texture});\n\n    if (model) {\n      // props.mesh may not be ready at this time.\n      // The sampler will be set when `getModel` is called\n      model.setUniforms({\n        sampler: texture || emptyTexture,\n        hasTexture: Boolean(texture)\n      });\n    }\n  }\n}\n\nSimpleMeshLayer.layerName = 'SimpleMeshLayer';\nSimpleMeshLayer.defaultProps = defaultProps;\n"],"file":"simple-mesh-layer.js"}