{"version":3,"file":"InteractionOptions.js","sourceRoot":"","sources":["../../../../../src/.internal/core/interaction/InteractionOptions.ts"],"names":[],"mappings":"","sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IStyleProperty } from \"../defs/IStyleProperty\";\r\n\r\n/**\r\n * Represents collection of options for [[Sprite]] inertia.\r\n */\r\nexport interface IInertiaOptions {\r\n\r\n\t/**\r\n\t * When calculating inertia direction and speed, we look back at the log of\r\n\t * coordinates. This setting holds number of milliseconds to check back to.\r\n\t */\r\n\ttime?: number;\r\n\r\n\t/**\r\n\t * How long should inertia animation play out.\r\n\t */\r\n\tduration?: number;\r\n\r\n\t/**\r\n\t * How far should object go by inertia counting from its reference point in\r\n\t * trail and its release point. I.e. if there are 100 pixels between reference\r\n\t * point and drop point, then  it will go another `100 x inertiaFactor` pixels\r\n\t * by inertia.\r\n\t */\r\n\tfactor?: number;\r\n\r\n\t/**\r\n\t * Easing function to be used for inertia animation.\r\n\t */\r\n\teasing?: (value: number) => number;\r\n}\r\n\r\n/**\r\n * Represents collection of options related to click/tap\r\n */\r\nexport interface IHitOptions {\r\n\r\n\t/**\r\n\t * If there were less than this milliseconds between two consecutive clicks\r\n\t * consider it a double-hit.\r\n\t */\r\n\tdoubleHitTime?: number;\r\n\r\n\t/**\r\n\t * Maximum number of pixels a pointer can move from its original position\r\n\t * while holding down mouse/touch to still consider it a click rather than\r\n\t * some other gesture.\r\n\t */\r\n\thitTolerance?: number;\r\n\r\n\t/**\r\n\t * If set to `true` (default), Interaction will try to trick the browser not\r\n\t * to move focus on a clicked/touched element. This prevents items to become\r\n\t * focused (and highlighted) on click/touch, but still make them focusable\r\n\t * using keyboard for accessibility.\r\n\t */\r\n\tnoFocus?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Represents collection of options related to hovering elements\r\n */\r\nexport interface IHoverOptions {\r\n\r\n\t/**\r\n\t * What happens when element is no longer touched.\r\n\t *\r\n\t * `\"remove\"` - \"out\" event is triggered immediately, meaning all related hover\r\n\t * states and tooltips will be removed.\r\n\t *\r\n\t * `\"delay\"` - \"out\" event is delayed by `touchOutDelay` milliseconds.\r\n\t *\r\n\t * `\"leave\"` (default) - \"out\" event will not be triggered until any other\r\n\t * interaction takes place somewhere elese.\r\n\t *\r\n\t * @default \"leave\"\r\n\t */\r\n\ttouchOutBehavior?: \"removed\" | \"delay\" | \"leave\";\r\n\r\n\t/**\r\n\t * How long in milliseconds should \"out\" event be delayed when the element\r\n\t * is not longer being touched. Works only if `touchOutBehavior = \"delay\"`.\r\n\t */\r\n\ttouchOutDelay?: number;\r\n\r\n}\r\n\r\n/**\r\n * Represents collection of options for swipe gesture.\r\n */\r\nexport interface ISwipeOptions {\r\n\r\n\t/**\r\n\t * Time limit in milliseconds for swipe to occur.\r\n\t */\r\n\ttime?: number;\r\n\r\n\t/**\r\n\t * Vertical limit in pixels. Gesture deviating more than that will cancel\r\n\t * swipe.\r\n\t */\r\n\tverticalThreshold?: number;\r\n\r\n\t/**\r\n\t * Minimum number of pixels to move horizontally for swipe to register.\r\n\t */\r\n\thorizontalThreshold?: number;\r\n\r\n}\r\n\r\n/**\r\n * Holds styles for mouse cursor.\r\n */\r\nexport interface ICursorOptions {\r\n\r\n\t/**\r\n\t * CSS to apply to cursor when neutral.\r\n\t */\r\n\tdefaultStyle?: Array<IStyleProperty>;\r\n\r\n\t/**\r\n\t * CSS to apply to cursor when hovering over element.\r\n\t */\r\n\toverStyle?: Array<IStyleProperty>;\r\n\r\n\t/**\r\n\t * CSS to apply to cursor when mouse button is down.\r\n\t */\r\n\tdownStyle?: Array<IStyleProperty>;\r\n}\r\n\r\n/**\r\n * Defines an interface for a keyboar option object.\r\n *\r\n * These are used when controlling draggable elements with keyboard arrows.\r\n */\r\nexport interface IKeyboardOptions {\r\n\r\n\t/**\r\n\t * Number of pixels to move per millisecond.\r\n\t */\r\n\tspeed?: number;\r\n\r\n\t/**\r\n\t * A multiplication factor for move speed growth per second\r\n\t * For example if the initial speed is 10px/s (0.01px/ms) and accelleration\r\n\t * is 0.5, pressing and holding arrow key will make the element move at\r\n\t * 10px/s, then will accellerate to 15px/s after 1s, and so on.\r\n\t */\r\n\taccelleration?: number;\r\n\r\n\t/**\r\n\t * Number of milliseconds before accelleration kicks in.\r\n\t */\r\n\taccellerationDelay?: number;\r\n\r\n}\r\n\r\n/**\r\n * Represents collection of options for mouse-related interactions.\r\n */\r\nexport interface IMouseOptions {\r\n\r\n\t/**\r\n\t * A modifier for mouse wheel sensitivity.\r\n\t *\r\n\t * 1 (default) means sensitivity is default.\r\n\t * \r\n\t * Less than 1 will reduce sensitivity, while value bigger than 1 will\r\n\t * increase it.\r\n\t */\r\n\tsensitivity?: number;\r\n\r\n}"]}