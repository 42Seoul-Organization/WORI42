{"version":3,"file":"Pointer.js","sourceRoot":"","sources":["../../../../../src/.internal/core/interaction/Pointer.ts"],"names":[],"mappings":"AAAA;;;GAGG","sourcesContent":["/**\r\n * The functionality related to interaction pointers such as mouse cursor and\r\n * point of touch on touch-enabled devices\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPoint } from \"../defs/IPoint\";\r\nimport { AMEvent } from \"../utils/EventDispatcher\";\r\nimport { InteractionObject, IInteractionObjectEvents } from \"./InteractionObject\";\r\n\r\n/**\r\n * Represents pointer, i.e. mouse cursor or touch point.\r\n */\r\nexport interface IPointer {\r\n\r\n\t/**\r\n\t * An ID of the pointer.\r\n\t *\r\n\t * Mouse is always \"0\".\r\n\t */\r\n\tid: string;\r\n\r\n\t/**\r\n\t * Is that a touch pointer?\r\n\t */\r\n\ttouch: boolean;\r\n\r\n\t/**\r\n\t * A [[IPoint]] to where pointer position was when it was created.\r\n\t */\r\n\tstartPoint: IPoint;\r\n\r\n\t/**\r\n\t * A timestamp of when the pointer was created.\r\n\t */\r\n\tstartTime: number;\r\n\r\n\t/**\r\n\t * Current position of the pointer.\r\n\t */\r\n\tpoint: IPoint;\r\n\r\n\t/**\r\n\t * Holds information about trail of the pointer movement.\r\n\t *\r\n\t * It's an array of [[IBreadcrumb]] items, indicating where pointer has been\r\n\t * at any particular time in its movement.\r\n\t */\r\n\ttrack: IBreadcrumb[];\r\n\r\n\t/**\r\n\t * Holds a timeout identifier for HIT event.\r\n\t *\r\n\t * This is used to delay HIT event so that we can catch DOUBLEHIT. (if\r\n\t * enabled)\r\n\t */\r\n\thitTimeout?: number;\r\n\r\n\t/**\r\n\t * Holds a reference to a swipe timeout.\r\n\t */\r\n\tswipeTimeout?: number;\r\n\r\n\t/**\r\n\t * Holds indicator if swipe gesture was canceled.\r\n\t */\r\n\tswipeCanceled?: boolean;\r\n\r\n\t/**\r\n\t * A reference to the last encountered event object.\r\n\t */\r\n\tlastEvent?: MouseEvent | Touch;\r\n\r\n\t/**\r\n\t * A reference to last \"down\" event in case we need to access it for some\r\n\t * other operation, such as initiating drag on a different object.\r\n\t */\r\n\tlastDownEvent?: MouseEvent | TouchEvent;\r\n\r\n\t/**\r\n\t * A reference to last \"up\" event in case we need to access it for some\r\n\t * other operation, such as initiating drag on a different object.\r\n\t */\r\n\tlastUpEvent?: MouseEvent | TouchEvent;\r\n\r\n\t/**\r\n\t * For mousedown events, we need to know which mouse button was clicked:\r\n\t * 1 - left button\r\n\t * 2 - middle button\r\n\t * 3 - right button\r\n\t */\r\n\tbutton?: number;\r\n\r\n\t/**\r\n\t * A reference to \"dragstart\" event if it's necessary. Normally we don't\r\n\t * execute this event on draggable sprites immediately on DOWN event. We wait\r\n\t * until it is actually moved to do it.\r\n\t */\r\n\tdragStartEvents?: Array<AMEvent<InteractionObject, IInteractionObjectEvents>[\"dragstart\"]>;\r\n\r\n\t/**\r\n\t * Contains reference to InteractionObject which is currently being dragged\r\n\t * by this pointer. This is used to run checks if we should trigger hovers\r\n\t * on other elements when element is being dragged.\r\n\t */\r\n\tdragTarget?: InteractionObject;\r\n\r\n}\r\n\r\n/**\r\n * Represents coordinates at specific point in time.\r\n */\r\nexport interface IBreadcrumb {\r\n\r\n\t/**\r\n\t * Timestamp in milliseconds of the trail breadcrumb.\r\n\t */\r\n\ttimestamp: number;\r\n\r\n\t/**\r\n\t * Holds the coordinates for the breadcrumb.\r\n\t */\r\n\tpoint: IPoint;\r\n\r\n}\r\n"]}