{"version":3,"file":"Paper.js","sourceRoot":"","sources":["../../../../../src/.internal/core/rendering/Paper.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Paper class just like the white sheet of pressed fiber it draws its name\r\n * inspiration from is used as a starting point to start a drawing.\r\n *\r\n * Before we can start adding elements (drawing) we need to take out a new sheet\r\n * of paper, or in this instance create a blank SVG element.\r\n *\r\n * This class creates such element, as well as implements methods needed to\r\n * start adding elements to it.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AMElement } from \"./AMElement\";\r\nimport { Group } from \"./Group\";\r\nimport { SVGContainer } from \"./SVGContainer\";\r\nimport * as $dom from \"../utils/DOM\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents available SVG elements that can be added to paper.\r\n *\r\n * @todo Review if we can remove commented out methods\r\n */\r\nexport type SVGElementNames = \"a\" | \"altGlyph\" | \"altGlyphDef\" | \"altGlyphItem\" | \"animate\" | \"animateColor\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"color-profile\" | \"cursor\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"feConvolveMatrix\" | \"filter\" | \"font\" | \"font-face\" | \"font-face-format\" | \"font-face-name\" | \"font-face-src\" | \"font-face-uri\" | \"foreignObject\" | \"g\" | \"glyph\" | \"glyphRef\" | \"hkern\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"missing-glyph\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"script\" | \"set\" | \"stop\" | \"style\" | \"svg\" | \"switch\" | \"symbol\" | \"text\" | \"textPath\" | \"title\" | \"tref\" | \"tspan\" | \"use\" | \"view\" | \"vkern\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Paper class which when instantiated will create an SVG element as well as\r\n * some of the sub-elements like `<desc>`, `<defs>`.\r\n *\r\n * Use its methods like `addGroup` and `append` to add elements to the paper.\r\n */\r\nexport class Paper {\r\n\r\n\t/**\r\n\t * A reference `<svg>` element.\r\n\t */\r\n\tpublic svg: SVGSVGElement;\r\n\r\n\t/**\r\n\t * A reference to the HTML container the `<svg>` element is placed in.\r\n\t */\r\n\tpublic container: HTMLElement;\r\n\r\n\t/**\r\n\t * A reference to the `<defs>` element.\r\n\t */\r\n\tpublic defs: SVGDefsElement;\r\n\r\n\t/**\r\n\t * An id of the element.\r\n\t */\r\n\tpublic id: string;\r\n\r\n\t/**\r\n\t * Creates main `<svg>` container and related elements.\r\n\t *\r\n\t * @param container A reference to HTML element to create `<svg>` in\r\n\t */\r\n\tconstructor(container: HTMLElement, id: string) {\r\n\r\n\t\t// Store container reference\r\n\t\tthis.container = container;\r\n\t\tthis.id = id;\r\n\r\n\t\t// Create SVG element\r\n\t\tlet svg = <SVGSVGElement>document.createElementNS($dom.SVGNS, \"svg\");\r\n\t\tsvg.setAttribute(\"version\", \"1.1\");\r\n\t\tsvg.setAttributeNS($dom.XMLNS, \"xmlns\", $dom.SVGNS);\r\n\t\tsvg.setAttributeNS($dom.XMLNS, \"xmlns:xlink\", $dom.XLINK);\r\n\t\tsvg.setAttribute(\"role\", \"group\");\r\n\t\tthis.container.appendChild(svg);\r\n\r\n\t\t// Add description\r\n\t\t//let desc: SVGElement = <SVGElement>document.createElementNS($dom.SVGNS, \"desc\");\r\n\t\t//desc.appendChild(document.createTextNode(\"JavaScript chart by amCharts\"));\r\n\t\t//svg.appendChild(desc);\r\n\r\n\t\t// Add defs\r\n\t\tthis.defs = <SVGDefsElement>document.createElementNS($dom.SVGNS, \"defs\");\r\n\t\tsvg.appendChild(this.defs);\r\n\r\n\t\t// Set width and height to fit container\r\n\t\tsvg.style.width = \"100%\";\r\n\t\tsvg.style.height = \"100%\";\r\n\t\tsvg.style.overflow = \"visible\";\r\n\r\n\t\t// Store variable\r\n\t\tthis.svg = svg;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new element. Does not attach it to Paper yet.\r\n\t *\r\n\t * @param elementName  Element name\r\n\t * @return New element\r\n\t */\r\n\tpublic add(elementName: SVGElementNames): AMElement {\r\n\t\treturn new AMElement(elementName);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Group element. Does not attach it to Paper.\r\n\t *\r\n\t * @param groupName  Element name\r\n\t * @return New Group\r\n\t */\r\n\tpublic addGroup(groupName: SVGElementNames): Group {\r\n\t\treturn new Group(groupName);\r\n\t}\r\n\r\n\t/**\r\n\t * Appends an element to Paper.\r\n\t *\r\n\t * @param element Element to append\r\n\t */\r\n\tpublic append(element: AMElement): void {\r\n\t\tif (element) {\r\n\t\t\tthis.svg.appendChild(element.node);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Appends an element to `<defs>` block of the Paper.\r\n\t *\r\n\t * @param element  Element\r\n\t */\r\n\tpublic appendDef(element: AMElement): void {\r\n\t\tif (element) {\r\n\t\t\tthis.defs.appendChild(element.node);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns new `<foreignObject>` element. Does not append it to\r\n\t * Paper.\r\n\t *\r\n\t * @return A foreignObject element\r\n\t */\r\n\tpublic foreignObject(): AMElement {\r\n\t\tlet element = new AMElement(\"foreignObject\");\r\n\t\t//this.append(element);\r\n\t\treturn element;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if browser supports `<foreignObject>` elements.\r\n\t *\r\n\t * @return Supports `foreignObject`?\r\n\t */\r\n\tpublic supportsForeignObject(): boolean {\r\n\t\treturn document.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#Extensibility\", \"1.1\");\r\n\t}\r\n\r\n}\r\n\r\n\r\nlet ghostPaper: Paper | null = null;\r\n\r\n/**\r\n * A [[Paper]] instance to create elements, that are not yet ready to be\r\n * placed in visible DOM.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport function getGhostPaper(): Paper {\r\n\tif (ghostPaper === null) {\r\n\t\t// ghost is used to draw elements while real paper is not yet created or Sprite doesn't know parent yet\r\n\t\tlet ghostDiv: HTMLDivElement = document.createElement(\"div\");\r\n\t\tghostDiv.hidden = true;\r\n\t\tdocument.body.appendChild(ghostDiv);\r\n\t\tlet ghostSvgContainer = new SVGContainer(ghostDiv, true);\r\n\t\tghostPaper = new Paper(ghostSvgContainer.SVGContainer, \"ghost\");\r\n\r\n\t}\r\n\r\n\treturn ghostPaper;\r\n}\r\n"]}