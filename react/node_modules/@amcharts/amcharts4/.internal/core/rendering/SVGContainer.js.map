{"version":3,"file":"SVGContainer.js","sourceRoot":"","sources":["../../../../../src/.internal/core/rendering/SVGContainer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * This functionality is related to the HTML wrapper that houses `<svg>` tag.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../Container\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { IDisposer } from \"../utils/Disposer\";\r\nimport { Popup } from \"../elements/Popup\";\r\nimport { Modal } from \"../elements/Modal\";\r\nimport { ListTemplate, ListDisposer } from \"../utils/List\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $dom from \"../utils/DOM\";\r\nimport * as $array from \"../utils/Array\";\r\nimport * as $type from \"../utils/Type\";\r\nimport { ResizeSensor } from \"../utils/ResizeSensor\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n\r\n/**\r\n * A array of all SVG Containers (one SVG container per chart instance).\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport const svgContainers: Array<SVGContainer> = [];\r\n\r\n/**\r\n * A class used to create an HTML wrapper for the SVG contents.\r\n */\r\nexport class SVGContainer implements IDisposer {\r\n\r\n\t/**\r\n\t * Indicates if this object has already been deleted. Any\r\n\t * destruction/disposal code should take this into account when deciding\r\n\t * wheter to run potentially costly disposal operations if they already have\r\n\t * been run.\r\n\t */\r\n\tprotected _disposed: boolean = false;\r\n\r\n\t/**\r\n\t * Width of HTML element.\r\n\t */\r\n\tpublic width: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * Height of HTML element.\r\n\t */\r\n\tpublic height: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * A [[Container]] element which is placed into container.\r\n\t */\r\n\tprotected _container: $type.Optional<Container>;\r\n\r\n\t/**\r\n\t * A parent HTML container that SVG wrapper element is placed in.\r\n\t */\r\n\tpublic htmlElement: HTMLElement;\r\n\r\n\t/**\r\n\t * If this component is in a separate HTML container, `autoResize` means the\r\n\t * module will constantly measure container's size and adopt contents to it.\r\n\t */\r\n\tpublic autoResize: Boolean = true;\r\n\r\n\t/**\r\n\t * A `<div>` element which acts as a wrapper/holder for the SVG element.\r\n\t */\r\n\tpublic SVGContainer: HTMLDivElement;\r\n\r\n\t/**\r\n\t * A `<div>` element which acts as a placeholder for accesibility reader\r\n\t * alert.\r\n\t */\r\n\tprivate _readerAlertElement: HTMLDivElement;\r\n\r\n\t/**\r\n\t * A reference to ResizeSensor object which monitors changes of div size.\r\n\t *\r\n\t * @deprecated\r\n\t * @ignore\r\n\t */\r\n\tpublic resizeSensor: ResizeSensor;\r\n\r\n\t/**\r\n\t * Holds list of references to [[Sprite]] objects that should not be exported\r\n\t * when exporting chart to an image.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic nonExportableSprites: Sprite[] = [];\r\n\r\n\t/**\r\n\t * Holds [[Modal]] object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _modal: $type.Optional<Modal>;\r\n\r\n\t/**\r\n\t * Holds [[Popup]] objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _popups: $type.Optional<ListTemplate<Popup>>;\r\n\r\n\t/**\r\n\t * List of objects that need to be disposed when this one is disposed.\r\n\t */\r\n\tprotected _disposers: Array<IDisposer> = [];\r\n\r\n\tpublic cssScale: number = 1;\r\n\r\n\t// This is needed so that it won't resize while printing, so that way printing works correctly.\r\n\tprotected _printing: boolean = false;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t *\r\n\t * * Creates an HTML wrapper for SVG\r\n\t */\r\n\tconstructor(htmlElement: HTMLElement, ghost?: boolean) {\r\n\r\n\t\t// Log parent HTML element\r\n\t\tthis.htmlElement = htmlElement;\r\n\r\n\t\tif (!ghost) {\r\n\t\t\tthis._printing = false;\r\n\r\n\t\t\tthis.initSensor();\r\n\r\n\t\t\tthis._disposers.push($dom.addEventListener(window, \"beforeprint\", () => {\r\n\t\t\t\tthis._printing = true;\r\n\t\t\t}));\r\n\r\n\t\t\tthis._disposers.push($dom.addEventListener(window, \"afterprint\", () => {\r\n\t\t\t\tthis._printing = false;\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\t// Adds to containers array\r\n\t\tsvgContainers.push(this);\r\n\r\n\t\t/**\r\n\t\t * Create child div for the container - it will have svg node\r\n\t\t * It might seem that this container is not necessay, however having it solves\r\n\t\t * a problems with mouse position detection and some other.\r\n\t\t */\r\n\t\tlet svgContainer = document.createElement(\"div\");\r\n\t\tlet style = svgContainer.style;\r\n\t\tstyle.width = \"100%\";\r\n\t\tstyle.height = \"100%\";\r\n\t\tstyle.position = \"relative\";\r\n\t\thtmlElement.appendChild(svgContainer);\r\n\r\n\t\tthis.SVGContainer = svgContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)Initializes a resize sensor.\r\n\t */\r\n\tpublic initSensor(): void {\r\n\t\tif (this.resizeSensor) {\r\n\t\t\tthis.resizeSensor.dispose();\r\n\t\t}\r\n\t\tconst callback = () => {\r\n\t\t\tif (this.autoResize && !this._printing) {\r\n\t\t\t\tthis.measure();\r\n\t\t\t}\r\n\t\t};\r\n\t\tthis.resizeSensor = new ResizeSensor(this.htmlElement, callback);\r\n\t\tthis._disposers.push(this.resizeSensor);\r\n\t}\r\n\r\n\t/**\r\n\t * Measures size of parent HTML element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measure(): void {\r\n\t\tlet width: number = $utils.width(this.htmlElement);\r\n\t\tlet height: number = $utils.height(this.htmlElement);\r\n\t\tlet container = this.container;\r\n\t\tif (container) {\r\n\t\t\tif (this.width != width || this.height != height) {\r\n\t\t\t\tthis.width = width;\r\n\t\t\t\tthis.height = height;\r\n\r\n\t\t\t\tif (width > 0) {\r\n\t\t\t\t\tcontainer.maxWidth = width;\r\n\t\t\t\t}\r\n\t\t\t\tif (height > 0) {\r\n\t\t\t\t\tcontainer.maxHeight = height;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$dom.fixPixelPerfect(this.SVGContainer);\r\n\t\t\t}\r\n\r\n\t\t\tif (!container.maxWidth) {\r\n\t\t\t\tcontainer.maxWidth = 0;\r\n\t\t\t}\r\n\t\t\tif (!container.maxHeight) {\r\n\t\t\t\tcontainer.maxHeight = 0;\r\n\t\t\t}\r\n\t\t\tthis.cssScale = 1;\r\n\t\t\tthis.checkTransform(this.htmlElement);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Container]] element which is placed into container.\r\n\t *\r\n\t * @param container  Container\r\n\t */\r\n\tpublic set container(container: $type.Optional<Container>) {\r\n\t\tthis._container = container;\r\n\t\tthis.measure();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Container\r\n\t */\r\n\tpublic get container(): $type.Optional<Container> {\r\n\t\treturn this._container;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if this object has been already been disposed.\r\n\t *\r\n\t * @return Is disposed?\r\n\t */\r\n\tpublic isDisposed(): boolean {\r\n\t\treturn this._disposed;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes this container from SVG container list in system, which\r\n\t * effectively disables size change monitoring for it.\r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tif (!this._disposed) {\r\n\t\t\t$array.remove(svgContainers, this);\r\n\t\t}\r\n\r\n\t\t$array.each(this._disposers, (item) => {\r\n\t\t\titem.dispose();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if chart container should have its style set\r\n\t * to `overflow: hidden`.\r\n\t *\r\n\t * Normally, we don't want that, so that certain elements, such as tooltips,\r\n\t * would be able to go outside chart area.\r\n\t *\r\n\t * There is one issue though. Some browsers ignore SVG masks and would\r\n\t * display scrollbars if chart elements, that go outside chart area extend\r\n\t * outside window.\r\n\t *\r\n\t * This is especially true for [[MapChart]], which can have its elements\r\n\t * extend very widely when zoomed in. Even if those parts are not visible\r\n\t * because of SVG masks, some browsers might still display window scrollbars.\r\n\t *\r\n\t * This is why we set this setting to `true` in [[MapChart]].\r\n\t *\r\n\t * Other charts use default of `false`.\r\n\t */\r\n\tpublic set hideOverflow(value: boolean) {\r\n\t\tif (value) {\r\n\t\t\tthis.SVGContainer.style.overflow = \"hidden\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.SVGContainer.style.overflow = \"\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * MODAL/POPUP RELATED STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Returns a [[Modal]] instance, associated with this chart.\r\n\t * (elements top parent)\r\n\t *\r\n\t * Accessing modal does not make it appear. To make a modal appear, use\r\n\t * `showModal()` method.\r\n\t *\r\n\t * @see {@link Modal} for more information about using Modal windows\r\n\t * @return Modal instance\r\n\t */\r\n\tpublic get modal(): Modal {\r\n\r\n\t\tif (!$type.hasValue(this._modal)) {\r\n\r\n\t\t\t// Create new modal\r\n\t\t\tthis._modal = new Modal();\r\n\t\t\tthis._modal.container = this.SVGContainer;\r\n\r\n\t\t\t// Add to disposers\r\n\t\t\tthis._disposers.push(this._modal);\r\n\t\t}\r\n\t\treturn this._modal;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Opens a modal window with specific content (`text` parameter) and,\r\n\t * optionally, `title`.\r\n\t *\r\n\t * The `text` parameter can contain HTML content.\r\n\t *\r\n\t * @see {@link Modal} for more information about using Modal windows\r\n\t * @param text   Modal contents\r\n\t * @param title  Title for the modal window\r\n\t */\r\n\tpublic openModal(text: string, title?: string): Modal {\r\n\r\n\t\t// Hide previous modal\r\n\t\tthis.closeModal();\r\n\r\n\t\t// Create modal\r\n\t\tlet modal = this.modal;\r\n\t\tmodal.content = text;\r\n\t\tmodal.readerTitle = title || \"\";\r\n\t\tmodal.title = title || \"\";\r\n\t\tmodal.open();\r\n\r\n\t\treturn modal;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides modal window if there is one currently open.\r\n\t */\r\n\tpublic closeModal(): void {\r\n\t\tif (this._modal) {\r\n\t\t\tthis.modal.close();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of popups for this chart.\r\n\t *\r\n\t * @return Popups\r\n\t */\r\n\tpublic get popups(): ListTemplate<Popup> {\r\n\r\n\t\tif (!$type.hasValue(this._popups)) {\r\n\r\n\t\t\t// Create popup template\r\n\t\t\tlet popupTemplate = new Popup();\r\n\t\t\tpopupTemplate.container = this.SVGContainer;\r\n\r\n\t\t\t// Create the list\r\n\t\t\tthis._popups = new ListTemplate(popupTemplate);\r\n\r\n\t\t\t// Add to disposers\r\n\t\t\tthis._disposers.push(new ListDisposer(this._popups));\r\n\t\t\tthis._disposers.push(this._popups.template);\r\n\t\t}\r\n\t\treturn this._popups;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates, opens, and returns a new [[Popup]] window.\r\n\t *\r\n\t * `text` can be any valid HTML.\r\n\t *\r\n\t * `title` is currently not supported.\r\n\t *\r\n\t * @param text   Popup contents\r\n\t * @param title  Popup title\r\n\t * @return Popup instance\r\n\t */\r\n\tpublic openPopup(text: string, title?: string): Popup {\r\n\t\tlet popup = this.popups.create();\r\n\t\tpopup.content = text;\r\n\t\tif ($type.hasValue(title)) {\r\n\t\t\tpopup.title = title;\r\n\t\t}\r\n\t\tpopup.open();\r\n\t\treturn popup;\r\n\t}\r\n\r\n\t/**\r\n\t * Closes all currently open popup windows\r\n\t */\r\n\tpublic closeAllPopups(): void {\r\n\t\tthis.popups.each((popup) => {\r\n\t\t\tpopup.close();\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * ACCESSIBILITY STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * A `<div>` element used as as placeholder to trigger screen alerts.\r\n\t *\r\n\t * @sunce 4.9.2\r\n\t * @return Element\r\n\t */\r\n\tpublic get readerAlertElement(): HTMLDivElement {\r\n\t\tif (!$type.hasValue(this._readerAlertElement)) {\r\n\t\t\t// Create element\r\n\t\t\tconst div = document.createElement(\"div\");\r\n\t\t\tdiv.setAttribute(\"role\", \"alert\");\r\n\t\t\tdiv.style.zIndex = \"-100000\";\r\n\t\t\tdiv.style.opacity = \"0\";\r\n\t\t\tthis.SVGContainer.appendChild(div);\r\n\t\t\tthis._readerAlertElement = div;\r\n\t\t}\r\n\t\treturn this._readerAlertElement;\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers screen reader read out a message.\r\n\t *\r\n\t * @since 4.9.2\r\n\t * @param  text  Alert text\r\n\t */\r\n\tpublic readerAlert(text: string): void {\r\n\t\tthis.readerAlertElement.innerHTML = text;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * OTHER STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\tprotected checkTransform(div: HTMLElement) {\r\n\t\tif (window.getComputedStyle) {\r\n\t\t\tif (div && div.style) {\r\n\t\t\t\tlet style = window.getComputedStyle(div, null);\r\n\t\t\t\tif (style) {\r\n\t\t\t\t\tlet matrix = style.getPropertyValue(\"-webkit-transform\") ||\r\n\t\t\t\t\t\tstyle.getPropertyValue(\"-moz-transform\") ||\r\n\t\t\t\t\t\tstyle.getPropertyValue(\"-ms-transform\") ||\r\n\t\t\t\t\t\tstyle.getPropertyValue(\"-o-transform\") ||\r\n\t\t\t\t\t\tstyle.getPropertyValue(\"transform\");\r\n\r\n\t\t\t\t\tif (matrix && matrix !== \"none\") {\r\n\t\t\t\t\t\tlet values = matrix.split('(')[1].split(')')[0].split(',');\r\n\t\t\t\t\t\tlet a = Number(values[0]);\r\n\t\t\t\t\t\tlet b = Number(values[1]);\r\n\r\n\t\t\t\t\t\tlet scale = Math.sqrt(a * a + b * b);\r\n\r\n\t\t\t\t\t\tif (!isNaN(scale)) {\r\n\t\t\t\t\t\t\tthis.cssScale *= scale;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (div.parentNode && div.parentNode instanceof HTMLElement) {\r\n\t\t\t\tthis.checkTransform(div.parentNode);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n"]}