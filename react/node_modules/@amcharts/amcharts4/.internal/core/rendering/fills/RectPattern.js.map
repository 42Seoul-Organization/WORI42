{"version":3,"file":"RectPattern.js","sourceRoot":"","sources":["../../../../../../src/.internal/core/rendering/fills/RectPattern.ts"],"names":[],"mappings":"AAAA;;GAEG;;AAEH;;;;;GAKG;AACH,OAAO,EAAE,OAAO,EAAqB,MAAM,WAAW,CAAC;AAEvD,OAAO,EAAE,QAAQ,EAAE,MAAM,gBAAgB,CAAC;AAiBzC,CAAC;AAGF;;;;;GAKG;AAEH;;GAEG;AACH;IAAiC,+BAAO;IAYvC;;OAEG;IACH;QAAA,YACC,iBAAO,SAKP;QAJA,KAAI,CAAC,UAAU,GAAG,CAAC,CAAC;QACpB,KAAI,CAAC,SAAS,GAAG,CAAC,CAAC;QACnB,KAAI,CAAC,KAAK,GAAG,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACpC,KAAI,CAAC,UAAU,CAAC,KAAI,CAAC,KAAK,CAAC,CAAC;;IAC7B,CAAC;IAED;;OAEG;IACO,0BAAI,GAAd;QACC,iBAAM,IAAI,WAAE,CAAC;QACb,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QAC9C,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAC/C,IAAI,IAAI,CAAC,KAAK,EAAE;YACf,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,SAAS,EAAE,QAAQ,EAAE,IAAI,CAAC,UAAU,EAAE,GAAG,EAAC,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,GAAG,EAAC,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;SACxJ;IACF,CAAC;IAOD,sBAAW,kCAAS;QAKpB;;WAEG;aACH;YACC,OAAO,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;QACrC,CAAC;QAfD;;;;WAIG;aACH,UAAqB,KAAa;YACjC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,GAAG,KAAK,CAAC;YACrC,IAAI,CAAC,IAAI,EAAE,CAAC;QACb,CAAC;;;OAAA;IAcD,sBAAW,mCAAU;QAKrB;;WAEG;aACH;YACC,OAAO,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;QACtC,CAAC;QAfD;;;;WAIG;aACH,UAAsB,KAAa;YAClC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC;YACtC,IAAI,CAAC,IAAI,EAAE,CAAC;QACb,CAAC;;;OAAA;IASF,kBAAC;AAAD,CAAC,AArED,CAAiC,OAAO,GAqEvC;;AAED;;;;;GAKG;AACH,QAAQ,CAAC,iBAAiB,CAAC,aAAa,CAAC,GAAG,WAAW,CAAC","sourcesContent":["/**\r\n * Rectangular pattern module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Pattern, PatternProperties } from \"./Pattern\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $type from \"../../utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for rectangular pattern\r\n */\r\nexport interface RectPatternProperties extends PatternProperties {\r\n\trectWidth: number;\r\n\trectHeight: number;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Rectangular pattern\r\n */\r\nexport class RectPattern extends Pattern {\r\n\r\n\t/**\r\n\t * Reference to `<rect>` element used in pattern.\r\n\t */\r\n\tprotected _rect: $type.Optional<AMElement>;\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: RectPatternProperties;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.rectHeight = 1;\r\n\t\tthis.rectWidth = 1;\r\n\t\tthis._rect = this.paper.add(\"rect\");\r\n\t\tthis.addElement(this._rect);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the rectangular element.\r\n\t */\r\n\tprotected draw(): void {\r\n\t\tsuper.draw();\r\n\t\tthis.properties[\"rotationX\"] = this.width / 2;\r\n\t\tthis.properties[\"rotationY\"] = this.height / 2;\t\t\r\n\t\tif (this._rect) {\r\n\t\t\tthis._rect.attr({ \"width\": this.rectWidth, \"height\": this.rectHeight, \"x\":(this.width - this.rectWidth) / 2, \"y\":(this.height - this.rectHeight) / 2 });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Rectangle width in pixels.\r\n\t *\r\n\t * @param value Width (px)\r\n\t */\r\n\tpublic set rectWidth(value: number) {\r\n\t\tthis.properties[\"rectWidth\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get rectWidth(): number {\r\n\t\treturn this.properties[\"rectWidth\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Rectangle height in pixels.\r\n\t *\r\n\t * @param value Height (px)\r\n\t */\r\n\tpublic set rectHeight(value: number) {\r\n\t\tthis.properties[\"rectHeight\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Height (px)\r\n\t */\r\n\tpublic get rectHeight(): number {\r\n\t\treturn this.properties[\"rectHeight\"];\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RectPattern\"] = RectPattern;\r\n"]}