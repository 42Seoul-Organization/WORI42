{"version":3,"file":"Ellipse.js","sourceRoot":"","sources":["../../../../../src/.internal/core/elements/Ellipse.ts"],"names":[],"mappings":"AAAA;;GAEG;;AAEH;;;;;GAKG;AACH,OAAO,EAAE,MAAM,EAAqD,MAAM,UAAU,CAAC;AACrF,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AAwCvC;;;;;GAKG;AAEH;;;;GAIG;AACH;IAA6B,2BAAM;IAiBlC;;OAEG;IACH;QAAA,YACC,iBAAO,SAMP;QALA,KAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAE3B,KAAI,CAAC,OAAO,GAAG,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAEzC,KAAI,CAAC,UAAU,EAAE,CAAC;;IACnB,CAAC;IAED;;OAEG;IACO,sBAAI,GAAd;QACC,iBAAM,IAAI,WAAE,CAAC;QACb,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;QACzC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IAC3C,CAAC;IAYD,sBAAW,4BAAO;QAKlB;;WAEG;aACH;YACC,OAAO,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;QAC7B,CAAC;QApBD;;;;;;;;;WASG;aACH,UAAmB,KAAa;YAC/B,IAAI,CAAC,MAAM,GAAG,KAAK,GAAG,CAAC,CAAC;YACxB,IAAI,CAAC,UAAU,EAAE,CAAC;QACnB,CAAC;;;OAAA;IAcD,sBAAW,2BAAM;QAKjB;;WAEG;aACH;YACC,OAAO,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;QAC5B,CAAC;QAfD;;;;WAIG;aACH,UAAkB,KAAa;YAC9B,IAAI,CAAC,KAAK,GAAG,KAAK,GAAG,CAAC,CAAC;YACvB,IAAI,CAAC,UAAU,EAAE,CAAC;QACnB,CAAC;;;OAAA;IASF,cAAC;AAAD,CAAC,AA7ED,CAA6B,MAAM,GA6ElC;;AAED;;;;;GAKG;AACH,QAAQ,CAAC,iBAAiB,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC","sourcesContent":["/**\r\n * Ellipse module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Circle, ICircleProperties, ICircleAdapters, ICircleEvents } from \"./Circle\";\r\nimport { registry } from \"../Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Ellipse]].\r\n */\r\nexport interface IEllipseProperties extends ICircleProperties {\r\n\r\n\t/**\r\n\t * Vertical radius.\r\n\t *\r\n\t * It's a relative size to the `radius`.\r\n\t *\r\n\t * E.g. 0.8 will mean the height of the ellipsis will be 80% of it's\r\n\t * horizontal radius.\r\n\t */\r\n\tradiusY?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Ellipse]].\r\n */\r\nexport interface IEllipseEvents extends ICircleEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface IEllipseAdapters extends ICircleAdapters, IEllipseProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an ellipse\r\n * @see {@link IEllipseEvents} for a list of available events\r\n * @see {@link IEllipseAdapters} for a list of available Adapters\r\n */\r\nexport class Ellipse extends Circle {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IEllipseProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IEllipseAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IEllipseEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Ellipse\";\r\n\r\n\t\tthis.element = this.paper.add(\"ellipse\");\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the ellipsis.\r\n\t */\r\n\tprotected draw() {\r\n\t\tsuper.draw();\r\n\t\tthis.element.attr({ \"rx\": this.radius });\r\n\t\tthis.element.attr({ \"ry\": this.radiusY });\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical radius.\r\n\t *\r\n\t * It's a relative size to the `radius`.\r\n\t *\r\n\t * E.g. 0.8 will mean the height of the ellipsis will be 80% of it's\r\n\t * horizontal radius.\r\n\t *\r\n\t * @param value  Vertical radius\r\n\t */\r\n\tpublic set radiusY(value: number) {\r\n\t\tthis.height = value * 2;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical radius\r\n\t */\r\n\tpublic get radiusY(): number {\r\n\t\treturn this.innerHeight / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal radius.\r\n\t *\r\n\t * @param value  Horizontal radius\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.width = value * 2;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Horizontal radius\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.innerWidth / 2;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Ellipse\"] = Ellipse;\r\n"]}