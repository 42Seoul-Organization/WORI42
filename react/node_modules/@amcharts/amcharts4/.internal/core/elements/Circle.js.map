{"version":3,"file":"Circle.js","sourceRoot":"","sources":["../../../../../src/.internal/core/elements/Circle.ts"],"names":[],"mappings":"AAAA;;GAEG;;AAEH;;;;;GAKG;AACH,OAAO,EAAE,MAAM,EAAqD,MAAM,WAAW,CAAC;AACtF,OAAO,EAAE,OAAO,EAAW,MAAM,kBAAkB,CAAC;AACpD,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AACvC,OAAO,KAAK,MAAM,MAAM,gBAAgB,CAAC;AACzC,OAAO,KAAK,KAAK,MAAM,eAAe,CAAC;AAqCvC;;;;;GAKG;AAEH;;;;GAIG;AACH;IAA4B,0BAAM;IAiBjC;;OAEG;IACH;QAAA,YACC,iBAAO,SASP;QAPA,KAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,KAAI,CAAC,OAAO,GAAG,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAExC,KAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;QAChD,KAAI,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,QAAQ,CAAC,CAAC;QACpD,KAAI,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;QAClD,KAAI,CAAC,UAAU,EAAE,CAAC;;IACnB,CAAC;IAED;;OAEG;IACO,qBAAI,GAAd;QACC,iBAAM,IAAI,WAAE,CAAC;QACb,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;IAC9C,CAAC;IASD,sBAAW,0BAAM;QAIjB;;WAEG;aACH;YACC,OAAO,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;QACxC,CAAC;QAhBD;;;;;;WAMG;aACH,UAAkB,KAAuB;YACxC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;QAClE,CAAC;;;OAAA;IAkBD,sBAAW,+BAAW;QATtB;;;;;;;;WAQG;aACH;YACC,OAAO,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,EAAE,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;QAClG,CAAC;;;OAAA;IAED;;;;OAIG;IACI,+BAAc,GAArB;QACC,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QACnC,IAAI,CAAC,KAAK,GAAG;YACZ,CAAC,EAAE,CAAC,WAAW;YACf,CAAC,EAAE,CAAC,WAAW;YACf,KAAK,EAAE,WAAW,GAAG,CAAC;YACtB,MAAM,EAAE,WAAW,GAAG,CAAC;SACvB,CAAC;IACH,CAAC;IAEF,aAAC;AAAD,CAAC,AAtFD,CAA4B,MAAM,GAsFjC;;AAED;;;;;GAKG;AACH,QAAQ,CAAC,iBAAiB,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC","sourcesContent":["/**\r\n * Functionality for drawing circles.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../Sprite\";\r\nimport { percent, Percent } from \"../utils/Percent\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $math from \"../utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Circle]].\r\n */\r\nexport interface ICircleProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * Radius of the circle.\r\n\t *\r\n\t * Can be either absolute (pixels) or relative ([Percent]).\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Circle]].\r\n */\r\nexport interface ICircleEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Circle]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICircleAdapters extends ISpriteAdapters, ICircleProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a circle\r\n * @see {@link ICircleEvents} for a list of available events\r\n * @see {@link ICircleAdapters} for a list of available Adapters\r\n */\r\nexport class Circle extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICircleProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICircleAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICircleEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"Circle\";\r\n\t\tthis.element = this.paper.add(\"circle\");\r\n\r\n\t\tthis.setPercentProperty(\"radius\", percent(100));\r\n\t\tthis.setPropertyValue(\"horizontalCenter\", \"middle\");\r\n\t\tthis.setPropertyValue(\"verticalCenter\", \"middle\");\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the circle.\r\n\t */\r\n\tprotected draw(): void {\r\n\t\tsuper.draw();\r\n\t\tthis.element.attr({ \"r\": this.pixelRadius });\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the circle.\r\n\t *\r\n\t * Can be either absolute (pixels) or relative ([Percent]).\r\n\t *\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the circle in pixels.\r\n\t *\r\n\t * This is a read-only property. To set radius in pixels, use `radius`\r\n\t * property.\r\n\t *\r\n\t * @readonly\r\n\t * @return Radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeToValue(this.radius, $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Updates bounding box.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\t\tlet pixelRadius = this.pixelRadius;\r\n\t\tthis._bbox = {\r\n\t\t\tx: -pixelRadius,\r\n\t\t\ty: -pixelRadius,\r\n\t\t\twidth: pixelRadius * 2,\r\n\t\t\theight: pixelRadius * 2\r\n\t\t};\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Circle\"] = Circle;\r\n"]}