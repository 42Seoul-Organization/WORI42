{"version":3,"file":"SwitchButton.js","sourceRoot":"","sources":["../../../../../src/.internal/core/elements/SwitchButton.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Functionality for drawing simple SwitchButtons.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../Container\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { Label } from \"./Label\";\r\nimport { RoundedRectangle } from \"../elements/RoundedRectangle\";\r\nimport { Button } from \"../elements/Button\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SwitchButton]].\r\n */\r\nexport interface ISwitchButtonProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[SwitchButton]].\r\n */\r\nexport interface ISwitchButtonEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SwitchButton]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISwitchButtonAdapters extends IContainerAdapters, ISwitchButtonProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * SwitchButton class is capable of drawing a simple rectangular SwitchButton with\r\n * optionally rounded corners and an icon in it.\r\n *\r\n * @see {@link ISwitchButtonEvents} for a list of available events\r\n * @see {@link ISwitchButtonAdapters} for a list of available Adapters\r\n */\r\nexport class SwitchButton extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISwitchButtonProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISwitchButtonAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISwitchButtonEvents;\r\n\r\n\t/**\r\n\t * Icon reference.\r\n\t */\r\n\tprotected _icon: Sprite;\r\n\r\n\t/**\r\n\t * [[Label]] element for SwitchButton content.\r\n\t */\r\n\tprotected _leftLabel: $type.Optional<Label>;\r\n\r\n\t/**\r\n\t * [[Label]] element for SwitchButton content.\r\n\t */\r\n\tprotected _rightLabel: $type.Optional<Label>;\r\n\r\n\t/**\r\n\t * A type for background.\r\n\t */\r\n\tpublic _background: RoundedRectangle;\r\n\r\n\tprotected _switchButton: Button;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SwitchButton\";\r\n\r\n\t\tthis.tooltipY = 0;\r\n\r\n\t\t// Set defaults\r\n\t\tthis.layout = \"horizontal\";\r\n\t\tthis.contentAlign = \"center\";\r\n\t\tthis.contentValign = \"middle\";\r\n\t\tthis.padding(8, 16, 8, 16);\r\n\t\tthis.setStateOnChildren = true;\r\n\t\tthis.states.create(\"active\");\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create the label element\r\n\t\tlet leftLabel = new Label();\r\n\t\tleftLabel.fillOpacity = 0.3;\r\n\t\tlet llas = leftLabel.states.create(\"active\");\r\n\t\tllas.properties.fillOpacity = 1;\r\n\t\tleftLabel.isActive = true;\r\n\t\tthis.leftLabel = leftLabel;\r\n\r\n\t\tlet button = new Button();\r\n\t\tlet circle = new Circle();\r\n\t\tbutton.contentValign = \"none\";\r\n\t\tbutton.padding(0, 0, 0, 0);\r\n\t\tcircle.radius = 10;\r\n\t\tbutton.icon = circle;\r\n\t\tbutton.icon.valign = \"middle\";\r\n\t\tbutton.label = undefined;\r\n\t\tlet p100 = percent(100);\r\n\t\tbutton.background.cornerRadius(p100, p100, p100, p100);\r\n\t\tbutton.width = circle.radius * 3.5;\r\n\t\tbutton.height = circle.radius * 2.1;\r\n\t\tbutton.marginLeft = 8;\r\n\t\tbutton.marginRight = 8;\r\n\t\tbutton.togglable = true;\r\n\t\tcircle.dx = -circle.radius * 0.7;\r\n\t\tcircle.fill = interfaceColors.getFor(\"primaryButton\");\r\n\r\n\t\tlet hs = circle.states.create(\"hover\");\r\n\t\ths.properties.fill = interfaceColors.getFor(\"primaryButtonHover\");\r\n\r\n\t\tlet as = circle.states.create(\"active\");\r\n\t\tas.properties.fill = interfaceColors.getFor(\"primaryButtonActive\");\r\n\t\tas.properties.dx = circle.radius * 0.7;\r\n\r\n\t\tthis.switchButton = button;\r\n\r\n\t\tthis.events.on(\"toggled\", () => {\r\n\t\t\tthis.leftLabel.isActive = !this.isActive;\r\n\t\t\tthis.rightLabel.isActive = this.isActive;\r\n\t\t})\r\n\r\n\t\t// Create the label element\r\n\t\tlet rightLabel = new Label();\r\n\t\trightLabel.fillOpacity = 0.3;\r\n\t\t\r\n\t\tlet rlas = rightLabel.states.create(\"active\");\r\n\t\trlas.properties.fillOpacity = 1;\r\n\t\tthis.rightLabel = rightLabel;\r\n\r\n\t\t// Set up accessibility\r\n\t\t// A Button should be always focusable\r\n\t\tthis.role = \"button\";\r\n\t\tthis.focusable = true;\r\n\r\n\t\trightLabel.valign = \"middle\";\r\n\t\tleftLabel.valign = \"middle\";\t\r\n\t\tbutton.valign = \"middle\"\t\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * [[Label]] element to be used for left text.\r\n\t *\r\n\t * @param left label element\r\n\t */\r\n\tpublic set leftLabel(label: $type.Optional<Label>) {\r\n\t\tif (this._leftLabel) {\r\n\t\t\tthis.removeDispose(this._leftLabel);\r\n\t\t}\r\n\t\tthis._leftLabel = label;\r\n\t\tif (label) {\r\n\t\t\tlabel.parent = this;\r\n\t\t\tlabel.interactionsEnabled = false;\r\n\t\t\tlabel.shouldClone = false;\r\n\t\t\tthis._disposers.push(this._leftLabel);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Left label element\r\n\t */\r\n\tpublic get leftLabel(): $type.Optional<Label> {\r\n\t\treturn this._leftLabel;\r\n\t}\r\n\r\n\t/**\r\n\t * [[Label]] element to be used for left text.\r\n\t *\r\n\t * @param rigth label element\r\n\t */\r\n\tpublic set rightLabel(label: $type.Optional<Label>) {\r\n\t\tif (this._rightLabel) {\r\n\t\t\tthis.removeDispose(this._rightLabel);\r\n\t\t}\r\n\t\tthis._rightLabel = label;\r\n\t\tif (label) {\r\n\t\t\tlabel.parent = this;\r\n\t\t\tlabel.interactionsEnabled = false;\r\n\t\t\tlabel.shouldClone = false;\r\n\t\t\tthis._disposers.push(this._rightLabel);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Rigth label element\r\n\t */\r\n\tpublic get rightLabel(): $type.Optional<Label> {\r\n\t\treturn this._rightLabel;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Left label element\r\n\t */\r\n\tpublic get switch(): $type.Optional<Button> {\r\n\t\treturn this._switchButton;\r\n\t}\r\n\r\n\t/**\r\n\t * [[Label]] element to be used for left text.\r\n\t *\r\n\t * @param rigth label element\r\n\t */\r\n\tpublic set switchButton(button: $type.Optional<Button>) {\r\n\t\tif (this._switchButton) {\r\n\t\t\tthis.removeDispose(this._switchButton);\r\n\t\t}\r\n\t\tthis._switchButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.parent = this;\r\n\t\t\tbutton.shouldClone = false;\r\n\t\t\tthis._disposers.push(this._switchButton);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties and other attributes.\r\n\t *\r\n\t * @param source  Source\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (source.leftLabel) {\r\n\t\t\tthis.leftLabel.copyFrom(source.leftLabel)\r\n\t\t}\r\n\t\tif (source.rightLabel) {\r\n\t\t\tthis.rightLabel.copyFrom(source.rightLabel)\r\n\t\t}\r\n\t\tif (source.switchButton) {\r\n\t\t\tthis.switchButton.copyFrom(source.switchButton)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SwitchButton\"] = SwitchButton;\r\n"]}