{"version":3,"file":"Polyarc.js","sourceRoot":"","sources":["../../../../../src/.internal/core/elements/Polyarc.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Module for a multi-part arched line.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Polyline, IPolylineProperties, IPolylineAdapters, IPolylineEvents } from \"./Polyline\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Polyarc]].\r\n */\r\nexport interface IPolyarcProperties extends IPolylineProperties {\r\n\r\n\t/**\r\n\t * Relative position along the line the control point is. (0-1)\r\n\t *\r\n\t * @default 0.5\r\n\t */\r\n\tcontrolPointPosition: number;\r\n\r\n\t/**\r\n\t * Relative distance of the control point. (0-1)\r\n\t *\r\n\t * Default is half the length of the line. (0.5)\r\n\t *\r\n\t * @default 0.5\r\n\t */\r\n\tcontrolPointDistance: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Polyarc]].\r\n */\r\nexport interface IPolyarcEvents extends IPolylineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Polyarc]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPolyarcAdapters extends IPolylineAdapters, IPolyarcProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a multi-part arched line.\r\n *\r\n * @see {@link IPolyarcEvents} for a list of available events\r\n * @see {@link IPolyarcAdapters} for a list of available Adapters\r\n */\r\nexport class Polyarc extends Polyline {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPolyarcProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPolyarcAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPolyarcEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Polyarc\";\r\n\r\n\t\tthis.controlPointDistance = 0.5;\r\n\t\tthis.controlPointPosition = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creats and adds an SVG path for the arc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic makePath(): void {\r\n\t\tthis._distance = 0;\r\n\t\tlet segments = this.segments;\r\n\r\n\t\tif (segments && segments.length > 0) {\r\n\t\t\tlet path: string = \"\";\r\n\t\t\tthis._realSegments = [];\r\n\r\n\t\t\tfor (let i = 0, len = segments.length; i < len; i++) {\r\n\t\t\t\tlet points: IPoint[] = segments[i];\r\n\t\t\t\tlet realPoints: IPoint[] = [];\r\n\t\t\t\tthis._realSegments.push(realPoints);\r\n\t\t\t\tif (points.length > 0) {\r\n\t\t\t\t\tpath += $path.moveTo(points[0]);\r\n\r\n\t\t\t\t\tfor (let p = 1; p < points.length; p++) {\r\n\t\t\t\t\t\tlet pointA: IPoint = points[p - 1];\r\n\t\t\t\t\t\tlet pointB: IPoint = points[p];\r\n\r\n\t\t\t\t\t\tlet distanceAB: number = $math.getDistance(pointB, pointA);\r\n\t\t\t\t\t\tlet cpDistance: number = distanceAB * this.controlPointDistance;\r\n\t\t\t\t\t\tlet controlPointPosition: number = this.controlPointPosition;\r\n\t\t\t\t\t\tlet angle: number = -$math.getAngle(pointA, pointB);\r\n\r\n\t\t\t\t\t\tlet cpx: number = pointA.x + (pointB.x - pointA.x) * controlPointPosition * 0.5 - cpDistance * $math.sin(angle);\r\n\t\t\t\t\t\tlet cpy: number = pointA.y + (pointB.y - pointA.y) * controlPointPosition * 0.5 - cpDistance * $math.cos(angle);\r\n\t\t\t\t\t\tlet controlPoint1: IPoint = { x: cpx, y: cpy };\r\n\r\n\t\t\t\t\t\tlet cpx2: number = pointA.x + (pointB.x - pointA.x) * controlPointPosition * 1.5 - cpDistance * $math.sin(angle);\r\n\t\t\t\t\t\tlet cpy2: number = pointA.y + (pointB.y - pointA.y) * controlPointPosition * 1.5 - cpDistance * $math.cos(angle);\r\n\t\t\t\t\t\tlet controlPoint2: IPoint = { x: cpx2, y: cpy2 };\r\n\r\n\t\t\t\t\t\tpath += $path.cubicCurveTo(pointB, controlPoint1, controlPoint2);\r\n\r\n\t\t\t\t\t\t// we add a lot of points in order to get the position/angle later\r\n\t\t\t\t\t\tlet stepCount: number = Math.ceil(distanceAB);\r\n\t\t\t\t\t\tlet prevPoint: IPoint = pointA;\r\n\t\t\t\t\t\tif (stepCount > 0) {\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i <= stepCount; i++) {\r\n\t\t\t\t\t\t\t\tlet point: IPoint = $math.getPointOnCubicCurve(pointA, pointB, controlPoint1, controlPoint2, i / stepCount);\r\n\t\t\t\t\t\t\t\trealPoints.push(point);\r\n\t\t\t\t\t\t\t\tthis._distance += $math.getDistance(prevPoint, point);\r\n\t\t\t\t\t\t\t\tprevPoint = point;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\trealPoints.push(pointA);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Relative position along the line the control point is. (0-1)\r\n\t *\r\n\t * @default 0.5\r\n\t * @param value  Position (0-1)\r\n\t */\r\n\tpublic set controlPointPosition(value: number) {\r\n\t\tthis.setPropertyValue(\"controlPointPosition\", value);\r\n\t\tthis.makePath();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic get controlPointPosition(): number {\r\n\t\treturn this.getPropertyValue(\"controlPointPosition\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative distance of the control point. (0-1)\r\n\t *\r\n\t * Default is half the length of the line. (0.5)\r\n\t *\r\n\t * @default 0.5\r\n\t * @param value  Distance (0-1)\r\n\t */\r\n\tpublic set controlPointDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"controlPointDistance\", value);\r\n\t\tthis.makePath();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Distance (0-1)\r\n\t */\r\n\tpublic get controlPointDistance(): number {\r\n\t\treturn this.getPropertyValue(\"controlPointDistance\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Polyarc\"] = Polyarc;\r\n"]}