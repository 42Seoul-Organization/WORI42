{"version":3,"file":"Cone.js","sourceRoot":"","sources":["../../../../../../src/.internal/core/elements/3d/Cone.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Cone module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../Container\";\r\nimport { Sprite, visualProperties } from \"../../Sprite\";\r\nimport { Ellipse } from \"../../elements/Ellipse\";\r\nimport { LinearGradientModifier } from \"../../rendering/fills/LinearGradientModifier\";\r\nimport { percent, Percent } from \"../../utils/Percent\";\r\nimport * as $object from \"../../utils/Object\";\r\nimport * as $path from \"../../rendering/Path\";\r\nimport { Orientation } from \"../../defs/Orientation\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Cone]].\r\n */\r\nexport interface IConeProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Angle of the point of view to the 3D element. (0-360)\r\n\t *\r\n\t * @default 30\r\n\t */\r\n\tangle?: number;\r\n\r\n\t/**\r\n\t * A relative radius of the cone's bottom (base).\r\n\t *\r\n\t * It is relevant to the inner width or height of the element.\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\tradius?: Percent;\r\n\r\n\t/**\r\n\t * A relative radius of the cone's top (tip).\r\n\t *\r\n\t * It is relevant to the inner width or height of the element.\r\n\t *\r\n\t * @default Percent(0)\r\n\t */\r\n\ttopRadius?: Percent;\r\n\r\n\t/**\r\n\t * Orientation of the cone\r\n\t *\r\n\t * @default \"vertical\"\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Cone]].\r\n */\r\nexport interface IConeEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Cone]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeAdapters extends IContainerAdapters, IConeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Builds a round cone/cylinder.\r\n *\r\n * @see {@link IConeEvents} for a list of available events\r\n * @see {@link IConeAdapters} for a list of available Adapters\r\n */\r\nexport class Cone extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IConeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IConeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IConeEvents;\r\n\r\n\t/**\r\n\t * Bottom ellement.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic bottom: Ellipse;\r\n\r\n\t/**\r\n\t * Top element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic top: Ellipse;\r\n\r\n\t/**\r\n\t * Body element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic body: Sprite;\r\n\r\n\t/**\r\n\t * Gradient for the fill of the body.\r\n\t */\r\n\tpublic bodyFillModifier: LinearGradientModifier;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Cone\";\r\n\r\n\t\tthis.angle = 30;\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.topRadius = percent(100);\r\n\r\n\t\tthis.top = this.createChild(Ellipse);\r\n\t\tthis.top.shouldClone = false;\r\n\r\n\t\tthis.bottom = this.createChild(Ellipse);\r\n\t\tthis.bottom.shouldClone = false;\r\n\r\n\t\tthis.body = this.createChild(Sprite);\r\n\t\tthis.body.shouldClone = false;\r\n\r\n\t\tthis.body.setElement(this.paper.add(\"path\"));\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.bodyFillModifier = new LinearGradientModifier();\r\n\t\tthis.bodyFillModifier.lightnesses = [0, -0.25, 0];\r\n\t\tthis.body.fillModifier = this.bodyFillModifier;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\t$object.copyProperties(this, this.top, visualProperties);\r\n\t\t$object.copyProperties(this, this.bottom, visualProperties);\r\n\t\t$object.copyProperties(this, this.body, visualProperties);\r\n\r\n\t\tlet w: number = this.innerWidth;\r\n\t\tlet h: number = this.innerHeight;\r\n\r\n\t\tlet bottom: Ellipse = this.bottom;\r\n\t\tlet top: Ellipse = this.top;\r\n\r\n\t\tlet angle: number = this.angle;\r\n\t\tlet radiusBase: number;\r\n\t\tlet dx: number;\r\n\t\tlet dy: number;\r\n\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tradiusBase = h / 2;\r\n\t\t\tbottom.y = h / 2;\r\n\t\t\ttop.y = h / 2;\r\n\t\t\ttop.x = w;\r\n\t\t\tdx = (90 - angle) / 90;\r\n\t\t\tdy = 0;\r\n\t\t\tthis.bodyFillModifier.gradient.rotation = 90;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdx = 0;\r\n\t\t\tdy = (90 - angle) / 90;\r\n\r\n\t\t\tradiusBase = w / 2;\r\n\t\t\tbottom.y = h;\r\n\t\t\tbottom.x = w / 2;\r\n\t\t\ttop.x = w / 2;\r\n\t\t\tthis.bodyFillModifier.gradient.rotation = 0;\r\n\t\t}\r\n\r\n\t\tlet radius: number = this.radius.value * radiusBase;\r\n\t\tlet topRadius: number = this.topRadius.value * radiusBase;\r\n\r\n\t\tbottom.radius = radius - radius * dx;\r\n\t\tbottom.radiusY = radius - radius * dy;\r\n\r\n\t\ttop.radius = topRadius - topRadius * dx;\r\n\t\ttop.radiusY = topRadius - topRadius * dy;\r\n\r\n\t\tlet path: string;\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tpath = $path.moveTo({ x: 0, y: h / 2 - bottom.radiusY }) + $path.arcTo(-90, -180, bottom.radius, bottom.radiusY) + $path.lineTo({ x: w, y: h / 2 + top.radiusY }) + $path.arcTo(90, 180, top.radius, top.radiusY) + $path.closePath();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpath = $path.moveTo({ x: w / 2 - top.radius, y: 0 }) + $path.arcTo(180, -180, top.radius, top.radiusY) + $path.lineTo({ x: w / 2 + bottom.radius, y: h }) + $path.arcTo(0, 180, bottom.radius, bottom.radiusY) + $path.closePath();\r\n\t\t}\r\n\r\n\t\tthis.body.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the point of view to the 3D element. (0-360)\r\n\t *\r\n\t * @default 30\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative radius of the cone's bottom (base).\r\n\t *\r\n\t * It is relevant to the inner width or height of the element.\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @param value  Bottom radius\r\n\t */\r\n\tpublic set radius(value: Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Bottom radius\r\n\t */\r\n\tpublic get radius(): Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative radius of the cone's top (tip).\r\n\t *\r\n\t * It is relevant to the inner width or height of the element.\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param value  Top radius\r\n\t */\r\n\tpublic set topRadius(value: Percent) {\r\n\t\tthis.setPropertyValue(\"topRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Top radius\r\n\t */\r\n\tpublic get topRadius(): Percent {\r\n\t\treturn this.getPropertyValue(\"topRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the cone\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n}\r\n"]}