{"version":3,"file":"Polyline.js","sourceRoot":"","sources":["../../../../../src/.internal/core/elements/Polyline.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Polyline module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../Sprite\";\r\nimport { IPoint, IOrientationPoint } from \"../defs/IPoint\";\r\nimport { color } from \"../utils/Color\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Polyline]].\r\n */\r\nexport interface IPolylineProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * A list of segment coordinates for the multi-part line.\r\n\t */\r\n\tsegments?: Array<Array<IPoint>>;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Polyline]].\r\n */\r\nexport interface IPolylineEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Polyline]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPolylineAdapters extends ISpriteAdapters, IPolylineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a polyline.\r\n *\r\n * @see {@link IPolylineEvents} for a list of available events\r\n * @see {@link IPolylineAdapters} for a list of available Adapters\r\n */\r\nexport class Polyline extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPolylineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPolylineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPolylineEvents;\r\n\r\n\t/**\r\n\t * [_distance description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _distance: number = 0;\r\n\r\n\t/**\r\n\t * [_realSegments]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _realSegments: $type.Optional<Array<Array<IPoint>>>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Polyline\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.shapeRendering = \"auto\";\r\n\t\tthis.fill = color();\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creats and adds an SVG path for the arc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic makePath(): void {\r\n\t\tthis._distance = 0;\r\n\t\tlet segments = this.segments;\r\n\r\n\t\tif (segments && segments.length > 0) {\r\n\t\t\tlet path: string = \"\";\r\n\r\n\t\t\tfor (let i = 0, len = segments.length; i < len; i++) {\r\n\t\t\t\tlet points: IPoint[] = segments[i];\r\n\t\t\t\tif (points.length > 0) {\r\n\t\t\t\t\tpath += $path.moveTo(points[0]);\r\n\r\n\t\t\t\t\tfor (let p = 1; p < points.length; p++) {\r\n\t\t\t\t\t\tlet point: IPoint = points[p];\r\n\t\t\t\t\t\tpath += $path.lineTo(point);\r\n\t\t\t\t\t\tthis._distance += $math.getDistance(points[p - 1], point);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\r\n\t\tthis._realSegments = segments;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of segment coordinates for the multi-part line.\r\n\t *\r\n\t * @todo Example\r\n\t * @param segments  Segments\r\n\t */\r\n\tpublic set segments(segments: $type.Optional<Array<Array<IPoint>>>) {\r\n\t\tthis.setPropertyValue(\"segments\", segments);\r\n\t\tthis.makePath();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Segments\r\n\t */\r\n\tpublic get segments(): $type.Optional<Array<Array<IPoint>>> {\r\n\t\treturn this.getPropertyValue(\"segments\");\r\n\t}\r\n\r\n\t/**\r\n\t * [distance description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get distance(): number {\r\n\t\treturn this._distance;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\r\n\t\tlet deltaAngle: number = 0;\r\n\r\n\t\tif (position < 0) {\r\n\t\t\tposition = Math.abs(position);\r\n\t\t\tdeltaAngle = 180;\r\n\t\t}\r\n\r\n\t\tlet segments: $type.Optional<Array<Array<IPoint>>> = this._realSegments;\r\n\t\tif (segments) {\r\n\t\t\tlet totalDistance: number = this.distance;\r\n\t\t\tlet currentDistance: number = 0;\r\n\r\n\t\t\tlet distanceAB: number;\r\n\t\t\tlet positionA: number = 0;\r\n\t\t\tlet positionB: number = 0;\r\n\t\t\tlet pointA: IPoint;\r\n\t\t\tlet pointB: IPoint;\r\n\r\n\t\t\tfor (let s = 0; s < segments.length; s++) {\r\n\t\t\t\tlet points: IPoint[] = segments[s];\r\n\t\t\t\tif (points.length > 1) {\r\n\t\t\t\t\tfor (let p = 1; p < points.length; p++) {\r\n\t\t\t\t\t\tpointA = points[p - 1];\r\n\t\t\t\t\t\tpointB = points[p];\r\n\r\n\t\t\t\t\t\tpositionA = currentDistance / totalDistance;\r\n\t\t\t\t\t\tdistanceAB = $math.getDistance(pointA, pointB);\r\n\t\t\t\t\t\tcurrentDistance += distanceAB;\r\n\t\t\t\t\t\tpositionB = currentDistance / totalDistance;\r\n\r\n\t\t\t\t\t\tif (positionA <= position && positionB > position) {\r\n\t\t\t\t\t\t\ts = segments.length;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (points.length == 1) {\r\n\t\t\t\t\tpointA = points[0];\r\n\t\t\t\t\tpointB = points[0];\r\n\t\t\t\t\tpositionA = 0;\r\n\t\t\t\t\tpositionB = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (pointA && pointB) {\r\n\t\t\t\tlet positionAB: number = (position - positionA) / (positionB - positionA);\r\n\t\t\t\tlet midPoint: IPoint = $math.getMidPoint(pointA, pointB, positionAB);\r\n\t\t\t\treturn { x: midPoint.x, y: midPoint.y, angle: deltaAngle + $math.getAngle(pointA, pointB) };\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn { x: 0, y: 0, angle: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get realSegments():IPoint[][]{\r\n\t\treturn this._realSegments;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Polyline\"] = Polyline;\r\n"]}