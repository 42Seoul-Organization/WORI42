{"version":3,"file":"Keyboard.js","sourceRoot":"","sources":["../../../../../src/.internal/core/utils/Keyboard.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH;;;;;GAKG;AACH,OAAO,KAAK,KAAK,MAAM,QAAQ,CAAC;AA6BhC;;;;GAIG;AACH;IAAA;IAiGA,CAAC;IA/FA;;;;;;OAMG;IACI,8BAAW,GAAlB,UAAmB,EAAiB;QAEnC,mBAAmB;QACnB,IAAI,IAAI,GAAW,EAAE,CAAC,OAAO,IAAI,EAAE,CAAC,KAAK,EACxC,GAAiB,CAAC;QAEnB,sBAAsB;QACtB,QAAQ,IAAI,EAAE;YACb,KAAK,EAAE;gBAAG,GAAG,GAAG,IAAI,CAAC;gBAAI,MAAM;YAC/B,KAAK,EAAE;gBAAG,GAAG,GAAG,MAAM,CAAC;gBAAE,MAAM;YAC/B,KAAK,EAAE;gBAAG,GAAG,GAAG,MAAM,CAAC;gBAAE,MAAM;YAC/B,KAAK,EAAE;gBAAG,GAAG,GAAG,OAAO,CAAC;gBAAC,MAAM;YAC/B,KAAK,EAAE;gBAAG,GAAG,GAAG,OAAO,CAAC;gBAAC,MAAM;YAC/B,KAAK,EAAE;gBAAG,GAAG,GAAG,KAAK,CAAC;gBAAG,MAAM;YAC/B,KAAK,EAAE;gBAAG,GAAG,GAAG,MAAM,CAAC;gBAAE,MAAM;YAC/B,KAAK,EAAE;gBAAG,GAAG,GAAG,KAAK,CAAC;gBAAG,MAAM;YAC/B,KAAK,CAAC;gBAAI,GAAG,GAAG,KAAK,CAAC;gBAAG,MAAM;YAC/B,KAAK,EAAE;gBAAG,GAAG,GAAG,MAAM,CAAC;gBAAE,MAAM;YAC/B,KAAK,EAAE;gBAAG,GAAG,GAAG,KAAK,CAAC;gBAAG,MAAM;YAC/B,KAAK,EAAE;gBAAG,GAAG,GAAG,OAAO,CAAC;gBAAC,MAAM;YAC/B,KAAK,EAAE;gBAAG,GAAG,GAAG,OAAO,CAAC;gBAAC,MAAM;YAC/B,KAAK,EAAE;gBAAG,GAAG,GAAG,MAAM,CAAC;gBAAE,MAAM;YAC/B,KAAK,EAAE;gBAAG,GAAG,GAAG,KAAK,CAAC;gBAAG,MAAM;YAC/B,KAAK,EAAE;gBAAG,GAAG,GAAG,MAAM,CAAC;gBAAE,MAAM;YAC/B,KAAK,EAAE;gBAAG,GAAG,GAAG,MAAM,CAAC;gBAAE,MAAM;YAC/B,KAAK,EAAE;gBAAG,GAAG,GAAG,KAAK,CAAC;gBAAG,MAAM;YAC/B,KAAK,EAAE;gBAAG,GAAG,GAAG,KAAK,CAAC;gBAAG,MAAM;YAC/B,KAAK,GAAG;gBAAE,GAAG,GAAG,MAAM,CAAC;gBAAE,MAAM;YAC/B,KAAK,GAAG;gBAAE,GAAG,GAAG,OAAO,CAAC;gBAAC,MAAM;YAC/B;gBAAU,GAAG,GAAG,OAAO,CAAC;gBAAC,MAAM;SAC/B;QAED,OAAO,GAAG,CAAC;IACZ,CAAC;IAED;;;;;;OAMG;IACI,wBAAK,GAAZ,UAAa,EAAiB,EAAE,GAAsB;QACrD,IAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;QACpC,IAAI,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YACxB,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;SACZ;QACD,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;IACrC,CAAC;IAED;;;;;OAKG;IACI,2BAAQ,GAAf,UAAgB,EAA8B;QAC7C,OAAO,EAAE,CAAC,QAAQ,CAAC;IACpB,CAAC;IAED;;;;;OAKG;IACI,0BAAO,GAAd,UAAe,EAA8B;QAC5C,OAAO,EAAE,CAAC,OAAO,CAAC;IACnB,CAAC;IAED;;;;OAIG;IACI,yBAAM,GAAb,UAAc,EAA8B;QAC3C,OAAO,EAAE,CAAC,MAAM,CAAC;IAClB,CAAC;IAED;;;;OAIG;IACI,0BAAO,GAAd,UAAe,EAA8B;QAC5C,OAAO,EAAE,CAAC,OAAO,CAAC;IACnB,CAAC;IAEF,eAAC;AAAD,CAAC,AAjGD,IAiGC;;AAED;;;;;GAKG;AACH,MAAM,CAAC,IAAI,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC","sourcesContent":["/**\r\n * A collection of keyboard-related utilities accessible via `keyboard`\r\n * instance.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $type from \"./Type\";\r\n\r\n/**\r\n * Represents named (usually frequently used) keyboard keys for easy referece.\r\n */\r\nexport type KeyboardKeys =\r\n\t\"up\"\r\n\t| \"down\"\r\n\t| \"left\"\r\n\t| \"right\"\r\n\t| \"enter\"\r\n\t| \"esc\"\r\n\t| \"home\"\r\n\t| \"tab\"\r\n\t| \"end\"\r\n\t| \"ctrl\"\r\n\t| \"alt\"\r\n\t| \"shift\"\r\n\t| \"space\"\r\n\t| \"home\"\r\n\t| \"end\"\r\n\t| \"pgup\"\r\n\t| \"pgdn\"\r\n\t| \"ins\"\r\n\t| \"del\"\r\n\t| \"plus\"\r\n\t| \"minus\"\r\n\t| \"other\";\r\n\r\n/**\r\n * A class that represents collection of keyboard-related utilities.\r\n *\r\n * Do not instantiate this class directly, but rather use `keyboard` variable.\r\n */\r\nexport class Keyboard {\r\n\r\n\t/**\r\n\t * Returns a named key based on information contained in the event or\r\n\t * \"other\".\r\n\t *\r\n\t * @param ev  A keyboard event\r\n\t * @return Keyboard named key\r\n\t */\r\n\tpublic getEventKey(ev: KeyboardEvent): KeyboardKeys {\r\n\r\n\t\t// Get the key code\r\n\t\tlet code: number = ev.keyCode || ev.which,\r\n\t\t\tkey: KeyboardKeys;\r\n\r\n\t\t// Map to internal key\r\n\t\tswitch (code) {\r\n\t\t\tcase 38:  key = \"up\";    break;\r\n\t\t\tcase 40:  key = \"down\";  break;\r\n\t\t\tcase 37:  key = \"left\";  break;\r\n\t\t\tcase 39:  key = \"right\"; break;\r\n\t\t\tcase 13:  key = \"enter\"; break;\r\n\t\t\tcase 27:  key = \"esc\";   break;\r\n\t\t\tcase 36:  key = \"home\";  break;\r\n\t\t\tcase 35:  key = \"end\";   break;\r\n\t\t\tcase 9:   key = \"tab\";   break;\r\n\t\t\tcase 17:  key = \"ctrl\";  break;\r\n\t\t\tcase 18:  key = \"alt\";   break;\r\n\t\t\tcase 16:  key = \"shift\"; break;\r\n\t\t\tcase 32:  key = \"space\"; break;\r\n\t\t\tcase 36:  key = \"home\";  break;\r\n\t\t\tcase 35:  key = \"end\";   break;\r\n\t\t\tcase 33:  key = \"pgup\";  break;\r\n\t\t\tcase 34:  key = \"pgdn\";  break;\r\n\t\t\tcase 45:  key = \"ins\";   break;\r\n\t\t\tcase 46:  key = \"del\";   break;\r\n\t\t\tcase 107: key = \"plus\";  break;\r\n\t\t\tcase 109: key = \"minus\"; break;\r\n\t\t\tdefault:  key = \"other\"; break;\r\n\t\t}\r\n\r\n\t\treturn key;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if event key is one or more of the selected named keys.\r\n\t *\r\n\t * @param ev   Keyboard event\r\n\t * @param key  Named key or array of keys\r\n\t * @return Is event key one of the list?\r\n\t */\r\n\tpublic isKey(ev: KeyboardEvent, key: string | string[]): boolean {\r\n\t\tlet eventKey = this.getEventKey(ev);\r\n\t\tif ($type.isString(key)) {\r\n\t\t\tkey = [key];\r\n\t\t}\r\n\t\treturn key.indexOf(eventKey) !== -1;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if shift key was presset at the moment of the event.\r\n\t *\r\n\t * @param ev  Event object\r\n\t * @return Was shift pressed?\r\n\t */\r\n\tpublic shiftKey(ev: KeyboardEvent | MouseEvent): boolean {\r\n\t\treturn ev.shiftKey;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if ctrl key was presset at the moment of the event.\r\n\t *\r\n\t * @param ev  Event object\r\n\t * @return Was ctrl pressed?\r\n\t */\r\n\tpublic ctrlKey(ev: KeyboardEvent | MouseEvent): boolean {\r\n\t\treturn ev.ctrlKey;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if alt key was presset at the moment of the event\r\n\t * @param ev  Event object\r\n\t * @return Was alt pressed?\r\n\t */\r\n\tpublic altKey(ev: KeyboardEvent | MouseEvent): boolean {\r\n\t\treturn ev.altKey;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if meta key was presset at the moment of the event\r\n\t * @param ev  Event object\r\n\t * @return Was meta pressed?\r\n\t */\r\n\tpublic metaKey(ev: KeyboardEvent | MouseEvent): boolean {\r\n\t\treturn ev.metaKey;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * A single [[Keyboard]] instance to be reused across all elements so that\r\n * they don't need to instantiate their own.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport let keyboard = new Keyboard();\r\n"]}