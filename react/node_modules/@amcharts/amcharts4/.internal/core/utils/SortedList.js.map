{"version":3,"file":"SortedList.js","sourceRoot":"","sources":["../../../../../src/.internal/core/utils/SortedList.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { EventDispatcher, AMEvent } from \"./EventDispatcher\";\r\nimport { Ordering } from \"./Order\";\r\nimport { IClone } from \"./Clone\";\r\nimport * as $array from \"./Array\";\r\nimport * as $iter from \"./Iterator\";\r\nimport * as $type from \"./Type\";\r\n\r\n/**\r\n * Defines evends for [[SortedList]].\r\n */\r\nexport interface ISortedListEvents<A> {\r\n\r\n\t/**\r\n\t * Invoked when new value is inserted into the list.\r\n\t */\r\n\tinserted: {\r\n\t\t/**\r\n\t\t * Index where the element was inserted.\r\n\t\t */\r\n\t\tindex: number;\r\n\r\n\t\t/**\r\n\t\t * Inserted value.\r\n\t\t */\r\n\t\tnewValue: A;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when a value is removed from the list.\r\n\t */\r\n\tremoved: {\r\n\t\t/**\r\n\t\t * Index of the element which was removed.\r\n\t\t */\r\n\t\tindex: number;\r\n\r\n\t\t/**\r\n\t\t * Removed value.\r\n\t\t */\r\n\t\toldValue: A;\r\n\t};\r\n\r\n}\r\n\r\n/**\r\n * Ordered list contains values of any type in an indexed array.\r\n */\r\nexport class OrderedList<T> {\r\n\r\n\t/**\r\n\t * Holds list values.\r\n\t */\r\n\tprotected _values: Array<T> = [];\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t */\r\n\tpublic events: EventDispatcher<AMEvent<OrderedList<T>, ISortedListEvents<T>>> = new EventDispatcher();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t *\r\n\t * @param initial  Inital list of values to add to list\r\n\t */\r\n\tconstructor(initial?: Array<T>) {\r\n\t\tif (initial != null) {\r\n\t\t\tthis.setAll(initial);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * All items of the list.\r\n\t *\r\n\t * Do not modify the list directly. Rather use `insert()` and `remove()`\r\n\t * methods.\r\n\t *\r\n\t * @return List values\r\n\t */\r\n\tpublic get values(): Array<T> {\r\n\t\treturn this._values;\r\n\t}\r\n\r\n\t/**\r\n\t * Inserts a value into list item array.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tprotected _insert(value: T): number {\r\n\t\tthis._values.push(value);\r\n\t\treturn this._values.length - 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Number of items in the list.\r\n\t *\r\n\t * @readonly\r\n\t * @return Length\r\n\t */\r\n\tpublic get length(): number {\r\n\t\treturn this._values.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the index of the specific `value`.\r\n\t *\r\n\t * -1 if not found.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Index\r\n\t */\r\n\tpublic indexOf(value: T): number {\r\n\t\treturn $array.indexOf(this._values, value);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if list contains the `value`.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return In the list?\r\n\t */\r\n\tpublic contains(value: T): boolean {\r\n\t\treturn this.indexOf(value) !== -1;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an item at specific `index`.\r\n\t *\r\n\t * @param index  Index\r\n\t * @return Item\r\n\t */\r\n\tpublic getIndex(index: number): T | undefined {\r\n\t\treturn this._values[index];\r\n\t}\r\n\r\n\t/**\r\n\t * First item in the list.\r\n\t *\r\n\t * @return Item\r\n\t */\r\n\tpublic get first(): T | undefined {\r\n\t\treturn this._values[0];\r\n\t}\r\n\r\n\t/**\r\n\t * Last item in the list.\r\n\t *\r\n\t * @return Item\r\n\t */\r\n\tpublic get last(): T | undefined {\r\n\t\treturn this._values[this._values.length - 1];\r\n\t}\r\n\r\n\t/**\r\n\t * Inserts a value into list.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic insert(value: T): void {\r\n\t\tconst index = this._insert(value);\r\n\r\n\t\tif (this.events.isEnabled(\"inserted\")) {\r\n\t\t\tthis.events.dispatchImmediately(\"inserted\", {\r\n\t\t\t\ttype: \"inserted\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tindex: index,\r\n\t\t\t\tnewValue: value\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes an item with the `value` from the list.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic remove(value: T): void {\r\n\t\tconst index = this.indexOf(value);\r\n\r\n\t\tif (index !== -1) {\r\n\t\t\tconst oldValue = this._values[index];\r\n\r\n\t\t\t$array.removeIndex(this._values, index);\r\n\r\n\t\t\tif (this.events.isEnabled(\"removed\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"removed\", {\r\n\t\t\t\t\ttype: \"removed\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tindex: index,\r\n\t\t\t\t\toldValue: oldValue,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets multiple items to the list.\r\n\t *\r\n\t * All current items are removed.\r\n\t *\r\n\t * @param newArray  New items\r\n\t */\r\n\tpublic setAll(newArray: Array<T>): void {\r\n\t\t$array.eachReverse(this._values, (x, i) => {\r\n\t\t\tthis._values.pop();\r\n\r\n\t\t\tif (this.events.isEnabled(\"removed\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"removed\", {\r\n\t\t\t\t\ttype: \"removed\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tindex: i,\r\n\t\t\t\t\toldValue: x\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t$array.each(newArray, (value) => {\r\n\t\t\tthis.insert(value);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Removes all items from the list.\r\n\t */\r\n\tpublic clear(): void {\r\n\t\tthis.setAll([]);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns part of the list between `start` and `end` indexes, as a new\r\n\t * [[OrderedList]].\r\n\t *\r\n\t * @param start  Start index\r\n\t * @param end    End index\r\n\t * @return Items in range\r\n\t */\r\n\tpublic slice(start: number, end: number): OrderedList<T> {\r\n\t\tconst out = new OrderedList<T>();\r\n\r\n\t\tout._values = this._values.slice(start, end);\r\n\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * Finds a closest available index to the `value` in specified direction.\r\n\t *\r\n\t * @ignore exclude from docs\r\n\t * @param value      value to search for\r\n\t * @param fn         A callback function that returns value of the item\r\n\t * @param direction  Direciton\r\n\t * @return Index\r\n\t */\r\n\tpublic findClosestIndex(value: number, fn: (value: T) => number, direction: \"left\" | \"right\" | \"any\" = \"any\"): number {\r\n\t\t// Init temporary values\r\n\t\tlet closestIndex: number = -1;\r\n\t\tlet closestValue: number;\r\n\t\tlet closestDifference: number;\r\n\r\n\t\tlet i = 0;\r\n\r\n\t\t$iter.eachContinue(this.iterator(), (element) => {\r\n\t\t\tconst item: number = fn(element);\r\n\r\n\t\t\t// Calc difference\r\n\t\t\tif (direction === \"any\") {\r\n\r\n\t\t\t\t// Exact match?\r\n\t\t\t\tif (item === value) {\r\n\t\t\t\t\t// Found exact value - don't bother searching further\r\n\t\t\t\t\tclosestIndex = i;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet difference = Math.abs(value - item);\r\n\t\t\t\tif (!$type.hasValue(closestDifference) || (closestDifference > difference)) {\r\n\t\t\t\t\tclosestIndex = i;\r\n\t\t\t\t\tclosestValue = item;\r\n\t\t\t\t\tclosestDifference = difference;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (direction === \"left\" && (item < value)) {\r\n\t\t\t\tif (!$type.hasValue(closestValue) || (closestValue < item)) {\r\n\t\t\t\t\tclosestIndex = i;\r\n\t\t\t\t\tclosestValue = item;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (direction === \"right\" && (item >= value)) {\r\n\t\t\t\tif (!$type.hasValue(closestValue) || (closestValue >= item)) {\r\n\t\t\t\t\tclosestIndex = i;\r\n\t\t\t\t\tclosestValue = item;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t++i;\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\t// Found nothing?\r\n\t\tif (closestIndex === -1) {\r\n\t\t\tif (direction === \"left\") {\r\n\t\t\t\t// Use First one\r\n\t\t\t\tclosestIndex = 0;\r\n\t\t\t}\r\n\t\t\telse if (direction === \"right\") {\r\n\t\t\t\t// Use last item\r\n\t\t\t\tclosestIndex = this.length - 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn closestIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a list iterator.\r\n\t *\r\n\t * @return Iterator\r\n\t */\r\n\tpublic iterator(): $iter.Iterator<T> {\r\n\t\treturn $iter.fromArray(this._values);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an ES6 iterator for the list.\r\n\t */\r\n\tpublic *[Symbol.iterator](): Iterator<T> {\r\n\t\tconst length = this._values.length;\r\n\r\n\t\tfor (let i = 0; i < length; ++i) {\r\n\t\t\tyield this._values[i];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Calls `f` for each element in the list.\r\n\t */\r\n\tpublic each(f: (value: T, index: number) => void): void {\r\n\t\t$array.each(this._values, f);\r\n\t}\r\n}\r\n\r\n/**\r\n * A list where all items are ordered according to specific ordering function,\r\n * which is passed in via constructor parameter, when creating an instance of\r\n * [[SortedList]].\r\n */\r\nexport class SortedList<T> extends OrderedList<T> {\r\n\r\n\t/**\r\n\t * A reference to the ordering function.\r\n\t */\r\n\tprivate _ordering: any;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param sort  Ordering function\r\n\t */\r\n\tconstructor(sort: (left: T, right: T) => Ordering) {\r\n\t\tsuper();\r\n\t\tthis._ordering = sort;\r\n\t}\r\n\r\n\t/**\r\n\t * Inserts item into the list.\r\n\t *\r\n\t * @param value  Item\r\n\t */\r\n\tprotected _insert(value: T): number {\r\n\t\tconst { index } = $array.getSortedIndex(this._values, this._ordering, value);\r\n\r\n\t\t$array.insertIndex(this._values, index, value);\r\n\r\n\t\treturn index;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns index of the item in list if found.\r\n\t *\r\n\t * -1 if item is not in the list.\r\n\t *\r\n\t * @param value  Item to search for\r\n\t * @return Index\r\n\t */\r\n\tpublic indexOf(value: T): number {\r\n\t\tconst { found, index } = $array.getSortedIndex(this._values, this._ordering, value);\r\n\r\n\t\tif (found) {\r\n\t\t\treturn index;\r\n\r\n\t\t} else {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [udpate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic update(value: T): void {\r\n\t\t// @todo test this\r\n\t\tconst index = $array.indexOf(this._values, value);\r\n\r\n\t\t// @todo throw an error if it doesn't exist ?\r\n\t\tif (index !== -1) {\r\n\t\t\tconst last = this._values.length - 1;\r\n\r\n\t\t\t// Check if the current ordering is correct\r\n\t\t\tif (!((index === 0 || this._ordering(this._values[index - 1], value) < 0) &&\r\n\t\t\t\t(index === last || this._ordering(value, this._values[index + 1]) < 0))) {\r\n\t\t\t\t// TODO send remove/insert/move events\r\n\t\t\t\t$array.removeIndex(this._values, index);\r\n\t\t\t\tthis._insert(value);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * A version of a [[OrderedList]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\r\nexport class OrderedListTemplate<T extends IClone<T> & { isTemplate: boolean }> extends OrderedList<T> {\r\n\r\n\t/**\r\n\t * A template object.\r\n\t *\r\n\t * @todo Make this private\r\n\t */\r\n\tpublic _template!: T;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t *\r\n\t * @param t Template object\r\n\t */\r\n\tpublic constructor(t: T) {\r\n\t\tsuper();\r\n\t\tthis.template = t;\r\n\t}\r\n\r\n\t/**\r\n\t * A \"template\" object to copy all properties from when creating new list\r\n\t * items.\r\n\t *\r\n\t * @param v  Template object\r\n\t */\r\n\tpublic set template(v: T) {\r\n\t\tv.isTemplate = true;\r\n\t\tthis._template = v;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Template object\r\n\t */\r\n\tpublic get template(): T {\r\n\t\treturn this._template;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all elements from other list.\r\n\t *\r\n\t * @param source  Source list\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\t$iter.each(source.iterator(), (value) => {\r\n\t\t\tthis.insert(value.clone());\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns part of the list, starting at `start` and ending at `end` indexes,\r\n\t * as a new [[OrderedListTemplate]].\r\n\t *\r\n\t * @param start  Start index\r\n\t * @param end    End index\r\n\t * @return New list\r\n\t */\r\n\tpublic slice(start: number, end: number): OrderedListTemplate<T> {\r\n\t\tconst out = new OrderedListTemplate<T>(this.template);\r\n\r\n\t\tout._values = this._values.slice(start, end);\r\n\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * Instantiates a new object of the specified type, adds it to the end of\r\n\t * the list, and returns it.\r\n\t *\r\n\t * @param make  Item type to use. Will use the default type for the list if not specified.\r\n\t * @return      Newly created item\r\n\t */\r\n\tpublic create<T>(make: { new(): T; }): T;\r\n\tpublic create(): T;\r\n\tpublic create(make?: { new(): T; }): T {\r\n\t\tconst clone =\r\n\t\t\t(make != null\r\n\t\t\t\t? new make()\r\n\t\t\t\t: this.template.clone());\r\n\r\n\t\tthis.insert(clone);\r\n\r\n\t\treturn clone;\r\n\t}\r\n}\r\n\r\n/**\r\n * A version of a [[SortedList]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\r\nexport class SortedListTemplate<T extends IClone<T> & { isTemplate: boolean }> extends SortedList<T> {\r\n\r\n\t// @todo code duplication\r\n\r\n\t/**\r\n\t * A template object.\r\n\t *\r\n\t * @todo Make this private\r\n\t */\r\n\tpublic _template!: T;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t *\r\n\t * @param t     Template object\r\n\t * @param sort  Ordering function\r\n\t */\r\n\tpublic constructor(t: T, sort: (left: T, right: T) => Ordering) {\r\n\t\tsuper(sort);\r\n\t\tthis.template = t;\r\n\t}\r\n\r\n\t/**\r\n\t * A \"template\" object to copy all properties from when creating new list\r\n\t * items.\r\n\t *\r\n\t * @param v  Template object\r\n\t */\r\n\tpublic set template(v: T) {\r\n\t\tv.isTemplate = true;\r\n\t\tthis._template = v;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Template object\r\n\t */\r\n\tpublic get template(): T {\r\n\t\treturn this._template;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all elements from other list.\r\n\t *\r\n\t * @param source  Source list\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\t$iter.each(source.iterator(), (value) => {\r\n\t\t\tthis.insert(value.clone());\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Instantiates a new object of the specified type, adds it to the end of\r\n\t * the list, and returns it.\r\n\t *\r\n\t * @param make  Item type to use. Will use the default type for the list if not specified.\r\n\t * @return      Newly created item\r\n\t */\r\n\tpublic create<T>(make: { new(): T; }): T;\r\n\tpublic create(): T;\r\n\tpublic create(make?: { new(): T; }): T {\r\n\t\tconst clone =\r\n\t\t\t(make != null\r\n\t\t\t\t? new make()\r\n\t\t\t\t: this.template.clone());\r\n\r\n\t\tthis.insert(clone);\r\n\r\n\t\treturn clone;\r\n\t}\r\n\r\n}\r\n"]}