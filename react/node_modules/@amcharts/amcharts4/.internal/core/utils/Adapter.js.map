{"version":3,"file":"Adapter.js","sourceRoot":"","sources":["../../../../../src/.internal/core/utils/Adapter.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAyDG;AAEH;;;;;GAKG;AACH,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAE1C,OAAO,KAAK,OAAO,MAAM,UAAU,CAAC;AACpC,OAAO,KAAK,MAAM,MAAM,SAAS,CAAC;AAClC,OAAO,KAAK,KAAK,MAAM,mBAAmB,CAAC;AAC3C,OAAO,KAAK,MAAM,MAAM,gBAAgB,CAAC;AACzC,OAAO,KAAK,KAAK,MAAM,eAAe,CAAC;AACvC,OAAO,KAAK,OAAO,MAAM,iBAAiB,CAAC;AAiC3C;;;;;GAKG;AAEH;;;;;GAKG;AACH;IAAA;QAEC;;WAEG;QACK,gBAAW,GAAW,CAAC,CAAC;QAEhC;;WAEG;QACK,eAAU,GAAG,IAAI,UAAU,CAAyB,UAAC,IAAI,EAAE,KAAK;YACvE,OAAO,MAAM,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,QAAQ,CAAC,EAC5D,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;IA8EJ,CAAC;IA7DA;;;;;;;;;;OAUG;IACI,8BAAM,GAAb,UAAc,IAAS,EAAE,GAAQ,EAAE,QAAa,EAAE,QAAoB,EAAE,KAAW;QAAjC,yBAAA,EAAA,YAAoB;QACrE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;YACtB,EAAE,EAAE,EAAE,IAAI,CAAC,WAAW;YACtB,GAAG,EAAE,GAAG;YACR,QAAQ,EAAE,QAAQ;YAClB,QAAQ,EAAE,QAAQ;YAClB,KAAK,EAAE,KAAK;YACZ,IAAI,EAAE,IAAI;SACV,CAAC,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACI,iCAAS,GAAhB,UAAiD,IAAY,EAAE,GAAQ;QACtE,OAAO,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI,IAAI,YAAY,CAAC,CAAC,IAAI,EAAvC,CAAuC,CAAC,CAAC;IAC3F,CAAC;IAED;;;;;;OAMG;IACI,gCAAQ,GAAf,UAA0D,IAAY,EAAE,GAAQ,EAAE,KAAa;QAC9F,0EAA0E;QAC1E,IAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;QACzC,IAAM,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;QAEhC,IAAI,MAAM,IAAI,CAAC,EAAE;YAChB,OAAO,KAAK,CAAC;SACb;QAED,+DAA+D;QAC/D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE;YAChC,IAAM,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YAE1B,IAAI,IAAI,CAAC,GAAG,KAAK,GAAG,IAAI,IAAI,YAAY,IAAI,CAAC,IAAI,EAAE;gBAClD,KAAK,GAAS,IAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;aAChE;SACD;QAED,OAAO,KAAK,CAAC;IACd,CAAC;IAEF,oBAAC;AAAD,CAAC,AA3FD,IA2FC;;AAED;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,MAAM,CAAC,IAAI,aAAa,GAAkB,IAAI,aAAa,EAAE,CAAC;AAG9D;;;;;GAKG;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqCG;AACH;IAiCC;;;;OAIG;IACH,iBAAY,CAAS;QApCrB;;WAEG;QACK,gBAAW,GAAW,CAAC,CAAC;QAEhC;;;;;WAKG;QACK,eAAU,GAAG,IAAI,UAAU,CAA8B,UAAC,IAAI,EAAE,KAAK;YAC5E,OAAO,MAAM,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,QAAQ,CAAC,EAC5D,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEO,cAAS,GAAkC,EAAE,CAAC;QAqBvD,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAEhB,wCAAwC;QACxC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;IACtC,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAiDG;IACI,qBAAG,GAAV,UAAmC,GAAQ,EAAE,QAAsE,EAAE,QAAoB,EAAE,KAAS;QAA/B,yBAAA,EAAA,YAAoB;QACxI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;YACtB,EAAE,EAAE,EAAE,IAAI,CAAC,WAAW;YACtB,GAAG,EAAE,GAAG;YACR,QAAQ,EAAE,QAAQ;YAClB,QAAQ,EAAE,QAAQ;YAClB,KAAK,EAAE,KAAK;SACZ,CAAC,CAAC;IACJ,CAAC;IAED;;;;;;;;OAQG;IACI,qBAAG,GAAV,UAAmC,GAAQ,EAAE,QAAsE,EAAE,QAAoB,EAAE,KAAS;QAA/B,yBAAA,EAAA,YAAoB;QACxI,OAAO,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,EAAE,UAAC,IAAI;YACtD,OAAO,IAAI,CAAC,GAAG,KAAK,GAAG,IAAI,IAAI,CAAC,QAAQ,KAAK,QAAQ,IAAI,IAAI,CAAC,QAAQ,KAAK,QAAQ,IAAI,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC;QAC7G,CAAC,CAAC,CAAC;IACJ,CAAC;IAED;;;;;;;;OAQG;IACI,wBAAM,GAAb,UAAc,GAAW,EAAE,QAAiB;QAA5C,iBAUC;QATA,wEAAwE;QACxE,mBAAmB;QACnB,uCAAuC;QACvC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,EAAE,UAAC,IAAI;YAC3D,iBAAiB;YACjB,IAAI,IAAI,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,QAAQ,KAAK,IAAI,CAAC,QAAQ,CAAC,EAAE;gBAClF,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;aAC7B;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACI,2BAAS,GAAhB,UAAsC,GAAQ;QAC7C,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;IAC5B,CAAC;IAED;;;;;;;;OAQG;IACI,4BAAU,GAAjB,UAAuC,GAAQ,EAAE,MAAyB;QAAzB,uBAAA,EAAA,iBAAyB;QACzE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;IAC9B,CAAC;IAES,qCAAmB,GAA7B,UAAmD,GAAQ;QAC1D,OAAO,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,GAAG,KAAK,GAAG,EAAb,CAAa,CAAC,CAAC;IACjE,CAAC;IAED;;;;OAIG;IACI,2BAAS,GAAhB,UAAsC,GAAQ;QAC7C,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,IAAI,aAAa,CAAC,SAAS,CAAiB,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;IACpI,CAAC;IAES,iCAAe,GAAzB,UAA+C,GAAQ;QACtD,IAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QAElC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;YAC3B,OAAO,IAAI,CAAC;SAEZ;aAAM;YACN,IAAI,KAAK,IAAI,CAAC,EAAE;gBACf,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;aAE3B;iBAAM;gBACN,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;aACtB;YAED,OAAO,KAAK,CAAC;SACb;IACF,CAAC;IAED;;;;;;;OAOG;IACI,uBAAK,GAAZ,UAAkC,GAAQ,EAAE,KAAa;QACxD,IAAI,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE;YAC9B,0EAA0E;YAC1E,IAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;YACzC,IAAM,QAAM,GAAG,SAAS,CAAC,MAAM,CAAC;YAEhC,IAAI,QAAM,GAAG,CAAC,EAAE;gBACf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAM,EAAE,EAAE,CAAC,EAAE;oBAChC,IAAM,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;oBAE1B,IAAI,IAAI,CAAC,GAAG,KAAK,GAAG,EAAE;wBACrB,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;qBAChE;iBACD;aACD;YAED,wBAAwB;YACxB,KAAK,GAAG,aAAa,CAAC,QAAQ,CAAiB,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;YAExE,OAAO,KAAK,CAAC;SAEb;aAAM;YACN,OAAO,KAAK,CAAC;SACb;IACF,CAAC;IAED;;;;OAIG;IACI,sBAAI,GAAX;QACC,mBAAmB;QACnB,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,EAAE,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,GAAG,EAAL,CAAK,CAAC,CAAC,CAAC;IAC3E,CAAC;IAGD;;;;OAIG;IACI,0BAAQ,GAAf,UAAgB,MAAY;QAA5B,iBAOC;QANA,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,EAAE,UAAC,CAAC;YAC1C,KAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,UAAC,GAAG,EAAE,GAAG;YACvC,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;QAC3B,CAAC,CAAC,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,uBAAK,GAAZ;QACC,iDAAiD;QACjD,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;IACzB,CAAC;IAEF,cAAC;AAAD,CAAC,AAtQD,IAsQC","sourcesContent":["/**\r\n * An Adapter can be used to apply chained synchronous transformations to any\r\n * value at runtime.\r\n *\r\n * Each type class using Adapters must have `adapters` property and adapter\r\n * interface defined.\r\n *\r\n * Adapters can be used to allow external code to apply transformations to any\r\n * value at any time.\r\n *\r\n * For example we have a Weather class which has a method `now()` which returns\r\n * current temperature.\r\n *\r\n * ```\r\n * function now() {\r\n *   // ... calculate temperature\r\n *   let temp = \"Temperature now is \" + degrees + \"F\";\r\n *   return temp;\r\n * }\r\n * ```\r\n *\r\n * Now, supposed we want to let other classes to modify the output of the\r\n * `now()`? We just apply an adapter to the `temp` before it is returned:\r\n *\r\n * ```\r\n * temp = this.adapters.apply(\"now\", {\r\n *   temp: temp,\r\n *   degrees: degrees\r\n * }).temp;\r\n * ```\r\n *\r\n * Some other class might tap onto it by defining an Adapter that calculates\r\n * the temperature in Celsius:\r\n *\r\n * weather.adapters.add(\"now\", (arg) => {\r\n *   arg.temp += \"(\" + farenheitToCelsius(arg.degrees) + \"C)\";\r\n *   return arh;\r\n * });\r\n *\r\n * Furthermore some time-related class could add time:\r\n *\r\n * weather.adapters.add(\"now\", (arg) => {\r\n *   arg.temp += \"; the time now is \" + (new Date().toLocaleString());\r\n *   return arh;\r\n * });\r\n *\r\n * So without adapters we would get output like this:\r\n *\r\n * ```\r\n * Temperature now is 90F\r\n * ```\r\n *\r\n * With adapters applied we now have:\r\n *\r\n * ```\r\n * Temperature now is 90F (32C); the time now is 12/11/2012, 7:00:00 PM\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SortedList } from \"./SortedList\";\r\nimport { EventDispatcher } from \"./EventDispatcher\";\r\nimport * as $number from \"./Number\";\r\nimport * as $order from \"./Order\";\r\nimport * as $iter from \"../utils/Iterator\";\r\nimport * as $array from \"../utils/Array\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $object from \"../utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Adapter interface.\r\n */\r\ninterface IAdapterCallback<Target, T> {\r\n\tid: number;\r\n\tkey: any;\r\n\tcallback: any;\r\n\tscope: any;\r\n\tpriority: number;\r\n}\r\n\r\n/**\r\n * Defines an interface for a global adapter.\r\n */\r\ninterface IGlobalAdapterCallback {\r\n\tid: number;\r\n\tkey: string;\r\n\tcallback: <T, Target, Key extends keyof T, C>(this: C, value: T[Key], target: Target, key?: keyof T) => T[Key];\r\n\tscope: any;\r\n\tpriority: number;\r\n\ttype: { new(): any };\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * GLOBAL ADAPTER\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A global adapter is an adpater that is attached to a class type rather than\r\n * specific object instance.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport class GlobalAdapter {\r\n\r\n\t/**\r\n\t * Callback id iterator.\r\n\t */\r\n\tprivate _callbackId: number = 0;\r\n\r\n\t/**\r\n\t * A list of if callbacks (adapters).\r\n\t */\r\n\tprivate _callbacks = new SortedList<IGlobalAdapterCallback>((left, right) => {\r\n\t\treturn $order.or($number.order(left.priority, right.priority),\r\n\t\t\t$number.order(left.id, right.id));\r\n\t});\r\n\r\n\tpublic addAll<T, Target, Key extends keyof T>(\r\n\t\ttype: { new(): Target },\r\n\t\tkey: Key,\r\n\t\tcallback: (value: T[Key], target: Target, key: keyof T) => T[Key],\r\n\t\tpriority?: number\r\n\t): void;\r\n\r\n\tpublic addAll<T, Target, Key extends keyof T, C>(\r\n\t\ttype: { new(): Target },\r\n\t\tkey: Key,\r\n\t\tcallback: (this: C, value: T[Key], target: Target, key: keyof T) => T[Key],\r\n\t\tpriority?: number,\r\n\t\tscope?: C\r\n\t): void;\r\n\r\n\t/**\r\n\t * Adds a global callback which is not specific to any particular object.\r\n\t * Whenever an adapter in any object of the specific class type is invoked\r\n\t * global adapters will kick in.\r\n\t *\r\n\t * @param type      Class type\r\n\t * @param key       Adapter key\r\n\t * @param callback  Callback function\r\n\t * @param priority  Priority (higher priority meaning adapter will be applied later)\r\n\t * @param scope     Callback function scaope\r\n\t */\r\n\tpublic addAll(type: any, key: any, callback: any, priority: number = 0, scope?: any): void {\r\n\t\tthis._callbacks.insert({\r\n\t\t\tid: ++this._callbackId,\r\n\t\t\tkey: key,\r\n\t\t\tcallback: callback,\r\n\t\t\tpriority: priority,\r\n\t\t\tscope: scope,\r\n\t\t\ttype: type\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if there are adapters for specific type available.\r\n\t *\r\n\t * @param type  Adapter type\r\n\t * @param key   Adapter key\r\n\t * @return {boolean}\r\n\t */\r\n\tpublic isEnabled<T, Target, Key extends keyof T>(type: Target, key: Key): boolean {\r\n\t\treturn $array.any(this._callbacks.values, (x) => x.key === key && type instanceof x.type);\r\n\t}\r\n\r\n\t/**\r\n\t * Applies global adapters for the object of the specific type.\r\n\t *\r\n\t * @param type   Class type\r\n\t * @param key    Adapter key\r\n\t * @param value  Value\r\n\t */\r\n\tpublic applyAll<T, Target, Key extends keyof T = keyof T>(type: Target, key: Key, value: T[Key]): T[Key] {\r\n\t\t// This is needed to improve the performance and reduce garbage collection\r\n\t\tconst callbacks = this._callbacks.values;\r\n\t\tconst length = callbacks.length;\r\n\r\n\t\tif (length == 0) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\r\n\t\t// Cycle through all callbacks and find the ones we need to use\r\n\t\tfor (let i = 0; i < length; ++i) {\r\n\t\t\tconst item = callbacks[i];\r\n\r\n\t\t\tif (item.key === key && type instanceof item.type) {\r\n\t\t\t\tvalue = (<any>item).callback.call(item.scope, value, type, key);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * A global Adapter for plugins that want to add specific\r\n * functionality for any chart, not just specific instance.\r\n *\r\n * If you want to add an adapter which applies to all instances of the same\r\n * object type, like, for instance all slices in PieSeries, you can use\r\n * global adapter.\r\n *\r\n * Global adapter is a system-wide instance, accessible via `globalAdapter`.\r\n *\r\n * ```TypeScript\r\n * am4core.globalAdapter.addAll<am4charts.IPieSeriesAdapters, am4charts.PieSeries, \"fill\">(am4charts.PieSeries, \"fill\", (value, target, key) => {\r\n *   return am4core.color(\"#005500\");\r\n * });\r\n * ```\r\n * ```JavaScript\r\n * am4core.globalAdapter.addAll(am4charts.PieSeries, \"fill\", (value, target, key) => {\r\n *   return am4core.color(\"#005500\");\r\n * });\r\n * ```\r\n *\r\n * @ignore\r\n */\r\nexport let globalAdapter: GlobalAdapter = new GlobalAdapter();\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REGULAR ADAPTER\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Adapter allows adding ordered callback functions and associating them with a\r\n * string-based key. An Adapter user can then easily invoke those callbacks to\r\n * apply custom functions on its input, output or intermediate values.\r\n *\r\n * Custom code and plugins can add their own callbacks to modify and enhance\r\n * core functionality.\r\n *\r\n * See the description of `add()` for an example.\r\n *\r\n * Almost any object in amCharts4 has own adapter, accessible with `adapter`\r\n * property.\r\n *\r\n * Any adapters added to it will be applied to that object only.\r\n *\r\n * ### Global Adapters\r\n *\r\n * If you want to add an adapter which applies to all instances of the same\r\n * object type, like, for instance all slices in PieSeries, you can use\r\n * global adapter.\r\n *\r\n * Global adapter is a system-wide instance, accessible via `globalAdapter`.\r\n *\r\n * ```TypeScript\r\n * am4core.globalAdapter.addAll<am4charts.IPieSeriesAdapters, am4charts.PieSeries, \"fill\">(am4charts.PieSeries. \"fill\", (value, target, key) => {\r\n *   return am4core.color(\"#005500\");\r\n * });\r\n * ```\r\n * ```JavaScript\r\n * am4core.globalAdapter.addAll(am4charts.PieSeries. \"fill\", (value, target, key) => {\r\n *   return am4core.color(\"#005500\");\r\n * });\r\n * ```\r\n *\r\n * {@link https://www.amcharts.com/docs/v4/reference/adapter_module/#globalAdapter_property More info}.\r\n *\r\n * @important\r\n */\r\nexport class Adapter<Target, T> {\r\n\r\n\t/**\r\n\t * Internal counter for callback ids.\r\n\t */\r\n\tprivate _callbackId: number = 0;\r\n\r\n\t/**\r\n\t * A list of adapter callbacks.\r\n\t *\r\n\t * @param $number.order(left.priority, right.priority) [description]\r\n\t * @param $number.order(left.id,       right.id));\t}  [description]\r\n\t */\r\n\tprivate _callbacks = new SortedList<IAdapterCallback<Target, T>>((left, right) => {\r\n\t\treturn $order.or($number.order(left.priority, right.priority),\r\n\t\t\t$number.order(left.id, right.id));\r\n\t});\r\n\r\n\tprotected _disabled: { [key in keyof T]?: number } = {};\r\n\r\n\t/**\r\n\t * Holds an object reference this Adapter is for.\r\n\t */\r\n\tpublic object: Target;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t */\r\n\tpublic events: EventDispatcher<{\r\n\t\tinserted: {};\r\n\t\tremoved: {};\r\n\t}>;\r\n\r\n\t/**\r\n\t * Constructor, sets the object referece this Adapter should be used for.\r\n\t *\r\n\t * @param c Object\r\n\t */\r\n\tconstructor(c: Target) {\r\n\t\tthis.object = c;\r\n\r\n\t\t// TODO this exposes the internal events\r\n\t\tthis.events = this._callbacks.events;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a callback for a specific key.\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Override fill color value and make all slices green\r\n\t * chart.series.template.adapter.add(\"fill\", (value, target, key) => {\r\n\t *   return am4core.color(\"#005500\");\r\n\t * });\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Override fill color value and make all slices green\r\n\t * chart.series.template.adapter.add(\"fill\", function(value, target, key) {\r\n\t *   return am4core.color(\"#005500\");\r\n\t * });\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"adapter\": {\r\n\t *     \t// Override fill color value and make all slices green\r\n\t *     \t\"fill\": function(value, target, key) {\r\n\t *     \t  return am4core.color(\"#005500\");\r\n\t *     \t}\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * The above will call user-defined function (adapter) whenever `fill` value\r\n\t * is requested from the Pie series, allowing it to override the default\r\n\t * using custom code and any fuzzy logic.\r\n\t *\r\n\t * There can be any number of adapters set on one property key.\r\n\t *\r\n\t * In this case adapters will be applied in daisy-chain fashion. The first\r\n\t * adapter in queue will make its transformation. The next one will have\r\n\t * the output of the first adapter as a starting value, etc.\r\n\t *\r\n\t * The order of the adapters are determined either by the order they were\r\n\t * added in, or their `priority` value.\r\n\t *\r\n\t * The heigher the `priority`, the later in the game adapter will be applied.\r\n\t *\r\n\t * @param key       Key\r\n\t * @param callback  A callback function\r\n\t * @param priority  The higher priority, the more chance the adapter will be applied last\r\n\t * @param scope     Scope for the callback function\r\n\t */\r\n\tpublic add<Key extends keyof T, C>(key: Key, callback: (this: C, value: T[Key], target: Target, key: Key) => T[Key], priority: number = 0, scope?: C): void {\r\n\t\tthis._callbacks.insert({\r\n\t\t\tid: ++this._callbackId,\r\n\t\t\tkey: key,\r\n\t\t\tcallback: callback,\r\n\t\t\tpriority: priority,\r\n\t\t\tscope: scope\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether specific adapter is already set.\r\n\t *\r\n\t * @param key       Key\r\n\t * @param callback  A callback function\r\n\t * @param priority  The higher priority, the more chance the adapter will be applied last\r\n\t * @param scope     Scope for the callback function\r\n\t * @returns                            Adapter set?\r\n\t */\r\n\tpublic has<Key extends keyof T, C>(key: Key, callback: (this: C, value: T[Key], target: Target, key: Key) => T[Key], priority: number = 0, scope?: C): boolean {\r\n\t\treturn $iter.contains(this._callbacks.iterator(), (item) => {\r\n\t\t\treturn item.key === key && item.callback === callback && item.priority === priority && item.scope === scope;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Removes adapter callbacks for the specific `key`.\r\n\t *\r\n\t * If `priority` is specified, only callbacks for that priority are removed.\r\n\t *\r\n\t * @param key      Key\r\n\t * @param priority Priority\r\n\t * @todo Implement\r\n\t */\r\n\tpublic remove(key: string, priority?: number): void {\r\n\t\t// It has to make a copy because it removes the elements while iterating\r\n\t\t// TODO inefficient\r\n\t\t// TODO should this re-enable the key ?\r\n\t\t$array.each($iter.toArray(this._callbacks.iterator()), (item) => {\r\n\t\t\t// TODO test this\r\n\t\t\tif (item.key === key && (!$type.isNumber(priority) || priority === item.priority)) {\r\n\t\t\t\tthis._callbacks.remove(item);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Enable applying adapters for a certain key, if it was disabled before by\r\n\t * `disableKey()`.\r\n\t *\r\n\t * @param key Key\r\n\t */\r\n\tpublic enableKey<Key extends keyof T>(key: Key): void {\r\n\t\tdelete this._disabled[key];\r\n\t}\r\n\r\n\t/**\r\n\t * Disable applying adapters for a certain key.\r\n\t *\r\n\t * Optionally, can set how many applies to skip before automatically\r\n\t * re-enabling the applying.\r\n\t *\r\n\t * @param key     Key\r\n\t * @param amount  Number of applies to skip\r\n\t */\r\n\tpublic disableKey<Key extends keyof T>(key: Key, amount: number = Infinity): void {\r\n\t\tthis._disabled[key] = amount;\r\n\t}\r\n\r\n\tprotected _hasListenersByType<Key extends keyof T>(key: Key): boolean {\r\n\t\treturn $array.any(this._callbacks.values, (x) => x.key === key);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if there are any enabled adapters set for the specific `key`.\r\n\t *\r\n\t * @returns Are there any adapters for the key?\r\n\t */\r\n\tpublic isEnabled<Key extends keyof T>(key: Key): boolean {\r\n\t\treturn this._disabled[key] == null && (this._hasListenersByType(key) || globalAdapter.isEnabled<T, Target, Key>(this.object, key));\r\n\t}\r\n\r\n\tprotected _shouldDispatch<Key extends keyof T>(key: Key): boolean {\r\n\t\tconst count = this._disabled[key];\r\n\r\n\t\tif (!$type.isNumber(count)) {\r\n\t\t\treturn true;\r\n\r\n\t\t} else {\r\n\t\t\tif (count <= 1) {\r\n\t\t\t\tdelete this._disabled[key];\r\n\r\n\t\t\t} else {\r\n\t\t\t\t--this._disabled[key];\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Passes the input value through all the callbacks for the defined `key`.\r\n\t *\r\n\t * @param key      Key\r\n\t * @param value    Input value\r\n\t * @param ...rest  Rest of the parameters to be passed into callback\r\n\t * @return Output value\r\n\t */\r\n\tpublic apply<Key extends keyof T>(key: Key, value: T[Key]): T[Key] {\r\n\t\tif (this._shouldDispatch(key)) {\r\n\t\t\t// This is needed to improve the performance and reduce garbage collection\r\n\t\t\tconst callbacks = this._callbacks.values;\r\n\t\t\tconst length = callbacks.length;\r\n\r\n\t\t\tif (length > 0) {\r\n\t\t\t\tfor (let i = 0; i < length; ++i) {\r\n\t\t\t\t\tconst item = callbacks[i];\r\n\r\n\t\t\t\t\tif (item.key === key) {\r\n\t\t\t\t\t\tvalue = item.callback.call(item.scope, value, this.object, key);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Apply global adapters\r\n\t\t\tvalue = globalAdapter.applyAll<T, Target, Key>(this.object, key, value);\r\n\r\n\t\t\treturn value;\r\n\r\n\t\t} else {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns all adapter keys which are in this adapter.\r\n\t *\r\n\t * @return Adapter keys\r\n\t */\r\n\tpublic keys(): Array<string> {\r\n\t\t// TODO inefficient\r\n\t\treturn $iter.toArray($iter.map(this._callbacks.iterator(), (x) => x.key));\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all the adapter callbacks from `source`.\r\n\t *\r\n\t * @param source  An Adapter to copy items from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\t$iter.each(source._callbacks.iterator(), (x) => {\r\n\t\t\tthis.add(x.key, x.callback, x.priority, x.scope);\r\n\t\t});\r\n\t\t$object.each(source._disabled, (key, val) => {\r\n\t\t\tthis._disabled[key] = val;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Clears all callbacks from this Adapter.\r\n\t */\r\n\tpublic clear(): void {\r\n\t\t// TODO should this also re-enable all the keys ?\r\n\t\tthis._callbacks.clear();\r\n\t}\r\n\r\n}\r\n"]}