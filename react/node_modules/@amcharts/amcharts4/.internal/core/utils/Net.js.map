{"version":3,"file":"Net.js","sourceRoot":"","sources":["../../../../../src/.internal/core/utils/Net.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * A collection of network-related functions\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $type from \"./Type\";\r\n\r\n/**\r\n * Defines an interface for objects that hold a net request result.\r\n */\r\nexport interface INetLoadResult<A> {\r\n\r\n\t/**\r\n\t * A reference to original [[XMLHttpRequest]].\r\n\t */\r\n\txhr: XMLHttpRequest;\r\n\r\n\t/**\r\n\t * Request response body.\r\n\t */\r\n\tresponse?: string;\r\n\r\n\t/**\r\n\t * Request response as Blob. (if set `responseType = \"blob\"`)\r\n\t */\r\n\tblob?: Blob;\r\n\r\n\t/**\r\n\t * Response `Content-Type`.\r\n\t */\r\n\ttype: string | null;\r\n\r\n\t/**\r\n\t * Was there an error?\r\n\t */\r\n\terror: boolean;\r\n\r\n\t/**\r\n\t * A target object that made the net load request.\r\n\t */\r\n\ttarget?: A;\r\n\r\n}\r\n\r\nexport interface INetRequestOptions {\r\n\r\n\t/**\r\n\t * Custom request headers to be added to HTTP(S) request.\r\n\t */\r\n\trequestHeaders?: { key: string, value: string }[];\r\n\r\n\t/**\r\n\t * Specify expected response type.\r\n\t *\r\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType} for more info\r\n\t */\r\n\tresponseType?: XMLHttpRequestResponseType;\r\n\r\n\t/**\r\n\t * Specify whether to send CORS credentials (defaults to `false`).\r\n\t *\r\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials} for more info\r\n\t */\r\n\twithCredentials?: boolean;\r\n}\r\n\r\n/**\r\n * Loads an external file via its URL.\r\n *\r\n * Please note that this is an asynchronous function.\r\n *\r\n * It will not return the result, but rather a `Promise`.\r\n *\r\n * You can use the `await` notion, or `then()`.\r\n *\r\n * ```TypeScript\r\n * // Using await\r\n * let response = await Net.load( \"http://www.my.com/data.json\" );\r\n * console.log( response.response );\r\n *\r\n * // Using then()\r\n * Net.load( \"http://www.my.com/data.json\" ).then( ( response ) => {\r\n *   console.log( response.response );\r\n * } );\r\n * ```\r\n * ```JavaScript\r\n * // Using then()\r\n * Net.load( \"http://www.my.com/data.json\" ).then( function( response ) {\r\n *   console.log( response.response );\r\n * } );\r\n * ```\r\n *\r\n * @async\r\n * @param url      URL for the file to load\r\n * @param target   A target element that is requesting the net load\r\n * @param options  Request options\r\n * @return Result (Promise)\r\n */\r\nexport function load<A>(url: string, target?: A, options?: INetRequestOptions): Promise<INetLoadResult<A>> {\r\n\treturn new Promise<INetLoadResult<A>>((success, error) => {\r\n\r\n\t\t// Is return type Blob?\r\n\t\tlet isBlob = $type.hasValue(options) && options.responseType == \"blob\";\r\n\r\n\t\t// Create request and set up handlers\r\n\t\tlet xhr = new XMLHttpRequest();\r\n\t\txhr.onload = () => {\r\n\t\t\tif (xhr.status === 200) {\r\n\r\n\t\t\t\tlet response: $type.Optional<string>;\r\n\t\t\t\tlet blob: $type.Optional<Blob>;\r\n\r\n\t\t\t\tif (isBlob) {\r\n\t\t\t\t\tblob = xhr.response;\r\n\t\t\t\t\treadBlob(blob).then((response) => {\r\n\t\t\t\t\t\tlet output: INetLoadResult<A> = {\r\n\t\t\t\t\t\t\txhr: xhr,\r\n\t\t\t\t\t\t\terror: false,\r\n\t\t\t\t\t\t\tresponse: response,\r\n\t\t\t\t\t\t\tblob: blob,\r\n\t\t\t\t\t\t\ttype: xhr.getResponseHeader(\"Content-Type\"),\r\n\t\t\t\t\t\t\ttarget: target\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tsuccess(output);\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tresponse = xhr.responseText || xhr.response\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet output: INetLoadResult<A> = {\r\n\t\t\t\t\txhr: xhr,\r\n\t\t\t\t\terror: false,\r\n\t\t\t\t\tresponse: response,\r\n\t\t\t\t\tblob: blob,\r\n\t\t\t\t\ttype: xhr.getResponseHeader(\"Content-Type\"),\r\n\t\t\t\t\ttarget: target\r\n\t\t\t\t};\r\n\t\t\t\tsuccess(output);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\terror({\r\n\t\t\t\t\txhr: xhr,\r\n\t\t\t\t\terror: true,\r\n\t\t\t\t\ttype: xhr.getResponseHeader(\"Content-Type\"),\r\n\t\t\t\t\ttarget: target\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\t\txhr.onerror = () => {\r\n\t\t\terror({\r\n\t\t\t\txhr: xhr,\r\n\t\t\t\terror: true,\r\n\t\t\t\ttype: xhr.getResponseHeader(\"Content-Type\"),\r\n\t\t\t\ttarget: target\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t// Open request\r\n\t\txhr.open(\"GET\", url, true);\r\n\r\n\t\tif (options && options.withCredentials) {\r\n\t\t\txhr.withCredentials = true;\r\n\t\t}\r\n\r\n\t\t// Process options\r\n\t\tif ($type.hasValue(options)) {\r\n\r\n\t\t\tif ($type.hasValue(options.requestHeaders)) {\r\n\t\t\t\tfor (let i = 0; i < options.requestHeaders.length; i++) {\r\n\t\t\t\t\tlet header = options.requestHeaders[i];\r\n\t\t\t\t\txhr.setRequestHeader(header.key, header.value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(options.responseType)) {\r\n\t\t\t\txhr.responseType = options.responseType;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Send request\r\n\t\txhr.send();\r\n\r\n\t});\r\n\r\n}\r\n\r\n/**\r\n * Returns textual representation of a Blob object.\r\n *\r\n * @param   blob  Target blob\r\n * @return        Text promise\r\n */\r\nexport function readBlob(blob: Blob): Promise<string> {\r\n\treturn new Promise<string>((success, error) => {\r\n\t\tconst reader = new FileReader()\r\n\r\n\t\treader.onload = event => {\r\n\t\t\tsuccess(<string>reader.result);\r\n\t\t}\r\n\r\n\t\treader.onerror = (e) => {\r\n\t\t\terror(e);\r\n\t\t}\r\n\r\n\t\treader.readAsText(blob);\r\n\t});\r\n}\r\n"]}