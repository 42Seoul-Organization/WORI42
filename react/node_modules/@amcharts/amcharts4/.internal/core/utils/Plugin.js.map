{"version":3,"file":"Plugin.js","sourceRoot":"","sources":["../../../../../src/.internal/core/utils/Plugin.ts"],"names":[],"mappings":"AAAA;;GAEG;AAyBH;;;;;GAKG;AAEH;;;;;;;;GAQG;AACH;IAoBC;;OAEG;IACH;QAfA;;WAEG;QACO,cAAS,GAAY,KAAK,CAAC;QAErC;;;;WAIG;QACO,eAAU,GAAqB,EAAE,CAAC;QAM3C,qBAAqB;IACtB,CAAC;IAED;;;OAGG;IACI,qBAAI,GAAX;QACC,eAAe;QACf,cAAc;IACf,CAAC;IAED;;;;OAIG;IACI,2BAAU,GAAjB;QACC,OAAO,IAAI,CAAC,SAAS,CAAC;IACvB,CAAC;IAED;;OAEG;IACI,wBAAO,GAAd;QACC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACpB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YAEtB,IAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC;YAE1B,IAAI,CAAC,UAAU,GAAQ,IAAI,CAAC;YAE5B,OAAO,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;gBACtB,IAAM,QAAQ,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;gBAC3B,QAAQ,CAAC,OAAO,EAAE,CAAC;aACnB;SACD;IACF,CAAC;IAEF,aAAC;AAAD,CAAC,AA/DD,IA+DC","sourcesContent":["/**\r\n * A plugin base class.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Optional } from \"./Type\";\r\nimport { IDisposer } from \"./Disposer\";\r\nimport { Sprite } from \"../Sprite\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\nexport interface IPlugin extends IDisposer {\r\n\ttarget: Optional<Sprite>;\r\n\tinit(): void;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This is a base class that provides core functionality for plugins.\r\n *\r\n * The easiest way to start off with a new plugin is to extend this class.\r\n *\r\n * It will provide all the mandatory functionality, such as disposers.\r\n *\r\n * @since 4.2.2\r\n */\r\nexport class Plugin implements IPlugin {\r\n\r\n\r\n\t/**\r\n\t * A target object plugin is for.\r\n\t */\r\n\tpublic target: Optional<Sprite>;\r\n\r\n\t/**\r\n\t * Is this object disposed?\r\n\t */\r\n\tprotected _disposed: boolean = false;\r\n\r\n\t/**\r\n\t * List of IDisposer which will be disposed when the BaseObject is disposed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _disposers: Array<IDisposer> = [];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\t// Nothing to do here\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates series with required events and adapters used to hijack its\r\n\t * data.\r\n\t */\r\n\tpublic init(): void {\r\n\t\t// Does nothing\r\n\t\t// Override it\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if this element is already disposed.\r\n\t *\r\n\t * @return Is disposed?\r\n\t */\r\n\tpublic isDisposed(): boolean {\r\n\t\treturn this._disposed;\r\n\t}\r\n\r\n\t/**\r\n\t * Disposes this object and related stuff.\r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tif (!this._disposed) {\r\n\t\t\tthis._disposed = true;\r\n\r\n\t\t\tconst a = this._disposers;\r\n\r\n\t\t\tthis._disposers = <any>null;\r\n\r\n\t\t\twhile (a.length !== 0) {\r\n\t\t\t\tconst disposer = a.shift();\r\n\t\t\t\tdisposer.dispose();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n"]}