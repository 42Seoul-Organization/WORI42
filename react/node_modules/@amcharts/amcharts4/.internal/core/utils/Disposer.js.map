{"version":3,"file":"Disposer.js","sourceRoot":"","sources":["../../../../../src/.internal/core/utils/Disposer.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;AACH,OAAO,KAAK,MAAM,MAAM,SAAS,CAAC;AAClC,OAAO,KAAK,KAAK,MAAM,QAAQ,CAAC;AAahC;;;;GAIG;AACH;IAYC;;;;OAIG;IACH,kBAAY,OAAmB;QAC9B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IACzB,CAAC;IAED;;;;OAIG;IACI,6BAAU,GAAjB;QACC,OAAO,IAAI,CAAC,SAAS,CAAC;IACvB,CAAC;IAED;;OAEG;IACI,0BAAO,GAAd;QACC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACpB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,QAAQ,EAAE,CAAC;SAChB;IACF,CAAC;IAEF,eAAC;AAAD,CAAC,AAzCD,IAyCC;;AAED;;;;GAIG;AACH;IAAmC,iCAAQ;IAC1C,uBAAY,SAA2B;eACtC,kBAAM;YACL,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,UAAC,CAAC;gBACxB,CAAC,CAAC,OAAO,EAAE,CAAC;YACb,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC;IACH,CAAC;IACF,oBAAC;AAAD,CAAC,AARD,CAAmC,QAAQ,GAQ1C;;AAED;;;;;;;;GAQG;AACH;IAA+D,wCAAQ;IAYtE;;OAEG;IACH;QAAA,YACC,kBAAM;YACL,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAI,CAAC,SAAS,CAAC,EAAE;gBACnC,KAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;gBACzB,KAAI,CAAC,SAAS,GAAG,SAAS,CAAC;aAC3B;QACF,CAAC,CAAC,SACF;;IAAD,CAAC;IAED;;;;OAIG;IACI,kCAAG,GAAV;QACC,OAAO,IAAI,CAAC,MAAM,CAAC;IACpB,CAAC;IAED;;;;;OAKG;IACI,kCAAG,GAAV,UAAW,KAAkB,EAAE,QAA6B;QAC3D,IAAI,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;YACnC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;SACzB;QAED,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACrB,CAAC;IAED;;OAEG;IACI,oCAAK,GAAZ;QACC,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IAChC,CAAC;IAEF,2BAAC;AAAD,CAAC,AAvDD,CAA+D,QAAQ,GAuDtE;;AAED;;;GAGG;AACH;IAAqC,mCAAQ;IAA7C;QAAA,qEA4BC;QA1BA;;;;WAIG;QACK,cAAQ,GAAW,CAAC,CAAC;;IAqB9B,CAAC;IAnBA;;;;OAIG;IACI,mCAAS,GAAhB;QAAA,iBAYC;QAXA,wCAAwC;QACxC,EAAE,IAAI,CAAC,QAAQ,CAAC;QAEhB,gCAAgC;QAChC,OAAO,IAAI,QAAQ,CAAC;YACnB,EAAE,KAAI,CAAC,QAAQ,CAAC;YAEhB,IAAI,KAAI,CAAC,QAAQ,KAAK,CAAC,EAAE;gBACxB,KAAI,CAAC,OAAO,EAAE,CAAC;aACf;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAEF,sBAAC;AAAD,CAAC,AA5BD,CAAqC,QAAQ,GA4B5C","sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $array from \"./Array\";\r\nimport * as $type from \"./Type\";\r\nimport { Optional } from \"./Type\";\r\n\r\n/**\r\n * Defines interface for disposable objects.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport interface IDisposer {\r\n\tisDisposed(): boolean;\r\n\tdispose(): void;\r\n}\r\n\r\n/**\r\n * A base class for disposable objects.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport class Disposer implements IDisposer {\r\n\r\n\t/**\r\n\t * Is object disposed?\r\n\t */\r\n\tprivate _disposed: boolean;\r\n\r\n\t/**\r\n\t * Method that disposes the object.\r\n\t */\r\n\tprivate _dispose: () => void;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param dispose  Function that disposes object\r\n\t */\r\n\tconstructor(dispose: () => void) {\r\n\t\tthis._disposed = false;\r\n\t\tthis._dispose = dispose;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if object is disposed.\r\n\t *\r\n\t * @return Disposed?\r\n\t */\r\n\tpublic isDisposed(): boolean {\r\n\t\treturn this._disposed;\r\n\t}\r\n\r\n\t/**\r\n\t * Disposes the object.\r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tif (!this._disposed) {\r\n\t\t\tthis._disposed = true;\r\n\t\t\tthis._dispose();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * A collection of related disposers that can be disposed in one go.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport class MultiDisposer extends Disposer {\r\n\tconstructor(disposers: Array<IDisposer>) {\r\n\t\tsuper(() => {\r\n\t\t\t$array.each(disposers, (x) => {\r\n\t\t\t\tx.dispose();\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * A special kind of Disposer that has attached value set.\r\n *\r\n * If a new value is set using `set()` method, the old disposer value is\r\n * disposed.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport class MutableValueDisposer<T extends IDisposer> extends Disposer {\r\n\r\n\t/**\r\n\t * Current disposer.\r\n\t */\r\n\tprivate _disposer: Optional<IDisposer>;\r\n\r\n\t/**\r\n\t * Current value.\r\n\t */\r\n\tprivate _value: Optional<T>;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper(() => {\r\n\t\t\tif ($type.hasValue(this._disposer)) {\r\n\t\t\t\tthis._disposer.dispose();\r\n\t\t\t\tthis._disposer = undefined;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current value.\r\n\t *\r\n\t * @return Value\r\n\t */\r\n\tpublic get(): Optional<T> {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets value and disposes previous disposer if it was set.\r\n\t *\r\n\t * @param value     New value\r\n\t * @param disposer  Disposer\r\n\t */\r\n\tpublic set(value: Optional<T>, disposer: Optional<IDisposer>): void {\r\n\t\tif ($type.hasValue(this._disposer)) {\r\n\t\t\tthis._disposer.dispose();\r\n\t\t}\r\n\r\n\t\tthis._disposer = disposer;\r\n\t\tthis._value = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Resets the disposer value.\r\n\t */\r\n\tpublic reset(): void {\r\n\t\tthis.set(undefined, undefined);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport class CounterDisposer extends Disposer {\r\n\r\n\t/**\r\n\t * [_counter description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprivate _counter: number = 0;\r\n\r\n\t/**\r\n\t * [increment description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic increment() {\r\n\t\t// TODO throw an error if it is disposed\r\n\t\t++this._counter;\r\n\r\n\t\t// TODO make this more efficient\r\n\t\treturn new Disposer(() => {\r\n\t\t\t--this._counter;\r\n\r\n\t\t\tif (this._counter === 0) {\r\n\t\t\t\tthis.dispose();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n}\r\n"]}