{"version":3,"file":"CSVParser.js","sourceRoot":"","sources":["../../../../../src/.internal/core/data/CSVParser.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * CSV parser.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { DataParser, IDataParserOptions } from \"./DataParser\";\r\nimport { DateFormatter } from \"../formatters/DateFormatter\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $array from \"../utils/Array\";\r\n\r\n/**\r\n * Defines options for CSV format parser\r\n */\r\nexport interface ICSVOptions extends IDataParserOptions {\r\n\r\n\t/**\r\n\t * A delimiter character for columns.\r\n\t *\r\n\t * @default ','\r\n\t */\r\n\tdelimiter?: string;\r\n\r\n\t/**\r\n\t * The data is in reverse order.\r\n\t *\r\n\t * If iset to `true`, parser will invert the order of the data items before\r\n\t * passing back the data.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\treverse?: boolean;\r\n\r\n\t/**\r\n\t * Skip a number of rows from the beginning of the data.\r\n\t *\r\n\t * Useful if your data contains non-data headers, such as column names or\r\n\t * empty rows.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tskipRows?: number;\r\n\r\n\t/**\r\n\t * Skip empty rows.\r\n\t *\r\n\t * If set to `false`, parser will generate empty data points for empty rows\r\n\t * in data.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tskipEmpty?: boolean;\r\n\r\n\t/**\r\n\t * Use the first row in data to generte column names.\r\n\t *\r\n\t * Normally, parser will name each column `col0`, `col1`, etc.\r\n\t *\r\n\t * Setting this to `true` will make the parser look at the first row, for\r\n\t * actual column names.\r\n\t *\r\n\t * Please note that if you use it with `skipRows`, the specified number of\r\n\t * rows will be removed, then the parser will look for column names in the\r\n\t * first row of what's left.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tuseColumnNames?: boolean;\r\n\r\n\t/**\r\n\t * A list of fields that should be treaded as numeric.\r\n\t *\r\n\t * Any information container in such fields will be converted to `number`.\r\n\t */\r\n\tnumberFields?: string[];\r\n\r\n\t/**\r\n\t * A list of fields that hold date/time infromation.\r\n\t *\r\n\t * Parser will try to convert such fields into `Date` objects.\r\n\t */\r\n\tdateFields?: string[];\r\n\r\n\t/**\r\n\t * A date formatted to be used when parsing dates.\r\n\t */\r\n\tdateFormatter?: DateFormatter;\r\n}\r\n\r\n/**\r\n * Define possible separators.\r\n */\r\nlet separators = [\",\", \";\", \"\\t\"];\r\n\r\n/**\r\n * A parser for CSV format.\r\n *\r\n * @important\r\n */\r\nexport class CSVParser extends DataParser {\r\n\r\n\t/**\r\n\t * Tests if the format is CSV.\r\n\t *\r\n\t * @param data  Source data\r\n\t * @return Is it CSV?\r\n\t */\r\n\tstatic isCSV(data: string): boolean {\r\n\t\treturn CSVParser.getDelimiterFromData(data) ? true : false;\r\n\t}\r\n\r\n\t/**\r\n\t * Tries to determine a column separator.\r\n\t *\r\n\t * @param data  Source data\r\n\t * @return Separator\r\n\t */\r\n\tstatic getDelimiterFromData(data: string): string {\r\n\r\n\t\t// We're going to take first few lines of the CSV with different\r\n\t\t// possible separators and check if it results in same number of columns.\r\n\t\t// If it does, we're going to assume it's a CSV\r\n\t\tlet lines = data.split(\"\\n\");\r\n\t\tlet len = lines.length;\r\n\t\tlet separator: string;\r\n\r\n\t\t$array.each(separators, (sep) => {\r\n\t\t\tlet columns = 0,\r\n\t\t\t\tlineColums = 0;\r\n\r\n\t\t\t// TODO replace with iterators\r\n\t\t\tfor (let i = 0; i < len; ++i) {\r\n\r\n\t\t\t\t// Get number of columns in a line\r\n\t\t\t\tcolumns = lines[i].split(sep).length;\r\n\r\n\t\t\t\tif (columns > 1) {\r\n\r\n\t\t\t\t\t// More than one column - possible candidate\r\n\t\t\t\t\tif (lineColums === 0) {\r\n\t\t\t\t\t\t// First line\r\n\t\t\t\t\t\tlineColums = columns;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (columns != lineColums) {\r\n\t\t\t\t\t\t// Incorrect number of columns, give up on this separator\r\n\t\t\t\t\t\tlineColums = 0;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t\t// Not this separator\r\n\t\t\t\t\t// Not point in continuing\r\n\t\t\t\t\tlineColums = 0;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Check if we have a winner\r\n\t\t\tif (lineColums) {\r\n\t\t\t\tseparator = sep;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn separator;\r\n\t}\r\n\r\n\t/**\r\n\t * Content-type suitable for CSV format.\r\n\t */\r\n\tpublic contentType: string = \"text/csv\";\r\n\r\n\t/**\r\n\t * Parser options.\r\n\t *\r\n\t * @see {@link ICSVOptions} for description of each option\r\n\t */\r\n\tpublic options: ICSVOptions = {\r\n\t\tdelimiter: \"\",\r\n\t\treverse: false,\r\n\t\tskipRows: 0,\r\n\t\tskipEmpty: true,\r\n\t\tuseColumnNames: false\r\n\t};\r\n\r\n\t/**\r\n\t * Parses and returns data.\r\n\t *\r\n\t * @param data  Unparsed data\r\n\t * @return Parsed data\r\n\t */\r\n\tpublic parse(csv: string): any[] {\r\n\r\n\t\t// Check if we have delimiter set\r\n\t\tif (!this.options.delimiter) {\r\n\t\t\tthis.options.delimiter = CSVParser.getDelimiterFromData(csv);\r\n\t\t}\r\n\r\n\t\t// Get CSV data as array\r\n\t\tlet data = this.CSVToArray(csv, this.options.delimiter);\r\n\r\n\t\t// Do we need to cast some fields to numbers?\r\n\t\tlet empty = $type.hasValue(this.options.emptyAs);\r\n\t\tlet numbers = this.parsableNumbers;\r\n\t\tlet dates = this.parsableDates;\r\n\r\n\t\t// Init resuling array\r\n\t\tlet res: any[] = [],\r\n\t\t\tcols: string[] = [],\r\n\t\t\tcol: string,\r\n\t\t\ti: number;\r\n\r\n\t\t// Skip rows\r\n\t\tfor (i = 0; i < this.options.skipRows; i++) {\r\n\t\t\tdata.shift();\r\n\t\t}\r\n\r\n\t\t// First row holds column names?\r\n\t\tif (this.options.useColumnNames) {\r\n\t\t\tcols = data.shift();\r\n\r\n\t\t\t// Normalize column names\r\n\t\t\tfor (let x = 0; x < cols.length; x++) {\r\n\t\t\t\t// trim\r\n\t\t\t\tcol = $type.hasValue(cols[x]) ? cols[x].replace(/^\\s+|\\s+$/gm, \"\") : \"\";\r\n\r\n\t\t\t\t// Check for empty\r\n\t\t\t\tif (\"\" === col) {\r\n\t\t\t\t\tcol = \"col\" + x;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcols[x] = col;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Iterate through the result set\r\n\t\tlet row;\r\n\t\twhile (true) {\r\n\t\t\trow = this.options.reverse ? data.pop() : data.shift();\r\n\r\n\t\t\tif (!row) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.options.skipEmpty && row.length === 1 && row[0] === \"\") {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tlet dataPoint: any = {};\r\n\t\t\tfor (i = 0; i < row.length; i++) {\r\n\t\t\t\tcol = undefined === cols[i] ? \"col\" + i : cols[i];\r\n\t\t\t\tdataPoint[col] = row[i] === \"\" ? this.options.emptyAs : row[i];\r\n\r\n\t\t\t\t// Convert\r\n\t\t\t\tif (empty) {\r\n\t\t\t\t\tdataPoint[col] = this.maybeToEmpty(dataPoint[col]);\r\n\t\t\t\t}\r\n\t\t\t\tif (numbers) {\r\n\t\t\t\t\tdataPoint[col] = this.maybeToNumber(col, dataPoint[col]);\r\n\t\t\t\t}\r\n\t\t\t\tif (dates) {\r\n\t\t\t\t\tdataPoint[col] = this.maybeToDate(col, dataPoint[col]);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tres.push(dataPoint);\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n \t * Converts CSV into array.\r\n \t *\r\n \t * The functionality of this function is taken from here:\r\n \t * http://www.bennadel.com/blog/1504-ask-ben-parsing-csv-strings-with-javascript-exec-regular-expression-command.htm\r\n \t *\r\n \t * @param data       Source data\r\n \t * @param delimiter  Column delimiter\r\n \t * @return Parsed array\r\n \t */\r\n\tpublic CSVToArray(data: string, delimiter: string): any[] {\r\n\r\n\t\t// Check to see if the delimiter is defined. If not,\r\n\t\t// then default to comma.\r\n\t\tdelimiter = (delimiter || ',');\r\n\r\n\t\t// Create a regular expression to parse the CSV values.\r\n\t\tlet objPattern = new RegExp(\r\n\t\t\t(\r\n\t\t\t\t// Delimiters.\r\n\t\t\t\t\"(\\\\\" + delimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\r\n\r\n\t\t\t\t// Quoted fields.\r\n\t\t\t\t\"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\r\n\r\n\t\t\t\t// Standard fields.\r\n\t\t\t\t\"([^\\\"\\\\\" + delimiter + \"\\\\r\\\\n]*))\"\r\n\t\t\t),\r\n\t\t\t\"gi\"\r\n\t\t);\r\n\r\n\r\n\t\t// Create an array to hold our data. Give the array\r\n\t\t// a default empty first row.\r\n\t\tlet arrData: any[] = [\r\n\t\t\t[]\r\n\t\t];\r\n\r\n\t\t// Create an array to hold our individual pattern\r\n\t\t// matching groups.\r\n\t\tlet arrMatches = null;\r\n\r\n\t\t// Keep looping over the regular expression matches\r\n\t\t// until we can no longer find a match.\r\n\t\twhile (true) {\r\n\t\t\tarrMatches = objPattern.exec(data);\r\n\r\n\t\t\tif (!arrMatches) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t// Get the delimiter that was found.\r\n\t\t\tlet strMatchedDelimiter = arrMatches[1];\r\n\r\n\t\t\t// Check to see if the given delimiter has a length\r\n\t\t\t// (is not the start of string) and if it matches\r\n\t\t\t// field delimiter. If id does not, then we know\r\n\t\t\t// that this delimiter is a row delimiter.\r\n\t\t\tif (\r\n\t\t\t\tstrMatchedDelimiter.length &&\r\n\t\t\t\t(strMatchedDelimiter !== delimiter)\r\n\t\t\t) {\r\n\r\n\t\t\t\t// Since we have reached a new row of data,\r\n\t\t\t\t// add an empty row to our data array.\r\n\t\t\t\tarrData.push([]);\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Now that we have our delimiter out of the way,\r\n\t\t\t// let's check to see which kind of value we\r\n\t\t\t// captured (quoted or unquoted).\r\n\t\t\tlet strMatchedValue;\r\n\t\t\tif (arrMatches[2]) {\r\n\r\n\t\t\t\t// We found a quoted value. When we capture\r\n\t\t\t\t// this value, unescape any double quotes.\r\n\t\t\t\tstrMatchedValue = arrMatches[2].replace(\r\n\t\t\t\t\tnew RegExp(\"\\\"\\\"\", \"g\"),\r\n\t\t\t\t\t\"\\\"\"\r\n\t\t\t\t);\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// We found a non-quoted value.\r\n\t\t\t\tstrMatchedValue = arrMatches[3];\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Now that we have our value string, let's add\r\n\t\t\t// it to the data array.\r\n\t\t\tarrData[arrData.length - 1].push(strMatchedValue);\r\n\t\t}\r\n\r\n\t\t// Return the parsed data.\r\n\t\treturn (arrData);\r\n\t}\r\n\r\n}\r\n"]}