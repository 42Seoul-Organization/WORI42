{"version":3,"file":"CurveCursor.js","sourceRoot":"","sources":["../../../../../src/.internal/plugins/timeline/CurveCursor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { CurveChart } from \"./CurveChart\";\r\nimport { XYCursor, IXYCursorAdapters, IXYCursorEvents, IXYCursorProperties } from \"../../charts/cursors/XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { ISpriteEvents } from \"../../core/Sprite\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\n//import { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { AxisRendererCurveX } from \"./AxisRendererCurveX\";\r\nimport { AxisRendererCurveY } from \"./AxisRendererCurveY\";\r\n//import * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CurveCursor]].\r\n */\r\nexport interface ICurveCursorProperties extends IXYCursorProperties { }\r\n\r\n/**\r\n * Defines events for [[CurveCursor]].\r\n */\r\nexport interface ICurveCursorEvents extends IXYCursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurveCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurveCursorAdapters extends IXYCursorAdapters, ICurveCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Cursor for [[CurveChart]].\r\n *\r\n * @see {@link ICurveCursorEvents} for a list of available events\r\n * @see {@link ICurveCursorAdapters} for a list of available Adapters\r\n */\r\nexport class CurveCursor extends XYCursor {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t */\r\n\tpublic _properties!: ICurveCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: ICurveCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICurveCursorEvents;\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: CurveChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"CurveCursor\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.mask = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point  Point to check\r\n\t * @return Fits within container?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\tif (this.xAxis && this.yAxis) {\r\n\t\t\tlet xAxisRenderer: AxisRendererCurveX = <AxisRendererCurveX>this.xAxis.renderer;\r\n\t\t\tlet yAxisRenderer: AxisRendererCurveY = <AxisRendererCurveY>this.yAxis.renderer;\r\n\t\t\tlet index = xAxisRenderer.polyspline.getClosestPointIndex(point);\r\n\t\t\tlet distance = $math.getDistance(point, xAxisRenderer.polyspline.allPoints[index]);\r\n\t\t\tif (distance >= Math.abs(yAxisRenderer.radius) && distance >= Math.abs(yAxisRenderer.innerRadius)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [triggerMoveReal description]\r\n\t * \r\n\t * @param  point  Target point\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint) {\r\n\t\tif (!this.xAxis || (this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineX(this.point);\r\n\t\t}\r\n\t\tif (!this.yAxis || (this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineY(this.point);\r\n\t\t}\r\n\r\n\t\tthis.updateSelection();\r\n\t\tsuper.triggerMoveReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the x cursor's line.\r\n\t *\r\n\t * @param point New target point\r\n\t */\r\n\tprotected updateLineX(point: IPoint) {\r\n\t\tlet lineX = this.lineX;\r\n\t\tlet xAxis = this.xAxis;\r\n\r\n\t\tif (!xAxis) {\r\n\t\t\tthis.xAxis = this.chart.xAxes.getIndex(0);\r\n\t\t\txAxis = this.xAxis;\r\n\t\t}\r\n\r\n\t\tif (lineX && lineX.visible && !lineX.disabled && xAxis) {\r\n\t\t\tlet position = xAxis.renderer.pointToPosition(point);\r\n\t\t\tlet axisRendererX = <AxisRendererCurveX>xAxis.renderer;\r\n\t\t\tlineX.path = axisRendererX.getGridPath($math.fitToRange(position, xAxis.start, xAxis.end));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the vertical (radial) cursor's line.\r\n\t *\r\n\t * @param point New target point\r\n\t */\r\n\tprotected updateLineY(point: IPoint) {\r\n\t\tlet lineY = this.lineY;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (!yAxis) {\r\n\t\t\tthis.yAxis = this.chart.yAxes.getIndex(0);\r\n\t\t\tyAxis = this.yAxis;\r\n\t\t}\r\n\r\n\t\tif (lineY && lineY.visible && !lineY.disabled && yAxis) {\r\n\r\n\t\t\tlet position = yAxis.renderer.pointToPosition(point);\r\n\r\n\t\t\tlet axisRendererY = <AxisRendererCurveY>yAxis.renderer;\r\n\t\t\tlineY.path = axisRendererY.getGridPath($math.fitToRange(position, yAxis.start, yAxis.end));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tlet xAxis = this.xAxis;\r\n\t\t\tlet yAxis = this.yAxis;\r\n\r\n\t\t\tif (xAxis && yAxis && downPoint) {\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\r\n\t\t\t\tlet selection = this.selection;\r\n\t\t\t\tselection.x = 0;\r\n\t\t\t\tselection.y = 0;\r\n\t\t\t\tlet path = \"\";\r\n\r\n\t\t\t\tlet behavior = this.behavior;\r\n\r\n\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\") {\r\n\t\t\t\t\tlet startPosition = xAxis.renderer.pointToPosition(downPoint);\r\n\t\t\t\t\tlet endPosition = xAxis.renderer.pointToPosition(point);\r\n\r\n\t\t\t\t\tpath += xAxis.renderer.getPositionRangePath(startPosition, endPosition);\r\n\r\n\t\t\t\t\tstartPosition = xAxis.toGlobalPosition(startPosition);\r\n\t\t\t\t\tendPosition = xAxis.toGlobalPosition(endPosition);\r\n\r\n\t\t\t\t\tthis.xRange = { start: Math.min(startPosition, endPosition), end: Math.max(endPosition, startPosition) };\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if (behavior == \"zoomY\" || behavior == \"selectY\") {\r\n\t\t\t\t\tlet startPosition = yAxis.renderer.pointToPosition(downPoint);\r\n\t\t\t\t\tlet endPosition = yAxis.renderer.pointToPosition(point);\r\n\r\n\t\t\t\t\tpath += yAxis.renderer.getPositionRangePath(startPosition, endPosition);\r\n\r\n\t\t\t\t\tstartPosition = yAxis.toGlobalPosition(startPosition);\r\n\t\t\t\t\tendPosition = yAxis.toGlobalPosition(endPosition);\r\n\r\n\t\t\t\t\tthis.yRange = { start: Math.min(startPosition, endPosition), end: Math.max(endPosition, startPosition) };\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselection.path = path;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions(): void {\r\n\t\t// positions are used by axes or series\r\n\t\tif (this.xAxis) {\r\n\t\t\tthis.xPosition = this.xAxis.toGlobalPosition(this.xAxis.renderer.pointToPosition(this.point));\r\n\t\t}\r\n\r\n\t\tif (this.yAxis) {\r\n\t\t\tthis.yPosition = this.yAxis.toGlobalPosition(this.yAxis.renderer.pointToPosition(this.point));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when it's triggered.\r\n\t */\r\n\tprotected updatePoint(point: IPoint): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes horizontal position.\r\n\t *\r\n\t * @param event Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.xAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\t\tthis.updateLineX($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes vertical position.\r\n\t *\r\n\t * @todo Description\r\n\t * @param event Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.yAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\t\tthis.updateLineY($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding so that nothing happens when it's called.\r\n\t * \r\n\t * @param  point  Point\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges(): void { }\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when `updateSize`\r\n\t * is triggered.\r\n\t *\r\n\t * CurveCursor is quite complicated and needs own sizing logic.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void { }\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\t// overriding xy method\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurveCursor\"] = CurveCursor;\r\n"]}