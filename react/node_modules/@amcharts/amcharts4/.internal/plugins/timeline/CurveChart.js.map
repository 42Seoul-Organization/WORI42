{"version":3,"file":"CurveChart.js","sourceRoot":"","sources":["../../../../../src/.internal/plugins/timeline/CurveChart.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Curve chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"../../charts/types/XYChart\";\r\nimport { CurveLineSeries } from \"./CurveLineSeries\";\r\nimport { CurveColumnSeries } from \"./CurveColumnSeries\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { CurveCursor } from \"./CurveCursor\";\r\nimport { Axis } from \"../../charts/axes/Axis\";\r\nimport { AxisRenderer } from \"../../charts/axes/AxisRenderer\";\r\nimport { AxisRendererCurveX } from \"./AxisRendererCurveX\";\r\nimport { AxisRendererCurveY } from \"./AxisRendererCurveY\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { options } from \"../../core/Options\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CurveChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CurveChartDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: CurveChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurveChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CurveChart]].\r\n */\r\nexport interface ICurveChartDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[CurveChart]].\r\n */\r\nexport interface ICurveChartProperties extends IXYChartProperties { }\r\n\r\n/**\r\n * Defines events for [[CurveChart]].\r\n */\r\nexport interface ICurveChartEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurveChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurveChartAdapters extends IXYChartAdapters, ICurveChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Curve chart.\r\n *\r\n * @see {@link ICurveChartEvents} for a list of available Events\r\n * @see {@link ICurveChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/timeline/} for documentation\r\n * @important\r\n */\r\nexport class CurveChart extends XYChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ICurveChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICurveChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICurveChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICurveChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: CurveLineSeries | CurveColumnSeries;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererCurveX;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererCurveY;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererCurveX = AxisRendererCurveX;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererCurveY = AxisRendererCurveY;\r\n\r\n\t/**\r\n\t * Defines type of the cursor used in this chart.\r\n\t */\r\n\tpublic _cursor: CurveCursor;\r\n\r\n\t/**\r\n\t * A container that holds chart's visual elements.\r\n\t */\r\n\tpublic curveContainer: Container;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"CurveChart\";\r\n\r\n\t\tlet curvedContainer = this.plotContainer.createChild(Container);\r\n\t\tcurvedContainer.shouldClone = false;\r\n\t\tcurvedContainer.layout = \"absolute\";\r\n\t\tcurvedContainer.align = \"center\";\r\n\t\tcurvedContainer.valign = \"middle\";\r\n\r\n\t\tthis.seriesContainer.parent = curvedContainer;\r\n\t\tthis.curveContainer = curvedContainer;\r\n\t\tthis.bulletsContainer.parent = curvedContainer;\r\n\t\tthis.axisBulletsContainer.parent = curvedContainer;\r\n\t\tthis._cursorContainer = curvedContainer;\r\n\r\n\t\tthis._bulletMask = undefined;\r\n\t\t//this._bulletMask.shouldClone = false;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\t//this.readerTitle = this.language.translate(\"Curved chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates Axis with required properties for this chart.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\tsuper.processAxis(axis);\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\t\trenderer.gridContainer.parent = renderer;\r\n\t\trenderer.breakContainer.parent = renderer;\r\n\t\taxis.parent = this.curveContainer;\r\n\t\trenderer.toBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all X axes after range change event.\r\n\t */\r\n\t/*\r\n   protected handleXAxisRangeChange() {\r\n\t   super.handleXAxisRangeChange();\r\n\t   $iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t   axis.invalidate();\r\n\t   });\r\n   }*/\r\n\r\n\t/**\r\n\t * Updates all Y axes after range change event.\r\n\t */\r\n\t/*\r\n   protected handleYAxisRangeChange() {\r\n\t   super.handleYAxisRangeChange();\r\n\t   $iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t   axis.invalidate();\r\n\t   });\r\n   }*/\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"CurveCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"CurveLineSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for [[CurveChart]].\r\n\t *\r\n\t * @return New Series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new CurveLineSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\t//do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\t// do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @return Has license?\r\n\t */\r\n\tpublic hasLicense(): boolean {\r\n\t\tif (!super.hasLicense()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tfor (let i = 0; i < options.licenses.length; i++) {\r\n\t\t\tif (options.licenses[i].match(/^TL.{5,}/i)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurveChart\"] = CurveChart;\r\n"]}