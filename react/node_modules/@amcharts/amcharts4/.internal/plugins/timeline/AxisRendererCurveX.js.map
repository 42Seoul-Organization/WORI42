{"version":3,"file":"AxisRendererCurveX.js","sourceRoot":"","sources":["../../../../../src/.internal/plugins/timeline/AxisRendererCurveX.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Module, defining Axis Renderer for curved axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererX, IAxisRendererXAdapters, IAxisRendererXEvents, IAxisRendererXProperties } from \"../../charts/axes/AxisRendererX\";\r\n//import { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { AxisRendererCurveY } from \"./AxisRendererCurveY\";\r\nimport { CurveChart } from \"./CurveChart\";\r\nimport { Axis } from \"../../charts/axes/Axis\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { GridCircular } from \"../../charts/axes/GridCircular\";\r\nimport { AxisLabelCircular } from \"../../charts/axes/AxisLabelCircular\";\r\nimport { AxisFillCircular } from \"../../charts/axes/AxisFillCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Polyspline } from \"../../core/elements/Polyspline\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { AxisTick } from \"../../charts/axes/AxisTick\";\r\nimport { AxisBullet } from \"../../charts/axes/AxisBullet\";\r\nimport { AxisBreak } from \"../../charts/axes/AxisBreak\";\r\nimport { wavedLine } from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererCurveX]].\r\n */\r\nexport interface IAxisRendererCurveXProperties extends IAxisRendererXProperties {\r\n\r\n\t/**\r\n\t * A line object representing curve of the axis.\r\n\t */\r\n\tpolyspline?: Polyspline;\r\n\r\n\t/**\r\n\t * Precision setting to use when drawing chart objects. Basically, it's\r\n\t * number of pixels that a control point should be added at.\r\n\t *\r\n\t * The smaller the number, the finer line. However, small number will impact\r\n\t * the performace.\r\n\t *\r\n\t * Depending on actual chart configuration, you might need to find the best\r\n\t * possible value to balance between detail and good performance.\r\n\t *\r\n\t * @default 10\r\n\t */\r\n\tprecisionStep?: number;\r\n\r\n\t/**\r\n\t * Should the chart be scaled automatically, to fit into container?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tautoScale?: boolean;\r\n\r\n\t/**\r\n\t * Should chart be centered within chart area?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tautoCenter?: boolean;\r\n\r\n\t/**\r\n\t * Array of control points to draw axis curve along.\r\n\t */\r\n\tpoints?: IPoint[];\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererCurveX]].\r\n */\r\nexport interface IAxisRendererCurveXEvents extends IAxisRendererXEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererCurveXAdapters extends IAxisRendererXAdapters, IAxisRendererCurveXProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for \"horizontal\" curve axis.\r\n */\r\nexport class AxisRendererCurveX extends AxisRendererX {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererCurveXProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererCurveXAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererCurveXEvents;\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t */\r\n\tpublic _gridType: GridCircular;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t */\r\n\tpublic _fillType: AxisFillCircular;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t */\r\n\tpublic _labelType: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic axisRendererY: AxisRendererCurveY;\r\n\r\n\t/**\r\n\t * @readonly\r\n\t * @ignore\r\n\t */\r\n\tpublic autoScaleScale: number = 1;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _tempSprite: Sprite;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _pointsChanged: boolean;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\t// axis.layout = \"none\"; // does not trigger redraw when size changes\r\n\r\n\t\t// axis.layout = \"none\"; // does not trigger redraw when size changes\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.autoScale = true;\r\n\r\n\t\tthis.autoCenter = true;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.className = \"AxisRendererCurveX\";\r\n\r\n\t\tthis.line.strokeOpacity = 1;\r\n\r\n\t\tthis.precisionStep = 10;\r\n\r\n\t\tthis.points = [{ x: -300, y: 0 }, { x: 300, y: 0 }];\r\n\r\n\t\tthis._tempSprite = this.createChild(Sprite);\r\n\t\tthis._tempSprite.visible = false;\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn this.polyspline.distance;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tthis.line.path = this.polyspline.path;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Polyspline]] elment that represents axis shape / curve.\r\n\t * \r\n\t * @param  value  Polyspline\r\n\t */\r\n\tpublic set polyspline(value: Polyspline) {\r\n\t\tthis.setPropertyValue(\"polyspline\", value, true);\r\n\t\tvalue.parent = this;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Polyspline\r\n\t */\r\n\tpublic get polyspline(): Polyspline {\r\n\t\tlet polyspline = this.getPropertyValue(\"polyspline\");\r\n\t\tif (!polyspline) {\r\n\t\t\tpolyspline = this.createChild(Polyspline);\r\n\t\t\tpolyspline.tensionX = 1;\r\n\t\t\tpolyspline.tensionY = 1;\r\n\r\n\t\t\tthis.polyspline = polyspline;\r\n\t\t}\r\n\t\treturn polyspline;\r\n\t}\r\n\r\n\t/**\r\n\t * Should the chart be scaled automatically, to fit into container?\r\n\t *\r\n\t * @default true\r\n\t * @param  value  Auto-scale?\r\n\t */\r\n\tpublic set autoScale(value: boolean) {\r\n\t\tthis.setPropertyValue(\"autoScale\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Auto-scale?\r\n\t */\r\n\tpublic get autoScale(): boolean {\r\n\t\treturn this.getPropertyValue(\"autoScale\");\r\n\t}\r\n\r\n\t/**\r\n\t * Should chart be centered within chart area?\r\n\t *\r\n\t * @default true\r\n\t * @param  value  Auto-center?\r\n\t */\r\n\tpublic set autoCenter(value: boolean) {\r\n\t\tthis.setPropertyValue(\"autoCenter\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Auto-center?\r\n\t */\r\n\tpublic get autoCenter(): boolean {\r\n\t\treturn this.getPropertyValue(\"autoCenter\");\r\n\t}\r\n\r\n\t/**\r\n\t * Precision setting to use when drawing chart objects. Basically, it's\r\n\t * number of pixels that a control point should be added at.\r\n\t *\r\n\t * The smaller the number, the finer line. However, small number will impact\r\n\t * the performace.\r\n\t *\r\n\t * Depending on actual chart configuration, you might need to find the best\r\n\t * possible value to balance between detail and good performance.\r\n\t *\r\n\t * @default 10\r\n\t * @param  value  Precision step\r\n\t */\r\n\tpublic set precisionStep(value: number) {\r\n\t\tthis.setPropertyValue(\"precisionStep\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Precision step\r\n\t */\r\n\tpublic get precisionStep(): number {\r\n\t\treturn this.getPropertyValue(\"precisionStep\");\r\n\t}\r\n\r\n\t/**\r\n\t * An array of control points that define axis curve.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/timeline/#Control_points} for more info\r\n\t * @param  value  Control points\r\n\t */\r\n\tpublic set points(value: IPoint[]) {\r\n\t\tif (this.setPropertyValue(\"points\", value, true)) {\r\n\t\t\tthis._pointsChanged = true;\r\n\t\t\tthis.polyspline.segments = [value];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Control points\r\n\t */\r\n\tpublic get points(): IPoint[] {\r\n\t\treturn this.getPropertyValue(\"points\");\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis): void {\r\n\t\tsuper.setAxis(axis);\r\n\t\tif (axis && axis.chart) {\r\n\t\t\tlet chart = <CurveChart>axis.chart;\r\n\t\t\tthis._disposers.push(chart.curveContainer.events.on(\"positionchanged\", () => {\r\n\t\t\t\tthis.handleSizeChange();\r\n\t\t\t}))\r\n\r\n\t\t\tthis._disposers.push(chart.events.on(\"maxsizechanged\", () => {\r\n\t\t\t\tthis.handleSizeChange();\r\n\t\t\t}))\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A handler for when axis size changes.\r\n\t */\r\n\tprotected handleSizeChange(): void {\r\n\r\n\t\tif (this._pointsChanged) {\r\n\t\t\tlet pp = this.axis.getPositionRangePath(0, 1);\r\n\t\t\tthis._tempSprite.path = pp;\r\n\t\t\tthis._pointsChanged = false;\r\n\t\t}\r\n\r\n\t\tif (this.points) {\r\n\t\t\tlet chart = <CurveChart>this.axis.chart;\r\n\t\t\tlet curveContainer = chart.curveContainer;\r\n\r\n\t\t\tlet mw = chart.plotContainer.maxWidth - curveContainer.pixelPaddingLeft - curveContainer.pixelPaddingRight;\r\n\t\t\tlet mh = chart.plotContainer.maxHeight - curveContainer.pixelPaddingTop - curveContainer.pixelPaddingBottom;\r\n\r\n\t\t\tlet bbox = this._tempSprite.element.getBBox();\r\n\t\t\tlet centerPoint = { x: 0, y: 0 };\r\n\r\n\t\t\tif (this.autoCenter) {\r\n\t\t\t\tcenterPoint = { x: bbox.x + bbox.width / 2, y: bbox.y + bbox.height / 2 };\r\n\t\t\t}\r\n\r\n\t\t\tlet scale = 1;\r\n\t\t\tif (this.autoScale) {\r\n\t\t\t\tscale = $math.min(mw / bbox.width, mh / bbox.height);\r\n\t\t\t}\r\n\r\n\t\t\tlet modifiedPoints: IPoint[] = [];\r\n\t\t\t$array.each(this.points, (point) => {\r\n\t\t\t\tmodifiedPoints.push({ x: (point.x - centerPoint.x) * scale, y: (point.y - centerPoint.y) * scale });\r\n\t\t\t})\r\n\r\n\t\t\tthis.polyspline.segments = [modifiedPoints];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @param position2  Position (0-1) Position on the second axis\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number, position2?: number): IOrientationPoint {\r\n\r\n\t\tlet axis = this.axis;\r\n\r\n\t\tposition = (position - axis.start) / (axis.end - axis.start);\r\n\r\n\t\tlet point = this.polyspline.positionToPoint(position, true);\r\n\t\tpoint.angle += 90;\r\n\r\n\t\tlet axisRendererY = this.axisRendererY;\r\n\r\n\t\tif ($type.isNumber(position2) && axisRendererY) {\r\n\t\t\tlet radius = axisRendererY.positionToPoint(position2).y;\r\n\r\n\t\t\tpoint.x += radius * $math.cos(point.angle);\r\n\t\t\tpoint.y += radius * $math.sin(point.angle);\r\n\t\t}\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) on axis to angle in degrees (0-360).\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Angle (0-360)\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\r\n\t\tlet axis = this.axis;\r\n\t\tposition = $math.max(0, (position - axis.start) / (axis.end - axis.start));\r\n\r\n\t\treturn this.polyspline.positionToPoint(position, true).angle + 90;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: GridCircular, position: number, endPosition: number) {\r\n\t\tif (grid.element) {\r\n\t\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\t\tgrid.zIndex = 0;\r\n\r\n\t\t\tgrid.path = this.getGridPath(position);\r\n\r\n\t\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getGridPath description]\r\n\t *\r\n\t * @ignore\r\n\t * @todo description\r\n\t * @param   position  Position\r\n\t * @return            SVG path\r\n\t */\r\n\tpublic getGridPath(position: number): string {\r\n\r\n\t\tlet point = this.positionToPoint(position);\r\n\r\n\t\tlet angle: number = point.angle;\r\n\t\tlet axisRendererY = this.axisRendererY;\r\n\t\tif (axisRendererY) {\r\n\t\t\tlet radius: number = -axisRendererY.radius;\r\n\t\t\tlet innerRadius: number = -axisRendererY.innerRadius;\r\n\r\n\t\t\treturn $path.moveTo({ x: point.x + innerRadius * $math.cos(angle), y: point.y + innerRadius * $math.sin(angle) }) + $path.lineTo({ x: point.x + radius * $math.cos(angle), y: point.y + radius * $math.sin(angle) });\r\n\t\t}\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick      Tick element\r\n\t * @param position  Position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number): void {\r\n\t\tif (tick.element) {\r\n\r\n\t\t\tlet point = this.positionToPoint(position);\r\n\t\t\tlet angle = point.angle;\r\n\r\n\t\t\tlet tickLength = tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength *= -1;\r\n\t\t\t}\r\n\r\n\t\t\ttick.path = $path.moveTo({ x: point.x, y: point.y }) + $path.lineTo({ x: point.x + tickLength * $math.cos(angle), y: point.y + tickLength * $math.sin(angle) });\r\n\t\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlabel.x = point.x;\r\n\t\tlabel.y = point.y;\r\n\t\tlabel.zIndex = 2;\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet path = \"\";\r\n\r\n\t\tlet axisRendererY = this.axisRendererY;\r\n\t\tif (axisRendererY) {\r\n\r\n\t\t\tif (startPosition > endPosition) {\r\n\t\t\t\tlet temp = startPosition;\r\n\t\t\t\tstartPosition = endPosition;\r\n\t\t\t\tendPosition = temp;\r\n\t\t\t}\r\n\r\n\t\t\tlet startY = axisRendererY.axis.start;\r\n\t\t\tlet endY = axisRendererY.axis.end;\r\n\r\n\t\t\tlet startX = this.axis.start;\r\n\t\t\tlet endX = this.axis.end;\r\n\r\n\t\t\tif ((startPosition <= startX && endPosition <= startX) || (startPosition >= endX && endPosition >= endX)) {\r\n\t\t\t\treturn path;\r\n\t\t\t}\r\n\r\n\t\t\tstartPosition = $math.fitToRange(startPosition, startX, endX);\r\n\t\t\tendPosition = $math.fitToRange(endPosition, startX, endX);\r\n\r\n\t\t\tif (endPosition == startX || startPosition == endX) {\r\n\t\t\t\treturn path;\r\n\t\t\t}\r\n\r\n\t\t\tif (endPosition == startPosition) {\r\n\t\t\t\treturn path;\r\n\t\t\t}\r\n\r\n\t\t\tlet startRadius = $math.round(axisRendererY.positionToPoint(startY).y, 1) | 0;\r\n\t\t\tlet endRadius = $math.round(axisRendererY.positionToPoint(endY).y, 1) | 0;\r\n\r\n\t\t\tlet point = this.positionToPoint(startPosition);\r\n\t\t\tlet angle = point.angle;\r\n\r\n\t\t\tpath = $path.moveTo(point);\r\n\r\n\t\t\tlet count = Math.ceil(this.axisLength / this.precisionStep * (endPosition - startPosition) / (endX - startX));\r\n\r\n\t\t\tfor (let i = 0; i <= count; i++) {\r\n\r\n\t\t\t\tlet pos = startPosition + i / count * (endPosition - startPosition);\r\n\r\n\t\t\t\tpoint = this.positionToPoint(pos);\r\n\r\n\t\t\t\tangle = point.angle;\r\n\r\n\t\t\t\tlet x = point.x + startRadius * $math.cos(angle);\r\n\t\t\t\tlet y = point.y + startRadius * $math.sin(angle);\r\n\r\n\t\t\t\tpath += $path.lineTo({ x: x, y: y });\r\n\t\t\t}\r\n\t\t\tfor (let i = count; i >= 0; i--) {\r\n\r\n\t\t\t\tlet pos = startPosition + i / count * (endPosition - startPosition);\r\n\r\n\t\t\t\tpoint = this.positionToPoint(pos);\r\n\t\t\t\tangle = point.angle;\r\n\r\n\t\t\t\tlet x = point.x + endRadius * $math.cos(angle);\r\n\t\t\t\tlet y = point.y + endRadius * $math.sin(angle);\r\n\r\n\t\t\t\tpath += $path.lineTo({ x: x, y: y });\r\n\t\t\t}\r\n\r\n\t\t\tpath += $path.closePath();\r\n\t\t}\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions axis bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\t\tlet location = 0.5;\r\n\t\tif (bullet instanceof AxisBullet) {\r\n\t\t\tlocation = bullet.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point = this.positionToPoint(position);\r\n\t\t//let angle = point.angle;\r\n\r\n\t\tbullet.moveTo({ x: point.x, y: point.y });\r\n\t\t//bullet.rotation = angle - 90;\r\n\r\n\t\tthis.toggleVisibility(bullet, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak): void {\r\n\t\tlet axisRendererY = this.axisRendererY;\r\n\r\n\t\tif (axisRendererY) {\r\n\r\n\t\t\tlet startPosition = axisBreak.startPosition;\r\n\t\t\tlet endPosition = axisBreak.endPosition;\r\n\r\n\t\t\tlet startAngle = this.positionToAngle(startPosition);\r\n\t\t\tlet startPoint = this.positionToPoint(startPosition);\r\n\r\n\t\t\tlet endAngle = this.positionToAngle(endPosition);\r\n\t\t\tlet endPoint = this.positionToPoint(endPosition);\r\n\r\n\t\t\tlet startLine = axisBreak.startLine;\r\n\t\t\tlet endLine = axisBreak.endLine;\r\n\t\t\tlet fillShape = axisBreak.fillShape;\r\n\r\n\t\t\tlet radius: number = -axisRendererY.radius + axisBreak.pixelMarginTop;\r\n\t\t\tlet innerRadius: number = -axisRendererY.innerRadius - axisBreak.pixelMarginBottom;\r\n\r\n\t\t\tlet x1 = startPoint.x + innerRadius * $math.cos(startAngle);\r\n\t\t\tlet y1 = startPoint.y + innerRadius * $math.sin(startAngle);\r\n\r\n\t\t\tlet x2 = startPoint.x + radius * $math.cos(startAngle);\r\n\t\t\tlet y2 = startPoint.y + radius * $math.sin(startAngle);\r\n\r\n\t\t\tlet x3 = endPoint.x + innerRadius * $math.cos(endAngle);\r\n\t\t\tlet y3 = endPoint.y + innerRadius * $math.sin(endAngle);\r\n\r\n\t\t\tlet x4 = endPoint.x + radius * $math.cos(endAngle);\r\n\t\t\tlet y4 = endPoint.y + radius * $math.sin(endAngle);\r\n\r\n\t\t\tlet p1 = { x: x1, y: y1 };\r\n\t\t\tlet p2 = { x: x2, y: y2 };\r\n\r\n\t\t\tlet p3 = { x: x3, y: y3 };\r\n\t\t\tlet p4 = { x: x4, y: y4 };\r\n\r\n\t\t\tstartLine.path = $path.moveTo(p1) + wavedLine(p1, p2, startLine.waveLength, startLine.waveHeight, startLine.tension, true);\r\n\t\t\tendLine.path = $path.moveTo(p4) + wavedLine(p4, p3, endLine.waveLength, endLine.waveHeight, endLine.tension, true);\r\n\r\n\t\t\tlet path = $path.moveTo(p1);\r\n\t\t\tpath += wavedLine(p1, p2, fillShape.waveLength, fillShape.waveHeight, fillShape.tension, true);\r\n\r\n\t\t\tlet startX = this.axis.start;\r\n\t\t\tlet endX = this.axis.end;\r\n\r\n\t\t\tlet count = Math.ceil(this.axisLength / this.precisionStep * (endPosition - startPosition) / (endX - startX));\r\n\r\n\t\t\tfor (let i = 0; i <= count; i++) {\r\n\r\n\t\t\t\tlet pos = startPosition + i / count * (endPosition - startPosition);\r\n\r\n\t\t\t\tlet point = this.positionToPoint(pos);\r\n\t\t\t\tlet angle = point.angle;\r\n\r\n\t\t\t\tlet x = point.x + radius * $math.cos(angle);\r\n\t\t\t\tlet y = point.y + radius * $math.sin(angle);\r\n\r\n\t\t\t\tpath += $path.lineTo({ x: x, y: y });\r\n\t\t\t}\r\n\r\n\t\t\tpath += wavedLine(p4, p3, fillShape.waveLength, fillShape.waveHeight, fillShape.tension, true);\r\n\r\n\t\t\tfor (let i = count; i >= 0; i--) {\r\n\r\n\t\t\t\tlet pos = startPosition + i / count * (endPosition - startPosition);\r\n\r\n\r\n\t\t\t\tlet point = this.positionToPoint(pos);\r\n\t\t\t\tlet angle = point.angle;\r\n\r\n\t\t\t\tlet x = point.x + innerRadius * $math.cos(angle);\r\n\t\t\t\tlet y = point.y + innerRadius * $math.sin(angle);\r\n\r\n\t\t\t\tpath += $path.lineTo({ x: x, y: y });\r\n\t\t\t}\r\n\r\n\t\t\tfillShape.path = path;\r\n\r\n\t\t\tthis.toggleVisibility(axisBreak.startLine, axisBreak.startPosition, 0, 1);\r\n\t\t\tthis.toggleVisibility(axisBreak.endLine, axisBreak.endPosition, 0, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic toAxisPosition(value: number): number {\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a coordinate in pixels to a relative position. (0-1)\r\n\t *\r\n\t * @param coordinate  Coordinate (px)\r\n\t * @param coordinate2  Coordinate (px) Some more complicated axes need two coordinates\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic coordinateToPosition(coordinate: number, coordinate2?: number): number {\r\n\t\tlet points = this.polyspline.allPoints;\r\n\r\n\t\tlet closestPoint = this.polyspline.getClosestPointIndex({ x: coordinate, y: coordinate2 });\r\n\r\n\t\treturn super.coordinateToPosition(closestPoint / (points.length - 1) * this.axisLength);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [[CurveChart]] does not support inversed X axes. This setting will be\r\n\t * ignored.\r\n\t * @param  value  Flip axis?\r\n\t */\r\n\tpublic set inversed(value: boolean) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @return Flip axis?\r\n\t */\r\n\tpublic get inversed(): boolean {\r\n\t\treturn false;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCurveX\"] = AxisRendererCurveX;\r\n"]}