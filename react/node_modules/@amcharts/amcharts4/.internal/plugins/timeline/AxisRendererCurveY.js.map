{"version":3,"file":"AxisRendererCurveY.js","sourceRoot":"","sources":["../../../../../src/.internal/plugins/timeline/AxisRendererCurveY.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Module, defining Axis Renderer for curved axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"../../charts/axes/AxisRendererY\";\r\nimport { AxisRendererCurveX } from \"./AxisRendererCurveX\";\r\nimport { Axis } from \"../../charts/axes/Axis\";\r\nimport { AxisTick } from \"../../charts/axes/AxisTick\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"../../charts/axes/Grid\";\r\nimport { AxisBreak } from \"../../charts/axes/AxisBreak\";\r\nimport { WavedCircle } from \"../../core/elements/WavedCircle\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { CurveChart } from \"./CurveChart\"\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { AxisBullet } from \"../../charts/axes/AxisBullet\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererCurveY]].\r\n */\r\nexport interface IAxisRendererCurveYProperties extends IAxisRendererYProperties {\r\n\r\n\t/**\r\n\t * Outer radius of the vertical (Y) axis in pixels.\r\n\t *\r\n\t * Indicate distance from the charts X axis control curve.\r\n\t */\r\n\tradius?: number;\r\n\r\n\t/**\r\n\t * Inner radius of the vertical (Y) axis in pixels.\r\n\t *\r\n\t * Indicate distance from the charts X axis control curve.\r\n\t */\r\n\tinnerRadius?: number;\r\n\r\n\t/**\r\n\t * Relative location of the Y axis along the length of the X axis.\r\n\t *\r\n\t * Values range from 0 (default) which means start of the X axis, to 1 meaning\r\n\t * end of the X axis.\r\n\t */\r\n\taxisLocation?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererCurveY]].\r\n */\r\nexport interface IAxisRendererCurveYEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererCurveYAdapters extends IAxisRendererYAdapters, IAxisRendererCurveYProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for radial axis.\r\n */\r\nexport class AxisRendererCurveY extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererCurveYProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererCurveYAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererCurveYEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<CurveChart>();\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic axisRendererX: AxisRendererCurveX; // @todo automatic\r\n\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererCurveY\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.minGridDistance = 30;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.radius = 40;\r\n\t\tthis.innerRadius = -40;\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"right\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn Math.abs(this.radius - this.innerRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the vertical (Y) axis in pixels.\r\n\t *\r\n\t * Indicate distance from the charts X axis control curve.\r\n\t *\r\n\t * Negative number means inside/below the X axis.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/timeline/#Axis_radii} for more info\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the vertical (Y) axis in pixels.\r\n\t *\r\n\t * Indicate distance from the charts X axis control curve.\r\n\t *\r\n\t * Negative number means inside/below the X axis.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/timeline/#Axis_radii} for more info\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Chart\r\n\t */\r\n\tpublic set chart(chart: CurveChart) {\r\n\t\tthis._chart.set(chart, null);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): CurveChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\treturn { x: 0, y: this.positionToCoordinate(position) };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tlet axisRendererX = this.axisRendererX;\r\n\t\tif (axisRendererX) {\r\n\t\t\tlet axis = axisRendererX.axis;\r\n\t\t\tlet point = axisRendererX.positionToPoint(axis.start + (axis.end - axis.start) * this.axisLocation);\r\n\t\t\tlet angle = point.angle;\r\n\r\n\t\t\tlet radius = -this.radius;\r\n\t\t\tlet innerRadius = -this.innerRadius;\r\n\r\n\t\t\tthis.line.path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\tthis.line.moveTo(point);\r\n\r\n\t\t\tlet title = this.axis.title;\r\n\t\t\ttitle.moveTo({ x: point.x + radius / 2 * $math.cos(angle), y: point.y + radius / 2 * $math.sin(angle) });\r\n\t\t\ttitle.rotation = angle - 180;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\r\n\t\tlet axisRendererX = this.axisRendererX;\r\n\t\tif (axisRendererX) {\r\n\t\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\t\tif (position >= 0 && position <= 1) {\r\n\t\t\t\tgrid.path = this.getGridPath(position);\r\n\t\t\t}\r\n\r\n\t\t\tthis.positionItem(grid, { x: 0, y: 0 });\r\n\t\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getGridPath description]\r\n\t *\r\n\t * @ignore\r\n\t * @todo description\r\n\t * @param   position  Position\r\n\t * @return            SVG path\r\n\t */\r\n\tpublic getGridPath(position: number): string {\r\n\t\tlet axisRendererX = this.axisRendererX;\r\n\t\tlet path = \"\";\r\n\t\tif (axisRendererX && $type.isNumber(position)) {\r\n\r\n\t\t\tlet radius = $math.round(this.positionToPoint(position).y, 1);\r\n\r\n\t\t\tlet point = axisRendererX.positionToPoint(axisRendererX.axis.start);\r\n\t\t\tlet angle = point.angle;\r\n\r\n\t\t\tlet count = Math.ceil(axisRendererX.axisLength / axisRendererX.precisionStep);\r\n\t\t\tlet start = axisRendererX.axis.start;\r\n\t\t\tlet end = axisRendererX.axis.end;\r\n\r\n\t\t\tfor (let i = 0; i <= count; i++) {\r\n\r\n\t\t\t\tlet pos = start + i / count * (end - start);\r\n\t\t\t\tpoint = axisRendererX.positionToPoint(pos);\r\n\t\t\t\tangle = point.angle;\r\n\r\n\t\t\t\tlet x = point.x + radius * $math.cos(angle);\r\n\t\t\t\tlet y = point.y + radius * $math.sin(angle);\r\n\r\n\t\t\t\tpath += $path.lineTo({ x: x, y: y });\r\n\t\t\t}\r\n\r\n\t\t\tpath = path.replace(\"L\", \"M\");\r\n\t\t}\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?: number) {\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\t\tlet radius = this.positionToPoint(position).y;\r\n\r\n\t\tlet axisRendererX = this.axisRendererX;\r\n\t\tif (axisRendererX) {\r\n\t\t\tlet axis = axisRendererX.axis;\r\n\t\t\tlet point = axisRendererX.positionToPoint(axis.start + (axis.end - axis.start) * this.axisLocation);\r\n\t\t\tlet angle = point.angle;\r\n\r\n\t\t\tpoint.x += radius * $math.cos(angle);\r\n\t\t\tpoint.y += radius * $math.sin(angle);\r\n\r\n\t\t\tthis.positionItem(label, point);\r\n\t\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick      Tick element\r\n\t * @param position  Position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number): void {\r\n\t\tif (tick.element) {\r\n\t\t\tlet axisRendererX = this.axisRendererX;\r\n\t\t\tif (axisRendererX) {\r\n\t\t\t\tlet point = axisRendererX.positionToPoint(this.axisLocation);\r\n\t\t\t\tlet angle = point.angle;\r\n\r\n\t\t\t\tlet radius = this.positionToPoint(position).y;\r\n\r\n\t\t\t\tpoint.x += radius * $math.cos(angle);\r\n\t\t\t\tpoint.y += radius * $math.sin(angle);\r\n\r\n\t\t\t\tangle = $math.normalizeAngle(angle + 90);\r\n\t\t\t\tif (angle / 90 != Math.round(angle / 90)) {\r\n\t\t\t\t\ttick.pixelPerfect = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttick.pixelPerfect = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet tickLength = tick.length;\r\n\t\t\t\tif (tick.inside) {\r\n\t\t\t\t\ttickLength *= -1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength * $math.cos(angle), y: tickLength * $math.sin(angle) });\r\n\t\t\t\tthis.positionItem(tick, point);\r\n\r\n\t\t\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions axis bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\t\tlet location = 0.5;\r\n\t\tif (bullet instanceof AxisBullet) {\r\n\t\t\tlocation = bullet.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet axisRendererX = this.axisRendererX;\r\n\t\tif (axisRendererX) {\r\n\t\t\tlet point = axisRendererX.positionToPoint(this.axisLocation);\r\n\t\t\tlet angle = point.angle;\r\n\r\n\t\t\tlet radius = this.positionToPoint(position).y;\r\n\r\n\t\t\tpoint.x += radius * $math.cos(angle);\r\n\t\t\tpoint.y += radius * $math.sin(angle);\r\n\r\n\t\t\tangle = $math.normalizeAngle(angle + 90);\r\n\r\n\t\t\tthis.positionItem(bullet, point);\r\n\r\n\t\t\tthis.toggleVisibility(bullet, position, 0, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\t// @todo? zero grid for curve chart, is it needed?\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point Point coordinates\r\n\t * @return Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\r\n\t\tlet path = \"\";\r\n\t\tlet axisRendererX = this.axisRendererX;\r\n\r\n\t\tif (axisRendererX) {\r\n\t\t\tlet startX = axisRendererX.axis.start;\r\n\t\t\tlet endX = axisRendererX.axis.end;\r\n\r\n\t\t\tlet startY = this.axis.start;\r\n\t\t\tlet endY = this.axis.end;\r\n\r\n\t\t\tif ((startPosition <= startY && endPosition <= startY) || (startPosition >= endY && endPosition >= endY)) {\r\n\t\t\t\treturn path;\r\n\t\t\t}\r\n\r\n\t\t\tstartPosition = $math.fitToRange(startPosition, startY, endY);\r\n\t\t\tendPosition = $math.fitToRange(endPosition, startY, endY);\r\n\r\n\t\t\tlet startRadius = $math.round(this.positionToPoint(startPosition).y, 1);\r\n\t\t\tlet endRadius = $math.round(this.positionToPoint(endPosition).y, 1);\r\n\r\n\t\t\tif ($type.isNaN(startRadius) || $type.isNaN(endRadius)) {\r\n\t\t\t\treturn \"\";\r\n\t\t\t}\r\n\r\n\t\t\tlet point = axisRendererX.positionToPoint(startX);\r\n\t\t\tlet angle = point.angle;\r\n\r\n\t\t\tpath = $path.moveTo(point);\r\n\r\n\t\t\tlet count = Math.ceil(axisRendererX.axisLength / axisRendererX.precisionStep);\r\n\t\t\tfor (let i = 0; i <= count; i++) {\r\n\r\n\t\t\t\tlet pos = startX + i / count * (endX - startX);\r\n\r\n\t\t\t\tpoint = axisRendererX.positionToPoint(pos);\r\n\t\t\t\tangle = point.angle;\r\n\r\n\t\t\t\tlet x = point.x + startRadius * $math.cos(angle);\r\n\t\t\t\tlet y = point.y + startRadius * $math.sin(angle);\r\n\r\n\t\t\t\tpath += $path.lineTo({ x: x, y: y });\r\n\t\t\t}\r\n\t\t\tfor (let i = count; i >= 0; i--) {\r\n\r\n\t\t\t\tlet pos = startX + i / count * (endX - startX);\r\n\r\n\t\t\t\tpoint = axisRendererX.positionToPoint(pos);\r\n\t\t\t\tangle = point.angle;\r\n\r\n\t\t\t\tlet x = point.x + endRadius * $math.cos(angle);\r\n\t\t\t\tlet y = point.y + endRadius * $math.sin(angle);\r\n\r\n\t\t\t\tpath += $path.lineTo({ x: x, y: y });\r\n\t\t\t}\r\n\r\n\t\t\tpath += $path.closePath();\r\n\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak): void {\r\n\t\tlet axisRendererX = this.axisRendererX;\r\n\r\n\t\tif (axisRendererX) {\r\n\r\n\t\t\taxisBreak.fillShape.path = this.getPositionRangePath(axisBreak.startPosition, axisBreak.endPosition);\r\n\r\n\t\t\tthis.toggleVisibility(axisBreak.startLine, axisBreak.startPosition, 0, 1);\r\n\t\t\tthis.toggleVisibility(axisBreak.endLine, axisBreak.endPosition, 0, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedCircle();\r\n\t\taxisBreak.endLine = new WavedCircle();\r\n\t\taxisBreak.fillShape = new WavedCircle();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\t/*\r\n\t\t\tlet bigNum: number = 4000;\r\n\t\t\tlet bbx: number = -4000;\r\n\t\t\tlet bby: number = -4000;\r\n\t\t\tlet bbw: number = bigNum * 2;\r\n\t\t\tlet bbh: number = bigNum * 2;\r\n\r\n\t\t\tthis.axis.updateTooltip(tooltipOrientation, { x: bbx, y: bby, width: bbw, height: bbh }); */\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position on the axis to a coordinate in pixels.\r\n\t *\r\n\t * @param  position  Position (0-1)\r\n\t * @return           Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength;\r\n\t\t}\r\n\r\n\t\treturn $math.round(-this.innerRadius - coordinate, 4);\r\n\t}\r\n\r\n\r\n\t// TODO: make this universal?\r\n\r\n\t/**\r\n\t * Relative location of the Y axis along the length of the X axis.\r\n\t *\r\n\t * Values range from 0 (default) which means start of the X axis, to 1 meaning\r\n\t * end of the X axis.\r\n\t *\r\n\t * @default 0\r\n\t * @param  value  Axis location\r\n\t */\r\n\tpublic set axisLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"axisLocation\", value);\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis location\r\n\t */\r\n\tpublic get axisLocation(): number {\r\n\t\treturn this.getPropertyValue(\"axisLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Called when rendered is attached to an Axis, as well as a property of\r\n\t * Axis that might affect the appearance is updated.\r\n\t *\r\n\t * E.g. `axis.opposite`, `axis.inside`, etc.\r\n\t *\r\n\t * This method is called **before** draw, so that any related setting\r\n\t * changed in this method can be changed.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processRenderer(): void {\r\n\t\tsuper.processRenderer();\r\n\r\n\t\t// can not do this in init, as axis is set later\r\n\t\tlet axis = this.axis;\r\n\r\n\t\tif (axis) {\r\n\t\t\tlet title = axis.title;\r\n\t\t\tif (title) {\r\n\t\t\t\ttitle.isMeasured = false;\r\n\t\t\t\ttitle.horizontalCenter = \"middle\";\r\n\t\t\t\ttitle.verticalCenter = \"bottom\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a coordinate in pixels to a relative position. (0-1)\r\n\t *\r\n\t * @param coordinate  Coordinate (px)\r\n\t * @param coordinate2  Coordinate (px) Some more complicated axes need two coordinates\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic coordinateToPosition(coordinate: number, coordinate2?: number): number {\r\n\t\tlet axisRendererX = this.axisRendererX;\r\n\t\tlet distance = coordinate;\r\n\t\tif (axisRendererX) {\r\n\t\t\tlet closestPoint = axisRendererX.polyspline.allPoints[axisRendererX.polyspline.getClosestPointIndex({ x: coordinate2, y: coordinate })];\r\n\t\t\tlet angle = closestPoint.angle - 90;\r\n\r\n\t\t\tdistance = $math.getDistance({ x: closestPoint.x + this.innerRadius * $math.cos(angle), y: closestPoint.y + this.innerRadius * $math.sin(angle) }, { x: coordinate2, y: coordinate });\r\n\t\t}\r\n\r\n\t\treturn super.coordinateToPosition(distance);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic toAxisPosition(value: number): number {\r\n\t\treturn value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCurveY\"] = AxisRendererCurveY;\r\n"]}