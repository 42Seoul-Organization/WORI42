{"version":3,"file":"CurveLineSeries.js","sourceRoot":"","sources":["../../../../../src/.internal/plugins/timeline/CurveLineSeries.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Curve line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"../../charts/series/LineSeries\";\r\nimport { LineSeriesSegment } from \"../../charts/series/LineSeriesSegment\";\r\nimport { Axis } from \"../../charts/axes/Axis\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { CurveChart } from \"./CurveChart\";\r\nimport { AxisRendererCurveY } from \"./AxisRendererCurveY\";\r\nimport { AxisRendererCurveX } from \"./AxisRendererCurveX\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CurveLineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CurveLineSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: CurveLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurveLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CurveLineSeries]].\r\n */\r\nexport interface ICurveLineSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[CurveLineSeries]].\r\n */\r\nexport interface ICurveLineSeriesProperties extends ILineSeriesProperties {\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tconnectEnds?: boolean;\r\n\r\n\t/**\r\n\t * A relative part of an series elements allowed outside of the outer edge of\r\n\t * the \"plot area\".\r\n\t */\r\n\ttopOffset?: number;\r\n\r\n\t/**\r\n\t * A relative part of an series elements allowed outside of the inner edge of\r\n\t * the \"plot area\".\r\n\t */\r\n\tbottomOffset?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CurveLineSeries]].\r\n */\r\nexport interface ICurveLineSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurveLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurveLineSeriesAdapters extends ILineSeriesAdapters, ICurveLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a radar graph.\r\n *\r\n * @see {@link ICurveLineSeriesEvents} for a list of available Events\r\n * @see {@link ICurveLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class CurveLineSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ICurveLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICurveLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICurveLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICurveLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: CurveLineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: CurveChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurveLineSeries\";\r\n\t\tthis.connectEnds = false;\r\n\r\n\t\tthis.bulletsContainer.mask = new Sprite();\r\n\r\n\t\tthis.topOffset = 0.2;\r\n\t\tthis.bottomOffset = 0.2;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CurveLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n\t *\r\n\t * @param    dataItem   Data item\r\n\t * @param    xKey       Name of X data field\r\n\t * @param    yKey       Name of Y data field\r\n\t * @param    locationX  X location\r\n\t * @param    locationY  Y location\r\n\t * @param    stackKeyX  ?\r\n\t * @param    stackKeyY  ?\r\n\t * @returns             Coordinates\r\n\t */\r\n\tpublic getPoint(dataItem: CurveLineSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet renderer: AxisRendererCurveY = <AxisRendererCurveY>this.yAxis.renderer;\r\n\r\n\t\tlet radius: number = $math.fitToRange(this.yAxis.getY(dataItem, yKey, locationY, stackKeyY), -renderer.radius * (1 + this.bottomOffset), -renderer.innerRadius * (1 + this.topOffset));\r\n\r\n\t\tlet xx: number = this.xAxis.getX(dataItem, xKey, locationX, stackKeyX);\r\n\t\tlet xy: number = this.xAxis.getY(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\treturn { x: xx + radius * $math.cos(angle), y: xy + radius * $math.sin(angle) };\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param points    [description]\r\n\t * @param dataItem  [description]\r\n\t * @param xField    [description]\r\n\t * @param yField    [description]\r\n\t * @param backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], dataItem.locations[yField]);\r\n\t\tif (point) {\r\n\t\t\tpoints.push(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet rendererY = this.yAxis.renderer;\r\n\t\tlet path = rendererY.getPositionRangePath(this.yAxis.start, this.yAxis.end);\r\n\r\n\t\tlet bulletsContainer = this.bulletsContainer;\r\n\t\tif (this.chart && this.chart.maskBullets) {\r\n\t\t\tif (!bulletsContainer.mask) {\r\n\t\t\t\tbulletsContainer.mask = new Sprite();\r\n\t\t\t}\r\n\t\t\tbulletsContainer.mask.path = path;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tbulletsContainer.mask = undefined;\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * [drawSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param segment      [description]\r\n\t * @param points       [description]\r\n\t * @param closePoints  [description]\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tif (this.connectEnds) {\r\n\t\t\t// adds one point to the beginning of closePoints array, if needed\r\n\t\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\t\tthis.stacked) {\r\n\t\t\t\tpoints.push(points[0]);\r\n\t\t\t\tif (closePoints.length > 0) {\r\n\t\t\t\t\tclosePoints.unshift(closePoints[closePoints.length - 1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.drawSegment(segment, points, closePoints);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default false\r\n\t * @param  value  Connect?\r\n\t */\r\n\tpublic set connectEnds(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connectEnds\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Connect?\r\n\t */\r\n\tpublic get connectEnds(): boolean {\r\n\t\treturn this.getPropertyValue(\"connectEnds\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative part of an series elements allowed outside of the outer edge of\r\n\t * the \"plot area\".\r\n\t * \r\n\t * @default 0.2\r\n\t * @param  value  Top offset\r\n\t */\r\n\tpublic set topOffset(value: number) {\r\n\t\tthis.setPropertyValue(\"topOffset\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Top offset\r\n\t */\r\n\tpublic get topOffset(): number {\r\n\t\treturn this.getPropertyValue(\"topOffset\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative part of an series elements allowed outside of the inner edge of\r\n\t * the \"plot area\".\r\n\t * \r\n\t * @default 0.2\r\n\t * @param  value  Bottom offset\r\n\t */\r\n\tpublic set bottomOffset(value: number) {\r\n\t\tthis.setPropertyValue(\"bottomOffset\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Bottom offset\r\n\t */\r\n\tpublic get bottomOffset(): number {\r\n\t\treturn this.getPropertyValue(\"bottomOffset\");\r\n\t}\r\n\r\n\t/**\r\n\t * [positionBulletReal description]\r\n\t *\r\n\t * @param {Sprite} bullet    [description]\r\n\t * @param {number} positionX [description]\r\n\t * @param {number} positionY [description]\r\n\t */\r\n\tprotected positionBulletReal(bullet: Sprite, positionX: number, positionY: number) {\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (positionX < xAxis.start || positionX > xAxis.end || positionY < yAxis.start || positionY > yAxis.end) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\r\n\t\tbullet.moveTo(this.xAxis.renderer.positionToPoint(positionX, positionY));\r\n\t}\r\n\r\n\tprotected setXAxis(axis:Axis){\r\n\t\tsuper.setXAxis(axis);\r\n\t\tthis.updateRendererRefs();\r\n\t}\r\n\r\n\tprotected setYAxis(axis:Axis){\r\n\t\tsuper.setYAxis(axis);\r\n\t\tthis.updateRendererRefs();\r\n\t}\t\r\n\r\n\tprotected updateRendererRefs(){\r\n\t\tlet rendererX = <AxisRendererCurveX>this.xAxis.renderer;\r\n\t\tlet rendererY = <AxisRendererCurveY>this.yAxis.renderer;\r\n\r\n\t\trendererX.axisRendererY = rendererY;\r\n\t\trendererY.axisRendererX = rendererX;\t\t\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurveLineSeries\"] = CurveLineSeries;\r\nregistry.registeredClasses[\"CurveLineSeriesDataItem\"] = CurveLineSeriesDataItem;\r\n"]}