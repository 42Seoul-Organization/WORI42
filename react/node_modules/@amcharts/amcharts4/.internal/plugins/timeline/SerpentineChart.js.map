{"version":3,"file":"SerpentineChart.js","sourceRoot":"","sources":["../../../../../src/.internal/plugins/timeline/SerpentineChart.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Serpentine chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { CurveChart, ICurveChartProperties, ICurveChartDataFields, ICurveChartAdapters, ICurveChartEvents, CurveChartDataItem } from \"./CurveChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { AxisRendererCurveY } from \"./AxisRendererCurveY\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SerpentineChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SerpentineChartDataItem extends CurveChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: SerpentineChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SerpentineChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SerpentineChart]].\r\n */\r\nexport interface ISerpentineChartDataFields extends ICurveChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[SerpentineChart]].\r\n */\r\nexport interface ISerpentineChartProperties extends ICurveChartProperties {\r\n\r\n\t/**\r\n\t * Orientation (direction) of the chart.\r\n\t *\r\n\t * @default vertical\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n\t/**\r\n\t * How many \"turns\" (levels) the chart will have.\r\n\t *\r\n\t * @default 3\r\n\t */\r\n\tlevelCount?: number;\r\n\r\n\t/**\r\n\t * Outer radius of the Y axis.\r\n\t *\r\n\t * It can be fixed number of pixels or percentage of the radius of distance\r\n\t * between rings of the spiral.\r\n\t *\r\n\t * @default 25%\r\n\t */\r\n\tyAxisRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Y axis.\r\n\t *\r\n\t * It can be fixed number of pixels or percentage of the radius of distance\r\n\t * between rings of the spiral.\r\n\t *\r\n\t * @default -25%\r\n\t */\r\n\tyAxisInnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[SerpentineChart]].\r\n */\r\nexport interface ISerpentineChartEvents extends ICurveChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SerpentineChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISerpentineChartAdapters extends ICurveChartAdapters, ISerpentineChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Serpentine chart.\r\n *\r\n * @see {@link ISerpentineChartEvents} for a list of available Events\r\n * @see {@link ISerpentineChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/timeline/#Serpentine} for documentation\r\n * @important\r\n */\r\nexport class SerpentineChart extends CurveChart {\r\n\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ISerpentineChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISerpentineChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISerpentineChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISerpentineChartEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SerpentineChart\";\r\n\r\n\t\tthis.orientation = \"vertical\";\r\n\t\tthis.levelCount = 3;\r\n\r\n\t\tthis.yAxisRadius = percent(25);\r\n\t\tthis.yAxisInnerRadius = percent(-25);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation (direction) of the chart.\r\n\t *\r\n\t * Options: \"vertical\" (default) or \"horizontal\".\r\n\t *\r\n\t * @default vertical\r\n\t * @param  value  Orientaiton\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * How many \"turns\" (levels) the chart will have.\r\n\t *\r\n\t * @default 3\r\n\t * @param  value  Level count\r\n\t */\r\n\tpublic set levelCount(value: number) {\r\n\t\tthis.setPropertyValue(\"levelCount\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Level count\r\n\t */\r\n\tpublic get levelCount(): number {\r\n\t\treturn this.getPropertyValue(\"levelCount\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Y axis.\r\n\t *\r\n\t * It can be fixed number of pixels or percentage of the radius of distance\r\n\t * between rings of the spiral.\r\n\t *\r\n\t * IMPORTANT: this will override `radius` setting set on directly on the\r\n\t * Y axis renderer.\r\n\t *\r\n\t * @default 25%\r\n\t * @param  value  Outer radius\r\n\t */\r\n\tpublic set yAxisRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"yAxisRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get yAxisRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"yAxisRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the Y axis.\r\n\t *\r\n\t * It can be fixed number of pixels or percentage of the radius of distance\r\n\t * between rings of the spiral.\r\n\t *\r\n\t * IMPORTANT: this will override `innerRadius` setting set on directly on the\r\n\t * Y axis renderer.\r\n\t *\r\n\t * @default -25%\r\n\t * @param  value  Inner radius\r\n\t */\r\n\tpublic set yAxisInnerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"yAxisInnerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get yAxisInnerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"yAxisInnerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the chart.\r\n\t * \r\n\t * @ignore\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tlet curveContainer = this.curveContainer;\r\n\r\n\t\tlet w = this.plotContainer.maxWidth - curveContainer.pixelPaddingLeft - curveContainer.pixelPaddingRight;\r\n\t\tlet h = this.plotContainer.maxHeight - curveContainer.pixelPaddingTop - curveContainer.pixelPaddingBottom;\r\n\r\n\t\tlet axisRadius = 0;\r\n\t\tthis.yAxes.each((axis) => {\r\n\t\t\taxisRadius = $math.max(axis.renderer.radius, axisRadius);\r\n\t\t})\r\n\r\n\t\tw -= 2 * axisRadius;\r\n\t\th -= 2 * axisRadius;\r\n\r\n\t\tlet points: IPoint[] = [];\r\n\r\n\t\tlet levelCount = this.levelCount;\r\n\r\n\t\tlet radius: number;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\r\n\t\t\tradius = $math.min(h / (levelCount - 1) / 2, w / 2);\r\n\r\n\t\t\th = $math.min(radius * (levelCount - 1) * 2, h);\r\n\r\n\t\t\tfor (let i = 0; i < this.levelCount; i++) {\r\n\r\n\t\t\t\tif (i % 2 === 0) {\r\n\t\t\t\t\tpoints.push({ x: -w / 2 + radius, y: -h / 2 + h / (levelCount - 1) * i })\r\n\t\t\t\t\tpoints.push({ x: w / 2 - radius, y: -h / 2 + h / (levelCount - 1) * i })\r\n\r\n\t\t\t\t\tlet centerPoint = { x: w / 2 - radius, y: -h / 2 + h / (levelCount - 1) * (i + 0.5) }\r\n\t\t\t\t\tif (i < this.levelCount - 1) {\r\n\t\t\t\t\t\tfor (let i = 0; i < 50; i++) {\r\n\t\t\t\t\t\t\tlet angle = -90 + i / 50 * 180;\r\n\t\t\t\t\t\t\tpoints.push({ x: centerPoint.x + radius * $math.cos(angle), y: centerPoint.y + radius * $math.sin(angle) });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tpoints.push({ x: w / 2 - radius, y: -h / 2 + h / (levelCount - 1) * i })\r\n\t\t\t\t\tpoints.push({ x: -w / 2 + radius, y: -h / 2 + h / (levelCount - 1) * i })\r\n\t\t\t\t\tlet centerPoint = { x: -w / 2 + radius, y: -h / 2 + h / (levelCount - 1) * (i + 0.5) }\r\n\t\t\t\t\tif (i < this.levelCount - 1) {\r\n\t\t\t\t\t\tfor (let i = 0; i < 50; i++) {\r\n\t\t\t\t\t\t\tlet angle = -90 - i / 50 * 180;\r\n\t\t\t\t\t\t\tpoints.push({ x: centerPoint.x + radius * $math.cos(angle), y: centerPoint.y + radius * $math.sin(angle) });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\r\n\t\t\tradius = $math.min(w / (levelCount - 1) / 2, h / 2);\r\n\r\n\t\t\tw = $math.min(radius * (levelCount - 1) * 2, w);\r\n\r\n\t\t\tfor (let i = 0; i < this.levelCount; i++) {\r\n\r\n\t\t\t\tif (i % 2 === 0) {\r\n\t\t\t\t\tpoints.push({ y: -h / 2 + radius, x: -w / 2 + w / (levelCount - 1) * i })\r\n\t\t\t\t\tpoints.push({ y: h / 2 - radius, x: -w / 2 + w / (levelCount - 1) * i })\r\n\r\n\t\t\t\t\tlet centerPoint = { y: h / 2 - radius, x: -w / 2 + w / (levelCount - 1) * (i + 0.5) }\r\n\t\t\t\t\tif (i < this.levelCount - 1) {\r\n\t\t\t\t\t\tfor (let i = 0; i < 50; i++) {\r\n\t\t\t\t\t\t\tlet angle = -90 + i / 50 * 180;\r\n\t\t\t\t\t\t\tpoints.push({ y: centerPoint.y + radius * $math.cos(angle), x: centerPoint.x + radius * $math.sin(angle) });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tpoints.push({ y: h / 2 - radius, x: -w / 2 + w / (levelCount - 1) * i })\r\n\t\t\t\t\tpoints.push({ y: -h / 2 + radius, x: -w / 2 + w / (levelCount - 1) * i })\r\n\t\t\t\t\tlet centerPoint = { y: -h / 2 + radius, x: -w / 2 + w / (levelCount - 1) * (i + 0.5) }\r\n\t\t\t\t\tif (i < this.levelCount - 1) {\r\n\t\t\t\t\t\tfor (let i = 0; i < 50; i++) {\r\n\t\t\t\t\t\t\tlet angle = -90 - i / 50 * 180;\r\n\t\t\t\t\t\t\tpoints.push({ y: centerPoint.y + radius * $math.cos(angle), x: centerPoint.x + radius * $math.sin(angle) });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.xAxes.each((axis) => {\r\n\t\t\taxis.renderer.points = points;\r\n\t\t\taxis.renderer.autoScale = false;\r\n\t\t\taxis.renderer.autoCenter = false;\t\t\t\r\n\t\t\taxis.renderer.polyspline.tensionX = 1;\r\n\t\t\taxis.renderer.polyspline.tensionY = 1;\r\n\t\t})\r\n\r\n\t\tlet yInnerRadius = $utils.relativeRadiusToValue(this.yAxisInnerRadius, radius * 2);\r\n\t\tlet yRadius = $utils.relativeRadiusToValue(this.yAxisRadius, radius * 2);\r\n\r\n\t\tthis.yAxes.each((axis) => {\r\n\t\t\taxis.renderer.radius = yRadius;\r\n\t\t\taxis.renderer.innerRadius = yInnerRadius;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRendererCurveY) {\r\n\t\tsuper.updateYAxis(renderer);\r\n\t\trenderer.innerRadius = undefined;\r\n\t\trenderer.radius = undefined;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SerpentineChart\"] = SerpentineChart;\r\n"]}