{"version":3,"file":"CurveColumnSeries.js","sourceRoot":"","sources":["../../../../../src/.internal/plugins/timeline/CurveColumnSeries.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Curve column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../../charts/series/ColumnSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { CurveChart } from \"./CurveChart\";\r\nimport { AxisRendererCurveX } from \"./AxisRendererCurveX\";\r\nimport { AxisRendererCurveY } from \"./AxisRendererCurveY\";\r\nimport { Axis } from \"../../charts/axes/Axis\";\r\n//import { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { CurveColumn } from \"./CurveColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ValueAxis } from \"../../charts/axes/ValueAxis\";\r\nimport { CategoryAxis } from \"../../charts/axes/CategoryAxis\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CurveColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CurveColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: CurveColumn;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: CurveColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CurveColumnSeries]].\r\n */\r\nexport interface ICurveColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[CurveColumnSeries]].\r\n */\r\nexport interface ICurveColumnSeriesProperties extends IColumnSeriesProperties {\r\n\r\n\t/**\r\n\t * A relative part of an series elements allowed outside of the outer edge of\r\n\t * the \"plot area\".\r\n\t */\r\n\ttopOffset?: number;\r\n\r\n\t/**\r\n\t * A relative part of an series elements allowed outside of the inner edge of\r\n\t * the \"plot area\".\r\n\t */\r\n\tbottomOffset?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CurveColumnSeries]].\r\n */\r\nexport interface ICurveColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurveColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurveColumnSeriesAdapters extends IColumnSeriesAdapters, ICurveColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link ICurveColumnSeriesEvents} for a list of available Events\r\n * @see {@link ICurveColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class CurveColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: CurveColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: CurveColumn;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ICurveColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICurveColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICurveColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICurveColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: CurveChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurveColumnSeries\";\r\n\r\n\t\tthis.bulletsContainer.mask = new Sprite();\r\n\r\n\t\tthis.topOffset = 0.2;\r\n\t\tthis.bottomOffset = 0.2;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a CurveColumn element to use as column in radar chart.\r\n\t *\r\n\t * @return CurveColumn.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new CurveColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//let startAngle = this.chart.startAngle;\r\n\t\t//let endAngle = this.chart.endAngle;\r\n\r\n\t\tlet yField: string = this.yField;\r\n\t\tlet yOpenField: string = this.yOpenField;\r\n\t\tlet xField: string = this.xField;\r\n\t\tlet xOpenField: string = this.xOpenField;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\t//let cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\t\tlet percentHeight: number = template.percentHeight;\r\n\r\n\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\tpercentWidth = 100;\r\n\t\t}\r\n\r\n\t\tlet points: IPoint[] = [];\r\n\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tlet axisRendererX: AxisRendererCurveX = <AxisRendererCurveX>xAxis.renderer;\r\n\t\tlet middlePoint: IPoint;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\r\n\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\tstartLocation += offset;\r\n\t\t\tendLocation -= offset;\r\n\r\n\t\t\tlet count = Math.ceil(this.xAxis.axisLength / axisRendererX.precisionStep / (this.endIndex - this.startIndex)) + 2;\r\n\r\n\t\t\tlet step = (endLocation - startLocation) / count;\r\n\r\n\t\t\tlet bottomLocation = dataItem.locations[yOpenField];\r\n\t\t\tlet topLocation = dataItem.locations[yField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tif ((<any>this.dataFields)[this.yField] != (<any>this.dataFields)[this.yOpenField]) {\r\n\t\t\t\t\tbottomLocation = 0;\r\n\t\t\t\t\ttopLocation = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (this.yAxis instanceof CategoryAxis) {\r\n\t\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\t\ttopLocation = 0;\r\n\t\t\t\t\tbottomLocation = 1;\r\n\t\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\t\ttopLocation += offset;\r\n\t\t\t\t\tbottomLocation -= offset;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let i = startLocation; i <= endLocation; i = i + step) {\r\n\t\t\t\tif (i > endLocation) {\r\n\t\t\t\t\ti = endLocation;\r\n\t\t\t\t}\r\n\t\t\t\tpoints.push(this.getPoint(dataItem, xField, yField, i, topLocation));\r\n\t\t\t}\r\n\t\t\tpoints.push(this.getPoint(dataItem, xField, yField, endLocation, topLocation));\r\n\r\n\t\t\tfor (let i = endLocation; i >= startLocation; i = i - step) {\r\n\t\t\t\tif (i < startLocation) {\r\n\t\t\t\t\ti = startLocation;\r\n\t\t\t\t}\r\n\t\t\t\tpoints.push(this.getPoint(dataItem, xOpenField, yOpenField, i, bottomLocation));\r\n\t\t\t}\r\n\t\t\tpoints.push(this.getPoint(dataItem, xOpenField, yOpenField, startLocation, bottomLocation));\r\n\r\n\t\t\tmiddlePoint = this.getPoint(dataItem, xField, yField, startLocation + (endLocation - startLocation) / 2, 0.5);\r\n\t\t}\r\n\t\telse {\r\n\r\n\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentHeight / 100) / 2, 5);\r\n\t\t\tstartLocation += offset;\r\n\t\t\tendLocation -= offset;\r\n\r\n\t\t\tlet rangeX = { start: xAxis.start, end: xAxis.end };\r\n\t\t\tlet rangeY = { start: yAxis.start, end: yAxis.end };\r\n\r\n\t\t\tlet rightLocation = dataItem.locations[xField];\r\n\t\t\tlet leftLocation = dataItem.locations[xOpenField];\r\n\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.xAxis instanceof ValueAxis) {\r\n\t\t\t\tif ((<any>this.dataFields)[this.xField] != (<any>this.dataFields)[this.xOpenField]) {\r\n\t\t\t\t\trightLocation = 0;\r\n\t\t\t\t\tleftLocation = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet openPositionX = xAxis.getPositionX(dataItem, xOpenField, leftLocation, \"valueX\", rangeX);\r\n\t\t\tlet positionX = xAxis.getPositionX(dataItem, xField, rightLocation, \"valueX\", rangeX);\r\n\r\n\t\t\tlet openPositionY = yAxis.getPositionY(dataItem, yOpenField, startLocation, \"valueY\", rangeY)\r\n\t\t\tlet positionY = yAxis.getPositionY(dataItem, yField, endLocation, \"valueY\", rangeY)\r\n\r\n\t\t\tlet count = Math.ceil((xAxis.axisLength / axisRendererX.precisionStep) * (positionX - openPositionX) / (xAxis.end - xAxis.start)) + 2;\r\n\t\t\tlet step = (positionX - openPositionX) / count;\r\n\r\n\t\t\tif (positionX > openPositionX) {\r\n\t\t\t\tfor (let i = openPositionX; i <= positionX; i = i + step) {\r\n\t\t\t\t\tif (i > positionX) {\r\n\t\t\t\t\t\ti = positionX;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpoints.push(xAxis.renderer.positionToPoint(i, openPositionY));\r\n\t\t\t\t}\r\n\t\t\t\tpoints.push(xAxis.renderer.positionToPoint(positionX, openPositionY));\r\n\r\n\t\t\t\tfor (let i = positionX; i >= openPositionX; i = i - step) {\r\n\t\t\t\t\tif (i < openPositionX) {\r\n\t\t\t\t\t\ti = openPositionX;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpoints.push(xAxis.renderer.positionToPoint(i, positionY));\r\n\t\t\t\t}\r\n\t\t\t\tpoints.push(xAxis.renderer.positionToPoint(openPositionX, positionY));\r\n\t\t\t}\r\n\r\n\t\t\tmiddlePoint = xAxis.renderer.positionToPoint(openPositionX + (positionX - openPositionX) / 2, openPositionY + (positionY - openPositionY) / 2);\r\n\t\t}\r\n\r\n\t\tlet column = dataItem.column;\r\n\r\n\t\tif (!column) {\r\n\t\t\tcolumn = this.columns.create();\r\n\t\t\t$object.copyProperties(this, column, visualProperties); // need this because 3d columns are not in the same container\r\n\t\t\t$object.copyProperties(this.columns.template, column, visualProperties); // second time, no force, so that columns.template would override series properties\t\t\t\r\n\t\t\tdataItem.column = column;\r\n\t\t\tdataItem.addSprite(column);\r\n\t\t\tthis.setColumnStates(column);\r\n\t\t\tcolumn.paper = this.paper;\r\n\t\t}\r\n\r\n\t\tlet curveColumn = column.curveColumn;\r\n\t\tif (points.length > 0) {\r\n\t\t\tpoints.push(points[0]);\r\n\t\t}\r\n\t\tcurveColumn.path = $path.pointsToPath(points);\r\n\r\n\t\tcolumn.__disabled = false;\r\n\t\tcolumn.parent = this.columnsContainer;\r\n\r\n\t\tcolumn.tooltipX = middlePoint.x;\r\n\t\tcolumn.tooltipY = middlePoint.y;\r\n\r\n\t\tcolumn.curveColumn.tooltipX = middlePoint.x;\r\n\t\tcolumn.curveColumn.tooltipY = middlePoint.y;\r\n\r\n\t\tthis.axisRanges.each((axisRange) => {\r\n\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\tif (!rangeColumn) {\r\n\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\tif (rangeColumn.dataItem) {\r\n\t\t\t\t\t$array.remove(rangeColumn.dataItem.sprites, rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\trangeColumn.paper = this.paper;\r\n\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\r\n\t\t\t}\r\n\r\n\t\t\tlet rangeCurveColumn = rangeColumn.curveColumn;\r\n\t\t\trangeCurveColumn.path = curveColumn.path;\r\n\r\n\t\t\trangeColumn.__disabled = false;\r\n\t\t\trangeColumn.parent = axisRange.contents;\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n\t *\r\n\t * @param    dataItem   Data item\r\n\t * @param    xKey       Name of X data field\r\n\t * @param    yKey       Name of Y data field\r\n\t * @param    locationX  X location\r\n\t * @param    locationY  Y location\r\n\t * @param    stackKeyX  ?\r\n\t * @param    stackKeyY  ?\r\n\t * @returns             Coordinates\r\n\t */\r\n\tpublic getPoint(dataItem: CurveColumnSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\t\tlet renderer: AxisRendererCurveY = <AxisRendererCurveY>this.yAxis.renderer;\r\n\t\t//let radius = $math.fitToRange(this.yAxis.getY(dataItem, yKey, locationY, stackKeyY), renderer.innerRadius * (1 + this.bottomOffset), renderer.radius * (1 + this.topOffset));\r\n\r\n\t\t//let radius = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius = $math.fitToRange(this.yAxis.getY(dataItem, yKey, locationY, stackKeyY), -renderer.radius * (1 + this.topOffset), -renderer.innerRadius * (1 + this.bottomOffset));\r\n\t\tlet range = { start: this.xAxis.start, end: this.xAxis.end };\r\n\r\n\t\tlet xx: number = this.xAxis.getX(dataItem, xKey, locationX, stackKeyX, range);\r\n\t\tlet xy: number = this.xAxis.getY(dataItem, xKey, locationX, stackKeyX, range);\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX, range);\r\n\r\n\t\treturn { x: xx + radius * $math.cos(angle), y: xy + radius * $math.sin(angle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererCurveY = <AxisRendererCurveY>this.yAxis.renderer;\r\n\t\tlet path = renderer.getPositionRangePath(renderer.axis.start, renderer.axis.end);\r\n\r\n\t\tlet bulletsContainer = this.bulletsContainer;\r\n\t\tif (this.chart && this.chart.maskBullets) {\r\n\t\t\tif (!bulletsContainer.mask) {\r\n\t\t\t\tbulletsContainer.mask = new Sprite();\r\n\t\t\t}\r\n\t\t\tbulletsContainer.mask.path = path;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tbulletsContainer.mask = undefined;\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * A relative part of an series elements allowed outside of the outer edge of\r\n\t * the \"plot area\".\r\n\t *\r\n\t * @default 0.2\r\n\t * @param  value  Top offset\r\n\t */\r\n\tpublic set topOffset(value: number) {\r\n\t\tthis.setPropertyValue(\"topOffset\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Top offset\r\n\t */\r\n\tpublic get topOffset(): number {\r\n\t\treturn this.getPropertyValue(\"topOffset\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative part of an series elements allowed outside of the inner edge of\r\n\t * the \"plot area\".\r\n\t * \r\n\t * @default 0.2\r\n\t * @param  value  Bottom offset\r\n\t */\r\n\tpublic set bottomOffset(value: number) {\r\n\t\tthis.setPropertyValue(\"bottomOffset\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Bottom offset\r\n\t */\r\n\tpublic get bottomOffset(): number {\r\n\t\treturn this.getPropertyValue(\"bottomOffset\");\r\n\t}\r\n\r\n\t/**\r\n\t * [positionBulletReal description]\r\n\t * \r\n\t * @ignore\r\n\t * @param {Sprite} bullet    [description]\r\n\t * @param {number} positionX [description]\r\n\t * @param {number} positionY [description]\r\n\t */\r\n\tprotected positionBulletReal(bullet: Sprite, positionX: number, positionY: number) {\r\n\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (positionX < xAxis.start || positionX > xAxis.end || positionY < yAxis.start || positionY > yAxis.end) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\r\n\t\tbullet.moveTo(this.xAxis.renderer.positionToPoint(positionX, positionY));\r\n\t}\r\n\r\n\tprotected setXAxis(axis: Axis) {\r\n\t\tsuper.setXAxis(axis);\r\n\t\tthis.updateRendererRefs();\r\n\t}\r\n\r\n\tprotected setYAxis(axis: Axis) {\r\n\t\tsuper.setYAxis(axis);\r\n\t\tthis.updateRendererRefs();\r\n\t}\r\n\r\n\tprotected updateRendererRefs() {\r\n\t\tlet rendererX = <AxisRendererCurveX>this.xAxis.renderer;\r\n\t\tlet rendererY = <AxisRendererCurveY>this.yAxis.renderer;\r\n\r\n\t\trendererX.axisRendererY = rendererY;\r\n\t\trendererY.axisRendererX = rendererX;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurveColumnSeries\"] = CurveColumnSeries;\r\nregistry.registeredClasses[\"CurveColumnSeriesDataItem\"] = CurveColumnSeriesDataItem;\r\n"]}