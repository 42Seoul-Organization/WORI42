{"version":3,"file":"Sunburst.js","sourceRoot":"","sources":["../../../../../src/.internal/plugins/sunburst/Sunburst.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Sunburst chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PieChart, IPieChartProperties, IPieChartDataFields, IPieChartAdapters, IPieChartEvents, PieChartDataItem } from \"../../charts/types/PieChart\";\r\nimport { SunburstSeries, SunburstSeriesDataItem } from \"./SunburstSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { Export } from \"../../core/export/Export\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[Sunburst]].\r\n *\r\n * @since 4.1.6\r\n * @see {@link DataItem}\r\n */\r\nexport class SunburstDataItem extends PieChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: Sunburst;\r\n\r\n\t/**\r\n\t * A treemap level this data item is displayed at.\r\n\t */\r\n\tprotected _level: number;\r\n\r\n\t/**\r\n\t * Series of children data items.\r\n\t */\r\n\tprotected _series: SunburstSeries;\r\n\r\n\t/**\r\n\t * Related series data item.\r\n\t */\r\n\tpublic seriesDataItem: SunburstSeriesDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SunburstDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.hasChildren.children = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the item.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the slice.\r\n\t *\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\tlet value = 0;\r\n\t\tif (!this.children || this.children.length == 0) {\r\n\t\t\tvalue = this.values[\"value\"].workingValue;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\tlet childValue = child.value;\r\n\t\t\t\tif ($type.isNumber(childValue)) {\r\n\t\t\t\t\tvalue += childValue;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Percent of the slice.\r\n\t *\r\n\t * @return {number} Percent\r\n\t */\r\n\tpublic get percent(): number {\r\n\t\tif (this.parent) {\r\n\t\t\treturn this.value / this.parent.value * 100;\r\n\t\t}\r\n\t\treturn 100;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's name.\r\n\t *\r\n\t * @param name  Name\r\n\t */\r\n\tpublic set name(name: string) {\r\n\t\tthis.setProperty(\"name\", name);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties.name;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of item's sub-children.\r\n\t *\r\n\t * @param children  Item's children\r\n\t */\r\n\tpublic set children(children: OrderedListTemplate<SunburstDataItem>) {\r\n\t\tthis.setProperty(\"children\", children);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Item's children\r\n\t */\r\n\tpublic get children(): OrderedListTemplate<SunburstDataItem> {\r\n\t\treturn this.properties.children;\r\n\t}\r\n\r\n\t/**\r\n\t * Depth level in the Sunburst hierarchy.\r\n\t *\r\n\t * The top-level item will have level set at 0. Its children will have\r\n\t * level 1, and so on.\r\n\t *\r\n\t * @readonly\r\n\t * @return Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.parent.level + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's color.\r\n\t *\r\n\t * If not set, will use parent's color, or, if that is not set either,\r\n\t * automatically assigned color from chart's color set. (`chart.colors`)\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\tlet color = this.properties.color;\r\n\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\tcolor = this.parent.color;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tcolor = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\r\n\t/**\r\n\t * A series representing slice's children.\r\n\t *\r\n\t * @param  series Child series\r\n\t */\r\n\tpublic set series(series: SunburstSeries) {\r\n\t\tif (series != this._series) {\r\n\t\t\tif (this._series) {\r\n\t\t\t\tthis.component.series.removeValue(this._series);\r\n\t\t\t\tthis._series.dispose();\r\n\t\t\t}\r\n\t\t\tthis._series = series;\r\n\t\t\tthis._disposers.push(series);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Child series\r\n\t */\r\n\tpublic get series(): SunburstSeries {\r\n\t\treturn this._series;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[Sunburst]].\r\n *\r\n * @since 4.1.6\r\n */\r\nexport interface ISunburstDataFields extends IPieChartDataFields {\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's numeric value.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's sub-items.\r\n\t */\r\n\tchildren?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's name.\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's color.\r\n\t *\r\n\t * If not set, a new color will be automatically assigned to each item as\r\n\t * defined by theme.\r\n\t */\r\n\tcolor?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds boolean flag if item should be hidden.\r\n\t */\r\n\thidden?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[Sunburst]].\r\n *\r\n * @since 4.1.6\r\n */\r\nexport interface ISunburstProperties extends IPieChartProperties { }\r\n\r\n/**\r\n * Defines events for [[Sunburst]].\r\n *\r\n * @since 4.1.6\r\n */\r\nexport interface ISunburstEvents extends IPieChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Sunburst]].\r\n *\r\n * @since 4.1.6\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISunburstAdapters extends IPieChartAdapters, ISunburstProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A main class for Sunburst chart type.\r\n *\r\n * @since 4.1.6\r\n * @see {@link ISunburstEvents} for a list of available Events\r\n * @see {@link ISunburstAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sunburst/} For more information\r\n * @todo Example\r\n * @important\r\n */\r\nexport class Sunburst extends PieChart {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: SunburstDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ISunburstDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISunburstProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISunburstAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISunburstEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: SunburstSeries;\r\n\r\n\t/**\r\n\t * A set of colors to be applied automatically to each new chart item, if\r\n\t * not explicitly set.\r\n\t */\r\n\tpublic colors: ColorSet;\r\n\r\n\t/**\r\n\t * Holds series object for each Sunburst level.\r\n\t *\r\n\t * \"0\" is the top-level series.\r\n\t * \"1\" is the second level.\r\n\t * Etc.\r\n\t */\r\n\tpublic seriesTemplates: DictionaryTemplate<string, this[\"_seriesType\"]>;\r\n\r\n\t/**\r\n\t * [_homeDataItem description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _homeDataItem: SunburstDataItem;\r\n\r\n\t/**\r\n\t * Number of levels in current chart.\r\n\t */\r\n\tprotected _levelCount: number;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Sunburst\";\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\r\n\t\tthis._usesData = true;\r\n\r\n\t\tconst template = new SunburstSeries();\r\n\t\tthis.seriesTemplates = new DictionaryTemplate<string, this[\"_seriesType\"]>(template);\r\n\t\ttemplate.virtualParent = this;\r\n\t\tthis._disposers.push(new DictionaryDisposer(this.seriesTemplates));\r\n\t\tthis._disposers.push(template);\r\n\r\n\t\tthis.radius = percent(95);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new series of the suitable type.\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new SunburstSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new SunburstDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart's data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.dispose();\r\n\t\t}\r\n\r\n\t\tlet homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\r\n\r\n\t\tthis._homeDataItem = homeDataItem;\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tdataItem.parent = homeDataItem;\r\n\t\t});\r\n\r\n\t\thomeDataItem.children = this.dataItems;\r\n\r\n\t\tthis._levelCount = 0;\r\n\r\n\t\tthis.createSunburstSeries(homeDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates [[SunburstSeries]] instance for item's children.\r\n\t *\r\n\t * @param  dataItem Data item\r\n\t */\r\n\tprotected createSunburstSeries(dataItem: this[\"_dataItem\"]) {\r\n\t\tif (dataItem.children) {\r\n\t\t\tthis.initSeries(dataItem);\r\n\r\n\t\t\tfor (let i = 0; i < dataItem.children.length; i++) {\r\n\t\t\t\tlet child = dataItem.children.getIndex(i);\r\n\t\t\t\tif (child.children) {\r\n\t\t\t\t\tthis.createSunburstSeries(child);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes the Sunburst series.\r\n\t *\r\n\t * @param  dataItem  Chart data item\r\n\t */\r\n\tprotected initSeries(dataItem: SunburstDataItem) {\r\n\t\tif (!dataItem.series) {\r\n\t\t\tlet series: this[\"_seriesType\"];\r\n\r\n\t\t\tlet template = this.seriesTemplates.getKey(dataItem.level.toString());\r\n\t\t\tif (template) {\r\n\t\t\t\tseries = template.clone();\r\n\t\t\t\tthis.series.moveValue(series);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries = this.series.create();\r\n\t\t\t}\r\n\r\n\t\t\tseries.name = dataItem.name;\r\n\t\t\tseries.parentDataItem = dataItem;\r\n\t\t\tdataItem.series = series;\r\n\r\n\t\t\tlet level = dataItem.level;\r\n\t\t\tseries.level = level;\r\n\r\n\t\t\tif (this._levelCount < level + 1) {\r\n\t\t\t\tthis._levelCount = level + 1;\r\n\t\t\t}\r\n\r\n\t\t\tlet dataContext: any = dataItem.dataContext;\r\n\t\t\tif (dataContext) {\r\n\t\t\t\tseries.config = dataContext.config;\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\r\n\t\t\tseries.data = dataItem.children.values;\r\n\t\t\tseries.fill = dataItem.color;\r\n\t\t\tseries.dataFields.hidden = this.dataFields.hidden;\r\n\r\n\t\t\tseries.slices.template.adapter.add(\"fill\", (fill, target) => {\r\n\t\t\t\tlet dataItem = <SunburstSeriesDataItem>target.dataItem;\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tlet sunburstDataItem = dataItem.sunburstDataItem;\r\n\t\t\t\t\tif (sunburstDataItem) {\r\n\t\t\t\t\t\ttarget.fill = sunburstDataItem.color;\r\n\t\t\t\t\t\ttarget.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\r\n\t\t\t\t\t\treturn sunburstDataItem.color;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tseries.adapter.add(\"startAngle\", (startAngle, target) => {\r\n\t\t\t\tlet parentDataItem = target.parentDataItem;\r\n\t\t\t\tif (parentDataItem) {\r\n\t\t\t\t\tlet seriesDataItem = parentDataItem.seriesDataItem;\r\n\t\t\t\t\tif (seriesDataItem) {\r\n\t\t\t\t\t\tstartAngle = seriesDataItem.slice.startAngle;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn startAngle;\r\n\t\t\t})\r\n\r\n\t\t\tseries.adapter.add(\"endAngle\", (endAngle, target) => {\r\n\t\t\t\tlet parentDataItem = target.parentDataItem;\r\n\t\t\t\tif (parentDataItem) {\r\n\t\t\t\t\tlet seriesDataItem = parentDataItem.seriesDataItem;\r\n\t\t\t\t\tif (seriesDataItem) {\r\n\t\t\t\t\t\tendAngle = seriesDataItem.slice.startAngle + seriesDataItem.slice.arc;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn endAngle;\r\n\t\t\t})\r\n\r\n\t\t\tseries.validateData();\r\n\r\n\t\t\tif (dataItem.seriesDataItem) {\r\n\t\t\t\tdataItem.seriesDataItem.slice.events.on(\"propertychanged\", (event) => {\r\n\t\t\t\t\tif (event.property == \"startAngle\" || event.property == \"arc\") {\r\n\t\t\t\t\t\tseries.invalidate();\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates Sunburst radius, based on a number of criteria.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRadius(): void {\r\n\r\n\t\tsuper.updateRadius();\r\n\r\n\t\tlet chartRadius = this._chartPixelRadius;\r\n\t\tlet chartPixelInnerRadius = this._chartPixelInnerRadius;\r\n\r\n\r\n\r\n\t\tlet seriesRadius = (chartRadius - chartPixelInnerRadius) / this._levelCount;\r\n\r\n\t\t$iter.each($iter.indexed(this.series.iterator()), (a) => {\r\n\t\t\tlet series = a[1];\r\n\r\n\t\t\tlet radius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.radius, chartRadius - chartPixelInnerRadius);\r\n\t\t\tlet innerRadius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.innerRadius, chartRadius - chartPixelInnerRadius);\r\n\r\n\t\t\tif (!$type.isNumber(radius)) {\r\n\t\t\t\tradius = chartPixelInnerRadius + seriesRadius * (series.level + 1);\r\n\t\t\t}\r\n\t\t\tif (!$type.isNumber(innerRadius)) {\r\n\t\t\t\tinnerRadius = chartPixelInnerRadius + seriesRadius * series.level;\r\n\t\t\t}\r\n\r\n\t\t\tseries.pixelRadius = radius;\r\n\t\t\tseries.pixelInnerRadius = innerRadius;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Sunburst chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Since this chart uses hierarchical data, we need to remove childrent\r\n\t * dataField from export of non-hierarchical formats such as CSV and XSLX.\r\n\t *\r\n\t * @return Export\r\n\t */\r\n\tprotected getExporting(): Export {\r\n\t\tconst exporting = super.getExporting();\r\n\t\texporting.adapter.add(\"formatDataFields\", (info) => {\r\n\t\t\tif (info.format == \"csv\" || info.format == \"xlsx\") {\r\n\t\t\t\tif($type.hasValue(this.dataFields.children)) {\r\n\t\t\t\t\tdelete info.dataFields[this.dataFields.children];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn info;\r\n\t\t})\r\n\t\treturn exporting;\r\n\t}\r\n\r\n\tprotected handleSeriesAdded2(){\r\n\t\t// void\r\n\t}\t\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Sunburst\"] = Sunburst;\r\nregistry.registeredClasses[\"SunburstDataItem\"] = SunburstDataItem;\r\n"]}