{"version":3,"file":"Regression.js","sourceRoot":"","sources":["../../../../../src/.internal/plugins/regression/Regression.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Regression plugin.\r\n *\r\n * Uses regression-js library by Tom Alexander\r\n * http://tom-alexander.github.io/regression-js/\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as regression from \"regression\";\r\nimport { Plugin } from \"../../core/utils/Plugin\";\r\nimport { XYSeries } from \"../../charts/series/XYSeries\";\r\nimport { Optional } from \"../../core/utils/Type\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { EventDispatcher, AMEvent } from \"../../core/utils/EventDispatcher\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * Defines events for [[BaseObjectEvents]].\r\n */\r\nexport interface IRegressionEvents {\r\n\t/**\r\n\t * Invoked when regression finishes calculating data.\r\n\t */\r\n\tprocessed: {};\r\n};\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A module which automatically calculates data for for trend lines using\r\n * various regression algorithms.\r\n *\r\n * By pushing an instance of [[Regression]] into `plugin` list of\r\n * any [[XYSeries]], it automatically recalculates and overrides its\r\n * data to show regression trend line, inestead of the source values.\r\n *\r\n * Example:\r\n *\r\n * ```TypeScript\r\n * let regseries = chart.series.push(new am4charts.LineSeries());\r\n * regseries.dataFields.valueY = \"value\";\r\n * regseries.dataFields.dateX = \"date\";\r\n *\r\n * let reg = regseries.plugins.push(new am4plugins_regression.Regression());\r\n * reg.method = \"polynomial\";\r\n * ```\r\n * ```JavaScript\r\n * var regseries = chart.series.push(new am4charts.LineSeries());\r\n * regseries.dataFields.valueY = \"value\";\r\n * regseries.dataFields.dateX = \"date\";\r\n *\r\n * var reg = regseries.plugins.push(new am4plugins_regression.Regression());\r\n * reg.method = \"polynomial\";\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"series\": [{\r\n *     // ...\r\n *   }, {\r\n *     \"type\": \"LineSeries\",\r\n *     \"dataFields\": {\r\n *       \"valueY\": \"value\",\r\n *       \"dateX\": \"date\"\r\n *     },\r\n *     \"plugins\": [{\r\n *       \"type\": \"Regression\",\r\n *       \"method\": \"polynomial\"\r\n *     }]\r\n *   }]\r\n * }\r\n * ```\r\n *\r\n * @since 4.2.2\r\n */\r\nexport class Regression extends Plugin {\r\n\r\n\t/**\r\n\t * A series object that will be used for the trend line.\r\n\t */\r\n\tpublic target: Optional<XYSeries>;\r\n\r\n\t/**\r\n\t * An [[EventDispatcher]] instance.\r\n\t *\r\n\t * @since 4.3.14\r\n\t */\r\n\tpublic events: EventDispatcher<AMEvent<this, IRegressionEvents>> = new EventDispatcher();\r\n\r\n\t/**\r\n\t * Method\r\n\t */\r\n\tprotected _method: \"linear\" | \"polynomial\" = \"linear\";\r\n\r\n\t/**\r\n\t * Options\r\n\t */\r\n\tprotected _options: { [index: string]: any } = {};\r\n\r\n\t/**\r\n\t * Simplify output data.\r\n\t */\r\n\tprotected _simplify: boolean = false;\r\n\r\n\t/**\r\n\t * Reorder data after calculation\r\n\t */\r\n\tprotected _reorder: boolean = false;\r\n\r\n\t/**\r\n\t * Calculated data.\r\n\t */\r\n\tprotected _data: Optional<any[]>;\r\n\r\n\t/**\r\n\t * An object containing results of the calculation.\r\n\t *\r\n\t * @since 4.3.14\r\n\t */\r\n\tpublic result: Optional<any>;\r\n\r\n\t/**\r\n\t * Original series data.\r\n\t */\r\n\tprotected _originalData: Optional<any[]>;\r\n\r\n\t/**\r\n\t * Hash of the data original data. Used to check whether we need to\r\n\t * recalculate, or the data did not change.\r\n\t */\r\n\tprotected _originalDataHash: string = \"\";\r\n\r\n\t/**\r\n\t * Should skip next \"beforedatavalidated\" event?\r\n\t */\r\n\tprotected _skipValidatedEvent: boolean = false;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\t// Nothing to do here\r\n\t\tsuper();\r\n\t}\r\n\r\n\tpublic init() {\r\n\t\tsuper.init();\r\n\t\tthis.processSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates series with required events and adapters used to hijack its\r\n\t * data.\r\n\t */\r\n\tprivate processSeries(): void {\r\n\r\n\t\tthis.invalidateData();\r\n\r\n\t\t// Invalidate calculated data whenever data updates\r\n\t\tthis._disposers.push(this.target.events.on(\"beforedatavalidated\", (ev) => {\r\n\t\t\tif (this._skipValidatedEvent) {\r\n\t\t\t\tthis._skipValidatedEvent = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Update data\r\n\t\t\tthis.saveOriginalData();\r\n\t\t\tthis.calcData();\r\n\t\t}));\r\n\r\n\t\tif (this.target.chart) {\r\n\t\t\tthis._disposers.push(this.target.chart.events.on(\"beforedatavalidated\", (ev) => {\r\n\t\t\t\tthis.target.invalidateData();\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\t// Add data adapter\r\n\t\tthis.target.adapter.add(\"data\", () => {\r\n\t\t\tif (this._data === undefined) {\r\n\t\t\t\tthis.calcData();\r\n\t\t\t}\r\n\t\t\treturn this._data;\r\n\t\t});\r\n\r\n\t\t// Save original series data\r\n\t\tthis.saveOriginalData();\r\n\t}\r\n\r\n\t/**\r\n\t * Saves series' original data and (re)adds data adapter.\r\n\t */\r\n\tprivate saveOriginalData(): void {\r\n\r\n\t\t// Temporarily disable the data adapter\r\n\t\tthis.target.adapter.disableKey(\"data\");\r\n\r\n\t\t// Save\r\n\t\tif (this.target.data && this.target.data.length) {\r\n\t\t\tthis._originalData = this.target.data;\r\n\t\t}\r\n\r\n\t\t// Re-enabled the adapter\r\n\t\tthis.target.adapter.enableKey(\"data\");\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates data.\r\n\t */\r\n\tprivate invalidateData(): void {\r\n\t\tthis._data = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates regression series data.\r\n\t */\r\n\tprivate calcData(): void {\r\n\t\tthis._data = [];\r\n\t\tconst series = this.target;\r\n\r\n\t\t// Get series' data (global or series own)\r\n\t\tlet seriesData: any = this._originalData;\r\n\t\tif (!seriesData || seriesData.length == 0) {\r\n\t\t\tseriesData = (<any>this.target.baseSprite).data;\r\n\t\t}\r\n\r\n\t\t// Build matrix for the regression function\r\n\t\tlet matrix: any = [];\r\n\t\tlet map: any = {};\r\n\t\tlet xx = 0;\r\n\t\tconst pivot = series.dataFields.valueX && !series.dataFields.valueY ? true : false;\r\n\t\tfor (let i = 0; i < seriesData.length; i++) {\r\n\t\t\tlet x = series.dataFields.valueX && pivot ? seriesData[i][series.dataFields.valueX] : i;\r\n\t\t\tlet y = series.dataFields.valueY && !pivot ? seriesData[i][series.dataFields.valueY] : i;\r\n\t\t\tif ($type.hasValue(x) && $type.hasValue(y)) {\r\n\t\t\t\tmatrix.push(pivot ? [y, x] : [x, y]);\r\n\t\t\t\tmap[xx] = i;\r\n\t\t\t\txx++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Calculate regression values\r\n\t\tlet result: any = [];\r\n\t\tswitch (this.method) {\r\n\t\t\tcase \"polynomial\":\r\n\t\t\t\tresult = regression.polynomial(matrix, this.options);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tresult = regression.linear(matrix, this.options);\r\n\t\t}\r\n\r\n\t\t// Set results\r\n\t\tthis.result = result;\r\n\r\n\t\t// Invoke event\r\n\t\tconst hash = btoa(JSON.stringify(seriesData));\r\n\t\tif (hash != this._originalDataHash) {\r\n\t\t\tthis.events.dispatchImmediately(\"processed\", {\r\n\t\t\t\ttype: \"processed\",\r\n\t\t\t\ttarget: this\r\n\t\t\t});\r\n\t\t}\r\n\t\tthis._originalDataHash = hash;\r\n\r\n\r\n\t\t// Order data points\r\n\t\tif (this.reorder) {\r\n\t\t\tresult.points.sort(function(a: any, b: any) {\r\n\t\t\t\tif (a[0] > b[0]) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if (a[0] < b[0]) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Build data\r\n\t\tthis._data = [];\r\n\t\tfor (let i = 0; i < result.points.length; i++) {\r\n\t\t\tif (this.simplify && i) {\r\n\t\t\t\ti = result.points.length - 1;\r\n\t\t\t}\r\n\t\t\tlet item: any = {};\r\n\t\t\tconst xx = map[i];\r\n\t\t\t$object.each(this.target.dataFields, (key, val) => {\r\n\t\t\t\tif ((key == \"valueY\" && !pivot) || (key == \"valueX\" && pivot)) {\r\n\t\t\t\t\titem[val] = result.points[i][1];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\titem[val] = seriesData[xx][val];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis._data.push(item);\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Method to calculate regression.\r\n\t *\r\n\t * Supported values: \"linear\" (default), \"polynomial\".\r\n\t *\r\n\t * @default linear\r\n\t * @param  value  Method\r\n\t */\r\n\tpublic set method(value: \"linear\" | \"polynomial\") {\r\n\t\tif (this._method != value) {\r\n\t\t\tthis._method = value;\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Method\r\n\t */\r\n\tpublic get method(): \"linear\" | \"polynomial\" {\r\n\t\treturn this._method;\r\n\t}\r\n\r\n\t/**\r\n\t * Regression output options.\r\n\t *\r\n\t * Below are default values.\r\n\t *\r\n\t * ```JSON\r\n\t * {\r\n\t *   order: 2,\r\n\t *   precision: 2,\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://github.com/Tom-Alexander/regression-js#configuration-options} About options\r\n\t * @param  value  Options\r\n\t */\r\n\tpublic set options(value: { [index: string]: any }) {\r\n\t\tif (this._options != value) {\r\n\t\t\tthis._options = value;\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Options\r\n\t */\r\n\tpublic get options(): { [index: string]: any } {\r\n\t\treturn this._options;\r\n\t}\r\n\r\n\t/**\r\n\t * Simplify regression line data? If set to `true` it will use only two\r\n\t * result data points: first and last.\r\n\t *\r\n\t * NOTE: this does make sense with \"linear\" method only.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.2.3\r\n\t * @param  value  Simplify?\r\n\t */\r\n\tpublic set simplify(value: boolean) {\r\n\t\tif (this._simplify != value) {\r\n\t\t\tthis._simplify = value;\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Simplify?\r\n\t */\r\n\tpublic get simplify(): boolean {\r\n\t\treturn this._simplify;\r\n\t}\r\n\r\n\t/**\r\n\t * Orders data points after calculation. This can make sense in scatter plot\r\n\t * scenarios where data points can come in non-linear fashion.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.2.3\r\n\t * @param  value  Reorder data?\r\n\t */\r\n\tpublic set reorder(value: boolean) {\r\n\t\tif (this._reorder != value) {\r\n\t\t\tthis._reorder = value;\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Reorder data?\r\n\t */\r\n\tpublic get reorder(): boolean {\r\n\t\treturn this._reorder;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Regression\"] = Regression;\r\n"]}