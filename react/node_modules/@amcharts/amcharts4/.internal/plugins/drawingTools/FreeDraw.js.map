{"version":3,"file":"FreeDraw.js","sourceRoot":"","sources":["../../../../../src/.internal/plugins/drawingTools/FreeDraw.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Functionality for drawing paths.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, AMEvent, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { getInteraction, IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { Polyspline } from \"../../core/elements/Polyspline\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { Optional } from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FreeDraw]].\r\n */\r\nexport interface IFreeDrawProperties extends IContainerProperties {\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[FreeDraw]].\r\n */\r\nexport interface IFreeDrawEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FreeDraw]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFreeDrawAdapters extends IContainerAdapters, IFreeDrawProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * FreeDraw class is capable of drawing a simple rectangular button with\r\n * optionally rounded corners and an icon in it.\r\n *\r\n * @see {@link IFreeDrawEvents} for a list of available events\r\n * @see {@link IFreeDrawAdapters} for a list of available Adapters\r\n */\r\nexport class FreeDraw extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFreeDrawProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFreeDrawAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFreeDrawEvents;\r\n\r\n\tpublic splines: Polyspline[] = [];\r\n\r\n\tpublic currentSpline: Polyspline;\r\n\r\n\tpublic currentPoints: IPoint[];\r\n\r\n\tpublic isDrawing: boolean = false;\r\n\r\n\tprotected _direction: Optional<Orientation>;\r\n\r\n\tprotected _prevPoint: Optional<IPoint>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"FreeDraw\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.background.fillOpacity = 0;\r\n\r\n\t\tconst interaction = getInteraction();\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.strokeWidth = 1;\r\n\t\tthis.stroke = new InterfaceColorSet().getFor(\"stroke\");\r\n\r\n\t\tthis.events.on(\"down\", this.handleDrawStart, this, false);\r\n\t\tthis._disposers.push(interaction.body.events.on(\"up\", this.handleDrawEnd, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"track\", this.handleDraw, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"keyup\", this.handleKeyUp, this));\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic handleKeyUp(): void {\r\n\t\tthis._direction = undefined;\r\n\t}\r\n\r\n\tpublic handleDraw(event: IInteractionEvents[\"track\"]): void {\r\n\t\tif (this.isDrawing) {\r\n\t\t\tlet point = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\t\tif (event.event.shiftKey) {\r\n\t\t\t\tif (this._direction == undefined) {\r\n\t\t\t\t\tif (this._prevPoint) {\r\n\t\t\t\t\t\tif (Math.abs(this._prevPoint.x - point.x) > Math.abs(this._prevPoint.y - point.y)) {\r\n\t\t\t\t\t\t\tthis._direction = \"horizontal\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis._direction = \"vertical\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this._prevPoint) {\r\n\t\t\t\t\tif (this._direction == \"horizontal\") {\r\n\t\t\t\t\t\tpoint.y = this._prevPoint.y;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (this._direction == \"vertical\") {\r\n\t\t\t\t\t\tpoint.x = this._prevPoint.x;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._direction = undefined;\r\n\t\t\t}\r\n\r\n\t\t\tthis.currentPoints.push(point);\r\n\t\t\tthis.currentSpline.segments = [this.currentPoints];\r\n\t\t\tthis._prevPoint = point;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic handleDrawStart(event?: AMEvent<Sprite, ISpriteEvents>[\"down\"]): void {\r\n\t\tthis.isDrawing = true;\r\n\t\tthis._direction = undefined;\r\n\r\n\t\tif (event.event.shiftKey) {\r\n\t\t\tlet point = $utils.documentPointToSprite(event.pointer.point, this);\r\n\t\t\tif (!this.currentPoints) {\r\n\t\t\t\tthis.currentPoints = [];\r\n\t\t\t}\r\n\t\t\tif (!this.currentSpline) {\r\n\t\t\t\tthis.currentSpline = this.createChild(Polyspline);\r\n\t\t\t}\r\n\r\n\t\t\tthis.currentPoints.push(point);\r\n\t\t\tthis.currentSpline.segments = [this.currentPoints];\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.currentSpline = this.createChild(Polyspline);\r\n\t\t\tthis.currentPoints = [];\r\n\t\t\tthis.splines.push(this.currentSpline);\r\n\t\t}\r\n\r\n\t\tthis.currentSpline.tensionX = 1;\r\n\t\tthis.currentSpline.tensionY = 1;\r\n\r\n\t\tthis._prevPoint = undefined;\r\n\t}\r\n\r\n\tpublic handleDrawEnd(event: IInteractionEvents[\"up\"]): void {\r\n\t\tthis.isDrawing = false;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FreeDraw\"] = FreeDraw;\r\n"]}