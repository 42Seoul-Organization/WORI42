{"version":3,"file":"OverlapBuster.js","sourceRoot":"","sources":["../../../../../src/.internal/plugins/overLapBuster/OverlapBuster.ts"],"names":[],"mappings":"AAAA;;GAEG;;AAEH;;;;;GAKG;AACH,OAAO,EAAE,MAAM,EAAE,MAAM,yBAAyB,CAAC;AACjD,OAAO,EAAE,IAAI,EAAE,MAAM,uBAAuB,CAAC;AAC7C,OAAO,KAAK,MAAM,MAAM,wBAAwB,CAAC;AACjD,iDAAiD;AACjD,OAAO,KAAK,OAAO,MAAM,UAAU,CAAC;AACpC,OAAO,EAAE,UAAU,EAAE,MAAM,6BAA6B,CAAC;AACzD,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAa,MAAM,2BAA2B,CAAC;AAI/E,OAAO,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AAoB/C;;;;;GAKG;AAEH;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH;IAAmC,iCAAM;IAqExC;;OAEG;IACH;QAAA;QACC,qBAAqB;QACrB,iBAAO,SA8BP;QAvFD;;;;;;;;WAQG;QACI,iBAAW,GAAW,GAAG,CAAC;QAEjC;;;;;WAKG;QACI,mBAAa,GAAW,GAAG,CAAC;QAEnC;;;;;;;;;;;;WAYG;QACI,eAAS,GAAW,CAAC,CAAC;QA2B5B,oBAAoB;QACpB,KAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,eAAe,EAAE,CAAC;QAEnD,4BAA4B;QAC5B,KAAI,CAAC,eAAe,GAAG,IAAI,UAAU,EAAgC,CAAC;QACtE,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,cAAM,OAAA,KAAI,CAAC,eAAe,EAApB,CAAoB,CAAC,CAAC,CAAC;QAE/D,cAAc;QACd,KAAI,CAAC,QAAQ,GAAG,IAAI,IAAI,EAAU,CAAC;QACnC,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,cAAM,OAAA,KAAI,CAAC,OAAO,EAAZ,CAAY,CAAC,CAAC,CAAC;QAEvD,SAAS;QACT,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,UAAU,EAAE,UAAC,EAAE;YAEtC,sBAAsB;YACtB,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,aAAa,CAAC;gBACtC,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,KAAI,CAAC,WAAW,EAAE,KAAI,CAAC;gBACrD,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,KAAI,CAAC,SAAS,EAAE,KAAI,CAAC;aAClD,CAAC,CAAC,CAAC;YAEJ,gEAAgE;YAChE,IAAI,EAAE,CAAC,QAAQ,CAAC,UAAU,EAAE;gBAC3B,KAAI,CAAC,UAAU,CAAC,IAAI,CACnB,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,KAAI,CAAC,QAAQ,EAAE,KAAI,CAAC,CACrD,CAAC;aACF;QACF,CAAC,CAAC,CAAC;;IAEJ,CAAC;IAED;;OAEG;IACI,4BAAI,GAAX;QACC,iBAAM,IAAI,WAAE,CAAC;IACd,CAAC;IAUD,sBAAW,kCAAO;QARlB;;;;;;;WAOG;aACH;YACC,OAAO,IAAI,CAAC,QAAQ,CAAC;QACtB,CAAC;;;OAAA;IAED;;;;OAIG;IACK,mCAAW,GAAnB,UAAoB,EAA0C;QAA9D,iBA4EC;QA3EA,IAAI,UAAU,GAAG,EAAE,CAAC,MAAM,CAAC;QAG3B,oCAAoC;QACpC,IAAI,IAAI,CAAC,aAAa,EAAE;YAEvB,IAAI,IAAI,CAAC,aAAa,KAAK,UAAU,EAAE;gBACtC,yBAAyB;gBACzB,IAAI,CAAC,cAAc,EAAE,CAAC;gBACtB,OAAO;aACP;YAED,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;gBAChD,2BAA2B;gBAC3B,iEAAiE;gBACjE,uCAAuC;gBACvC,IAAI,CAAC,cAAc,EAAE,CAAC;gBACtB,OAAO;aACP;YAED,8CAA8C;YAC9C,6DAA6D;YAC7D,IAAI,CAAC,eAAe,EAAE,CAAC;SAEvB;QAED,oBAAoB;QACpB,gDAAgD;QAChD,iDAAiD;QACjD,IAAI,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC;QAC/C,IAAI,iBAAiB,EAAE;YACtB,kBAAkB;YAClB,IAAI,OAAK,GAAU,EAAE,CAAC;YACtB,IAAI,CAAC,MAAM,GAAG,OAAK,CAAC;YACpB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAC,MAAM;gBACzB,IAAI,KAAI,CAAC,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC,EAAE;oBACrC,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;oBACtB,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;oBAEtB,OAAK,CAAC,IAAI,CAAC;wBACV,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,aAAa,EAAE,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,KAAI,CAAC,WAAW;wBACpF,MAAM,EAAE,MAAM;wBACd,CAAC,EAAE,CAAC;wBACJ,CAAC,EAAE,CAAC;wBACJ,EAAE,EAAE,CAAC;wBACL,EAAE,EAAE,CAAC;qBACL,CAAC,CAAC;oBAEH,cAAc;oBACd,KAAI,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE;wBACvC,MAAM,EAAE,MAAM;wBACd,SAAS,EAAE,MAAM,CAAC,EAAE;wBACpB,SAAS,EAAE,MAAM,CAAC,EAAE;qBACpB,CAAC,CAAC;oBACH,KAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;iBAC3B;YACF,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,eAAe,CAAC,OAAK,CAAC;iBACrD,KAAK,CAAC,WAAW,EAAE,OAAO,CAAC,YAAY,EAAE,CAAC,MAAM,CAAC,UAAS,CAAC;gBAC3D,OAAa,CAAE,CAAC,MAAM,CAAC;YACxB,CAAC,CAAC,CAAC;iBACF,EAAE,CAAC,MAAM,EAAE;gBACX,MAAM,CAAC,IAAI,CAAC,OAAK,EAAE,UAAC,IAAI;oBACvB,gDAAgD;oBAChD,gDAAgD;oBAChD,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC;oBAClC,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC;gBACnC,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;SACJ;QAED,aAAa;QACb,IAAI,CAAC,aAAa,GAAG,UAAU,CAAC;IAEjC,CAAC;IAED;;;;OAIG;IACK,iCAAS,GAAjB,UAAkB,EAAyC;QAA3D,iBAUC;QARA,mCAAmC;QACnC,IAAI,CAAC,cAAc,EAAE,CAAC;QAEtB,iBAAiB;QACjB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;YAC9C,KAAI,CAAC,eAAe,EAAE,CAAC;QACxB,CAAC,EAAE,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC,CAAC;IAE7B,CAAC;IAED;;;OAGG;IACK,qCAAa,GAArB,UAAsB,MAAc;QACnC,IAAI,MAAM,CAAC,cAAc,EAAE,EAAE;YAC5B,IAAI,SAAS,GAAI,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC;YACzC,OAAM,SAAS,EAAE;gBAChB,SAAS,CAAC,IAAI,EAAE,CAAC;gBACjB,SAAS,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC;aACpC;SACD;IACF,CAAC;IAED;;OAEG;IACK,uCAAe,GAAvB;QAAA,iBAqBC;QApBA,sCAAsC;QACtC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;QAChD,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;QAE9B,oDAAoD;QACpD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,UAAC,IAAI;YAC7B,IAAI,CAAC,MAAM,CAAC,OAAO,CAClB;gBACC,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,EAAE;gBACzB,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,EAAE;aACzB,EACD,KAAI,CAAC,MAAM,CAAC,YAAY,CAAC,kBAAkB,CAC3C,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,eAAe;QACf,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC;QAE/B,iBAAiB;QACjB,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;IAC9B,CAAC;IAED;;OAEG;IACK,sCAAc,GAAtB;QACC,IAAI,IAAI,CAAC,gBAAgB,EAAE;YAC1B,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC;SAChC;IACF,CAAC;IAED;;;;OAIG;IACK,gCAAQ,GAAhB,UAAiB,EAA2C;QAC3D,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE;YAC3C,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;SAC9B;IACF,CAAC;IAED;;;;;;;OAOG;IACK,+BAAO,GAAd,UAAe,MAAc,EAAE,MAAc;QAC5C,wEAAwE;QACxE,IAAI,MAAM,CAAC,OAAO,EAAE;YACnB,MAAM,CAAC,QAAQ,EAAE,CAAC;SAClB;QACD,IAAI,MAAM,CAAC,OAAO,EAAE;YACnB,MAAM,CAAC,QAAQ,EAAE,CAAC;SAClB;QAED,IAAI,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC;QACxB,IAAI,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC;QACxB,IAAI,GAAG,GAAG,GAAG,GAAG,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC;QACtD,IAAI,GAAG,GAAG,GAAG,GAAG,MAAM,CAAC,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC;QAEvD,IAAI,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC;QACxB,IAAI,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC;QACxB,IAAI,GAAG,GAAG,GAAG,GAAG,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC;QACtD,IAAI,GAAG,GAAG,GAAG,GAAG,MAAM,CAAC,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC;QAEvD,OAAO,CAAC,CAAC,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC;IAC5D,CAAC;IAGH,oBAAC;AAAD,CAAC,AA5TD,CAAmC,MAAM,GA4TxC;;AAED;;;;;GAKG;AACH,QAAQ,CAAC,iBAAiB,CAAC,eAAe,CAAC,GAAG,aAAa,CAAC","sourcesContent":["/**\r\n * Plugin which enables automatically exploding overlapping elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Plugin } from \"../../core/utils/Plugin\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n//import * as $math from \"../../core/utils/Math\";\r\nimport * as d3force from \"d3-force\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { Disposer, MultiDisposer, IDisposer } from \"../../core/utils/Disposer\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Optional } from \"../../core/utils/Type\";\r\nimport { ISpriteEvents, AMEvent } from \"../../core/SpriteEvents\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport interface IOverlapBusterTarget {\r\n\ttarget: Sprite,\r\n\toriginalX: number,\r\n\toriginalY: number\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A plugin which automatically groups [[PercenSeries]] slices that are smaller\r\n * than certain percent into one \"Other\" slice.\r\n *\r\n * By pushing an instance of [[Annnotation]] into `plugin` list of\r\n * any [[Chart]], it automatically applies the functionality.\r\n *\r\n * Example:\r\n *\r\n * ```TypeScript\r\n * let overlap = chart.plugins.push(new am4plugins_overlapBuster.OverlapBuster());\r\n * overlap.targets.push(bullet);\r\n * ```\r\n * ```JavaScript\r\n * let overlap = chart.plugins.push(new am4plugins_overlapBuster.OverlapBuster());\r\n * overlap.targets.push(bullet);\r\n * ```\r\n * ```JSON\r\n * // this plugin does not support JSON config\r\n * ```\r\n *\r\n * @since 4.6.2\r\n * @see {@link https://www.amcharts.com/docs/v4/tutorials/plugin-overlap-buster/} for more information and usage instructions\r\n */\r\nexport class OverlapBuster extends Plugin {\r\n\r\n\t/**\r\n\t * Overlap check targets.\r\n\t */\r\n\tprivate _targets: List<Sprite>;\r\n\r\n\t/**\r\n\t * List of elements that have been misplaced temporarily.\r\n\t */\r\n\tprivate _shiftedTargets: Dictionary<string, IOverlapBusterTarget>;\r\n\r\n\t/**\r\n\t * An object which is current center of the exploded cluster.\r\n\t */\r\n\tprivate _centerTarget: Optional<Sprite>;\r\n\r\n\t/**\r\n\t * How much of the obstructed object should be arevealed approximately.\r\n\t *\r\n\t * The number is relative (0-1). With `0` meaning the objstructed objects\r\n\t * won't be moved at all, `0.5` (default) will make at least half of the\r\n\t * object show up, and `1` to reveal object whole.\r\n\t * \r\n\t * @default 0.7\r\n\t */\r\n\tpublic revealRatio: number = 0.7;\r\n\r\n\t/**\r\n\t * A delay in milliseconds to postpone collapse of expanded items once\r\n\t * they are unhovered.\r\n\t *\r\n\t * @default 500\r\n\t */\r\n\tpublic collapseDelay: number = 500;\r\n\r\n\t/**\r\n\t * How big an area to check for overlapping elements should be checked in\r\n\t * relation to hovered items size.\r\n\t *\r\n\t * `1` (one) means it will affect only elements that are at least partially\r\n\t * overlapping with the target element.\r\n\t *\r\n\t * `2` (two) will check area twice as big.\r\n\t *\r\n\t * Etc.\r\n\t *\r\n\t * @default 2\r\n\t */\r\n\tpublic tolerance: number = 2;\r\n\r\n\t/**\r\n\t * Timeout reference.\r\n\t */\r\n\tprivate _collapseTimeout: IDisposer;\r\n\r\n\t/**\r\n\t * A reference to the `d3.Simulation` instance for fine-grained configuration\r\n\t * of node gravitational dynamics.\r\n\t *\r\n\t * @see {@link https://github.com/d3/d3-force#simulation} For more info\r\n\t */\r\n\tpublic d3forceSimulation: d3force.Simulation<{}, d3force.SimulationLinkDatum<d3force.SimulationNodeDatum>>;\r\n\r\n\t/**\r\n\t * List of affected nodes.\r\n\t */\r\n\tprotected _nodes: any[];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\t// Nothing to do here\r\n\t\tsuper();\r\n\r\n\t\t// Create simulation\r\n\t\tthis.d3forceSimulation = d3force.forceSimulation();\r\n\r\n\t\t// Init shifted targets list\r\n\t\tthis._shiftedTargets = new Dictionary<string, IOverlapBusterTarget>();\r\n\t\tthis._disposers.push(new Disposer(() => this._shiftedTargets));\r\n\r\n\t\t// Create list\r\n\t\tthis._targets = new List<Sprite>();\r\n\t\tthis._disposers.push(new Disposer(() => this.targets));\r\n\r\n\t\t// Events\r\n\t\tthis._targets.events.on(\"inserted\", (ev) => {\r\n\r\n\t\t\t// Set up hover events\r\n\t\t\tthis._disposers.push(new MultiDisposer([\r\n\t\t\t\tev.newValue.events.on(\"over\", this.handleHover, this),\r\n\t\t\t\tev.newValue.events.on(\"out\", this.handleOut, this)\r\n\t\t\t]));\r\n\r\n\t\t\t// We need this in order to auto-register clones of the template\r\n\t\t\tif (ev.newValue.isTemplate) {\r\n\t\t\t\tthis._disposers.push(\r\n\t\t\t\t\tev.newValue.events.once(\"ready\", this.register, this)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes plugin.\r\n\t */\r\n\tpublic init() {\r\n\t\tsuper.init();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of objects to check for overlapping.\r\n\t *\r\n\t * If you push a list template into this, e.g. bullet from a series, all\r\n\t * elements created from that templat will automatically end up in this list.\r\n\t * \r\n\t * @return List of target objects\r\n\t */\r\n\tpublic get targets(): List<Sprite> {\r\n\t\treturn this._targets;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles hover event on a target element.\r\n\t * \r\n\t * @param  ev  Event\r\n\t */\r\n\tprivate handleHover(ev: AMEvent<Sprite, ISpriteEvents>[\"over\"]): void {\r\n\t\tlet mainTarget = ev.target;\r\n\r\n\r\n\t\t// Collapse currently exploded items\r\n\t\tif (this._centerTarget) {\r\n\r\n\t\t\tif (this._centerTarget === mainTarget) {\r\n\t\t\t\t// Same item. Do nothing.\r\n\t\t\t\tthis.cancelCollapse();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (this._shiftedTargets.hasKey(mainTarget.uid)) {\r\n\t\t\t\t// Currently expanded item.\r\n\t\t\t\t// Clear collapse timeout which probably is already ticking after\r\n\t\t\t\t// hovering out of the previous center.\r\n\t\t\t\tthis.cancelCollapse();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Some totally different cluster was hovered.\r\n\t\t\t// Initiate immediate collapse of currently exploded cluster.\r\n\t\t\tthis.collapseCurrent();\r\n\r\n\t\t}\r\n\r\n\t\t// Set up simulation\r\n\t\t//let w = $math.max(50, this.target.innerWidth);\r\n\t\t//let h = $math.max(50, this.target.innerHeight);\r\n\t\tlet d3forceSimulation = this.d3forceSimulation;\r\n\t\tif (d3forceSimulation) {\r\n\t\t\t// Assemble ojects\r\n\t\t\tlet nodes: any[] = [];\r\n\t\t\tthis._nodes = nodes;\r\n\t\t\tthis._targets.each((target) => {\r\n\t\t\t\tif (this.hitTest(mainTarget, target)) {\r\n\t\t\t\t\tlet x = target.pixelX;\r\n\t\t\t\t\tlet y = target.pixelY;\r\n\r\n\t\t\t\t\tnodes.push({\r\n\t\t\t\t\t\tradius: Math.max(target.measuredWidth, target.measuredHeight) / 2 * this.revealRatio,\r\n\t\t\t\t\t\ttarget: target,\r\n\t\t\t\t\t\tx: x,\r\n\t\t\t\t\t\ty: y,\r\n\t\t\t\t\t\tox: x,\r\n\t\t\t\t\t\toy: y\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// Log shifted\r\n\t\t\t\t\tthis._shiftedTargets.setKey(target.uid, {\r\n\t\t\t\t\t\ttarget: target,\r\n\t\t\t\t\t\toriginalX: target.dx,\r\n\t\t\t\t\t\toriginalY: target.dy\r\n\t\t\t\t\t});\r\n\t\t\t\t\tthis.stopAnimation(target);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.d3forceSimulation = d3force.forceSimulation(nodes)\r\n\t\t\t\t.force('collision', d3force.forceCollide().radius(function(d) {\r\n\t\t\t\t\treturn (<any>d).radius;\r\n\t\t\t\t}))\r\n\t\t\t\t.on(\"tick\", () => {\r\n\t\t\t\t\t$array.each(nodes, (node) => {\r\n\t\t\t\t\t\t// node.target.dx = node.target.pixelX - node.x;\r\n\t\t\t\t\t\t// node.target.dy = node.target.pixelY - node.y;\r\n\t\t\t\t\t\tnode.target.dx = node.x - node.ox;\r\n\t\t\t\t\t\tnode.target.dy = node.y - node.oy;\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Set center\r\n\t\tthis._centerTarget = mainTarget;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handles out event on a target element.\r\n\t * \r\n\t * @param  ev  Event\r\n\t */\r\n\tprivate handleOut(ev: AMEvent<Sprite, ISpriteEvents>[\"out\"]): void {\r\n\r\n\t\t// Dispose old timeout if necessary\r\n\t\tthis.cancelCollapse();\r\n\r\n\t\t// Delay collapse\r\n\t\tthis._collapseTimeout = this.target.setTimeout(() => {\r\n\t\t\tthis.collapseCurrent();\r\n\t\t}, this.collapseDelay + 10);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Stops object's animations.\r\n\t * @param  target  Target\r\n\t */\r\n\tprivate stopAnimation(target: Sprite): void {\r\n\t\tif (target.isInTransition()) {\r\n\t\t\tlet animation =  target.animations.pop();\r\n\t\t\twhile(animation) {\r\n\t\t\t\tanimation.kill();\r\n\t\t\t\tanimation = target.animations.pop();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Collapses currently expanded cluster of objects.\r\n\t */\r\n\tprivate collapseCurrent(): void {\r\n\t\t// Stop all directed force simulations\r\n\t\tthis.d3forceSimulation.force(\"collision\", null);\r\n\t\tthis.d3forceSimulation.stop();\r\n\r\n\t\t// Animate elements back to their original positions\r\n\t\t$array.each(this._nodes, (node) => {\r\n\t\t\tnode.target.animate(\r\n\t\t\t\t[\r\n\t\t\t\t\t{ property: \"dx\", to: 0 },\r\n\t\t\t\t\t{ property: \"dy\", to: 0 }\r\n\t\t\t\t],\r\n\t\t\t\tthis.target.defaultState.transitionDuration\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\t// Reset center\r\n\t\tthis._centerTarget = undefined;\r\n\r\n\t\t// Clear the list\r\n\t\tthis._shiftedTargets.clear();\r\n\t}\r\n\r\n\t/**\r\n\t * Cancels the collapse timeout.\r\n\t */\r\n\tprivate cancelCollapse(): void {\r\n\t\tif (this._collapseTimeout) {\r\n\t\t\tthis._collapseTimeout.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Registers new element.\r\n\t * \r\n\t * @param  ev  Event\r\n\t */\r\n\tprivate register(ev: AMEvent<Sprite, ISpriteEvents>[\"ready\"]): void {\r\n\t\tif (this._targets.indexOf(ev.target) == -1) {\r\n\t\t\tthis._targets.push(ev.target);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if the this element has any of its parts overlapping with another\r\n\t * element.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param sprite  Second element to test again\r\n\t * @return Overlapping?\r\n\t */\r\n\t\tpublic hitTest(target: Sprite, sprite: Sprite): boolean {\r\n\t\t\t// validate, otherwise we will not know measuredWidth and measuredHeight\r\n\t\t\tif (target.invalid) {\r\n\t\t\t\ttarget.validate();\r\n\t\t\t}\r\n\t\t\tif (target.invalid) {\r\n\t\t\t\ttarget.validate();\r\n\t\t\t}\r\n\r\n\t\t\tlet ax1 = target.pixelX;\r\n\t\t\tlet ay1 = target.pixelY;\r\n\t\t\tlet ax2 = ax1 + target.measuredWidth * this.tolerance;\r\n\t\t\tlet ay2 = ay1 + target.measuredHeight * this.tolerance;\r\n\r\n\t\t\tlet bx1 = sprite.pixelX;\r\n\t\t\tlet by1 = sprite.pixelY;\r\n\t\t\tlet bx2 = bx1 + sprite.measuredWidth * this.tolerance;\r\n\t\t\tlet by2 = by1 + sprite.measuredHeight * this.tolerance;\r\n\r\n\t\t\treturn !(bx1 > ax2 || bx2 < ax1 || by1 > ay2 || by2 < ay1);\r\n\t\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OverlapBuster\"] = OverlapBuster;\r\n"]}