{"ast":null,"code":"/**\r\n * Chord diagram module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { FlowDiagram, FlowDiagramDataItem } from \"./FlowDiagram\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { Container } from \"../../core/Container\";\nimport { registry } from \"../../core/Registry\";\nimport { ChordNode } from \"../elements/ChordNode\";\nimport { ChordLink } from \"../elements/ChordLink\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $utils from \"../../core/utils/Utils\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n//@todo rearange notes after dragged\n\n/**\r\n * Defines a [[DataItem]] for [[ChordDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar ChordDiagramDataItem =\n/** @class */\nfunction (_super) {\n  __extends(ChordDiagramDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ChordDiagramDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"ChordDiagramDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return ChordDiagramDataItem;\n}(FlowDiagramDataItem);\n\nexport { ChordDiagramDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a Chord Diagram chart.\r\n *\r\n * @see {@link IChordDiagramEvents} for a list of available Events\r\n * @see {@link IChordDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/chord-diagram/} for documentation\r\n * @important\r\n */\n\nvar ChordDiagram =\n/** @class */\nfunction (_super) {\n  __extends(ChordDiagram, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ChordDiagram() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * [valueAngle description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n\n\n    _this.valueAngle = 0;\n    _this.className = \"ChordDiagram\";\n    _this.startAngle = -90;\n    _this.endAngle = 270;\n    _this.radius = percent(80);\n    _this.innerRadius = -15;\n    _this.nodePadding = 5;\n\n    var chordContainer = _this.chartContainer.createChild(Container);\n\n    chordContainer.align = \"center\";\n    chordContainer.valign = \"middle\";\n    chordContainer.shouldClone = false;\n    chordContainer.layout = \"absolute\";\n    _this.chordContainer = chordContainer;\n    _this.nodesContainer.parent = chordContainer;\n    _this.linksContainer.parent = chordContainer;\n\n    _this.chartContainer.events.on(\"maxsizechanged\", _this.invalidate, _this, false); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Redraws the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ChordDiagram.prototype.validate = function () {\n    var _this = this;\n\n    var chartContainer = this.chartContainer;\n    var endAngle = this.endAngle;\n    var startAngle = this.startAngle + this.nodePadding / 2;\n    var rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\n    var innerRect = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n    rect = $math.getCommonRectangle([rect, innerRect]);\n    var maxRadius = Math.min(chartContainer.innerWidth / rect.width, chartContainer.innerHeight / rect.height);\n\n    if (!$type.isNumber(maxRadius)) {\n      maxRadius = 0;\n    }\n\n    var radius = $utils.relativeRadiusToValue(this.radius, maxRadius);\n    var pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius, true);\n    var total = this.dataItem.values.value.sum;\n    var count = 0;\n    var newTotal = 0;\n    $iter.each(this._sorted, function (strNode) {\n      var node = strNode[1];\n\n      _this.getNodeValue(node);\n\n      count++;\n      var value = node.total;\n\n      if (node.total / total < _this.minNodeSize) {\n        value = total * _this.minNodeSize;\n      }\n\n      newTotal += value;\n    });\n    this.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / newTotal;\n    $iter.each(this._sorted, function (strNode) {\n      var node = strNode[1];\n      var slice = node.slice;\n      slice.radius = radius;\n      slice.innerRadius = pixelInnerRadius;\n      var value = node.total;\n\n      if (node.total / total < _this.minNodeSize) {\n        value = total * _this.minNodeSize;\n      }\n\n      node.adjustedTotal = value;\n      var arc;\n\n      if (_this.nonRibbon) {\n        arc = (endAngle - _this.startAngle) / count - _this.nodePadding;\n      } else {\n        arc = _this.valueAngle * value;\n      }\n\n      slice.arc = arc;\n      slice.startAngle = startAngle;\n      node.trueStartAngle = startAngle;\n      node.parent = _this.nodesContainer;\n      node.validate(); // otherwise flickers - nodes are already created, but not yet positioned etc.\n\n      startAngle += arc + _this.nodePadding;\n    });\n    this.chordContainer.definedBBox = {\n      x: radius * rect.x,\n      y: radius * rect.y,\n      width: radius * rect.width,\n      height: radius * rect.height\n    };\n    this.chordContainer.invalidateLayout();\n\n    _super.prototype.validate.call(this);\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  ChordDiagram.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this); // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Chord diagram\");\n    }\n  };\n  /**\r\n   * Creates and returns a new data item.\r\n   *\r\n   * @return Data item\r\n   */\n\n\n  ChordDiagram.prototype.createDataItem = function () {\n    return new ChordDiagramDataItem();\n  };\n\n  Object.defineProperty(ChordDiagram.prototype, \"startAngle\", {\n    /**\r\n     * @return Start angle (degrees)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startAngle\");\n    },\n\n    /**\r\n     * Starting angle of the Radar face. (degrees)\r\n     *\r\n     * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n     * top center. (at -90 degrees)\r\n     *\r\n     * You can use `startAngle` to change this setting.\r\n     *\r\n     * E.g. setting this to 0 will make the radial axis start horizontally to\r\n     * the right, as opposed to vertical.\r\n     *\r\n     * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n     * needs to be 360.\r\n     *\r\n     * However, it's **not** necessary to do so. You can set those to lesser\r\n     * numbers, to create semi-circles.\r\n     *\r\n     * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n     * looks like a quarter of a circle.\r\n     *\r\n     * @default -90\r\n     * @param value  Start angle (degrees)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"startAngle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ChordDiagram.prototype, \"endAngle\", {\n    /**\r\n     * @return End angle (degrees)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endAngle\");\n    },\n\n    /**\r\n     * Starting angle of the Radar face. (degrees)\r\n     *\r\n     * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n     * where it has started, forming a full 360 circle. (at 270 degrees)\r\n     *\r\n     * You can use `endAngle` to end the circle somewhere else.\r\n     *\r\n     * E.g. setting this to 180 will make the radar face end at horizontal line\r\n     * to the left off the center.\r\n     *\r\n     * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n     * needs to be 360.\r\n     *\r\n     * However, it's **not** necessary to do so. You can set those to lesser\r\n     * numbers, to create semi-circles.\r\n     *\r\n     * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n     * looks like a quarter of a circle.\r\n     *\r\n     * @default -90\r\n     * @param value  End angle (degrees)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"endAngle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ChordDiagram.prototype, \"radius\", {\n    /**\r\n     * @return Outer radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n\n    /**\r\n     * Outer radius of the Radar face.\r\n     *\r\n     * This can either be in absolute pixel value, or relative [[Percent]].\r\n     *\r\n     * @param value  Outer radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"radius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ChordDiagram.prototype, \"innerRadius\", {\n    /**\r\n     * @return Inner radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n\n    /**\r\n     * Inner radius of the Chord nodes.\r\n     *\r\n     * This can either be in absolute pixel value, or relative [[Percent]].\r\n     *\r\n     * @param value  Outer radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ChordDiagram.prototype, \"nonRibbon\", {\n    /**\r\n     * @return Non-ribbon\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"nonRibbon\");\n    },\n\n    /**\r\n     *\r\n     * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.\r\n     *\r\n     * @param value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"nonRibbon\", value, true);\n      this.links.template.middleLine.strokeOpacity = 1;\n      this.links.template.link.fillOpacity = 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  ChordDiagram.prototype.createNode = function () {\n    var node = new ChordNode();\n\n    this._disposers.push(node);\n\n    return node;\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  ChordDiagram.prototype.createLink = function () {\n    var link = new ChordLink();\n\n    this._disposers.push(link);\n\n    return link;\n  };\n\n  return ChordDiagram;\n}(FlowDiagram);\n\nexport { ChordDiagram };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"ChordDiagram\"] = ChordDiagram;","map":{"version":3,"sources":["../../../../../src/.internal/charts/types/ChordDiagram.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Chord diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DictionaryTemplate } from \"../../core/utils/Dictionary\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ChordNode } from \"../elements/ChordNode\";\r\nimport { ChordLink } from \"../elements/ChordLink\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ChordDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ChordDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: ChordDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t */\r\n\tpublic fromNode: ChordNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t */\r\n\tpublic toNode: ChordNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[ChordDiagram]]\r\n */\r\nexport interface IChordDiagramProperties extends IFlowDiagramProperties {\r\n\t/**\r\n\t * Radius of the Chord. Absolute or relative.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes. Absolute or relative. Negative value means that the inner radius will be calculated from the radius, not from the center.\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * If you set this to true, all the lines will be of the same width.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tnonRibbon?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordDiagramAdapters extends IFlowDiagramAdapters, IChordDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Chord Diagram chart.\r\n *\r\n * @see {@link IChordDiagramEvents} for a list of available Events\r\n * @see {@link IChordDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/chord-diagram/} for documentation\r\n * @important\r\n */\r\nexport class ChordDiagram extends FlowDiagram {\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IChordDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChordDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChordDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChordDiagramEvents;\r\n\r\n\t/**\r\n\t * A list of chart's Chord nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, ChordNode>}\r\n\t */\r\n\tpublic nodes: DictionaryTemplate<string, ChordNode>;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, ChordNode]>;\r\n\r\n\t/**\r\n\t * [valueAngle description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic valueAngle: number = 0;\r\n\r\n\t/**\r\n\t * A container for chord elemens.\r\n\t */\r\n\tpublic chordContainer:Container;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node:ChordNode;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagram\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\r\n\t\tthis.innerRadius = - 15;\r\n\r\n\t\tthis.nodePadding = 5;\r\n\r\n\t\tlet chordContainer = this.chartContainer.createChild(Container);\r\n\t\tchordContainer.align = \"center\";\r\n\t\tchordContainer.valign = \"middle\";\r\n\t\tchordContainer.shouldClone = false;\r\n\t\tchordContainer.layout = \"absolute\";\r\n\t\tthis.chordContainer = chordContainer;\r\n\r\n\t\tthis.nodesContainer.parent = chordContainer;\r\n\t\tthis.linksContainer.parent = chordContainer;\r\n\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", this.invalidate, this, false);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tlet chartContainer = this.chartContainer;\r\n\r\n\t\tlet endAngle = this.endAngle;\r\n\t\tlet startAngle = this.startAngle + this.nodePadding / 2;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(chartContainer.innerWidth / rect.width, chartContainer.innerHeight / rect.height);\r\n\r\n\t\tif(!$type.isNumber(maxRadius)){\r\n\t\t\tmaxRadius = 0;\r\n\t\t}\r\n\r\n\t\tlet radius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\t\tlet pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius, true);\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\t\tlet count = 0;\r\n\r\n\t\tlet newTotal = 0;\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t\tcount++;\r\n\t\t\tlet value = node.total;\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\t\t\tnewTotal += value;\r\n\t\t});\r\n\r\n\t\tthis.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / newTotal;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet slice = node.slice;\r\n\r\n\t\t\tslice.radius = radius;\r\n\t\t\tslice.innerRadius = pixelInnerRadius;\r\n\r\n\t\t\tlet value = node.total;\r\n\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tnode.adjustedTotal = value;\r\n\r\n\t\t\tlet arc: number;\r\n\t\t\tif (this.nonRibbon) {\r\n\t\t\t\tarc = (endAngle - this.startAngle) / count - this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tarc = this.valueAngle * value;\r\n\t\t\t}\r\n\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.startAngle = startAngle;\r\n\t\t\tnode.trueStartAngle = startAngle;\r\n\t\t\tnode.parent = this.nodesContainer;\r\n\t\t\tnode.validate(); // otherwise flickers - nodes are already created, but not yet positioned etc.\r\n\t\t\tstartAngle += arc + this.nodePadding;\r\n\t\t})\r\n\r\n\t\tthis.chordContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.chordContainer.invalidateLayout();\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Chord diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ChordDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set nonRibbon(value: boolean) {\r\n\t\tthis.setPropertyValue(\"nonRibbon\", value, true);\r\n\t\tthis.links.template.middleLine.strokeOpacity = 1;\r\n\t\tthis.links.template.link.fillOpacity = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Non-ribbon\r\n\t */\r\n\tpublic get nonRibbon(): boolean {\r\n\t\treturn this.getPropertyValue(\"nonRibbon\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode():this[\"_node\"]{\r\n\t\tlet node = new ChordNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink():this[\"_link\"]{\r\n\t\tlet link = new ChordLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordDiagram\"] = ChordDiagram;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}