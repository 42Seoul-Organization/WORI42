{"ast":null,"code":"/**\r\n * Pie chart module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { PercentChart, PercentChartDataItem } from \"./PercentChart\";\nimport { percent, Percent } from \"../../core/utils/Percent\";\nimport { PieSeries } from \"../series/PieSeries\";\nimport { registry } from \"../../core/Registry\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[PieChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar PieChartDataItem =\n/** @class */\nfunction (_super) {\n  __extends(PieChartDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function PieChartDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"PieChartDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return PieChartDataItem;\n}(PercentChartDataItem);\n\nexport { PieChartDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a Pie chart.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"PieChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"PieSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czechia\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"PieChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChartEvents} for a list of available Events\r\n * @see {@link IPieChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\n\nvar PieChart =\n/** @class */\nfunction (_super) {\n  __extends(PieChart, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function PieChart() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"PieChart\"; // Set defaults\n\n    _this.innerRadius = 0;\n    _this.radius = percent(80);\n    _this.align = \"none\";\n    _this.valign = \"none\";\n    _this.startAngle = -90;\n    _this.endAngle = 270;\n    var seriesContainer = _this.seriesContainer;\n    seriesContainer.isMeasured = true;\n    seriesContainer.valign = \"middle\";\n    seriesContainer.align = \"center\";\n    seriesContainer.layout = \"absolute\";\n    seriesContainer.width = undefined;\n    seriesContainer.height = undefined; // so that the pie is always drawn, even the legend wants all the space\n\n    _this.chartContainer.minHeight = 50;\n    _this.chartContainer.minWidth = 50;\n\n    _this.chartContainer.events.on(\"maxsizechanged\", _this.updateRadius, _this, false); // need this for the chart to change radius if legend is removed/disabled\n    // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  PieChart.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this); // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Pie chart\");\n    }\n  };\n  /**\r\n   * (Re)validates the chart, causing it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  PieChart.prototype.validateLayout = function () {\n    _super.prototype.validateLayout.call(this);\n\n    this.updateRadius();\n  };\n  /**\r\n   * Decorates a new [[Series]] object with required parameters when it is\r\n   * added to the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n\n\n  PieChart.prototype.handleSeriesAdded = function (event) {\n    _super.prototype.handleSeriesAdded.call(this, event);\n\n    this._chartPixelRadius = undefined;\n    this.updateSeriesAngles();\n  };\n\n  PieChart.prototype.updateSeriesAngles = function () {\n    var _this = this;\n\n    this.series.each(function (series) {\n      series._startAngleInternal = _this.startAngle;\n      series._endAngleInternal = _this.endAngle; //series.defaultState.properties.startAngle = this.startAngle;\n      //series.defaultState.properties.endAngle = this.endAngle;\n    });\n  };\n  /**\r\n   * Recalculates pie's radius, based on a number of criteria.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  PieChart.prototype.updateRadius = function () {\n    var chartCont = this.chartContainer;\n    var rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\n    var innerRect = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n    var innerRadius = this.innerRadius;\n\n    if (innerRadius instanceof Percent) {\n      innerRect = $math.getArcRect(this.startAngle, this.endAngle, innerRadius.value);\n    } // @todo handle this when innerRadius set in pixels (do it for radar also)\n\n\n    rect = $math.getCommonRectangle([rect, innerRect]);\n    var maxRadius = Math.min(chartCont.innerWidth / rect.width, chartCont.innerHeight / rect.height);\n\n    if (!$type.isNumber(maxRadius)) {\n      maxRadius = 0;\n    }\n\n    var chartRadius = $utils.relativeRadiusToValue(this.radius, maxRadius);\n    var chartPixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, maxRadius);\n    var seriesRadius = (chartRadius - chartPixelInnerRadius) / this.series.length;\n\n    if (chartRadius != this._chartPixelRadius || chartPixelInnerRadius != this._chartPixelInnerRadius) {\n      this._chartPixelRadius = chartRadius;\n      this._chartPixelInnerRadius = chartPixelInnerRadius; //@todo: make it possible to set series radius in percent\n\n      $iter.each($iter.indexed(this.series.iterator()), function (a) {\n        var i = a[0];\n        var series = a[1];\n        var radius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.radius, chartRadius - chartPixelInnerRadius);\n        var innerRadius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.innerRadius, chartRadius - chartPixelInnerRadius);\n\n        if (!$type.isNumber(radius)) {\n          radius = chartPixelInnerRadius + seriesRadius * (i + 1);\n        }\n\n        if (!$type.isNumber(innerRadius)) {\n          innerRadius = chartPixelInnerRadius + seriesRadius * i;\n        }\n\n        series.pixelRadius = radius;\n        series.pixelInnerRadius = innerRadius;\n      });\n      this.seriesContainer.definedBBox = {\n        x: chartRadius * rect.x,\n        y: chartRadius * rect.y,\n        width: chartRadius * rect.width,\n        height: chartRadius * rect.height\n      };\n      this.seriesContainer.invalidateLayout();\n      this.bulletsContainer.x = this.seriesContainer.x;\n      this.bulletsContainer.y = this.seriesContainer.y;\n    }\n  };\n\n  Object.defineProperty(PieChart.prototype, \"radius\", {\n    /**\r\n     * @return Radius (px or relative)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n\n    /**\r\n     * Sets radius of the pie chart.\r\n     *\r\n     * Setting to a number will mean a fixed pixel radius.\r\n     *\r\n     * Setting to an instance of [[Percent]] will mean a relative radius to\r\n     * available space.\r\n     *\r\n     * E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * // Set pie chart to be at 50% of the available space\r\n     * pieChart.radius = am4core.percent.percent(50);\r\n     * ```\r\n     * ```JavaScript\r\n     * // Set pie chart to be at 50% of the available space\r\n     * pieChart.radius = am4core.percent.percent(50);\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // Set pie chart to be at 50% of the available space\r\n     *   \"radius\": \"50%\"\r\n     * }\r\n     * ```\r\n     *\r\n     * @default 80%\r\n     * @param value  Radius (px or relative)\r\n     */\n    set: function (value) {\n      if (this.setPercentProperty(\"radius\", value, true, false, 10, false)) {\n        this.invalidateLayout();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PieChart.prototype, \"innerRadius\", {\n    /**\r\n     * @return Relative inner radius (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n\n    /**\r\n     * Sets relative inner radius (to create a donut chart).\r\n     *\r\n     * Setting to a number will mean a fixed pixel radius.\r\n     *\r\n     * Setting to an instance of [[Percent]] will mean a relative radius to\r\n     * available space.\r\n     *\r\n     * NOTE: it's not related to `radius`.\r\n     *\r\n     * E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * // Set pie chart to be at 50% of the available space\r\n     * pieChart.innerRadius = am4core.percent.percent(50);\r\n     * ```\r\n     * ```JavaScript\r\n     * // Set pie chart to be at 50% of the available space\r\n     * pieChart.innerRadius = am4core.percent.percent(50);\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // Set pie chart to be at 50% of the available space\r\n     *   \"innerRadius\": \"50%\"\r\n     * }\r\n     * ```\r\n     *\r\n     * @default 0\r\n     * @param value  Relative inner radius (0-1)\r\n     * @todo Setting things like `innerRadius` modifies `slice.radius` and it then looks like it is not the same value as in default state\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates a new [[PieSeries]].\r\n   *\r\n   * @return New series\r\n   */\n\n  PieChart.prototype.createSeries = function () {\n    return new PieSeries();\n  };\n\n  Object.defineProperty(PieChart.prototype, \"startAngle\", {\n    /**\r\n     * @return Start angle (degrees)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startAngle\");\n    },\n\n    /**\r\n     * Starting angle of the Pie circle. (degrees)\r\n     *\r\n     * Normally, a pie chart begins (the left side of the first slice is drawn)\r\n     * at the top center. (at -90 degrees)\r\n     *\r\n     * You can use `startAngle` to change this setting.\r\n     *\r\n     * E.g. setting this to 0 will make the first slice be drawn to the right.\r\n     *\r\n     * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n     * needs to be 360.\r\n     *\r\n     * However, it's **not** necessary to do so. You can set to those lesser\r\n     * numbers, to create semi-circles.\r\n     *\r\n     * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n     * looks like a quarter of a circle.\r\n     *\r\n     * NOTE: This setting is not supported in a 3D pie chart.\r\n     *\r\n     * @default -90\r\n     * @param value  Start angle (degrees)\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"startAngle\", value)) {\n        this.updateRadius();\n        this.updateSeriesAngles();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PieChart.prototype, \"endAngle\", {\n    /**\r\n     * @return End angle (degrees)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endAngle\");\n    },\n\n    /**\r\n     * End angle of the Pie circle. (degrees)\r\n     *\r\n     * Normally, a pie chart ends (the right side of the last slice is drawn)\r\n     * at the top center. (at 270 degrees)\r\n     *\r\n     * You can use `endAngle` to change this setting.\r\n     *\r\n     * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n     * needs to be 360.\r\n     *\r\n     * However, it's **not** necessary to do so. You can set to those lesser\r\n     * numbers, to create semi-circles.\r\n     *\r\n     * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n     * looks like a quarter of a circle.\r\n     *\r\n     * NOTE: This setting is not supported in a 3D pie chart.\r\n     *\r\n     * @default 270\r\n     * @param value  End angle (degrees)\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"endAngle\", value)) {\n        this.updateRadius();\n        this.updateSeriesAngles();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PieChart;\n}(PercentChart);\n\nexport { PieChart };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"PieChart\"] = PieChart;\nregistry.registeredClasses[\"PieChartDataItem\"] = PieChartDataItem;","map":{"version":3,"sources":["../../../../../src/.internal/charts/types/PieChart.ts"],"names":[],"mappings":"AAAA;;;;AAIA;;;;;;;AAMA,SAAS,YAAT,EAAqH,oBAArH,QAAiJ,gBAAjJ;AACA,SAAS,OAAT,EAAkB,OAAlB,QAAiC,0BAAjC;AACA,SAAS,SAAT,QAA0B,qBAA1B;AAGA,SAAS,QAAT,QAAyB,qBAAzB;AACA,OAAO,KAAK,KAAZ,MAAuB,2BAAvB;AACA,OAAO,KAAK,MAAZ,MAAwB,wBAAxB;AACA,OAAO,KAAK,KAAZ,MAAuB,uBAAvB;AACA,OAAO,KAAK,KAAZ,MAAuB,uBAAvB;AAEA;;;;;;;AAOA;;;;;;AAKA,IAAA,gBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAsC,EAAA,SAAA,CAAA,gBAAA,EAAA,MAAA,CAAA;AAOrC;;;;;AAGA,WAAA,gBAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADR;;AAEC,IAAA,KAAI,CAAC,SAAL,GAAiB,kBAAjB;;AACA,IAAA,KAAI,CAAC,UAAL;;;AACA;;AAEF,SAAA,gBAAA;AAAC,CAhBD,CAAsC,oBAAtC,CAAA;;;AA2EA;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoFA,IAAA,QAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA8B,EAAA,SAAA,CAAA,QAAA,EAAA,MAAA,CAAA;AA+B7B;;;;;AAGA,WAAA,QAAA,GAAA;AAAA,QAAA,KAAA,GAEC;AACA,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IAHR;;AAIC,IAAA,KAAI,CAAC,SAAL,GAAiB,UAAjB,CAJD,CAMC;;AACA,IAAA,KAAI,CAAC,WAAL,GAAmB,CAAnB;AACA,IAAA,KAAI,CAAC,MAAL,GAAc,OAAO,CAAC,EAAD,CAArB;AACA,IAAA,KAAI,CAAC,KAAL,GAAa,MAAb;AACA,IAAA,KAAI,CAAC,MAAL,GAAc,MAAd;AAEA,IAAA,KAAI,CAAC,UAAL,GAAkB,CAAC,EAAnB;AACA,IAAA,KAAI,CAAC,QAAL,GAAgB,GAAhB;AAEA,QAAI,eAAe,GAAG,KAAI,CAAC,eAA3B;AACA,IAAA,eAAe,CAAC,UAAhB,GAA6B,IAA7B;AACA,IAAA,eAAe,CAAC,MAAhB,GAAyB,QAAzB;AACA,IAAA,eAAe,CAAC,KAAhB,GAAwB,QAAxB;AACA,IAAA,eAAe,CAAC,MAAhB,GAAyB,UAAzB;AACA,IAAA,eAAe,CAAC,KAAhB,GAAwB,SAAxB;AACA,IAAA,eAAe,CAAC,MAAhB,GAAyB,SAAzB,CArBD,CAuBC;;AACA,IAAA,KAAI,CAAC,cAAL,CAAoB,SAApB,GAAgC,EAAhC;AACA,IAAA,KAAI,CAAC,cAAL,CAAoB,QAApB,GAA+B,EAA/B;;AAEA,IAAA,KAAI,CAAC,cAAL,CAAoB,MAApB,CAA2B,EAA3B,CAA8B,gBAA9B,EAAgD,KAAI,CAAC,YAArD,EAAmE,KAAnE,EAAyE,KAAzE,EA3BD,CA2BkF;AAEjF;;;AACA,IAAA,KAAI,CAAC,UAAL;;;AACA;AAED;;;;;;AAIU,EAAA,QAAA,CAAA,SAAA,CAAA,qBAAA,GAAV,YAAA;AAEC,IAAA,MAAA,CAAA,SAAA,CAAM,qBAAN,CAA2B,IAA3B,CAA2B,IAA3B,EAFD,CAIC;AACA;;;AACA,QAAI,CAAC,KAAK,CAAC,QAAN,CAAe,KAAK,WAApB,CAAL,EAAuC;AACtC,WAAK,WAAL,GAAmB,KAAK,QAAL,CAAc,SAAd,CAAwB,WAAxB,CAAnB;AACA;AACD,GATS;AAWV;;;;;;;AAKO,EAAA,QAAA,CAAA,SAAA,CAAA,cAAA,GAAP,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,cAAN,CAAoB,IAApB,CAAoB,IAApB;;AACA,SAAK,YAAL;AACA,GAHM;AAKP;;;;;;;;;AAOO,EAAA,QAAA,CAAA,SAAA,CAAA,iBAAA,GAAP,UAAyB,KAAzB,EAAkE;AACjE,IAAA,MAAA,CAAA,SAAA,CAAM,iBAAN,CAAuB,IAAvB,CAAuB,IAAvB,EAAwB,KAAxB;;AACA,SAAK,iBAAL,GAAyB,SAAzB;AACA,SAAK,kBAAL;AACA,GAJM;;AAMG,EAAA,QAAA,CAAA,SAAA,CAAA,kBAAA,GAAV,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACC,SAAK,MAAL,CAAY,IAAZ,CAAiB,UAAC,MAAD,EAAO;AACvB,MAAA,MAAM,CAAC,mBAAP,GAA6B,KAAI,CAAC,UAAlC;AACA,MAAA,MAAM,CAAC,iBAAP,GAA2B,KAAI,CAAC,QAAhC,CAFuB,CAGvB;AACA;AACA,KALD;AAMA,GAPS;AASV;;;;;;;AAKO,EAAA,QAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AAEC,QAAI,SAAS,GAAG,KAAK,cAArB;AAEA,QAAI,IAAI,GAAG,KAAK,CAAC,UAAN,CAAiB,KAAK,UAAtB,EAAkC,KAAK,QAAvC,EAAiD,CAAjD,CAAX;AACA,QAAI,SAAS,GAAe;AAAE,MAAA,CAAC,EAAE,CAAL;AAAQ,MAAA,CAAC,EAAE,CAAX;AAAc,MAAA,KAAK,EAAE,CAArB;AAAwB,MAAA,MAAM,EAAE;AAAhC,KAA5B;AAEA,QAAI,WAAW,GAAG,KAAK,WAAvB;;AAEA,QAAI,WAAW,YAAY,OAA3B,EAAoC;AACnC,MAAA,SAAS,GAAG,KAAK,CAAC,UAAN,CAAiB,KAAK,UAAtB,EAAkC,KAAK,QAAvC,EAAiD,WAAW,CAAC,KAA7D,CAAZ;AACA,KAXF,CAYC;;;AAEA,IAAA,IAAI,GAAG,KAAK,CAAC,kBAAN,CAAyB,CAAC,IAAD,EAAO,SAAP,CAAzB,CAAP;AAEA,QAAI,SAAS,GAAG,IAAI,CAAC,GAAL,CAAS,SAAS,CAAC,UAAV,GAAuB,IAAI,CAAC,KAArC,EAA4C,SAAS,CAAC,WAAV,GAAwB,IAAI,CAAC,MAAzE,CAAhB;;AAEA,QAAG,CAAC,KAAK,CAAC,QAAN,CAAe,SAAf,CAAJ,EAA8B;AAC7B,MAAA,SAAS,GAAG,CAAZ;AACA;;AAED,QAAI,WAAW,GAAG,MAAM,CAAC,qBAAP,CAA6B,KAAK,MAAlC,EAA0C,SAA1C,CAAlB;AAEA,QAAI,qBAAqB,GAAG,MAAM,CAAC,qBAAP,CAA6B,KAAK,WAAlC,EAA+C,SAA/C,CAA5B;AAEA,QAAI,YAAY,GAAG,CAAC,WAAW,GAAG,qBAAf,IAAwC,KAAK,MAAL,CAAY,MAAvE;;AAEA,QAAG,WAAW,IAAI,KAAK,iBAApB,IAAyC,qBAAqB,IAAI,KAAK,sBAA1E,EAAiG;AAChG,WAAK,iBAAL,GAAyB,WAAzB;AACA,WAAK,sBAAL,GAA8B,qBAA9B,CAFgG,CAIhG;;AACA,MAAA,KAAK,CAAC,IAAN,CAAW,KAAK,CAAC,OAAN,CAAc,KAAK,MAAL,CAAY,QAAZ,EAAd,CAAX,EAAkD,UAAC,CAAD,EAAE;AACnD,YAAI,CAAC,GAAG,CAAC,CAAC,CAAD,CAAT;AACA,YAAI,MAAM,GAAG,CAAC,CAAC,CAAD,CAAd;AAEA,YAAI,MAAM,GAAG,qBAAqB,GAAG,MAAM,CAAC,qBAAP,CAA6B,MAAM,CAAC,MAApC,EAA4C,WAAW,GAAG,qBAA1D,CAArC;AACA,YAAI,WAAW,GAAG,qBAAqB,GAAG,MAAM,CAAC,qBAAP,CAA6B,MAAM,CAAC,WAApC,EAAiD,WAAW,GAAG,qBAA/D,CAA1C;;AAEA,YAAG,CAAC,KAAK,CAAC,QAAN,CAAe,MAAf,CAAJ,EAA2B;AAC1B,UAAA,MAAM,GAAG,qBAAqB,GAAG,YAAY,IAAI,CAAC,GAAG,CAAR,CAA7C;AACA;;AACD,YAAG,CAAC,KAAK,CAAC,QAAN,CAAe,WAAf,CAAJ,EAAgC;AAC/B,UAAA,WAAW,GAAG,qBAAqB,GAAG,YAAY,GAAG,CAArD;AACA;;AAED,QAAA,MAAM,CAAC,WAAP,GAAqB,MAArB;AACA,QAAA,MAAM,CAAC,gBAAP,GAA0B,WAA1B;AACA,OAhBD;AAmBA,WAAK,eAAL,CAAqB,WAArB,GAAmC;AAAE,QAAA,CAAC,EAAE,WAAW,GAAG,IAAI,CAAC,CAAxB;AAA2B,QAAA,CAAC,EAAE,WAAW,GAAG,IAAI,CAAC,CAAjD;AAAoD,QAAA,KAAK,EAAE,WAAW,GAAG,IAAI,CAAC,KAA9E;AAAqF,QAAA,MAAM,EAAE,WAAW,GAAG,IAAI,CAAC;AAAhH,OAAnC;AACA,WAAK,eAAL,CAAqB,gBAArB;AAEA,WAAK,gBAAL,CAAsB,CAAtB,GAA0B,KAAK,eAAL,CAAqB,CAA/C;AACA,WAAK,gBAAL,CAAsB,CAAtB,GAA0B,KAAK,eAAL,CAAqB,CAA/C;AACA;AACD,GA1DM;;AAwFP,EAAA,MAAA,CAAA,cAAA,CAAW,QAAA,CAAA,SAAX,EAAW,QAAX,EAAiB;AAMjB;;;SAGA,YAAA;AACC,aAAO,KAAK,gBAAL,CAAsB,QAAtB,CAAP;AACA,KAXgB;;AA5BjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA4BA,UAAkB,KAAlB,EAAyC;AACxC,UAAG,KAAK,kBAAL,CAAwB,QAAxB,EAAkC,KAAlC,EAAyC,IAAzC,EAA+C,KAA/C,EAAsD,EAAtD,EAA0D,KAA1D,CAAH,EAAoE;AACnE,aAAK,gBAAL;AACA;AACD,KAJgB;oBAAA;;AAAA,GAAjB;AA4CA,EAAA,MAAA,CAAA,cAAA,CAAW,QAAA,CAAA,SAAX,EAAW,aAAX,EAAsB;AAItB;;;SAGA,YAAA;AACC,aAAO,KAAK,gBAAL,CAAsB,aAAtB,CAAP;AACA,KATqB;;AA/BtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA+BA,UAAuB,KAAvB,EAA8C;AAC7C,WAAK,kBAAL,CAAwB,aAAxB,EAAuC,KAAvC,EAA8C,IAA9C,EAAoD,KAApD,EAA2D,EAA3D,EAA+D,KAA/D;AACA,KAFqB;oBAAA;;AAAA,GAAtB;AAWA;;;;;;AAKU,EAAA,QAAA,CAAA,SAAA,CAAA,YAAA,GAAV,YAAA;AACC,WAAO,IAAI,SAAJ,EAAP;AACA,GAFS;;AA4BV,EAAA,MAAA,CAAA,cAAA,CAAW,QAAA,CAAA,SAAX,EAAW,YAAX,EAAqB;AAOrB;;;SAGA,YAAA;AACC,aAAO,KAAK,gBAAL,CAAsB,YAAtB,CAAP;AACA,KAZoB;;AAxBrB;;;;;;;;;;;;;;;;;;;;;;;;SAwBA,UAAsB,KAAtB,EAAmC;AAClC,UAAG,KAAK,gBAAL,CAAsB,YAAtB,EAAoC,KAApC,CAAH,EAA8C;AAC7C,aAAK,YAAL;AACA,aAAK,kBAAL;AACA;AACD,KALoB;oBAAA;;AAAA,GAArB;AAoCA,EAAA,MAAA,CAAA,cAAA,CAAW,QAAA,CAAA,SAAX,EAAW,UAAX,EAAmB;AAOnB;;;SAGA,YAAA;AACC,aAAO,KAAK,gBAAL,CAAsB,UAAtB,CAAP;AACA,KAZkB;;AAtBnB;;;;;;;;;;;;;;;;;;;;;;SAsBA,UAAoB,KAApB,EAAiC;AAChC,UAAG,KAAK,gBAAL,CAAsB,UAAtB,EAAkC,KAAlC,CAAH,EAA4C;AAC3C,aAAK,YAAL;AACA,aAAK,kBAAL;AACA;AACD,KALkB;oBAAA;;AAAA,GAAnB;AAcD,SAAA,QAAA;AAAC,CAzVD,CAA8B,YAA9B,CAAA;;;AA2VA;;;;;;;AAMA,QAAQ,CAAC,iBAAT,CAA2B,UAA3B,IAAyC,QAAzC;AACA,QAAQ,CAAC,iBAAT,CAA2B,kBAA3B,IAAiD,gBAAjD","sourcesContent":["/**\r\n * Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, IPercentChartProperties, IPercentChartDataFields, IPercentChartAdapters, IPercentChartEvents, PercentChartDataItem } from \"./PercentChart\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { PieSeries } from \"../series/PieSeries\";\r\nimport { IListEvents } from \"../../core/utils/List\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChartDataItem extends PercentChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PieChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart]].\r\n */\r\nexport interface IPieChartDataFields extends IPercentChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart]]\r\n */\r\nexport interface IPieChartProperties extends IPercentChartProperties {\r\n\r\n\t/**\r\n\t * Outer radius of the pie.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Relative inner radius (0-1).\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle pie starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle pie ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart]].\r\n */\r\nexport interface IPieChartEvents extends IPercentChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChartAdapters extends IPercentChartAdapters, IPieChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Pie chart.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"PieChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"PieSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czechia\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"PieChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChartEvents} for a list of available Events\r\n * @see {@link IPieChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart extends PercentChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IPieChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: PieSeries;\r\n\r\n\tprotected _chartPixelRadius:number;\r\n\r\n\tprotected _chartPixelInnerRadius:number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.innerRadius = 0;\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.align = \"none\";\r\n\t\tthis.valign = \"none\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tlet seriesContainer = this.seriesContainer;\r\n\t\tseriesContainer.isMeasured = true;\r\n\t\tseriesContainer.valign = \"middle\";\r\n\t\tseriesContainer.align = \"center\";\r\n\t\tseriesContainer.layout = \"absolute\";\r\n\t\tseriesContainer.width = undefined;\r\n\t\tseriesContainer.height = undefined;\r\n\r\n\t\t// so that the pie is always drawn, even the legend wants all the space\r\n\t\tthis.chartContainer.minHeight = 50;\r\n\t\tthis.chartContainer.minWidth = 50;\r\n\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", this.updateRadius, this, false); // need this for the chart to change radius if legend is removed/disabled\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout(): void {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.updateRadius();\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[Series]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<PieSeries>[\"inserted\"]): void {\r\n\t\tsuper.handleSeriesAdded(event);\r\n\t\tthis._chartPixelRadius = undefined;\r\n\t\tthis.updateSeriesAngles();\r\n\t}\r\n\r\n\tprotected updateSeriesAngles(){\r\n\t\tthis.series.each((series)=>{\r\n\t\t\tseries._startAngleInternal = this.startAngle;\r\n\t\t\tseries._endAngleInternal = this.endAngle;\r\n\t\t\t//series.defaultState.properties.startAngle = this.startAngle;\r\n\t\t\t//series.defaultState.properties.endAngle = this.endAngle;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates pie's radius, based on a number of criteria.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRadius(): void {\r\n\r\n\t\tlet chartCont = this.chartContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, innerRadius.value);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for radar also)\r\n\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(chartCont.innerWidth / rect.width, chartCont.innerHeight / rect.height);\r\n\r\n\t\tif(!$type.isNumber(maxRadius)){\r\n\t\t\tmaxRadius = 0;\r\n\t\t}\r\n\r\n\t\tlet chartRadius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\r\n\t\tlet chartPixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, maxRadius);\r\n\r\n\t\tlet seriesRadius = (chartRadius - chartPixelInnerRadius) / this.series.length;\r\n\r\n\t\tif(chartRadius != this._chartPixelRadius || chartPixelInnerRadius != this._chartPixelInnerRadius){\r\n\t\t\tthis._chartPixelRadius = chartRadius;\r\n\t\t\tthis._chartPixelInnerRadius = chartPixelInnerRadius;\r\n\r\n\t\t\t//@todo: make it possible to set series radius in percent\r\n\t\t\t$iter.each($iter.indexed(this.series.iterator()), (a) => {\r\n\t\t\t\tlet i = a[0];\r\n\t\t\t\tlet series = a[1];\r\n\r\n\t\t\t\tlet radius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.radius, chartRadius - chartPixelInnerRadius);\r\n\t\t\t\tlet innerRadius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.innerRadius, chartRadius - chartPixelInnerRadius);\r\n\r\n\t\t\t\tif(!$type.isNumber(radius)){\r\n\t\t\t\t\tradius = chartPixelInnerRadius + seriesRadius * (i + 1);\r\n\t\t\t\t}\r\n\t\t\t\tif(!$type.isNumber(innerRadius)){\r\n\t\t\t\t\tinnerRadius = chartPixelInnerRadius + seriesRadius * i;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.pixelRadius = radius;\r\n\t\t\t\tseries.pixelInnerRadius = innerRadius;\r\n\t\t\t});\r\n\r\n\r\n\t\t\tthis.seriesContainer.definedBBox = { x: chartRadius * rect.x, y: chartRadius * rect.y, width: chartRadius * rect.width, height: chartRadius * rect.height };\r\n\t\t\tthis.seriesContainer.invalidateLayout();\r\n\r\n\t\t\tthis.bulletsContainer.x = this.seriesContainer.x;\r\n\t\t\tthis.bulletsContainer.y = this.seriesContainer.y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets radius of the pie chart.\r\n\t *\r\n\t * Setting to a number will mean a fixed pixel radius.\r\n\t *\r\n\t * Setting to an instance of [[Percent]] will mean a relative radius to\r\n\t * available space.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // Set pie chart to be at 50% of the available space\r\n\t *   \"radius\": \"50%\"\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 80%\r\n\t * @param value  Radius (px or relative)\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif(this.setPercentProperty(\"radius\", value, true, false, 10, false)){\r\n\t\t\tthis.invalidateLayout();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px or relative)\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets relative inner radius (to create a donut chart).\r\n\t *\r\n\t * Setting to a number will mean a fixed pixel radius.\r\n\t *\r\n\t * Setting to an instance of [[Percent]] will mean a relative radius to\r\n\t * available space.\r\n\t *\r\n\t * NOTE: it's not related to `radius`.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.innerRadius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.innerRadius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // Set pie chart to be at 50% of the available space\r\n\t *   \"innerRadius\": \"50%\"\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 0\r\n\t * @param value  Relative inner radius (0-1)\r\n\t * @todo Setting things like `innerRadius` modifies `slice.radius` and it then looks like it is not the same value as in default state\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Relative inner radius (0-1)\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new [[PieSeries]].\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PieSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart begins (the left side of the first slice is drawn)\r\n\t * at the top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the first slice be drawn to the right.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * NOTE: This setting is not supported in a 3D pie chart.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tif(this.setPropertyValue(\"startAngle\", value)){\r\n\t\t\tthis.updateRadius();\r\n\t\t\tthis.updateSeriesAngles()\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart ends (the right side of the last slice is drawn)\r\n\t * at the top center. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to change this setting.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * NOTE: This setting is not supported in a 3D pie chart.\r\n\t *\r\n\t * @default 270\r\n\t * @param value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tif(this.setPropertyValue(\"endAngle\", value)){\r\n\t\t\tthis.updateRadius();\r\n\t\t\tthis.updateSeriesAngles()\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart\"] = PieChart;\r\nregistry.registeredClasses[\"PieChartDataItem\"] = PieChartDataItem;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}