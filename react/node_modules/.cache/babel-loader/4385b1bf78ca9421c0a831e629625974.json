{"ast":null,"code":"/**\r\n * This module contains Color object definition\r\n */\nimport { registry } from \"../Registry\";\nimport * as $colors from \"./Colors\";\nimport * as $type from \"./Type\";\n/**\r\n * Represents a color.\r\n *\r\n * `Color` accepts value only in [[iRGB]] object format. To create `Color`\r\n * object by parsing it from any supported string-based formats, use helper\r\n * [[color]] function:\r\n *\r\n * ```TypeScript\r\n * am4core.color(\"#ff0000\");\r\n * am4core.color(\"#f00\");\r\n * am4core.color(\"rgb(255, 0, 0)\");\r\n * am4core.color(\"rgba(255, 0, 0, 0.5)\");\r\n * am4core.color({ r: 255, g: 0, b: 0 });\r\n * am4core.color(\"red\");\r\n * ```\r\n * ```JavaScript\r\n * am4core.color(\"#ff0000\");\r\n * am4core.color(\"#f00\");\r\n * am4core.color(\"rgb(255, 0, 0)\");\r\n * am4core.color(\"rgba(255, 0, 0, 0.5)\");\r\n * am4core.color({ r: 255, g: 0, b: 0 });\r\n * am4core.color(\"red\");\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\n\nvar Color =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor\r\n   *\r\n   * @param color Source color\r\n   */\n  function Color(color) {\n    this._value = color;\n  }\n\n  Object.defineProperty(Color.prototype, \"rgb\", {\n    /**\r\n     * Returns [[iRGB]] representation of the color.\r\n     *\r\n     * @return RGB object\r\n     */\n    get: function get() {\n      return this._value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Color.prototype, \"hex\", {\n    /**\r\n     * Returns color hex value string, e.g. \"#FF0000\".\r\n     *\r\n     * @return Hex color code\r\n     */\n    get: function get() {\n      return this._value ? $colors.rgbToHex(this._value) : \"none\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Color.prototype, \"rgba\", {\n    /**\r\n     * Returns an `rgba()` representation of the color, e.g.:\r\n     * `rgba(255, 0, 0, 0.5)`.\r\n     *\r\n     * @return rgba color string\r\n     */\n    get: function get() {\n      return this._value ? $colors.rgbToRGBA(this._value) : \"none\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Color.prototype, \"alpha\", {\n    /**\r\n     * Returns current transparency.\r\n     *\r\n     * @return Alpha (0-1)\r\n     */\n    get: function get() {\n      if (this._value != null && this._value.a != null) {\n        return this._value.a;\n      } else {\n        return 1;\n      }\n    },\n\n    /**\r\n     * Set alpha (transparency) of the color.\r\n     *\r\n     * @param value Alpha (0-1)\r\n     */\n    set: function set(value) {\n      if (this._value) {\n        this._value.a = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Color.prototype, \"lightColor\", {\n    /**\r\n     * Returns current light color setting.\r\n     *\r\n     * @return Color\r\n     */\n    get: function get() {\n      if (!this._lightColor) {\n        this._lightColor = new Color({\n          r: 255,\n          g: 255,\n          b: 255\n        });\n      }\n\n      return this._lightColor;\n    },\n\n    /**\r\n     * Sets \"light\" color. Used when determining contrasting color.\r\n     *\r\n     * @param color Color\r\n     */\n    set: function set(color) {\n      this._lightColor = color;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Color.prototype, \"darkColor\", {\n    /**\r\n     * Returns current dark color setting.\r\n     *\r\n     * @return Color\r\n     */\n    get: function get() {\n      if (!this._darkColor) {\n        this._darkColor = new Color({\n          r: 0,\n          g: 0,\n          b: 0\n        });\n      }\n\n      return this._darkColor;\n    },\n\n    /**\r\n     * Sets \"dark\" color. Used when determining contrasting color.\r\n     *\r\n     * @param color Color\r\n     */\n    set: function set(color) {\n      this._darkColor = color;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Overrides `toString` method so that [[Color]] object can be used as\r\n   * string.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return String represantion of color (usable in CSS)\r\n   */\n\n  Color.prototype.toString = function () {\n    return this.alpha < 1 ? this.rgba : this.hex;\n  };\n  /**\r\n   * Returns a new [[Color]] which is percent lighter (positive value),\r\n   * or darker (negative value).\r\n   *\r\n   * Parameter is in the scale of -1 to 1.\r\n   *\r\n   * @param percent  Increase/decrease lightness by X\r\n   * @return New Color\r\n   */\n\n\n  Color.prototype.lighten = function (percent) {\n    return new Color($colors.lighten(this.rgb, percent));\n  };\n  /**\r\n   * Returns a new [[Color]] which is percent brighter (positive value),\r\n   * or darker (negative value).\r\n   *\r\n   * Parameter is in the scale of -1 to 1.\r\n   *\r\n   * @param percent  Increase/decrease brightness by X\r\n   * @return New Color\r\n   */\n\n\n  Color.prototype.brighten = function (percent) {\n    return new Color($colors.brighten(this.rgb, percent));\n  };\n  /**\r\n   * Returns a new [[Color]] based on current color with specific saturation\r\n   * applied.\r\n   *\r\n   * `saturation` can be in the range of 0 (fully desaturated) to 1 (fully\r\n   * saturated).\r\n   *\r\n   * @param saturation  Saturation (0-1)\r\n   * @return New (saturated) color\r\n   */\n\n\n  Color.prototype.saturate = function (saturation) {\n    return new Color($colors.saturate(this.rgb, saturation));\n  };\n\n  Object.defineProperty(Color.prototype, \"alternative\", {\n    /**\r\n     * Returns a either light or dark color that contrasts specifically with\r\n     * this color.\r\n     *\r\n     * Uses properties `darkColor` (default black) and `lightColor` (default\r\n     * white).\r\n     *\r\n     * Useful when determining which color label should be on a colored\r\n     * background, so that it stands out.\r\n     *\r\n     * @return Contrasting color\r\n     */\n    get: function get() {\n      if (this.rgb != null) {\n        return $colors.isLight(this.rgb) ? this.darkColor : this.lightColor;\n      } else {\n        throw new Error(\"Color does not exist\");\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Color;\n}();\n\nexport { Color };\n/**\r\n * Resolves an input variable to a normal [[iRGB]] color and creates [[Color]]\r\n * object for it.\r\n *\r\n * @param value  Input value\r\n * @param alpha  Alpha (0-1)\r\n * @return Color object\r\n */\n\nexport function color(value, alpha) {\n  if (!$type.hasValue(value)) {\n    return new Color(undefined);\n  }\n\n  if (typeof value == \"string\") {\n    var cacheId = \"_color_\" + value + \"_\" + (alpha || \"1\");\n    var cached = registry.getCache(cacheId);\n\n    if (cached) {\n      return new Color({\n        r: cached.r,\n        g: cached.g,\n        b: cached.b,\n        a: cached.a\n      });\n    }\n\n    var rgb = $colors.rgb(value, alpha);\n    registry.setCache(cacheId, rgb);\n    return new Color(rgb);\n  } // Check if it's already a Color object\n\n\n  if (value instanceof Color) {\n    if ($type.hasValue(alpha)) {\n      value.alpha = alpha;\n    }\n\n    return value;\n  } // Not a string or Color instance, it's the iRGB object then\n\n\n  return new Color(value);\n}\n/**\r\n * Checks if supplied argument is instance of [[Color]].\r\n *\r\n * @param value  Input value\r\n * @return Is Color?\r\n */\n\nexport function isColor(value) {\n  return value instanceof Color;\n}\n/**\r\n * Converts any value to [[Color]].\r\n *\r\n * @param value  Input value\r\n * @return Color\r\n */\n\nexport function castColor(value) {\n  return color(value);\n}\n/**\r\n * Converts any value into a [[Color]].\r\n *\r\n * @param value  Source value\r\n * @return Color object\r\n */\n\nexport function toColor(value) {\n  if ($type.hasValue(value) && !isColor(value)) {\n    return castColor(value);\n  }\n\n  return value;\n}","map":{"version":3,"sources":["../../../../../src/.internal/core/utils/Color.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * This module contains Color object definition\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { iRGB, iHSV, iHSL } from \"./Colors\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $colors from \"./Colors\";\r\nimport * as $type from \"./Type\";\r\n\r\n// Re-export\r\nexport { iRGB, iHSV, iHSL };\r\n\r\n/**\r\n * Represents a color.\r\n *\r\n * `Color` accepts value only in [[iRGB]] object format. To create `Color`\r\n * object by parsing it from any supported string-based formats, use helper\r\n * [[color]] function:\r\n *\r\n * ```TypeScript\r\n * am4core.color(\"#ff0000\");\r\n * am4core.color(\"#f00\");\r\n * am4core.color(\"rgb(255, 0, 0)\");\r\n * am4core.color(\"rgba(255, 0, 0, 0.5)\");\r\n * am4core.color({ r: 255, g: 0, b: 0 });\r\n * am4core.color(\"red\");\r\n * ```\r\n * ```JavaScript\r\n * am4core.color(\"#ff0000\");\r\n * am4core.color(\"#f00\");\r\n * am4core.color(\"rgb(255, 0, 0)\");\r\n * am4core.color(\"rgba(255, 0, 0, 0.5)\");\r\n * am4core.color({ r: 255, g: 0, b: 0 });\r\n * am4core.color(\"red\");\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\r\nexport class Color {\r\n\r\n\t/**\r\n\t * Light color (used when light contrasting color is required).\r\n\t *\r\n\t * @param {Color}\r\n\t * @ignore\r\n\t */\r\n\tprotected _lightColor: $type.Optional<Color>;\r\n\r\n\t/**\r\n\t * Dark color (used when dark contrasting color is required).\r\n\t *\r\n\t * @param {Color}\r\n\t * @ignore\r\n\t */\r\n\tprotected _darkColor: $type.Optional<Color>;\r\n\r\n\t/**\r\n\t * Holds RGB value of the color.\r\n\t */\r\n\tprotected _value: $type.Optional<iRGB>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t *\r\n\t * @param color Source color\r\n\t */\r\n\tconstructor(color: $type.Optional<iRGB>) {\r\n\t\tthis._value = color;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns [[iRGB]] representation of the color.\r\n\t *\r\n\t * @return RGB object\r\n\t */\r\n\tpublic get rgb(): $type.Optional<iRGB> {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns color hex value string, e.g. \"#FF0000\".\r\n\t *\r\n\t * @return Hex color code\r\n\t */\r\n\tpublic get hex(): string {\r\n\t\treturn this._value ? $colors.rgbToHex(this._value) : \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an `rgba()` representation of the color, e.g.:\r\n\t * `rgba(255, 0, 0, 0.5)`.\r\n\t *\r\n\t * @return rgba color string\r\n\t */\r\n\tpublic get rgba(): string {\r\n\t\treturn this._value ? $colors.rgbToRGBA(this._value) : \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * Set alpha (transparency) of the color.\r\n\t *\r\n\t * @param value Alpha (0-1)\r\n\t */\r\n\tpublic set alpha(value: number) {\r\n\t\tif (this._value) {\r\n\t\t\tthis._value.a = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current transparency.\r\n\t *\r\n\t * @return Alpha (0-1)\r\n\t */\r\n\tpublic get alpha(): number {\r\n\t\tif (this._value != null && this._value.a != null) {\r\n\t\t\treturn this._value.a;\r\n\r\n\t\t} else {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets \"light\" color. Used when determining contrasting color.\r\n\t *\r\n\t * @param color Color\r\n\t */\r\n\tpublic set lightColor(color: Color) {\r\n\t\tthis._lightColor = color;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current light color setting.\r\n\t *\r\n\t * @return Color\r\n\t */\r\n\tpublic get lightColor(): Color {\r\n\t\tif (!this._lightColor) {\r\n\t\t\tthis._lightColor = new Color({ r: 255, g: 255, b: 255 });\r\n\t\t}\r\n\t\treturn this._lightColor;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets \"dark\" color. Used when determining contrasting color.\r\n\t *\r\n\t * @param color Color\r\n\t */\r\n\tpublic set darkColor(color: Color) {\r\n\t\tthis._darkColor = color;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current dark color setting.\r\n\t *\r\n\t * @return Color\r\n\t */\r\n\tpublic get darkColor(): Color {\r\n\t\tif (!this._darkColor) {\r\n\t\t\tthis._darkColor = new Color({ r: 0, g: 0, b: 0 });\r\n\t\t}\r\n\t\treturn this._darkColor;\r\n\t}\r\n\r\n\t/**\r\n\t * Overrides `toString` method so that [[Color]] object can be used as\r\n\t * string.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return String represantion of color (usable in CSS)\r\n\t */\r\n\tpublic toString(): string {\r\n\t\treturn this.alpha < 1 ? this.rgba : this.hex;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new [[Color]] which is percent lighter (positive value),\r\n\t * or darker (negative value).\r\n\t *\r\n\t * Parameter is in the scale of -1 to 1.\r\n\t *\r\n\t * @param percent  Increase/decrease lightness by X\r\n\t * @return New Color\r\n\t */\r\n\tpublic lighten(percent: number): Color {\r\n\t\treturn new Color($colors.lighten(this.rgb, percent));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new [[Color]] which is percent brighter (positive value),\r\n\t * or darker (negative value).\r\n\t *\r\n\t * Parameter is in the scale of -1 to 1.\r\n\t *\r\n\t * @param percent  Increase/decrease brightness by X\r\n\t * @return New Color\r\n\t */\r\n\tpublic brighten(percent: number): Color {\r\n\t\treturn new Color($colors.brighten(this.rgb, percent));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new [[Color]] based on current color with specific saturation\r\n\t * applied.\r\n\t *\r\n\t * `saturation` can be in the range of 0 (fully desaturated) to 1 (fully\r\n\t * saturated).\r\n\t *\r\n\t * @param saturation  Saturation (0-1)\r\n\t * @return New (saturated) color\r\n\t */\r\n\tpublic saturate(saturation: number): Color {\r\n\t\treturn new Color($colors.saturate(this.rgb, saturation));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a either light or dark color that contrasts specifically with\r\n\t * this color.\r\n\t *\r\n\t * Uses properties `darkColor` (default black) and `lightColor` (default\r\n\t * white).\r\n\t *\r\n\t * Useful when determining which color label should be on a colored\r\n\t * background, so that it stands out.\r\n\t *\r\n\t * @return Contrasting color\r\n\t */\r\n\tpublic get alternative(): Color {\r\n\t\tif (this.rgb != null) {\r\n\t\t\treturn $colors.isLight(this.rgb) ? this.darkColor : this.lightColor;\r\n\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Color does not exist\");\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Resolves an input variable to a normal [[iRGB]] color and creates [[Color]]\r\n * object for it.\r\n *\r\n * @param value  Input value\r\n * @param alpha  Alpha (0-1)\r\n * @return Color object\r\n */\r\nexport function color(value?: string | iRGB | Color, alpha?: number): Color {\r\n\r\n\tif (!$type.hasValue(value)) {\r\n\t\treturn new Color(undefined);\r\n\t}\r\n\r\n\tif (typeof value == \"string\") {\r\n\t\tlet cacheId = \"_color_\" + value + \"_\" + (alpha || \"1\");\r\n\t\tlet cached = registry.getCache(cacheId);\r\n\t\tif (cached) {\r\n\t\t\treturn new Color({\r\n\t\t\t\tr: cached.r,\r\n\t\t\t\tg: cached.g,\r\n\t\t\t\tb: cached.b,\r\n\t\t\t\ta: cached.a\r\n\t\t\t});\r\n\t\t}\r\n\t\tlet rgb = $colors.rgb(value, alpha);\r\n\t\tregistry.setCache(cacheId, rgb);\r\n\t\treturn new Color(rgb);\r\n\t}\r\n\r\n\t// Check if it's already a Color object\r\n\tif (value instanceof Color) {\r\n\t\tif ($type.hasValue(alpha)) {\r\n\t\t\tvalue.alpha = alpha;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t// Not a string or Color instance, it's the iRGB object then\r\n\treturn new Color(value);\r\n}\r\n\r\n/**\r\n * Checks if supplied argument is instance of [[Color]].\r\n *\r\n * @param value  Input value\r\n * @return Is Color?\r\n */\r\nexport function isColor(value: any): boolean {\r\n\treturn value instanceof Color;\r\n}\r\n\r\n/**\r\n * Converts any value to [[Color]].\r\n *\r\n * @param value  Input value\r\n * @return Color\r\n */\r\nexport function castColor(value: any): Color {\r\n\treturn color(value);\r\n}\r\n\r\n/**\r\n * Converts any value into a [[Color]].\r\n *\r\n * @param value  Source value\r\n * @return Color object\r\n */\r\nexport function toColor(value: any): Color {\r\n\tif ($type.hasValue(value) && !isColor(value)) {\r\n\t\treturn castColor(value);\r\n\t}\r\n\treturn value;\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}