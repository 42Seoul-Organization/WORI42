{"ast":null,"code":"/**\r\n * FlowDiagram module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Chart, ChartDataItem } from \"../Chart\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\nimport { Container } from \"../../core/Container\";\nimport { registry } from \"../../core/Registry\";\nimport { FlowDiagramNode } from \"../elements/FlowDiagramNode\";\nimport { FlowDiagramLink } from \"../elements/FlowDiagramLink\";\nimport { LinearGradientModifier } from \"../../core/rendering/fills/LinearGradientModifier\";\nimport { ColorSet } from \"../../core/utils/ColorSet\";\nimport { toColor, Color } from \"../../core/utils/Color\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $number from \"../../core/utils/Number\";\nimport * as $order from \"../../core/utils/Order\";\nimport { Disposer } from \"../../core/utils/Disposer\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n//@todo rearange notes after dragged\n\n/**\r\n * Defines a [[DataItem]] for [[FlowDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar FlowDiagramDataItem =\n/** @class */\nfunction (_super) {\n  __extends(FlowDiagramDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function FlowDiagramDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"FlowDiagramDataItem\";\n    _this.values.value = {};\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(FlowDiagramDataItem.prototype, \"fromName\", {\n    /**\r\n     * @return name\r\n     */\n    get: function () {\n      return this.properties.fromName;\n    },\n\n    /**\r\n     * Source node's name.\r\n     *\r\n     * @param value  Name\r\n     */\n    set: function (value) {\n      this.setProperty(\"fromName\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramDataItem.prototype, \"toName\", {\n    /**\r\n     * @return name\r\n     */\n    get: function () {\n      return this.properties.toName;\n    },\n\n    /**\r\n     * Destination node's name.\r\n     *\r\n     * @param value  Name\r\n     */\n    set: function (value) {\n      this.setProperty(\"toName\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramDataItem.prototype, \"color\", {\n    /**\r\n     * @return color\r\n     */\n    get: function () {\n      return this.properties.color;\n    },\n\n    /**\r\n     * Node color\r\n     *\r\n     * @param value  Name\r\n     */\n    set: function (value) {\n      this.setProperty(\"color\", toColor(value));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramDataItem.prototype, \"value\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this.values.value.value;\n    },\n\n    /**\r\n     * Link's value.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.setValue(\"value\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramDataItem.prototype, \"link\", {\n    /**\r\n     * A visual element, representing link between the source and target nodes.\r\n     *\r\n     * Link's actual thickness will be determined by `value` of this link and\r\n     * `value` of the source node.\r\n     *\r\n     * @readonly\r\n     * @return Link element\r\n     */\n    get: function () {\n      var _this = this;\n\n      if (!this._link) {\n        var link_1 = this.component.links.create();\n        this._link = link_1;\n        this.addSprite(link_1);\n\n        this._disposers.push(new Disposer(function () {\n          if (_this.component) {\n            _this.component.links.removeValue(link_1);\n          }\n        }));\n      }\n\n      return this._link;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return FlowDiagramDataItem;\n}(ChartDataItem);\n\nexport { FlowDiagramDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a Pie chart\r\n * @see {@link IFlowDiagramEvents} for a list of available Events\r\n * @see {@link IFlowDiagramAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar FlowDiagram =\n/** @class */\nfunction (_super) {\n  __extends(FlowDiagram, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function FlowDiagram() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * A Color Set to use when applying/generating colors for each subsequent\r\n     * node.\r\n     */\n\n\n    _this.colors = new ColorSet();\n    _this.className = \"FlowDiagram\";\n    _this.nodePadding = 20;\n    _this.sortBy = \"none\";\n    _this.sequencedInterpolation = true;\n    _this.colors.step = 2;\n    _this.minNodeSize = 0.02;\n\n    var linksContainer = _this.chartContainer.createChild(Container);\n\n    linksContainer.shouldClone = false;\n    linksContainer.layout = \"none\";\n    linksContainer.isMeasured = false;\n    _this.linksContainer = linksContainer;\n\n    var nodesContainer = _this.chartContainer.createChild(Container);\n\n    nodesContainer.shouldClone = false;\n    nodesContainer.layout = \"none\";\n    nodesContainer.isMeasured = false;\n    _this.nodesContainer = nodesContainer; // this data item holds sums, averages, etc\n\n    _this.dataItem = _this.createDataItem();\n    _this.dataItem.component = _this; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  FlowDiagram.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.dataItem.dispose();\n  };\n  /**\r\n   * (Re)validates chart's data, effectively causing the chart to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  FlowDiagram.prototype.validateData = function () {\n    var _this = this;\n\n    if (this._parseDataFrom == 0) {\n      this.nodes.clear();\n    }\n\n    this.sortNodes();\n    this.colors.reset();\n\n    _super.prototype.validateData.call(this);\n\n    var sum = 0;\n    var count = 0;\n    var low;\n    var high; // build blocks\n\n    $iter.each(this.dataItems.iterator(), function (dataItem) {\n      var fromName = dataItem.fromName;\n\n      if (fromName) {\n        var node = _this.nodes.getKey(fromName);\n\n        if (!node) {\n          node = _this.nodes.create(fromName);\n          node.name = fromName;\n          node.chart = _this;\n          node.dataItem = dataItem;\n        }\n\n        dataItem.fromNode = node;\n        dataItem.fromNode.outgoingDataItems.push(dataItem);\n      }\n\n      var toName = dataItem.toName;\n\n      if (toName) {\n        var node = _this.nodes.getKey(toName);\n\n        if (!node) {\n          node = _this.nodes.create(toName);\n          node.name = toName;\n          node.chart = _this;\n          node.dataItem = dataItem;\n        }\n\n        dataItem.toNode = node;\n        dataItem.toNode.incomingDataItems.push(dataItem);\n      }\n\n      if (!dataItem.fromNode) {\n        var strokeModifier = new LinearGradientModifier();\n        strokeModifier.opacities = [0, 1];\n        dataItem.link.strokeModifier = strokeModifier;\n      }\n\n      if (!dataItem.toNode) {\n        var fillModifier = new LinearGradientModifier();\n        fillModifier.opacities = [1, 0];\n        dataItem.link.strokeModifier = fillModifier;\n      }\n\n      var value = dataItem.value;\n\n      if ($type.isNumber(value)) {\n        sum += value;\n        count++;\n\n        if (low > value || !$type.isNumber(low)) {\n          low = value;\n        }\n\n        if (high < value || !$type.isNumber(high)) {\n          high = value;\n        }\n      }\n    });\n    var key = \"value\";\n    this.dataItem.setCalculatedValue(key, high, \"high\");\n    this.dataItem.setCalculatedValue(key, low, \"low\");\n    this.dataItem.setCalculatedValue(key, sum, \"sum\");\n    this.dataItem.setCalculatedValue(key, sum / count, \"average\");\n    this.dataItem.setCalculatedValue(key, count, \"count\");\n    $iter.each(this.nodes.iterator(), function (strNode) {\n      var node = strNode[1];\n\n      if (node.fill instanceof Color) {\n        node.color = node.fill;\n      }\n\n      if (node.color == undefined) {\n        node.color = _this.colors.next();\n      }\n\n      if (node.dataItem.color != undefined) {\n        node.color = node.dataItem.color;\n      }\n\n      if (!node.dataItem.visible) {\n        node.hide(0);\n      }\n\n      _this.getNodeValue(node);\n    });\n    this.sortNodes();\n    this.feedLegend();\n  };\n  /**\r\n   * [handleDataItemWorkingValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  FlowDiagram.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {\n    this.invalidate();\n  };\n  /**\r\n   * Sorts nodes by either their values or names, based on `sortBy` setting.\r\n   */\n\n\n  FlowDiagram.prototype.sortNodes = function () {\n    if (this.sortBy == \"name\") {\n      this._sorted = this.nodes.sortedIterator();\n    } else if (this.sortBy == \"value\") {\n      this._sorted = $iter.sort(this.nodes.iterator(), function (x, y) {\n        return $order.reverse($number.order(x[1].total, y[1].total));\n      });\n    } else {\n      this._sorted = this.nodes.iterator();\n    }\n  };\n  /**\r\n   * Updates a cummulative value of the node.\r\n   *\r\n   * A node's value is determined by summing values of all of the incoming\r\n   * links or all of the outgoing links, whichever results in bigger number.\r\n   *\r\n   * @param node  Node value\r\n   */\n\n\n  FlowDiagram.prototype.getNodeValue = function (node) {\n    // todo: totalIncomming totalOutgoing, total\n    var incomingTotal = 0;\n    var outgoingTotal = 0;\n    $iter.each(node.incomingDataItems.iterator(), function (dataItem) {\n      var value = dataItem.getWorkingValue(\"value\");\n\n      if ($type.isNumber(value)) {\n        incomingTotal += value;\n      }\n    });\n    $iter.each(node.outgoingDataItems.iterator(), function (dataItem) {\n      var value = dataItem.getWorkingValue(\"value\");\n\n      if ($type.isNumber(value)) {\n        outgoingTotal += value;\n      }\n    });\n    node.total = incomingTotal + outgoingTotal;\n    node.totalIncoming = incomingTotal;\n    node.totalOutgoing = outgoingTotal;\n  };\n\n  ;\n  /**\r\n   * Changes the sort type of the nodes.\r\n   *\r\n   * This will actually reshuffle nodes using nice animation.\r\n   */\n\n  FlowDiagram.prototype.changeSorting = function () {\n    this.sortNodes();\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  FlowDiagram.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this); // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Flow diagram\");\n    }\n  };\n  /**\r\n   * Creates and returns a new data item.\r\n   *\r\n   * @return Data item\r\n   */\n\n\n  FlowDiagram.prototype.createDataItem = function () {\n    return new FlowDiagramDataItem();\n  };\n\n  Object.defineProperty(FlowDiagram.prototype, \"nodePadding\", {\n    /**\r\n     * @return Padding (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"nodePadding\");\n    },\n\n    /**\r\n     * Padding for node square in pixels.\r\n     *\r\n     * Padding will add extra space around node's name label.\r\n     *\r\n     * @param value Padding (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"nodePadding\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagram.prototype, \"sortBy\", {\n    /**\r\n     * @returns Node sorting\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"sortBy\");\n    },\n\n    /**\r\n     * Sort nodes by \"name\" or \"value\" or do not sort at all. If not sorted, nodes will appear in the same order as they are in the data.\r\n     * @default \"none\"\r\n     * @param value  Node sorting\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"sortBy\", value);\n      this.changeSorting();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagram.prototype, \"minNodeSize\", {\n    /**\r\n     * @returns min node size\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minNodeSize\");\n    },\n\n    /**\r\n     * Sometimes nodes can get very small if their value is little. With this setting you\r\n     * can set min size of a node (this is relative value from the total size of all nodes)\r\n     * @default 0.02\r\n     * @param value  Node sorting\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"minNodeSize\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagram.prototype, \"nodes\", {\n    /**\r\n     * A list of chart's nodes.\r\n     *\r\n     * @param {DictionaryTemplate<string, this[\"_node\"]>}\r\n     */\n    get: function () {\n      if (!this._nodes) {\n        var template = this.createNode();\n        template.events.on(\"hit\", function (event) {\n          event.target.handleHit(event);\n        });\n        this._nodes = new DictionaryTemplate(template);\n\n        this._disposers.push(new DictionaryDisposer(this._nodes));\n      }\n\n      return this._nodes;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  FlowDiagram.prototype.createNode = function () {\n    var node = new FlowDiagramNode();\n\n    this._disposers.push(node);\n\n    return node;\n  };\n\n  Object.defineProperty(FlowDiagram.prototype, \"links\", {\n    /**\r\n     * A list of chart's links.\r\n     *\r\n     * @param {ListTemplate<this[\"_link\"]>}\r\n     */\n    get: function () {\n      if (!this._links) {\n        this._links = new ListTemplate(this.createLink());\n\n        this._disposers.push(new ListDisposer(this._links));\n      }\n\n      return this._links;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  FlowDiagram.prototype.createLink = function () {\n    var link = new FlowDiagramLink();\n\n    this._disposers.push(link);\n\n    return link;\n  };\n  /**\r\n   * Setups the legend to use the chart's data.\r\n   * @ignore\r\n   */\n\n\n  FlowDiagram.prototype.feedLegend = function () {\n    var legend = this.legend;\n\n    if (legend) {\n      var legendData_1 = [];\n      this.nodes.each(function (key, node) {\n        legendData_1.push(node);\n      });\n      legend.data = legendData_1;\n      legend.dataFields.name = \"name\";\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  FlowDiagram.prototype.disposeData = function () {\n    _super.prototype.disposeData.call(this);\n\n    this.nodes.clear();\n  };\n\n  return FlowDiagram;\n}(Chart);\n\nexport { FlowDiagram };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"FlowDiagram\"] = FlowDiagram;","map":{"version":3,"sources":["../../../../../src/.internal/charts/types/FlowDiagram.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * FlowDiagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, IChartProperties, IChartDataFields, IChartAdapters, IChartEvents, ChartDataItem } from \"../Chart\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { FlowDiagramNode } from \"../elements/FlowDiagramNode\";\r\nimport { FlowDiagramLink } from \"../elements/FlowDiagramLink\";\r\nimport { LinearGradientModifier } from \"../../core/rendering/fills/LinearGradientModifier\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[FlowDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class FlowDiagramDataItem extends ChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: FlowDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: FlowDiagramLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t */\r\n\tpublic fromNode: FlowDiagramNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t */\r\n\tpublic toNode: FlowDiagramNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagramDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Source node's name.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set fromName(value: string) {\r\n\t\tthis.setProperty(\"fromName\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return name\r\n\t */\r\n\tpublic get fromName(): string {\r\n\t\treturn this.properties.fromName;\r\n\t}\r\n\r\n\t/**\r\n\t * Destination node's name.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set toName(value: string) {\r\n\t\tthis.setProperty(\"toName\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return name\r\n\t */\r\n\tpublic get toName(): string {\r\n\t\treturn this.properties.toName;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Node color\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", toColor(value));\r\n\t}\r\n\r\n\t/**\r\n\t * @return color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\treturn this.properties.color;\r\n\t}\r\n\r\n\t/**\r\n\t * Link's value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values.value.value;\r\n\t}\r\n\r\n\t/**\r\n\t * A visual element, representing link between the source and target nodes.\r\n\t *\r\n\t * Link's actual thickness will be determined by `value` of this link and\r\n\t * `value` of the source node.\r\n\t *\r\n\t * @readonly\r\n\t * @return Link element\r\n\t */\r\n\tpublic get link(): this[\"_link\"] {\r\n\t\tif (!this._link) {\r\n\t\t\tlet link = this.component.links.create();\r\n\t\t\tthis._link = link;\r\n\r\n\t\t\tthis.addSprite(link);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.links.removeValue(link);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._link;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[FlowDiagram]].\r\n */\r\nexport interface IFlowDiagramDataFields extends IChartDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t */\r\n\tcolor?: string;\r\n\r\n\t/**\r\n\t * Visibility of a node\r\n\t */\r\n\tvisible?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[FlowDiagram]]\r\n */\r\nexport interface IFlowDiagramProperties extends IChartProperties {\r\n\r\n\t/**\r\n\t * Padding for node square in pixels.\r\n\t */\r\n\tnodePadding?: number;\r\n\r\n\t/**\r\n\t * Sort nodes by name or value or do not sort a\r\n\t */\r\n\tsortBy?: \"none\" | \"name\" | \"value\";\r\n\r\n\t/**\r\n\t * Sometimes nodes can get very small if their value is little. With this setting you\r\n\t * can set min size of a node (this is relative value from the total size of all nodes)\r\n\t */\r\n\tminNodeSize: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[FlowDiagram]].\r\n */\r\nexport interface IFlowDiagramEvents extends IChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FlowDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFlowDiagramAdapters extends IChartAdapters, IFlowDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Pie chart\r\n * @see {@link IFlowDiagramEvents} for a list of available Events\r\n * @see {@link IFlowDiagramAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class FlowDiagram extends Chart {\r\n\r\n\t/**\r\n\t * A Color Set to use when applying/generating colors for each subsequent\r\n\t * node.\r\n\t */\r\n\tpublic colors: ColorSet = new ColorSet();\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t */\r\n\tpublic _dataItem: FlowDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IFlowDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFlowDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFlowDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFlowDiagramEvents;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node: FlowDiagramNode;\r\n\r\n\r\n\t/**\r\n\t * A list of chart's FlowDiagram nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, this[\"_node\"]>}\r\n\t */\r\n\tprotected _nodes: DictionaryTemplate<string, this[\"_node\"]>;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _link: FlowDiagramLink;\r\n\r\n\t/**\r\n\t * A list of FlowDiagram links connecting nodes.\r\n\t *\r\n\t * @param {ListTemplate<this[\"_link\"]>}\r\n\t */\r\n\tprotected _links: ListTemplate<this[\"_link\"]>;\r\n\r\n\t/**\r\n\t * A container that holds all of the link elements.\r\n\t */\r\n\tpublic linksContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds all of the node elements.\r\n\t */\r\n\tpublic nodesContainer: Container;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, FlowDiagramNode]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagram\";\r\n\t\tthis.nodePadding = 20;\r\n\t\tthis.sortBy = \"none\";\r\n\t\tthis.sequencedInterpolation = true;\r\n\r\n\t\tthis.colors.step = 2;\r\n\t\tthis.minNodeSize = 0.02;\r\n\r\n\t\tlet linksContainer = this.chartContainer.createChild(Container);\r\n\t\tlinksContainer.shouldClone = false;\r\n\t\tlinksContainer.layout = \"none\";\r\n\t\tlinksContainer.isMeasured = false;\r\n\t\tthis.linksContainer = linksContainer;\r\n\r\n\t\tlet nodesContainer = this.chartContainer.createChild(Container);\r\n\t\tnodesContainer.shouldClone = false;\r\n\t\tnodesContainer.layout = \"none\";\r\n\t\tnodesContainer.isMeasured = false;\r\n\t\tthis.nodesContainer = nodesContainer;\r\n\r\n\t\t// this data item holds sums, averages, etc\r\n\t\tthis.dataItem = this.createDataItem();\r\n\t\tthis.dataItem.component = this;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic dispose(): void {\r\n\t\tsuper.dispose();\r\n\t\tthis.dataItem.dispose();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart's data, effectively causing the chart to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this._parseDataFrom == 0) {\r\n\t\t\tthis.nodes.clear();\r\n\t\t}\r\n\r\n\t\tthis.sortNodes();\r\n\r\n\t\tthis.colors.reset();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tlet sum = 0;\r\n\t\tlet count = 0;\r\n\t\tlet low: number;\r\n\t\tlet high: number;\r\n\r\n\t\t// build blocks\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tlet fromName = dataItem.fromName;\r\n\r\n\t\t\tif (fromName) {\r\n\t\t\t\tlet node = this.nodes.getKey(fromName);\r\n\t\t\t\tif (!node) {\r\n\t\t\t\t\tnode = this.nodes.create(fromName);\r\n\t\t\t\t\tnode.name = fromName;\r\n\t\t\t\t\tnode.chart = this;\r\n\t\t\t\t\tnode.dataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t\tdataItem.fromNode = node;\r\n\t\t\t\tdataItem.fromNode.outgoingDataItems.push(dataItem);\r\n\t\t\t}\r\n\t\t\tlet toName = dataItem.toName;\r\n\t\t\tif (toName) {\r\n\t\t\t\tlet node = this.nodes.getKey(toName);\r\n\t\t\t\tif (!node) {\r\n\t\t\t\t\tnode = this.nodes.create(toName);\r\n\t\t\t\t\tnode.name = toName;\r\n\t\t\t\t\tnode.chart = this;\r\n\t\t\t\t\tnode.dataItem = dataItem;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdataItem.toNode = node;\r\n\t\t\t\tdataItem.toNode.incomingDataItems.push(dataItem);\r\n\t\t\t}\r\n\r\n\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\tlet strokeModifier = new LinearGradientModifier();\r\n\t\t\t\tstrokeModifier.opacities = [0, 1];\r\n\t\t\t\tdataItem.link.strokeModifier = strokeModifier;\r\n\t\t\t}\r\n\r\n\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\tlet fillModifier = new LinearGradientModifier();\r\n\t\t\t\tfillModifier.opacities = [1, 0];\r\n\t\t\t\tdataItem.link.strokeModifier = fillModifier;\r\n\t\t\t}\r\n\r\n\t\t\tlet value = dataItem.value;\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\tsum += value;\r\n\t\t\t\tcount++;\r\n\r\n\t\t\t\tif (low > value || !$type.isNumber(low)) {\r\n\t\t\t\t\tlow = value;\r\n\t\t\t\t}\r\n\t\t\t\tif (high < value || !$type.isNumber(high)) {\r\n\t\t\t\t\thigh = value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet key = \"value\";\r\n\r\n\t\tthis.dataItem.setCalculatedValue(key, high, \"high\");\r\n\t\tthis.dataItem.setCalculatedValue(key, low, \"low\");\r\n\t\tthis.dataItem.setCalculatedValue(key, sum, \"sum\");\r\n\t\tthis.dataItem.setCalculatedValue(key, sum / count, \"average\");\r\n\t\tthis.dataItem.setCalculatedValue(key, count, \"count\");\r\n\r\n\r\n\t\t$iter.each(this.nodes.iterator(), (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\r\n\t\t\tif (node.fill instanceof Color) {\r\n\t\t\t\tnode.color = node.fill;\r\n\t\t\t}\r\n\r\n\t\t\tif (node.color == undefined) {\r\n\t\t\t\tnode.color = this.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tif (node.dataItem.color != undefined) {\r\n\t\t\t\tnode.color = node.dataItem.color;\r\n\t\t\t}\r\n\r\n\t\t\tif (!node.dataItem.visible) {\r\n\t\t\t\tnode.hide(0);\r\n\t\t\t}\r\n\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t});\r\n\r\n\t\tthis.sortNodes();\r\n\t\tthis.feedLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sorts nodes by either their values or names, based on `sortBy` setting.\r\n\t */\r\n\tprotected sortNodes() {\r\n\t\tif (this.sortBy == \"name\") {\r\n\t\t\tthis._sorted = this.nodes.sortedIterator();\r\n\t\t}\r\n\t\telse if (this.sortBy == \"value\") {\r\n\t\t\tthis._sorted = $iter.sort(this.nodes.iterator(), (x, y) => $order.reverse($number.order(x[1].total, y[1].total)));\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._sorted = this.nodes.iterator();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a cummulative value of the node.\r\n\t *\r\n\t * A node's value is determined by summing values of all of the incoming\r\n\t * links or all of the outgoing links, whichever results in bigger number.\r\n\t *\r\n\t * @param node  Node value\r\n\t */\r\n\tprotected getNodeValue(node: FlowDiagramNode) {\r\n\r\n\t\t// todo: totalIncomming totalOutgoing, total\r\n\r\n\t\tlet incomingTotal = 0;\r\n\t\tlet outgoingTotal = 0;\r\n\r\n\t\t$iter.each(node.incomingDataItems.iterator(), (dataItem: FlowDiagramDataItem) => {\r\n\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\tincomingTotal += value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t$iter.each(node.outgoingDataItems.iterator(), (dataItem: FlowDiagramDataItem) => {\r\n\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\toutgoingTotal += value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tnode.total = incomingTotal + outgoingTotal;\r\n\t\tnode.totalIncoming = incomingTotal;\r\n\t\tnode.totalOutgoing = outgoingTotal;\r\n\t};\r\n\r\n\t/**\r\n\t * Changes the sort type of the nodes.\r\n\t *\r\n\t * This will actually reshuffle nodes using nice animation.\r\n\t */\r\n\tprotected changeSorting() {\r\n\t\tthis.sortNodes();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Flow diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new FlowDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Padding for node square in pixels.\r\n\t *\r\n\t * Padding will add extra space around node's name label.\r\n\t *\r\n\t * @param value Padding (px)\r\n\t */\r\n\tpublic set nodePadding(value: number) {\r\n\t\tthis.setPropertyValue(\"nodePadding\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Padding (px)\r\n\t */\r\n\tpublic get nodePadding(): number {\r\n\t\treturn this.getPropertyValue(\"nodePadding\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sort nodes by \"name\" or \"value\" or do not sort at all. If not sorted, nodes will appear in the same order as they are in the data.\r\n\t * @default \"none\"\r\n\t * @param value  Node sorting\r\n\t */\r\n\tpublic set sortBy(value: \"none\" | \"name\" | \"value\") {\r\n\t\tthis.setPropertyValue(\"sortBy\", value);\r\n\t\tthis.changeSorting();\r\n\t}\r\n\r\n\t/**\r\n\t * @returns Node sorting\r\n\t */\r\n\tpublic get sortBy(): \"none\" | \"name\" | \"value\" {\r\n\t\treturn this.getPropertyValue(\"sortBy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sometimes nodes can get very small if their value is little. With this setting you\r\n\t * can set min size of a node (this is relative value from the total size of all nodes)\r\n\t * @default 0.02\r\n\t * @param value  Node sorting\r\n\t */\r\n\tpublic set minNodeSize(value: number) {\r\n\t\tthis.setPropertyValue(\"minNodeSize\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @returns min node size\r\n\t */\r\n\tpublic get minNodeSize(): number {\r\n\t\treturn this.getPropertyValue(\"minNodeSize\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A list of chart's nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, this[\"_node\"]>}\r\n\t */\r\n\tpublic get nodes(): DictionaryTemplate<string, this[\"_node\"]> {\r\n\t\tif (!this._nodes) {\r\n\t\t\tlet template = this.createNode();\r\n\t\t\ttemplate.events.on(\"hit\", (event) => {\r\n\t\t\t\tevent.target.handleHit(event);\r\n\t\t\t});\r\n\t\t\tthis._nodes = new DictionaryTemplate<string, this[\"_node\"]>(template);\r\n\t\t\tthis._disposers.push(new DictionaryDisposer(this._nodes));\r\n\t\t}\r\n\t\treturn this._nodes;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode(): this[\"_node\"] {\r\n\t\tlet node = new FlowDiagramNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of chart's links.\r\n\t *\r\n\t * @param {ListTemplate<this[\"_link\"]>}\r\n\t */\r\n\tpublic get links(): ListTemplate<this[\"_link\"]> {\r\n\t\tif (!this._links) {\r\n\t\t\tthis._links = new ListTemplate<this[\"_link\"]>(this.createLink());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._links));\r\n\t\t}\r\n\t\treturn this._links;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink(): this[\"_link\"] {\r\n\t\tlet link = new FlowDiagramLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: any[] = [];\r\n\r\n\t\t\tthis.nodes.each((key, node) => {\r\n\t\t\t\tlegendData.push(node);\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis.nodes.clear();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagram\"] = FlowDiagram;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}