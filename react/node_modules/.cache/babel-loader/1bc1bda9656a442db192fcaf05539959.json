{"ast":null,"code":"/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\nimport { registry } from \"../../core/Registry\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $object from \"../../core/utils/Object\";\nimport * as $type from \"../../core/utils/Type\";\nimport { color } from \"../../core/utils/Color\";\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link ILineSeriesSegmentEvents} for a list of available events\r\n * @see {@link ILineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\n\nvar LineSeriesSegment =\n/** @class */\nfunction (_super) {\n  __extends(LineSeriesSegment, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function LineSeriesSegment() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"LineSeriesSegment\"; // Set defaults\n\n    _this.isMeasured = false;\n    _this.interactionsEnabled = false;\n    _this.layout = \"none\"; // Create fill element\n\n    var fillSprite = _this.createChild(Sprite);\n\n    _this.fillSprite = fillSprite;\n    fillSprite.shouldClone = false;\n    fillSprite.setElement(_this.paper.add(\"path\"));\n    fillSprite.isMeasured = false;\n\n    _this._disposers.push(fillSprite); // Create line element\n\n\n    var strokeSprite = _this.createChild(Sprite);\n\n    _this.strokeSprite = strokeSprite;\n    strokeSprite.shouldClone = false;\n    strokeSprite.fill = color();\n    strokeSprite.setElement(_this.paper.add(\"path\"));\n    strokeSprite.isMeasured = false;\n\n    _this._disposers.push(strokeSprite);\n\n    return _this;\n  }\n  /**\r\n   * Draws the series segment.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param points       Points to connect\r\n   * @param closePoints  ?\r\n   * @param smoothnessX  Horizontal bezier setting (?)\r\n   * @param smoothnessY  Vertical bezier setting (?)\r\n   */\n\n\n  LineSeriesSegment.prototype.drawSegment = function (points, closePoints, smoothnessX, smoothnessY) {\n    if (!this.disabled) {\n      if (points.length > 0 && closePoints.length > 0) {\n        // first moveTo helps to avoid Chrome straight line in the mask bug.\n        var path = $path.moveTo({\n          x: points[0].x - 0.2,\n          y: points[0].y - 0.2\n        }) + $path.moveTo(points[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(points);\n\n        if (this.strokeOpacity == 0 || this.strokeSprite.strokeOpacity == 0) {// like this and not if != 0, otherwise ranges stroke won't be drawn.\n        } else {\n          this.strokeSprite.path = path;\n        }\n\n        if (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) {\n          // helps to avoid drawing fill object if fill is not visible\n          if ($type.isNumber(closePoints[0].x) && $type.isNumber(closePoints[0].y)) {\n            path += $path.lineTo(closePoints[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(closePoints);\n            path += $path.lineTo(points[0]);\n            path += $path.closePath();\n            this.fillSprite.path = path;\n          }\n        }\n      } else {\n        this.fillSprite.path = \"\";\n        this.strokeSprite.path = \"\";\n      }\n    }\n  };\n  /**\r\n   * Copies properties from a [[Sprite]] to both line and fill elements.\r\n   *\r\n   * @param source Source [[Sprite]] to copy properties from\r\n   */\n\n\n  LineSeriesSegment.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    var lineElement = this.strokeSprite;\n    $object.copyProperties(source, lineElement.properties, visualProperties);\n    lineElement.events.copyFrom(source.strokeSprite.events);\n    lineElement.fillOpacity = 0;\n    var fillElement = this.fillSprite;\n    $object.copyProperties(source, fillElement.properties, visualProperties);\n    fillElement.events.copyFrom(source.fillSprite.events);\n    fillElement.strokeOpacity = 0;\n  };\n\n  return LineSeriesSegment;\n}(Container);\n\nexport { LineSeriesSegment };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"LineSeriesSegment\"] = LineSeriesSegment;","map":{"version":3,"sources":["../../../../../src/.internal/charts/series/LineSeriesSegment.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesSegmentAdapters extends IContainerAdapters, ILineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link ILineSeriesSegmentEvents} for a list of available events\r\n * @see {@link ILineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class LineSeriesSegment extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesSegment\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.interactionsEnabled = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\t// Create fill element\r\n\t\tlet fillSprite = this.createChild(Sprite);\r\n\t\tthis.fillSprite = fillSprite;\r\n\t\tfillSprite.shouldClone = false;\r\n\t\tfillSprite.setElement(this.paper.add(\"path\"));\r\n\t\tfillSprite.isMeasured = false;\r\n\t\tthis._disposers.push(fillSprite);\r\n\r\n\r\n\t\t// Create line element\r\n\t\tlet strokeSprite = this.createChild(Sprite);\r\n\t\tthis.strokeSprite = strokeSprite;\r\n\t\tstrokeSprite.shouldClone = false;\r\n\t\tstrokeSprite.fill = color();\r\n\t\tstrokeSprite.setElement(this.paper.add(\"path\"));\r\n\t\tstrokeSprite.isMeasured = false;\r\n\t\tthis._disposers.push(strokeSprite);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param points       Points to connect\r\n\t * @param closePoints  ?\r\n\t * @param smoothnessX  Horizontal bezier setting (?)\r\n\t * @param smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number): void {\r\n\t\tif (!this.disabled) {\r\n\t\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\t\t\t\t// first moveTo helps to avoid Chrome straight line in the mask bug.\r\n\t\t\t\tlet path: string = $path.moveTo({ x: points[0].x - 0.2, y: points[0].y - 0.2 }) + $path.moveTo(points[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(points);\r\n\r\n\t\t\t\tif (this.strokeOpacity == 0 || this.strokeSprite.strokeOpacity == 0) {\r\n\t\t\t\t\t// like this and not if != 0, otherwise ranges stroke won't be drawn.\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.strokeSprite.path = path;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tif ($type.isNumber(closePoints[0].x) && $type.isNumber(closePoints[0].y)) {\r\n\t\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(closePoints);\r\n\t\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.fillSprite.path = \"\";\r\n\t\t\t\tthis.strokeSprite.path = \"\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties from a [[Sprite]] to both line and fill elements.\r\n\t *\r\n\t * @param source Source [[Sprite]] to copy properties from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\tlet lineElement = this.strokeSprite;\r\n\t\t$object.copyProperties(source, lineElement.properties, visualProperties);\r\n\t\tlineElement.events.copyFrom(source.strokeSprite.events);\r\n\t\tlineElement.fillOpacity = 0;\r\n\r\n\t\tlet fillElement = this.fillSprite;\r\n\t\t$object.copyProperties(source, fillElement.properties, visualProperties);\r\n\t\tfillElement.events.copyFrom(source.fillSprite.events);\r\n\t\tfillElement.strokeOpacity = 0;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeriesSegment\"] = LineSeriesSegment;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}