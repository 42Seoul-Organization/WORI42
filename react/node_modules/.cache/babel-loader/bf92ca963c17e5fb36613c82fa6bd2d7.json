{"ast":null,"code":"/**\r\n * Rectangular pattern module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Pattern } from \"./Pattern\";\nimport { registry } from \"../../Registry\";\n;\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Circular pattern\r\n */\n\nvar CirclePattern =\n/** @class */\nfunction (_super) {\n  __extends(CirclePattern, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function CirclePattern() {\n    var _this = _super.call(this) || this;\n\n    _this.properties[\"radius\"] = 2;\n    _this._circle = _this.paper.add(\"circle\");\n\n    _this.addElement(_this._circle);\n\n    _this.shapeRendering = \"auto\";\n    return _this;\n  }\n  /**\r\n   * Draws the circle element.\r\n   */\n\n\n  CirclePattern.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    if (this._circle) {\n      this._circle.attr({\n        \"r\": this.radius,\n        \"cx\": this.width / 2,\n        \"cy\": this.height / 2\n      });\n    }\n  };\n\n  Object.defineProperty(CirclePattern.prototype, \"radius\", {\n    /**\r\n     * @return Radius (px)\r\n     */\n    get: function get() {\n      return this.properties[\"radius\"];\n    },\n\n    /**\r\n     * Circle radius in pixels.\r\n     *\r\n     * @param value Radius (px)\r\n     */\n    set: function set(value) {\n      this.properties[\"radius\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return CirclePattern;\n}(Pattern);\n\nexport { CirclePattern };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"CirclePattern\"] = CirclePattern;","map":{"version":3,"sources":["../../../../../../src/.internal/core/rendering/fills/CirclePattern.ts"],"names":[],"mappings":"AAAA;;;;AAIA;;;;;;;AAMA,SAAS,OAAT,QAA2C,WAA3C;AAEA,SAAS,QAAT,QAAyB,gBAAzB;AAgBC;AAGD;;;;;;;AAOA;;;;AAGA,IAAA,aAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAmC,EAAA,SAAA,CAAA,aAAA,EAAA,MAAA,CAAA;AAYlC;;;;;AAGA,WAAA,aAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADR;;AAEC,IAAA,KAAI,CAAC,UAAL,CAAgB,QAAhB,IAA4B,CAA5B;AACA,IAAA,KAAI,CAAC,OAAL,GAAe,KAAI,CAAC,KAAL,CAAW,GAAX,CAAe,QAAf,CAAf;;AACA,IAAA,KAAI,CAAC,UAAL,CAAgB,KAAI,CAAC,OAArB;;AACA,IAAA,KAAI,CAAC,cAAL,GAAsB,MAAtB;;AACA;AAED;;;;;AAGU,EAAA,aAAA,CAAA,SAAA,CAAA,IAAA,GAAV,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,IAAN,CAAU,IAAV,CAAU,IAAV;;AACA,QAAI,KAAK,OAAT,EAAkB;AACjB,WAAK,OAAL,CAAa,IAAb,CAAkB;AAAE,aAAK,KAAK,MAAZ;AAAoB,cAAM,KAAK,KAAL,GAAa,CAAvC;AAA0C,cAAK,KAAK,MAAL,GAAc;AAA7D,OAAlB;AACA;AACD,GALS;;AAYV,EAAA,MAAA,CAAA,cAAA,CAAW,aAAA,CAAA,SAAX,EAAW,QAAX,EAAiB;AAKjB;;;SAGA,eAAA;AACC,aAAO,KAAK,UAAL,CAAgB,QAAhB,CAAP;AACA,KAVgB;;AALjB;;;;;SAKA,aAAkB,KAAlB,EAA+B;AAC9B,WAAK,UAAL,CAAgB,QAAhB,IAA4B,KAA5B;AACA,WAAK,IAAL;AACA,KAHgB;oBAAA;;AAAA,GAAjB;AAYD,SAAA,aAAA;AAAC,CAlDD,CAAmC,OAAnC,CAAA;;;AAoDA;;;;;;;AAMA,QAAQ,CAAC,iBAAT,CAA2B,eAA3B,IAA8C,aAA9C","sourcesContent":["/**\r\n * Rectangular pattern module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Pattern, PatternProperties } from \"./Pattern\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $type from \"../../utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for circle pattern\r\n */\r\nexport interface CirclePatternProperties extends PatternProperties {\r\n\tradius: number;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Circular pattern\r\n */\r\nexport class CirclePattern extends Pattern {\r\n\r\n\t/**\r\n\t * Reference to `<circle>` element used in pattern.\r\n\t */\r\n\tprotected _circle: $type.Optional<AMElement>;\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: CirclePatternProperties;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.properties[\"radius\"] = 2;\r\n\t\tthis._circle = this.paper.add(\"circle\");\r\n\t\tthis.addElement(this._circle);\r\n\t\tthis.shapeRendering = \"auto\";\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the circle element.\r\n\t */\r\n\tprotected draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this._circle) {\r\n\t\t\tthis._circle.attr({ \"r\": this.radius, \"cx\": this.width / 2, \"cy\":this.height / 2});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Circle radius in pixels.\r\n\t *\r\n\t * @param value Radius (px)\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.properties[\"radius\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px)\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.properties[\"radius\"];\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CirclePattern\"] = CirclePattern;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}