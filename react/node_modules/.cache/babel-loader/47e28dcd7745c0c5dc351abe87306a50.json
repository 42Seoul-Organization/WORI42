{"ast":null,"code":"/**\r\n * Module for \"Lighten\" filter.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Filter } from \"./Filter\";\nimport { registry } from \"../../Registry\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a \"Lighten\" filter.\r\n */\n\nvar LightenFilter =\n/** @class */\nfunction (_super) {\n  __extends(LightenFilter, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function LightenFilter() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"LightenFilter\"; // Create elements\n    // NOTE: we do not need to add each individual element to `_disposers`\n    // because `filterPrimitives` has an event handler which automatically adds\n    // anything added to it to `_disposers`\n\n    _this.feColorMatrix = _this.paper.add(\"feColorMatrix\");\n\n    _this.feColorMatrix.attr({\n      \"type\": \"matrix\"\n    });\n\n    _this.filterPrimitives.push(_this.feColorMatrix); // Set default properties\n\n\n    _this.lightness = 0;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(LightenFilter.prototype, \"lightness\", {\n    /**\r\n     * @return Lightness\r\n     */\n    get: function get() {\n      return this.properties[\"lightness\"];\n    },\n\n    /**\r\n     * Lightness of the target colors.\r\n     *\r\n     * If `lightness` is a positive number, the filter will make all colors\r\n     * lighter.\r\n     *\r\n     * If `lightness` is negative, colors will be darkened.\r\n     *\r\n     * @param value  Lightness\r\n     */\n    set: function set(value) {\n      this.properties[\"lightness\"] = value;\n      var v = value + 1;\n      this.feColorMatrix.attr({\n        \"values\": v + \" 0 0 0 0 0 \" + v + \" 0 0 0 0 0 \" + v + \" 0 0 0 0 0 1 0\"\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return LightenFilter;\n}(Filter);\n\nexport { LightenFilter };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"LightenFilter\"] = LightenFilter;","map":{"version":3,"sources":["../../../../../../src/.internal/core/rendering/filters/LightenFilter.ts"],"names":[],"mappings":"AAAA;;;;AAIA;;;;;;;AAMA,SAAS,MAAT,QAAyC,UAAzC;AAEA,SAAS,QAAT,QAAyB,gBAAzB;AAuBA;;;;;;;AAOA;;;;AAGA,IAAA,aAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAmC,EAAA,SAAA,CAAA,aAAA,EAAA,MAAA,CAAA;AAoBlC;;;;;AAGA,WAAA,aAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADR;;AAEC,IAAA,KAAI,CAAC,SAAL,GAAiB,eAAjB,CAFD,CAIC;AACA;AACA;AACA;;AACA,IAAA,KAAI,CAAC,aAAL,GAAqB,KAAI,CAAC,KAAL,CAAW,GAAX,CAAe,eAAf,CAArB;;AACA,IAAA,KAAI,CAAC,aAAL,CAAmB,IAAnB,CAAwB;AAAE,cAAQ;AAAV,KAAxB;;AACA,IAAA,KAAI,CAAC,gBAAL,CAAsB,IAAtB,CAA2B,KAAI,CAAC,aAAhC,EAVD,CAYC;;;AACA,IAAA,KAAI,CAAC,SAAL,GAAiB,CAAjB;;AAEA,IAAA,KAAI,CAAC,UAAL;;;AACA;;AAYD,EAAA,MAAA,CAAA,cAAA,CAAW,aAAA,CAAA,SAAX,EAAW,WAAX,EAAoB;AAMpB;;;SAGA,eAAA;AACC,aAAO,KAAK,UAAL,CAAgB,WAAhB,CAAP;AACA,KAXmB;;AAVpB;;;;;;;;;;SAUA,aAAqB,KAArB,EAAkC;AACjC,WAAK,UAAL,CAAgB,WAAhB,IAA+B,KAA/B;AACA,UAAI,CAAC,GAAG,KAAK,GAAG,CAAhB;AACA,WAAK,aAAL,CAAmB,IAAnB,CAAwB;AAAE,kBAAU,CAAC,GAAG,aAAJ,GAAoB,CAApB,GAAwB,aAAxB,GAAwC,CAAxC,GAA4C;AAAxD,OAAxB;AACA,KAJmB;oBAAA;;AAAA,GAApB;AAaD,SAAA,aAAA;AAAC,CAhED,CAAmC,MAAnC,CAAA;;;AAmEA;;;;;;;AAMA,QAAQ,CAAC,iBAAT,CAA2B,eAA3B,IAA8C,aAA9C","sourcesContent":["/**\r\n * Module for \"Lighten\" filter.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Filter, FilterProperties } from \"./Filter\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { registry } from \"../../Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines additional properties relative to the \"Lighten\" filter\r\n */\r\nexport interface LightenFilterProperties extends FilterProperties {\r\n\r\n\t/**\r\n\t * Lightness.\r\n\t */\r\n\tlightness: number;\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"Lighten\" filter.\r\n */\r\nexport class LightenFilter extends Filter {\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: LightenFilterProperties;\r\n\r\n\t/**\r\n\t * A storage for Filter property/value pairs.\r\n\t * @see [@link LightenFilterProperties]\r\n\t */\r\n\t//public propertyValues: Dictionary<LightenFilterProperties, any>;\r\n\r\n\t/**\r\n\t * Reference to the `<feColorMatrix>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic feColorMatrix: AMElement;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LightenFilter\";\r\n\r\n\t\t// Create elements\r\n\t\t// NOTE: we do not need to add each individual element to `_disposers`\r\n\t\t// because `filterPrimitives` has an event handler which automatically adds\r\n\t\t// anything added to it to `_disposers`\r\n\t\tthis.feColorMatrix = this.paper.add(\"feColorMatrix\");\r\n\t\tthis.feColorMatrix.attr({ \"type\": \"matrix\" });\r\n\t\tthis.filterPrimitives.push(this.feColorMatrix);\r\n\r\n\t\t// Set default properties\r\n\t\tthis.lightness = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Lightness of the target colors.\r\n\t *\r\n\t * If `lightness` is a positive number, the filter will make all colors\r\n\t * lighter.\r\n\t *\r\n\t * If `lightness` is negative, colors will be darkened.\r\n\t *\r\n\t * @param value  Lightness\r\n\t */\r\n\tpublic set lightness(value: number) {\r\n\t\tthis.properties[\"lightness\"] = value;\r\n\t\tlet v = value + 1;\r\n\t\tthis.feColorMatrix.attr({ \"values\": v + \" 0 0 0 0 0 \" + v + \" 0 0 0 0 0 \" + v + \" 0 0 0 0 0 1 0\" });\r\n\t}\r\n\r\n\t/**\r\n\t * @return Lightness\r\n\t */\r\n\tpublic get lightness(): number {\r\n\t\treturn this.properties[\"lightness\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LightenFilter\"] = LightenFilter;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}