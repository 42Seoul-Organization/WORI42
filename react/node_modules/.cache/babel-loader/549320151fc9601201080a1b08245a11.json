{"ast":null,"code":"import { __extends, __generator, __read } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Disposer } from \"./Disposer\";\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport * as $object from \"./Object\";\nimport * as $iter from \"./Iterator\";\nimport * as $string from \"./String\";\n/**\r\n * A disposable dictionary, which when disposed itself will call `dispose()`\r\n * method on all its items.\r\n */\n\nvar DictionaryDisposer =\n/** @class */\nfunction (_super) {\n  __extends(DictionaryDisposer, _super);\n\n  function DictionaryDisposer(dict) {\n    var _this = this;\n\n    var disposer = dict.events.on(\"removed\", function (x) {\n      x.oldValue.dispose();\n    }, undefined, false);\n    _this = _super.call(this, function () {\n      disposer.dispose(); // TODO clear the dictionary ?\n\n      $iter.each(dict.iterator(), function (a) {\n        var v = a[1];\n        v.dispose();\n      });\n    }) || this;\n    return _this;\n  }\n\n  return DictionaryDisposer;\n}(Disposer);\n\nexport { DictionaryDisposer };\n/**\r\n * A Dictionary is collection where values of some type can be mapped to\r\n * string keys.\r\n *\r\n * You might call it an \"associative list\" or \"associative array\".\r\n */\n\nvar Dictionary =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor\r\n   */\n  function Dictionary() {\n    /**\r\n     * Event dispatcher.\r\n     */\n    this.events = new EventDispatcher();\n    this._dictionary = {};\n  }\n  /**\r\n   * Returns `true` if key exists in Dictionary.\r\n   *\r\n   * @param key  The key to search for\r\n   * @return `true` if key exists, `false` if it doesn't\r\n   */\n\n\n  Dictionary.prototype.hasKey = function (key) {\n    return $object.hasKey(this._dictionary, key);\n  };\n  /**\r\n   * Returns the value for a specific key.\r\n   *\r\n   * @param key  The key to search for\r\n   * @return Value for the key, or `undefined` if it doesn't exist\r\n   */\n\n\n  Dictionary.prototype.getKey = function (key) {\n    return this._dictionary[key];\n  };\n  /**\r\n   * Inserts value at specific key.\r\n   *\r\n   * Will thrown an exception if the key already exists in the dictionary.\r\n   *\r\n   * @param key    Key\r\n   * @param value  Value\r\n   */\n\n\n  Dictionary.prototype.insertKey = function (key, value) {\n    if ($object.hasKey(this._dictionary, key)) {\n      throw new Error(\"Key \" + key + \" already exists in dictionary\");\n    } else {\n      this._dictionary[key] = value;\n\n      if (this.events.isEnabled(\"insertKey\")) {\n        this.events.dispatchImmediately(\"insertKey\", {\n          type: \"insertKey\",\n          target: this,\n          key: key,\n          newValue: value\n        });\n      }\n    }\n  };\n  /**\r\n   * Adds or updates key/value into dictionary.\r\n   *\r\n   * If the key already exists, the old value will be overwritten.\r\n   *\r\n   * If the new value is exactly the same as the old value (using ===), it won't do anything.\r\n   *\r\n   * @param key    Key\r\n   * @param value  Value\r\n   */\n\n\n  Dictionary.prototype.setKey = function (key, value) {\n    if ($object.hasKey(this._dictionary, key)) {\n      var oldValue = this._dictionary[key];\n\n      if (oldValue !== value) {\n        this._dictionary[key] = value;\n\n        if (this.events.isEnabled(\"setKey\")) {\n          this.events.dispatchImmediately(\"setKey\", {\n            type: \"setKey\",\n            target: this,\n            key: key,\n            oldValue: oldValue,\n            newValue: value\n          });\n        }\n\n        if (this.events.isEnabled(\"removed\")) {\n          this.events.dispatchImmediately(\"removed\", {\n            type: \"removed\",\n            target: this,\n            oldValue: oldValue\n          });\n        }\n      }\n    } else {\n      this._dictionary[key] = value;\n\n      if (this.events.isEnabled(\"insertKey\")) {\n        this.events.dispatchImmediately(\"insertKey\", {\n          type: \"insertKey\",\n          target: this,\n          key: key,\n          newValue: value\n        });\n      }\n    }\n  };\n  /**\r\n   * Updates the value at specific `key` using custom function.\r\n   *\r\n   * Passes in current value into the function, and uses its output as a new\r\n   * value.\r\n   *\r\n   * If the new value is exactly the same as the old value (using ===), it won't do anything.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param key  Key\r\n   * @param fn   Function to transform the value\r\n   */\n\n\n  Dictionary.prototype.updateKey = function (key, fn) {\n    if ($object.hasKey(this._dictionary, key)) {\n      var oldValue = this._dictionary[key];\n      var newValue = fn(oldValue);\n\n      if (oldValue !== newValue) {\n        this._dictionary[key] = newValue;\n\n        if (this.events.isEnabled(\"setKey\")) {\n          this.events.dispatchImmediately(\"setKey\", {\n            type: \"setKey\",\n            target: this,\n            key: key,\n            oldValue: oldValue,\n            newValue: newValue\n          });\n        }\n\n        if (this.events.isEnabled(\"removed\")) {\n          this.events.dispatchImmediately(\"removed\", {\n            type: \"removed\",\n            target: this,\n            oldValue: oldValue\n          });\n        }\n      }\n    } else {\n      throw new Error(\"Key \" + key + \" doesn't exist in dictionary\");\n    }\n  };\n  /**\r\n   * Removes value at specific `key` from dictionary.\r\n   *\r\n   * @param key  Key to remove\r\n   */\n\n\n  Dictionary.prototype.removeKey = function (key) {\n    if ($object.hasKey(this._dictionary, key)) {\n      var oldValue = this._dictionary[key];\n      delete this._dictionary[key];\n\n      if (this.events.isEnabled(\"removeKey\")) {\n        this.events.dispatchImmediately(\"removeKey\", {\n          type: \"removeKey\",\n          target: this,\n          key: key,\n          oldValue: oldValue\n        });\n      }\n\n      if (this.events.isEnabled(\"removed\")) {\n        this.events.dispatchImmediately(\"removed\", {\n          type: \"removed\",\n          target: this,\n          oldValue: oldValue\n        });\n      }\n    }\n  };\n  /**\r\n   * [insertKeyIfEmpty description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo description\r\n   * @param key      [description]\r\n   * @param ifEmpty  [description]\r\n   * @return [description]\r\n   */\n\n\n  Dictionary.prototype.insertKeyIfEmpty = function (key, ifEmpty) {\n    if (!this.hasKey(key)) {\n      this.insertKey(key, ifEmpty());\n    }\n\n    return this.getKey(key);\n  };\n  /**\r\n   * Removes all items from the dictionary.\r\n   */\n\n\n  Dictionary.prototype.clear = function () {\n    var _this = this; // TODO dispatch this after clear\n\n\n    if (this.events.isEnabled(\"removed\")) {\n      $object.each(this._dictionary, function (key, value) {\n        _this.events.dispatchImmediately(\"removed\", {\n          type: \"removed\",\n          target: _this,\n          oldValue: value\n        });\n      });\n    }\n\n    this._dictionary = {};\n\n    if (this.events.isEnabled(\"cleared\")) {\n      this.events.dispatchImmediately(\"cleared\", {\n        type: \"cleared\",\n        target: this\n      });\n    }\n  };\n  /**\r\n   * Copies items from another Dictionary.\r\n   *\r\n   * @param source  A Dictionary to copy items from\r\n   */\n\n\n  Dictionary.prototype.copyFrom = function (source) {\n    var _this = this;\n\n    $iter.each(source.iterator(), function (a) {\n      // TODO fix this type cast\n      _this.setKey(a[0], a[1]);\n    });\n  };\n  /**\r\n   * Returns an interator that can be used to iterate through all items in\r\n   * the dictionary.\r\n   *\r\n   * @return Iterator\r\n   */\n\n\n  Dictionary.prototype.iterator = function () {\n    // @todo fix this type after the Iterator bug is fixed\n    // https://github.com/Microsoft/TypeScript/issues/16730\n    return $object.entries(this._dictionary);\n  };\n  /**\r\n   * Returns an ES6 iterator for the keys/values of the dictionary.\r\n   */\n\n\n  Dictionary.prototype[Symbol.iterator] = function () {\n    var _a, _b, _i, key;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [];\n\n          for (_b in this._dictionary) {\n            _a.push(_b);\n          }\n\n          _i = 0;\n          _c.label = 1;\n\n        case 1:\n          if (!(_i < _a.length)) return [3\n          /*break*/\n          , 4];\n          key = _a[_i];\n          if (!$object.hasKey(this._dictionary, key)) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , [key, this._dictionary[key]]];\n\n        case 2:\n          _c.sent();\n\n          _c.label = 3;\n\n        case 3:\n          _i++;\n          return [3\n          /*break*/\n          , 1];\n\n        case 4:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  };\n  /**\r\n   * Calls `f` for each key/value in the dictionary.\r\n   */\n\n\n  Dictionary.prototype.each = function (f) {\n    $iter.each(this.iterator(), function (_a) {\n      var _b = __read(_a, 2),\n          key = _b[0],\n          value = _b[1];\n\n      return f(key, value);\n    });\n  };\n  /**\r\n   * Returns an iterator that can be used to iterate through all items in\r\n   * the dictionary, ordered by key.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Iterator\r\n   */\n\n\n  Dictionary.prototype.sortedIterator = function () {\n    return $iter.sort(this.iterator(), function (x, y) {\n      return $string.order(x[0], y[0]);\n    });\n  };\n\n  return Dictionary;\n}();\n\nexport { Dictionary };\n/**\r\n * A version of a [[Dictionary]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\n\nvar DictionaryTemplate =\n/** @class */\nfunction (_super) {\n  __extends(DictionaryTemplate, _super);\n  /**\r\n   * Constructor\r\n   *\r\n   * @param t Template object\r\n   */\n\n\n  function DictionaryTemplate(t) {\n    var _this = _super.call(this) || this;\n\n    _this.template = t;\n    return _this;\n  }\n\n  Object.defineProperty(DictionaryTemplate.prototype, \"template\", {\n    /**\r\n     * @return Template object\r\n     */\n    get: function get() {\n      return this._template;\n    },\n\n    /**\r\n     * A \"template\" object to copy all properties from when creating new list\r\n     * items.\r\n     *\r\n     * @param v  Template object\r\n     */\n    set: function set(v) {\n      v.isTemplate = true;\n      this._template = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all elements from other dictionary.\r\n   *\r\n   * @param source  Source dictionary\r\n   */\n\n  DictionaryTemplate.prototype.copyFrom = function (source) {\n    var _this = this;\n\n    $iter.each(source.iterator(), function (a) {\n      // TODO fix this type cast\n      // TODO why does this need to clone ?\n      _this.setKey(a[0], a[1].clone());\n    });\n  };\n  /**\r\n   * Instantiates a new object of the specified type, adds it to specified\r\n   * `key` in the dictionary, and returns it.\r\n   *\r\n   * @param make  Item type to use. Will use the default type for the dictionary if not specified.\r\n   * @return      Newly created item\r\n   */\n\n\n  DictionaryTemplate.prototype.create = function (key) {\n    var _this = this;\n\n    return this.insertKeyIfEmpty(key, function () {\n      return _this.template.clone();\n    });\n  };\n\n  return DictionaryTemplate;\n}(Dictionary);\n\nexport { DictionaryTemplate };","map":{"version":3,"sources":["../../../../../src/.internal/core/utils/Dictionary.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IDisposer, Disposer } from \"./Disposer\";\r\nimport { EventDispatcher, AMEvent } from \"./EventDispatcher\";\r\nimport { Optional } from \"./Type\";\r\nimport { IClone } from \"./Clone\";\r\nimport * as $object from \"./Object\";\r\nimport * as $iter from \"./Iterator\";\r\nimport * as $string from \"./String\";\r\n\r\n/**\r\n * Defines events from [[Dictionary]].\r\n */\r\nexport interface IDictionaryEvents<Key, Value> {\r\n\r\n\t/**\r\n\t * Invoked when an item is removed from the dictionary.\r\n\t */\r\n\tremoved: {\r\n\r\n\t\t/**\r\n\t\t * Removed value.\r\n\t\t */\r\n\t\toldValue: Value;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when dictionary is cleared.\r\n\t */\r\n\tcleared: {};\r\n\r\n\t/**\r\n\t * Invoked when `insertKey()` method is called.\r\n\t */\r\n\tinsertKey: {\r\n\r\n\t\t/**\r\n\t\t * Key.\r\n\t\t */\r\n\t\tkey: Key;\r\n\r\n\t\t/**\r\n\t\t * Added value.\r\n\t\t */\r\n\t\tnewValue: Value;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when `setKey()` method is called.\r\n\t */\r\n\tsetKey: {\r\n\r\n\t\t/**\r\n\t\t * Key.\r\n\t\t */\r\n\t\tkey: Key;\r\n\r\n\t\t/**\r\n\t\t * Removed value. (if overwriting)\r\n\t\t */\r\n\t\toldValue: Value;\r\n\r\n\t\t/**\r\n\t\t * Added value.\r\n\t\t */\r\n\t\tnewValue: Value;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when `removeKey()` method is called.\r\n\t */\r\n\tremoveKey: {\r\n\r\n\t\t/**\r\n\t\t * Key.\r\n\t\t */\r\n\t\tkey: Key;\r\n\r\n\t\t/**\r\n\t\t * Removed value.\r\n\t\t */\r\n\t\toldValue: Value;\r\n\r\n\t};\r\n\r\n}\r\n\r\n/**\r\n * [K description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Descirption\r\n */\r\nexport type DictionaryLike<K, A> = $iter.Iterable<[K, A]> & {\r\n\tevents: EventDispatcher<{ removed: { oldValue: A } }>;\r\n};\r\n\r\n/**\r\n * A disposable dictionary, which when disposed itself will call `dispose()`\r\n * method on all its items.\r\n */\r\nexport class DictionaryDisposer<K, A extends IDisposer> extends Disposer {\r\n\tconstructor(dict: DictionaryLike<K, A>) {\r\n\t\tconst disposer = dict.events.on(\"removed\", (x) => {\r\n\t\t\tx.oldValue.dispose();\r\n\t\t}, undefined, false);\r\n\r\n\t\tsuper(() => {\r\n\t\t\tdisposer.dispose();\r\n\r\n\t\t\t// TODO clear the dictionary ?\r\n\t\t\t$iter.each(dict.iterator(), (a) => {\r\n\t\t\t\tconst v = a[1];\r\n\t\t\t\tv.dispose();\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * A Dictionary is collection where values of some type can be mapped to\r\n * string keys.\r\n *\r\n * You might call it an \"associative list\" or \"associative array\".\r\n */\r\nexport class Dictionary<Key extends string, T> {\r\n\r\n\t/**\r\n\t * Key/value pairs\r\n\t */\r\n\tprivate _dictionary: { [key in Key]?: T };\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t */\r\n\tpublic events: EventDispatcher<AMEvent<Dictionary<Key, T>, IDictionaryEvents<Key, T>>> = new EventDispatcher();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tthis._dictionary = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if key exists in Dictionary.\r\n\t *\r\n\t * @param key  The key to search for\r\n\t * @return `true` if key exists, `false` if it doesn't\r\n\t */\r\n\tpublic hasKey(key: Key): boolean {\r\n\t\treturn $object.hasKey(this._dictionary, key);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the value for a specific key.\r\n\t *\r\n\t * @param key  The key to search for\r\n\t * @return Value for the key, or `undefined` if it doesn't exist\r\n\t */\r\n\tpublic getKey(key: Key): Optional<T> {\r\n\t\treturn this._dictionary[key];\r\n\t}\r\n\r\n\t/**\r\n\t * Inserts value at specific key.\r\n\t *\r\n\t * Will thrown an exception if the key already exists in the dictionary.\r\n\t *\r\n\t * @param key    Key\r\n\t * @param value  Value\r\n\t */\r\n\tpublic insertKey(key: Key, value: T): void {\r\n\t\tif ($object.hasKey(this._dictionary, key)) {\r\n\t\t\tthrow new Error(\"Key \" + key + \" already exists in dictionary\");\r\n\r\n\t\t} else {\r\n\t\t\tthis._dictionary[key] = value;\r\n\r\n\t\t\tif (this.events.isEnabled(\"insertKey\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"insertKey\", {\r\n\t\t\t\t\ttype: \"insertKey\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tkey: key,\r\n\t\t\t\t\tnewValue: value\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds or updates key/value into dictionary.\r\n\t *\r\n\t * If the key already exists, the old value will be overwritten.\r\n\t *\r\n\t * If the new value is exactly the same as the old value (using ===), it won't do anything.\r\n\t *\r\n\t * @param key    Key\r\n\t * @param value  Value\r\n\t */\r\n\tpublic setKey(key: Key, value: T): void {\r\n\t\tif ($object.hasKey(this._dictionary, key)) {\r\n\t\t\tconst oldValue = this._dictionary[key];\r\n\r\n\t\t\tif (oldValue !== value) {\r\n\t\t\t\tthis._dictionary[key] = value;\r\n\r\n\t\t\t\tif (this.events.isEnabled(\"setKey\")) {\r\n\t\t\t\t\tthis.events.dispatchImmediately(\"setKey\", {\r\n\t\t\t\t\t\ttype: \"setKey\",\r\n\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\tkey: key,\r\n\t\t\t\t\t\toldValue: oldValue,\r\n\t\t\t\t\t\tnewValue: value\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.events.isEnabled(\"removed\")) {\r\n\t\t\t\t\tthis.events.dispatchImmediately(\"removed\", {\r\n\t\t\t\t\t\ttype: \"removed\",\r\n\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\toldValue: oldValue\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tthis._dictionary[key] = value;\r\n\r\n\t\t\tif (this.events.isEnabled(\"insertKey\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"insertKey\", {\r\n\t\t\t\t\ttype: \"insertKey\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tkey: key,\r\n\t\t\t\t\tnewValue: value\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the value at specific `key` using custom function.\r\n\t *\r\n\t * Passes in current value into the function, and uses its output as a new\r\n\t * value.\r\n\t *\r\n\t * If the new value is exactly the same as the old value (using ===), it won't do anything.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param key  Key\r\n\t * @param fn   Function to transform the value\r\n\t */\r\n\tpublic updateKey(key: Key, fn: (value: T) => T): void {\r\n\t\tif ($object.hasKey(this._dictionary, key)) {\r\n\t\t\tconst oldValue = this._dictionary[key];\r\n\t\t\tconst newValue = fn(oldValue);\r\n\r\n\t\t\tif (oldValue !== newValue) {\r\n\t\t\t\tthis._dictionary[key] = newValue;\r\n\r\n\t\t\t\tif (this.events.isEnabled(\"setKey\")) {\r\n\t\t\t\t\tthis.events.dispatchImmediately(\"setKey\", {\r\n\t\t\t\t\t\ttype: \"setKey\",\r\n\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\tkey: key,\r\n\t\t\t\t\t\toldValue: oldValue,\r\n\t\t\t\t\t\tnewValue: newValue\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.events.isEnabled(\"removed\")) {\r\n\t\t\t\t\tthis.events.dispatchImmediately(\"removed\", {\r\n\t\t\t\t\t\ttype: \"removed\",\r\n\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\toldValue: oldValue\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Key \" + key + \" doesn't exist in dictionary\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes value at specific `key` from dictionary.\r\n\t *\r\n\t * @param key  Key to remove\r\n\t */\r\n\tpublic removeKey(key: Key): void {\r\n\t\tif ($object.hasKey(this._dictionary, key)) {\r\n\t\t\tconst oldValue = this._dictionary[key];\r\n\r\n\t\t\tdelete this._dictionary[key];\r\n\r\n\t\t\tif (this.events.isEnabled(\"removeKey\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"removeKey\", {\r\n\t\t\t\t\ttype: \"removeKey\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tkey: key,\r\n\t\t\t\t\toldValue: oldValue\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this.events.isEnabled(\"removed\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"removed\", {\r\n\t\t\t\t\ttype: \"removed\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\toldValue: oldValue\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [insertKeyIfEmpty description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo description\r\n\t * @param key      [description]\r\n\t * @param ifEmpty  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic insertKeyIfEmpty(key: Key, ifEmpty: () => T): T {\r\n\t\tif (!this.hasKey(key)) {\r\n\t\t\tthis.insertKey(key, ifEmpty());\r\n\t\t}\r\n\r\n\t\treturn <T>this.getKey(key);\r\n\t}\r\n\r\n\t/**\r\n\t * Removes all items from the dictionary.\r\n\t */\r\n\tpublic clear(): void {\r\n\t\t// TODO dispatch this after clear\r\n\t\tif (this.events.isEnabled(\"removed\")) {\r\n\t\t\t$object.each(this._dictionary, (key, value) => {\r\n\t\t\t\tthis.events.dispatchImmediately(\"removed\", {\r\n\t\t\t\t\ttype: \"removed\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\toldValue: value\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis._dictionary = {};\r\n\r\n\t\tif (this.events.isEnabled(\"cleared\")) {\r\n\t\t\tthis.events.dispatchImmediately(\"cleared\", {\r\n\t\t\t\ttype: \"cleared\",\r\n\t\t\t\ttarget: this\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies items from another Dictionary.\r\n\t *\r\n\t * @param source  A Dictionary to copy items from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\t$iter.each(source.iterator(), (a) => {\r\n\t\t\t// TODO fix this type cast\r\n\t\t\tthis.setKey(<Key>a[0], a[1]);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an interator that can be used to iterate through all items in\r\n\t * the dictionary.\r\n\t *\r\n\t * @return Iterator\r\n\t */\r\n\tpublic iterator(): $iter.Iterator<[Key, T]> {\r\n\t\t// @todo fix this type after the Iterator bug is fixed\r\n\t\t// https://github.com/Microsoft/TypeScript/issues/16730\r\n\t\treturn <$iter.Iterator<[Key, T]>>$object.entries(this._dictionary);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an ES6 iterator for the keys/values of the dictionary.\r\n\t */\r\n\tpublic *[Symbol.iterator](): Iterator<[Key, T]> {\r\n\t\t// TODO make this more efficient ?\r\n\t\tfor (let key in this._dictionary) {\r\n\t\t\tif ($object.hasKey(this._dictionary, key)) {\r\n\t\t\t\tyield [<Key>key, this._dictionary[key]];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Calls `f` for each key/value in the dictionary.\r\n\t */\r\n\tpublic each(f: (key: Key, value: T) => void): void {\r\n\t\t$iter.each(this.iterator(), ([key, value]) => f(key, value));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an iterator that can be used to iterate through all items in\r\n\t * the dictionary, ordered by key.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Iterator\r\n\t */\r\n\tpublic sortedIterator(): $iter.Iterator<[Key, T]> {\r\n\t\treturn $iter.sort(this.iterator(), (x, y) => $string.order(x[0], y[0]));\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * A version of a [[Dictionary]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\r\nexport class DictionaryTemplate<Key extends string, T extends IClone<T> & { isTemplate: boolean }> extends Dictionary<Key, T> {\r\n\t/**\r\n\t * A template object.\r\n\t *\r\n\t * @todo Make this private\r\n\t */\r\n\tpublic _template!: T;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t *\r\n\t * @param t Template object\r\n\t */\r\n\tpublic constructor(t: T) {\r\n\t\tsuper();\r\n\t\tthis.template = t;\r\n\t}\r\n\r\n\t/**\r\n\t * A \"template\" object to copy all properties from when creating new list\r\n\t * items.\r\n\t *\r\n\t * @param v  Template object\r\n\t */\r\n\tpublic set template(v: T) {\r\n\t\tv.isTemplate = true;\r\n\t\tthis._template = v;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Template object\r\n\t */\r\n\tpublic get template(): T {\r\n\t\treturn this._template;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all elements from other dictionary.\r\n\t *\r\n\t * @param source  Source dictionary\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\t$iter.each(source.iterator(), (a) => {\r\n\t\t\t// TODO fix this type cast\r\n\t\t\t// TODO why does this need to clone ?\r\n\t\t\tthis.setKey(<Key>a[0], a[1].clone());\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Instantiates a new object of the specified type, adds it to specified\r\n\t * `key` in the dictionary, and returns it.\r\n\t *\r\n\t * @param make  Item type to use. Will use the default type for the dictionary if not specified.\r\n\t * @return      Newly created item\r\n\t */\r\n\tpublic create(key: Key): T {\r\n\t\treturn this.insertKeyIfEmpty(key, () => this.template.clone());\r\n\t}\r\n\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}