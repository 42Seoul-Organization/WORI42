{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { ColorModifier } from \"./ColorModifier\";\nimport { registry } from \"../../Registry\";\nimport * as $math from \"../../utils/Math\";\nimport * as $type from \"../../utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * This class can be used to modify linear gradient steps, changing visual\r\n * properties like lightness, brightness, opacity of each set.\r\n *\r\n * It can also set offsets for each gradient step.\r\n *\r\n * E.g. if I want to fill a columns in a column series to be a solid fill from\r\n * top to 80% of height, then gradually fades out, I can use the following\r\n * gradient modifier as a `fillModifier`:\r\n *\r\n * ```TypeScript\r\n * let fillModifier = new am4core.GradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JavaScript\r\n * var fillModifier = new am4core.GradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JSON\r\n * \"series\": [{\r\n *   \"type\": \"ColumnSeries\",\r\n *   \"columns\": {\r\n *     \"fillModifier\": {\r\n *       \"type\": \"GradientModifier\",\r\n *       \"opacities\": [1, 1, 0],\r\n *       \"offsets\": [0, 0.8, 1]\r\n *     }\r\n *   }\r\n * }]\r\n * ```\r\n */\n\nvar GradientModifier =\n/** @class */\nfunction (_super) {\n  __extends(GradientModifier, _super);\n  /**\r\n   * Constructor.\r\n   */\n\n\n  function GradientModifier() {\n    var _this = _super.call(this) || this;\n\n    _this.lightnesses = [];\n    _this.brightnesses = [];\n    _this.opacities = [];\n    _this.offsets = [];\n    _this.className = \"GradientModifier\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(GradientModifier.prototype, \"lightnesses\", {\n    /**\r\n     * @return Lightness values\r\n     */\n    get: function get() {\n      return this._lightnesses;\n    },\n\n    /**\r\n     * An array of lightness values for each step.\r\n     *\r\n     * @param value  Lightness values\r\n     */\n    set: function set(value) {\n      this._lightnesses = value;\n      this._brightnesses = [];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GradientModifier.prototype, \"brightnesses\", {\n    /**\r\n     * @return Brightness values\r\n     */\n    get: function get() {\n      return this._brightnesses;\n    },\n\n    /**\r\n     * An array of brightness values for each step.\r\n     *\r\n     * @param value  Brightness values\r\n     */\n    set: function set(value) {\n      this._brightnesses = value;\n      this._lightnesses = [];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GradientModifier.prototype, \"opacities\", {\n    /**\r\n     * @return Opacity values\r\n     */\n    get: function get() {\n      return this._opacities;\n    },\n\n    /**\r\n     * An array of opacity values for each step.\r\n     *\r\n     * @param value  Opacity values\r\n     */\n    set: function set(value) {\n      this._opacities = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GradientModifier.prototype, \"offsets\", {\n    /**\r\n     * @return Offsets\r\n     */\n    get: function get() {\n      return this._offsets;\n    },\n\n    /**\r\n     * An array of relative position (0-1) for each step.\r\n     *\r\n     * If not set, all steps will be of equal relative length.\r\n     *\r\n     * @param value  Offsets\r\n     */\n    set: function set(value) {\n      this._offsets = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Modifies the color based on step setting.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value  Source color\r\n   * @return A gradient that matches set modification rules\r\n   */\n\n  GradientModifier.prototype.modify = function (value) {\n    // Clear current gradient\n    this.gradient.clear(); // Get step count\n\n    var count = 0;\n\n    if (this.opacities) {\n      count = $math.max(count, this.opacities.length);\n    }\n\n    if (this.lightnesses) {\n      count = $math.max(count, this.lightnesses.length);\n    }\n\n    if (this.brightnesses) {\n      count = $math.max(count, this.brightnesses.length);\n    } // Init step values\n\n\n    var opacity = 1,\n        lightness,\n        brightness; // Apply steps\n\n    for (var i = 0; i < count; i++) {\n      // Take base color\n      var color = value; // Check if there are any parameters for this step\n\n      if (this.opacities && $type.isNumber(this.opacities[i])) {\n        opacity = this.opacities[i];\n      }\n\n      if (this.lightnesses && $type.isNumber(this.lightnesses[i])) {\n        lightness = this.lightnesses[i];\n        brightness = undefined;\n      }\n\n      if (this.brightnesses && $type.isNumber(this.brightnesses[i])) {\n        brightness = this.brightnesses[i];\n        lightness = undefined;\n      } // Check if we need to brighten/lighten color\n\n\n      if ($type.isNumber(brightness)) {\n        color = value.brighten(this.brightnesses[i]);\n      } else if ($type.isNumber(lightness)) {\n        color = value.lighten(this.lightnesses[i]);\n      } // Get offset (it's OK if it's undefined)\n\n\n      var offset = this.offsets[i]; // Apply step\n\n      this.gradient.addColor(color, opacity, offset);\n    }\n\n    return this.gradient;\n  };\n\n  GradientModifier.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this._offsets = source.offsets;\n    this._brightnesses = source.brightnesses;\n    this._lightnesses = source.lightnesses;\n    this._opacities = source.opacities;\n  };\n\n  return GradientModifier;\n}(ColorModifier);\n\nexport { GradientModifier };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"GradientModifier\"] = GradientModifier;","map":{"version":3,"sources":["../../../../../../src/.internal/core/rendering/fills/GradientModifier.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColorModifier } from \"./ColorModifier\";\r\nimport { LinearGradient } from \"./LinearGradient\";\r\nimport { RadialGradient } from \"./RadialGradient\";\r\nimport { Color } from \"../../utils/Color\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $math from \"../../utils/Math\";\r\nimport * as $type from \"../../utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class can be used to modify linear gradient steps, changing visual\r\n * properties like lightness, brightness, opacity of each set.\r\n *\r\n * It can also set offsets for each gradient step.\r\n *\r\n * E.g. if I want to fill a columns in a column series to be a solid fill from\r\n * top to 80% of height, then gradually fades out, I can use the following\r\n * gradient modifier as a `fillModifier`:\r\n *\r\n * ```TypeScript\r\n * let fillModifier = new am4core.GradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JavaScript\r\n * var fillModifier = new am4core.GradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JSON\r\n * \"series\": [{\r\n *   \"type\": \"ColumnSeries\",\r\n *   \"columns\": {\r\n *     \"fillModifier\": {\r\n *       \"type\": \"GradientModifier\",\r\n *       \"opacities\": [1, 1, 0],\r\n *       \"offsets\": [0, 0.8, 1]\r\n *     }\r\n *   }\r\n * }]\r\n * ```\r\n */\r\nexport class GradientModifier extends ColorModifier {\r\n\r\n\t/**\r\n\t * A reference to the gradient instance that this modifier is used for.\r\n\t */\r\n\tpublic gradient: LinearGradient | RadialGradient;\r\n\r\n\t/**\r\n\t * An array of lightness values for each step.\r\n\t */\r\n\tprotected _lightnesses!: number[];\r\n\r\n\t/**\r\n\t * An array of brightness values for each step.\r\n\t */\r\n\tprotected _brightnesses!: number[];\r\n\r\n\t/**\r\n\t * An array of opacity values for each step.\r\n\t */\r\n\tprotected _opacities!: number[];\r\n\r\n\t/**\r\n\t * An array of relative position (0-1) for each step.\r\n\t *\r\n\t * If not set, all steps will be of equal relative length.\r\n\t */\r\n\tprotected _offsets!: number[];\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.lightnesses = [];\r\n\t\tthis.brightnesses = [];\r\n\t\tthis.opacities = [];\r\n\t\tthis.offsets = [];\r\n\t\tthis.className = \"GradientModifier\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * An array of lightness values for each step.\r\n\t *\r\n\t * @param value  Lightness values\r\n\t */\r\n\tpublic set lightnesses(value: number[]) {\r\n\t\tthis._lightnesses = value;\r\n\t\tthis._brightnesses = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @return Lightness values\r\n\t */\r\n\tpublic get lightnesses(): number[] {\r\n\t\treturn this._lightnesses;\r\n\t}\r\n\r\n\t/**\r\n\t * An array of brightness values for each step.\r\n\t *\r\n\t * @param value  Brightness values\r\n\t */\r\n\tpublic set brightnesses(value: number[]) {\r\n\t\tthis._brightnesses = value;\r\n\t\tthis._lightnesses = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @return Brightness values\r\n\t */\r\n\tpublic get brightnesses(): number[] {\r\n\t\treturn this._brightnesses;\r\n\t}\r\n\r\n\t/**\r\n\t * An array of opacity values for each step.\r\n\t *\r\n\t * @param value  Opacity values\r\n\t */\r\n\tpublic set opacities(value: number[]) {\r\n\t\tthis._opacities = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Opacity values\r\n\t */\r\n\tpublic get opacities(): number[] {\r\n\t\treturn this._opacities;\r\n\t}\r\n\r\n\t/**\r\n\t * An array of relative position (0-1) for each step.\r\n\t *\r\n\t * If not set, all steps will be of equal relative length.\r\n\t *\r\n\t * @param value  Offsets\r\n\t */\r\n\tpublic set offsets(value: number[]) {\r\n\t\tthis._offsets = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Offsets\r\n\t */\r\n\tpublic get offsets(): number[] {\r\n\t\treturn this._offsets;\r\n\t}\r\n\r\n\t/**\r\n\t * Modifies the color based on step setting.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Source color\r\n\t * @return A gradient that matches set modification rules\r\n\t */\r\n\tpublic modify(value: Color): Color | LinearGradient | RadialGradient {\r\n\r\n\t\t// Clear current gradient\r\n\t\tthis.gradient.clear();\r\n\r\n\t\t// Get step count\r\n\t\tlet count: number = 0;\r\n\t\tif (this.opacities) {\r\n\t\t\tcount = $math.max(count, this.opacities.length);\r\n\t\t}\r\n\t\tif (this.lightnesses) {\r\n\t\t\tcount = $math.max(count, this.lightnesses.length);\r\n\t\t}\r\n\t\tif (this.brightnesses) {\r\n\t\t\tcount = $math.max(count, this.brightnesses.length);\r\n\t\t}\r\n\r\n\t\t// Init step values\r\n\t\tlet opacity: number = 1,\r\n\t\t\tlightness: $type.Optional<number>,\r\n\t\t\tbrightness: $type.Optional<number>;\r\n\r\n\t\t// Apply steps\r\n\t\tfor (let i = 0; i < count; i++) {\r\n\r\n\t\t\t// Take base color\r\n\t\t\tlet color = value;\r\n\r\n\t\t\t// Check if there are any parameters for this step\r\n\t\t\tif (this.opacities && $type.isNumber(this.opacities[i])) {\r\n\t\t\t\topacity = this.opacities[i];\r\n\t\t\t}\r\n\t\t\tif (this.lightnesses && $type.isNumber(this.lightnesses[i])) {\r\n\t\t\t\tlightness = this.lightnesses[i];\r\n\t\t\t\tbrightness = undefined;\r\n\t\t\t}\r\n\t\t\tif (this.brightnesses && $type.isNumber(this.brightnesses[i])) {\r\n\t\t\t\tbrightness = this.brightnesses[i];\r\n\t\t\t\tlightness = undefined;\r\n\t\t\t}\r\n\r\n\t\t\t// Check if we need to brighten/lighten color\r\n\t\t\tif ($type.isNumber(brightness)) {\r\n\t\t\t\tcolor = value.brighten(this.brightnesses[i]);\r\n\t\t\t}\r\n\t\t\telse if ($type.isNumber(lightness)) {\r\n\t\t\t\tcolor = value.lighten(this.lightnesses[i]);\r\n\t\t\t}\r\n\r\n\t\t\t// Get offset (it's OK if it's undefined)\r\n\t\t\tlet offset: number = this.offsets[i];\r\n\r\n\t\t\t// Apply step\r\n\t\t\tthis.gradient.addColor(color, opacity, offset);\r\n\t\t}\r\n\t\treturn this.gradient;\r\n\t}\r\n\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\tthis._offsets = source.offsets;\r\n\t\tthis._brightnesses = source.brightnesses;\r\n\t\tthis._lightnesses = source.lightnesses;\r\n\t\tthis._opacities = source.opacities;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GradientModifier\"] = GradientModifier;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}