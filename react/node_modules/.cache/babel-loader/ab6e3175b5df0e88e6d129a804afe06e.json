{"ast":null,"code":"/**\r\n * Cursor module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { getInteraction } from \"../../core/interaction/Interaction\";\nimport { registry } from \"../../core/Registry\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\nimport { system } from \"../../core/System\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Main Cursor class with common cursor functionality.\r\n *\r\n * Chart-specific cursors must extend this class.\r\n *\r\n * @see {@link ICursorEvents} for a list of available events\r\n * @see {@link ICursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\n\nvar Cursor =\n/** @class */\nfunction (_super) {\n  __extends(Cursor, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Cursor() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Current cursor position during selection.\r\n     *\r\n     * @todo Better description\r\n     */\n\n\n    _this.point = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * Specifies the rules when cursor needs to be moved or hidden.\r\n     */\n\n    _this._stick = \"none\";\n    _this.className = \"Cursor\"; // Set defaults\n\n    _this.width = percent(100);\n    _this.height = percent(100);\n    _this.shouldClone = false;\n\n    _this.hide(0);\n\n    _this.trackable = true;\n    _this.clickable = true;\n    _this.isMeasured = false; // Add events on body to trigger down and up events (to start zooming or\n    // selection)\n\n    var interaction = getInteraction();\n\n    _this._disposers.push(interaction.body.events.on(\"down\", _this.handleCursorDown, _this));\n\n    _this._disposers.push(interaction.body.events.on(\"up\", _this.handleCursorUp, _this));\n\n    _this._disposers.push(interaction.body.events.on(\"track\", _this.handleCursorMove, _this)); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Handle pointer movement in document and update cursor position as needed.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event Event\r\n   */\n\n\n  Cursor.prototype.handleCursorMove = function (event) {\n    if (!this.interactionsEnabled || this.interactions.isTouchProtected && event.touch) {\n      return;\n    }\n\n    if ((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\" || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\n      // We want to let zoom/pan continue even if cursor is outside chart area\n      if (!this.isHidden || !this.isHiding) {\n        this.hide();\n      }\n\n      return;\n    }\n\n    var local = $utils.documentPointToSprite(event.pointer.point, this);\n\n    if (this._stick == \"hard\" && this._stickPoint) {\n      local = this._stickPoint;\n    }\n\n    if (this._stick == \"soft\" && this._stickPoint) {\n      if (!this.fitsToBounds(local)) {\n        local = this._stickPoint;\n      }\n    }\n\n    this.triggerMove(local);\n    return local;\n  };\n  /**\r\n   * Hides actual SVG elements and handles hiding animations.\r\n   *\r\n   * @param duration  Fade out duration (ms)\r\n   * @return Fade out duration (ms)\r\n   * @ignore\r\n   */\n\n\n  Cursor.prototype.hideReal = function (duration) {\n    if ((this._stick == \"hard\" || this._stick == \"soft\") && this._stickPoint) {\n      return;\n    }\n\n    return _super.prototype.hideReal.call(this, duration);\n  };\n  /**\r\n   * Places the cursor at specific point.\r\n   *\r\n   * The second parameter has following options:\r\n   *\r\n   * `\"none\"` - placed cursor will only be there until mouse/touch moves, then\r\n   * it either moves to a new place (if pointer over plot area) or is hidden.\r\n   *\r\n   * `\"soft\"` - cursor will stay in the place if mouse/touch is happening\r\n   * outside chart, but will move to a new place whe plot area is hovered or\r\n   * touched.\r\n   *\r\n   * `\"hard\"` - cursor will stay in place no matter what, until it is moved by\r\n   * another `triggerMove()` call.\r\n   *\r\n   * The third parameter - `force` (since `4.9.5`) - if set to `true` will\r\n   * make cursor execute all of the actions associated with cursor move,\r\n   * including line redraws, tooltip updates, etc. Useful when underlying\r\n   * chart data is dynamically being updated.\r\n   *\r\n   * @param point  Point to place cursor at\r\n   * @param stick  Level of cursor stickiness to the place\r\n   * @param force  Force cursor move\r\n   */\n\n\n  Cursor.prototype.triggerMove = function (point, stick, force) {\n    point.x = $math.round(point.x, 1);\n    point.y = $math.round(point.y, 1);\n\n    if (stick) {\n      this._stick = stick;\n    }\n\n    if (stick == \"hard\" || stick == \"soft\") {\n      this._stickPoint = point;\n    }\n\n    this.triggerMoveReal(point, force);\n  };\n  /**\r\n   * Places the cursor at specific point.\r\n   *\r\n   * @param point Point to place cursor at\r\n   */\n\n\n  Cursor.prototype.triggerMoveReal = function (point, force) {\n    if (this.point.x != point.x || this.point.y != point.y || force) {\n      this.point = point;\n      this.invalidatePosition(); // hide cursor if it's out of bounds\n\n      if (this.fitsToBounds(point)) {\n        this.show(0);\n      } else {\n        // unless we are selecting (mouse is down)\n        if (!this.downPoint) {\n          this.hide(0);\n        }\n      }\n\n      if (this.visible) {\n        this.getPositions();\n        this.dispatch(\"cursorpositionchanged\"); // not good to dispatch later (check step count example)\n      }\n    }\n  };\n  /**\r\n   * Simulates pressing down (click/touch) action by a cursor.\r\n   *\r\n   * @param point               Point of action\r\n   */\n\n\n  Cursor.prototype.triggerDown = function (point) {\n    this.triggerDownReal(point);\n  };\n  /**\r\n   * Simulates pressing down (click/touch) action by a cursor.\r\n   *\r\n   * @param point               Point of action\r\n   */\n\n\n  Cursor.prototype.triggerDownReal = function (point) {\n    switch (this._generalBehavior) {\n      case \"zoom\":\n        this.dispatchImmediately(\"zoomstarted\");\n        break;\n\n      case \"select\":\n        this.dispatchImmediately(\"selectstarted\");\n        break;\n\n      case \"pan\":\n        this.dispatchImmediately(\"panstarted\");\n        getInteraction().setGlobalStyle(MouseCursorStyle.grabbing);\n        break;\n    }\n  };\n  /**\r\n   * Simulates the action of release of the mouse down / touch.\r\n   *\r\n   * @param point               Point of action\r\n   */\n\n\n  Cursor.prototype.triggerUp = function (point) {\n    this.triggerUpReal(point);\n  };\n  /**\r\n   * Simulates the action of release of the mouse down / touch.\r\n   *\r\n   * @param point               Point of action\r\n   */\n\n\n  Cursor.prototype.triggerUpReal = function (point) {\n    system.requestFrame();\n    this.updatePoint(this.upPoint);\n    var interaction = getInteraction();\n\n    if ($math.getDistance(this._upPointOrig, this._downPointOrig) > interaction.getHitOption(this.interactions, \"hitTolerance\")) {\n      switch (this._generalBehavior) {\n        case \"zoom\":\n          this.dispatch(\"zoomended\");\n          break;\n\n        case \"select\":\n          this.dispatch(\"selectended\");\n          break;\n\n        case \"pan\":\n          this.dispatch(\"panended\");\n          interaction.setGlobalStyle(MouseCursorStyle.default);\n          break;\n      }\n\n      this.downPoint = undefined;\n      this.updateSelection();\n    }\n    /*\r\n    else {\r\n        \r\n        if(this._generalBehavior == \"select\"){\r\n            this.dispatchImmediately(\"selectended\");\r\n        }\r\n        this.dispatchImmediately(\"behaviorcanceled\");\r\n        interaction.setGlobalStyle(MouseCursorStyle.default);\r\n        this.downPoint = undefined;\r\n    }*/\n\n  };\n  /**\r\n   * Updates selection dimensions on size change.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Cursor.prototype.updateSelection = function () {};\n  /**\r\n   * Updates cursors current positions.\r\n   */\n\n\n  Cursor.prototype.getPositions = function () {\n    // positions are used by axes or series\n    this.xPosition = this.point.x / this.innerWidth;\n    this.yPosition = 1 - this.point.y / this.innerHeight;\n  };\n  /**\r\n   * Handles pointer down event so we can start zoom or selection.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event Original event\r\n   */\n\n\n  Cursor.prototype.handleCursorDown = function (event) {\n    if (!this.interactionsEnabled || this.interactions.isTouchProtected && event.touch || !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\n      return;\n    } // Get local point\n\n\n    var local = $utils.documentPointToSprite(event.pointer.point, this);\n\n    if (this._stick == \"hard\" && this._stickPoint) {\n      local = this._stickPoint;\n    }\n\n    if (!this.fitsToBounds(local)) {\n      return;\n    }\n\n    this._downPointOrig = {\n      x: local.x,\n      y: local.y\n    }; // We need to cancel the event to prevent gestures on touch devices\n\n    if (event.event.cancelable && this.shouldPreventGestures(event.touch) && this.fitsToBounds(local)) {\n      event.event.preventDefault();\n    } // Make this happen\n\n\n    this.triggerMove(local);\n    this.triggerDown(local);\n  };\n  /**\r\n   * Determines whether Cursor should prevent default action on move.\r\n   *\r\n   * Child classes should override this as necessary.\r\n   *\r\n   * @return Prevent default?\r\n   */\n\n\n  Cursor.prototype.shouldPreventGestures = function (touch) {\n    return true;\n  };\n  /**\r\n   * Updates the coordinates of where pointer down event occurred\r\n   * (was pressed).\r\n   */\n\n\n  Cursor.prototype.updatePoint = function (point) {};\n  /**\r\n   * Handles pointer up event - finishes zoom or selection action.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event Original event\r\n   */\n\n\n  Cursor.prototype.handleCursorUp = function (event) {\n    if (!this.interactionsEnabled) {\n      return;\n    }\n\n    if (!this.downPoint && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\n      return;\n    }\n\n    var local = $utils.documentPointToSprite(event.pointer.point, this);\n\n    if (!this.downPoint || !this.fitsToBounds(this.downPoint)) {\n      return;\n    }\n\n    if (this._stick == \"hard\" && this._stickPoint) {\n      local = this._stickPoint;\n    }\n\n    this._upPointOrig = {\n      x: local.x,\n      y: local.y\n    };\n    this.triggerMove(local);\n    this.triggerUp(local);\n  };\n\n  Object.defineProperty(Cursor.prototype, \"chart\", {\n    /**\r\n     * @return Chart\r\n     */\n    get: function get() {\n      return this._chart;\n    },\n\n    /**\r\n     * A reference to a [[Chart]] the cursor belongs to.\r\n     *\r\n     * @param value  Chart\r\n     */\n    set: function set(value) {\n      this._chart = value;\n\n      if ($type.hasValue(this._chart.plotContainer)) {\n        getInteraction().lockElement(this._chart.plotContainer.interactions);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Cursor;\n}(Container);\n\nexport { Cursor };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Cursor\"] = Cursor;","map":{"version":3,"sources":["../../../../../src/.internal/charts/cursors/Cursor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Cursor module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { getInteraction, IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IInteractionObjectEvents } from \"../../core/interaction/InteractionObjectEvents\";\r\nimport { IPoint, } from \"../../core/defs/IPoint\";\r\nimport { Chart } from \"../Chart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { system } from \"../../core/System\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Cursor]].\r\n */\r\nexport interface ICursorProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Cursor]].\r\n */\r\nexport interface ICursorEvents extends IContainerEvents {\r\n\r\n\t/**\r\n\t * Invoked when position of cursor changes.\r\n\t */\r\n\tcursorpositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts selecting a range with a cursor, e.g. presses\r\n\t * down mouse button and drags the cursor.\r\n\t */\r\n\tselectstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when selection has ended, e.g. user releases mouse button.\r\n\t */\r\n\tselectended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts zooming using cursor.\r\n\t */\r\n\tzoomstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user clicked to start zooming/panning/selecting but haven't\r\n\t * finished the operation.\r\n\t */\r\n\tbehaviorcanceled: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done zooming using cursor.\r\n\t */\r\n\tzoomended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts panning using cursor.\r\n\t */\r\n\tpanstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done panning using cursor.\r\n\t */\r\n\tpanended: {};\r\n\r\n\t/**\r\n\t * Invoked when user is panning using cursor.\r\n\t */\r\n\tpanning: {};\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Cursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICursorAdapters extends IContainerAdapters, ICursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Main Cursor class with common cursor functionality.\r\n *\r\n * Chart-specific cursors must extend this class.\r\n *\r\n * @see {@link ICursorEvents} for a list of available events\r\n * @see {@link ICursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class Cursor extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICursorEvents;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection started.\r\n\t */\r\n\tpublic downPoint: IPoint;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection ended.\r\n\t */\r\n\tpublic upPoint: IPoint;\r\n\r\n\t/**\r\n\t * Current cursor position during selection.\r\n\t *\r\n\t * @todo Better description\r\n\t */\r\n\tpublic point: IPoint = { x: 0, y: 0 };\r\n\r\n\t/**\r\n\t * Relative horizontal position.\r\n\t *\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic xPosition: number;\r\n\r\n\t/**\r\n\t * Relative vertical position.\r\n\t *\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic yPosition: number;\r\n\r\n\t/**\r\n\t * [_usesSelection description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _usesSelection: boolean;\r\n\r\n\t/**\r\n\t * What to do when user pressed down and drags cursor: zoom or select.\r\n\t */\r\n\tprotected _generalBehavior: \"zoom\" | \"select\" | \"pan\"; // todo: draw\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: Chart;\r\n\r\n\t/**\r\n\t * Specifies the rules when cursor needs to be moved or hidden.\r\n\t */\r\n\tprotected _stick: \"hard\" | \"soft\" | \"none\" = \"none\";\r\n\r\n\t/**\r\n\t * A screen point that cursor is \"stuck\" to.\r\n\t */\r\n\tprotected _stickPoint: IPoint;\r\n\r\n\t/**\r\n\t * non-modified down point\r\n\t * @ignore\r\n\t */\r\n\tprotected _downPointOrig: IPoint;\r\n\r\n\t/**\r\n\t * non-modified up point\r\n\t * @ignore\r\n\t */\r\n\tprotected _upPointOrig: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Cursor\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.shouldClone = false;\r\n\r\n\t\tthis.hide(0);\r\n\r\n\t\tthis.trackable = true;\r\n\t\tthis.clickable = true;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// Add events on body to trigger down and up events (to start zooming or\r\n\t\t// selection)\r\n\t\tconst interaction = getInteraction();\r\n\t\tthis._disposers.push(interaction.body.events.on(\"down\", this.handleCursorDown, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"up\", this.handleCursorUp, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"track\", this.handleCursorMove, this));\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handle pointer movement in document and update cursor position as needed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Event\r\n\t */\r\n\tpublic handleCursorMove(event: IInteractionObjectEvents[\"track\"]): IPoint {\r\n\r\n\r\n\t\tif (!this.interactionsEnabled || (this.interactions.isTouchProtected && event.touch)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\t// We want to let zoom/pan continue even if cursor is outside chart area\r\n\t\t\tif (!this.isHidden || !this.isHiding) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tif (this._stick == \"hard\" && this._stickPoint) {\r\n\t\t\tlocal = this._stickPoint;\r\n\t\t}\r\n\r\n\t\tif (this._stick == \"soft\" && this._stickPoint) {\r\n\t\t\tif (!this.fitsToBounds(local)) {\r\n\t\t\t\tlocal = this._stickPoint;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.triggerMove(local);\r\n\t\treturn local;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides actual SVG elements and handles hiding animations.\r\n\t *\r\n\t * @param duration  Fade out duration (ms)\r\n\t * @return Fade out duration (ms)\r\n\t * @ignore\r\n\t */\r\n\tprotected hideReal(duration?: number): $type.Optional<Animation> {\r\n\t\tif ((this._stick == \"hard\" || this._stick == \"soft\") && this._stickPoint) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\treturn super.hideReal(duration);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * The second parameter has following options:\r\n\t *\r\n\t * `\"none\"` - placed cursor will only be there until mouse/touch moves, then\r\n\t * it either moves to a new place (if pointer over plot area) or is hidden.\r\n\t *\r\n\t * `\"soft\"` - cursor will stay in the place if mouse/touch is happening\r\n\t * outside chart, but will move to a new place whe plot area is hovered or\r\n\t * touched.\r\n\t *\r\n\t * `\"hard\"` - cursor will stay in place no matter what, until it is moved by\r\n\t * another `triggerMove()` call.\r\n\t *\r\n\t * The third parameter - `force` (since `4.9.5`) - if set to `true` will\r\n\t * make cursor execute all of the actions associated with cursor move,\r\n\t * including line redraws, tooltip updates, etc. Useful when underlying\r\n\t * chart data is dynamically being updated.\r\n\t *\r\n\t * @param point  Point to place cursor at\r\n\t * @param stick  Level of cursor stickiness to the place\r\n\t * @param force  Force cursor move\r\n\t */\r\n\tpublic triggerMove(point: IPoint, stick?: \"hard\" | \"soft\" | \"none\", force?: boolean): void {\r\n\r\n\t\tpoint.x = $math.round(point.x, 1);\r\n\t\tpoint.y = $math.round(point.y, 1);\r\n\r\n\t\tif (stick) {\r\n\t\t\tthis._stick = stick;\r\n\t\t}\r\n\r\n\t\tif (stick == \"hard\" || stick == \"soft\") {\r\n\t\t\tthis._stickPoint = point;\r\n\t\t}\r\n\r\n\t\tthis.triggerMoveReal(point, force);\r\n\t}\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint, force?: boolean): void {\r\n\t\tif (this.point.x != point.x || this.point.y != point.y || force) {\r\n\t\t\tthis.point = point;\r\n\t\t\tthis.invalidatePosition();\r\n\t\t\t// hide cursor if it's out of bounds\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.show(0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// unless we are selecting (mouse is down)\r\n\t\t\t\tif (!this.downPoint) {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this.visible) {\r\n\t\t\t\tthis.getPositions();\r\n\t\t\t\tthis.dispatch(\"cursorpositionchanged\"); // not good to dispatch later (check step count example)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tpublic triggerDown(point: IPoint) {\r\n\t\tthis.triggerDownReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\t\tswitch (this._generalBehavior) {\r\n\t\t\tcase \"zoom\":\r\n\t\t\t\tthis.dispatchImmediately(\"zoomstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"select\":\r\n\t\t\t\tthis.dispatchImmediately(\"selectstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pan\":\r\n\t\t\t\tthis.dispatchImmediately(\"panstarted\");\r\n\t\t\t\tgetInteraction().setGlobalStyle(MouseCursorStyle.grabbing);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tpublic triggerUp(point: IPoint) {\r\n\t\tthis.triggerUpReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tprotected triggerUpReal(point: IPoint) {\r\n\t\tsystem.requestFrame();\r\n\t\tthis.updatePoint(this.upPoint);\r\n\t\tlet interaction = getInteraction();\r\n\r\n\t\tif ($math.getDistance(this._upPointOrig, this._downPointOrig) > interaction.getHitOption(this.interactions, \"hitTolerance\")) {\r\n\t\t\tswitch (this._generalBehavior) {\r\n\t\t\t\tcase \"zoom\":\r\n\t\t\t\t\tthis.dispatch(\"zoomended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"select\":\r\n\t\t\t\t\tthis.dispatch(\"selectended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"pan\":\r\n\t\t\t\t\tthis.dispatch(\"panended\");\r\n\t\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t\tthis.updateSelection();\r\n\t\t}\r\n\t\t/*\r\n\t\telse {\r\n\t\t\t\r\n\t\t\tif(this._generalBehavior == \"select\"){\r\n\t\t\t\tthis.dispatchImmediately(\"selectended\");\r\n\t\t\t}\r\n\t\t\tthis.dispatchImmediately(\"behaviorcanceled\");\r\n\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}*/\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions(): void {\r\n\t\t// positions are used by axes or series\r\n\t\tthis.xPosition = this.point.x / this.innerWidth;\r\n\t\tthis.yPosition = 1 - this.point.y / this.innerHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer down event so we can start zoom or selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original event\r\n\t */\r\n\tpublic handleCursorDown(event: IInteractionEvents[\"down\"]): void {\r\n\r\n\t\tif (!this.interactionsEnabled || (this.interactions.isTouchProtected && event.touch) || !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Get local point\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tif (this._stick == \"hard\" && this._stickPoint) {\r\n\t\t\tlocal = this._stickPoint;\r\n\t\t}\r\n\t\t\r\n\t\tif (!this.fitsToBounds(local)) {\r\n\t\t\treturn;\r\n\t\t}\t\r\n\r\n\r\n\t\tthis._downPointOrig = { x: local.x, y: local.y };\r\n\r\n\t\t// We need to cancel the event to prevent gestures on touch devices\r\n\t\tif (event.event.cancelable && this.shouldPreventGestures(event.touch) && this.fitsToBounds(local)) {\r\n\t\t\tevent.event.preventDefault();\r\n\t\t}\r\n\r\n\t\t// Make this happen\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerDown(local);\r\n\t}\r\n\r\n\t/**\r\n\t * Determines whether Cursor should prevent default action on move.\r\n\t *\r\n\t * Child classes should override this as necessary.\r\n\t * \r\n\t * @return Prevent default?\r\n\t */\r\n\tprotected shouldPreventGestures(touch: boolean): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer up event - finishes zoom or selection action.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original event\r\n\t */\r\n\tpublic handleCursorUp(event: IInteractionEvents[\"up\"]): void {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!this.downPoint && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tif(!this.downPoint || !this.fitsToBounds(this.downPoint)){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this._stick == \"hard\" && this._stickPoint) {\r\n\t\t\tlocal = this._stickPoint;\r\n\t\t}\r\n\r\n\t\tthis._upPointOrig = { x: local.x, y: local.y };\r\n\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerUp(local);\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to a [[Chart]] the cursor belongs to.\r\n\t *\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: this[\"_chart\"]) {\r\n\t\tthis._chart = value;\r\n\t\tif ($type.hasValue((<any>this._chart).plotContainer)) {\r\n\t\t\tgetInteraction().lockElement((<any>this._chart).plotContainer.interactions);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): this[\"_chart\"] {\r\n\t\treturn this._chart;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Cursor\"] = Cursor;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}