{"ast":null,"code":"/**\r\n * A collection of keyboard-related utilities accessible via `keyboard`\r\n * instance.\r\n */\n\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport * as $type from \"./Type\";\n/**\r\n * A class that represents collection of keyboard-related utilities.\r\n *\r\n * Do not instantiate this class directly, but rather use `keyboard` variable.\r\n */\n\nvar Keyboard =\n/** @class */\nfunction () {\n  function Keyboard() {}\n  /**\r\n   * Returns a named key based on information contained in the event or\r\n   * \"other\".\r\n   *\r\n   * @param ev  A keyboard event\r\n   * @return Keyboard named key\r\n   */\n\n\n  Keyboard.prototype.getEventKey = function (ev) {\n    // Get the key code\n    var code = ev.keyCode || ev.which,\n        key; // Map to internal key\n\n    switch (code) {\n      case 38:\n        key = \"up\";\n        break;\n\n      case 40:\n        key = \"down\";\n        break;\n\n      case 37:\n        key = \"left\";\n        break;\n\n      case 39:\n        key = \"right\";\n        break;\n\n      case 13:\n        key = \"enter\";\n        break;\n\n      case 27:\n        key = \"esc\";\n        break;\n\n      case 36:\n        key = \"home\";\n        break;\n\n      case 35:\n        key = \"end\";\n        break;\n\n      case 9:\n        key = \"tab\";\n        break;\n\n      case 17:\n        key = \"ctrl\";\n        break;\n\n      case 18:\n        key = \"alt\";\n        break;\n\n      case 16:\n        key = \"shift\";\n        break;\n\n      case 32:\n        key = \"space\";\n        break;\n\n      case 36:\n        key = \"home\";\n        break;\n\n      case 35:\n        key = \"end\";\n        break;\n\n      case 33:\n        key = \"pgup\";\n        break;\n\n      case 34:\n        key = \"pgdn\";\n        break;\n\n      case 45:\n        key = \"ins\";\n        break;\n\n      case 46:\n        key = \"del\";\n        break;\n\n      case 107:\n        key = \"plus\";\n        break;\n\n      case 109:\n        key = \"minus\";\n        break;\n\n      default:\n        key = \"other\";\n        break;\n    }\n\n    return key;\n  };\n  /**\r\n   * Checks if event key is one or more of the selected named keys.\r\n   *\r\n   * @param ev   Keyboard event\r\n   * @param key  Named key or array of keys\r\n   * @return Is event key one of the list?\r\n   */\n\n\n  Keyboard.prototype.isKey = function (ev, key) {\n    var eventKey = this.getEventKey(ev);\n\n    if ($type.isString(key)) {\n      key = [key];\n    }\n\n    return key.indexOf(eventKey) !== -1;\n  };\n  /**\r\n   * Returns `true` if shift key was presset at the moment of the event.\r\n   *\r\n   * @param ev  Event object\r\n   * @return Was shift pressed?\r\n   */\n\n\n  Keyboard.prototype.shiftKey = function (ev) {\n    return ev.shiftKey;\n  };\n  /**\r\n   * Returns `true` if ctrl key was presset at the moment of the event.\r\n   *\r\n   * @param ev  Event object\r\n   * @return Was ctrl pressed?\r\n   */\n\n\n  Keyboard.prototype.ctrlKey = function (ev) {\n    return ev.ctrlKey;\n  };\n  /**\r\n   * Returns `true` if alt key was presset at the moment of the event\r\n   * @param ev  Event object\r\n   * @return Was alt pressed?\r\n   */\n\n\n  Keyboard.prototype.altKey = function (ev) {\n    return ev.altKey;\n  };\n  /**\r\n   * Returns `true` if meta key was presset at the moment of the event\r\n   * @param ev  Event object\r\n   * @return Was meta pressed?\r\n   */\n\n\n  Keyboard.prototype.metaKey = function (ev) {\n    return ev.metaKey;\n  };\n\n  return Keyboard;\n}();\n\nexport { Keyboard };\n/**\r\n * A single [[Keyboard]] instance to be reused across all elements so that\r\n * they don't need to instantiate their own.\r\n *\r\n * @ignore Exclude from docs\r\n */\n\nexport var keyboard = new Keyboard();","map":{"version":3,"sources":["../../../../../src/.internal/core/utils/Keyboard.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * A collection of keyboard-related utilities accessible via `keyboard`\r\n * instance.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $type from \"./Type\";\r\n\r\n/**\r\n * Represents named (usually frequently used) keyboard keys for easy referece.\r\n */\r\nexport type KeyboardKeys =\r\n\t\"up\"\r\n\t| \"down\"\r\n\t| \"left\"\r\n\t| \"right\"\r\n\t| \"enter\"\r\n\t| \"esc\"\r\n\t| \"home\"\r\n\t| \"tab\"\r\n\t| \"end\"\r\n\t| \"ctrl\"\r\n\t| \"alt\"\r\n\t| \"shift\"\r\n\t| \"space\"\r\n\t| \"home\"\r\n\t| \"end\"\r\n\t| \"pgup\"\r\n\t| \"pgdn\"\r\n\t| \"ins\"\r\n\t| \"del\"\r\n\t| \"plus\"\r\n\t| \"minus\"\r\n\t| \"other\";\r\n\r\n/**\r\n * A class that represents collection of keyboard-related utilities.\r\n *\r\n * Do not instantiate this class directly, but rather use `keyboard` variable.\r\n */\r\nexport class Keyboard {\r\n\r\n\t/**\r\n\t * Returns a named key based on information contained in the event or\r\n\t * \"other\".\r\n\t *\r\n\t * @param ev  A keyboard event\r\n\t * @return Keyboard named key\r\n\t */\r\n\tpublic getEventKey(ev: KeyboardEvent): KeyboardKeys {\r\n\r\n\t\t// Get the key code\r\n\t\tlet code: number = ev.keyCode || ev.which,\r\n\t\t\tkey: KeyboardKeys;\r\n\r\n\t\t// Map to internal key\r\n\t\tswitch (code) {\r\n\t\t\tcase 38:  key = \"up\";    break;\r\n\t\t\tcase 40:  key = \"down\";  break;\r\n\t\t\tcase 37:  key = \"left\";  break;\r\n\t\t\tcase 39:  key = \"right\"; break;\r\n\t\t\tcase 13:  key = \"enter\"; break;\r\n\t\t\tcase 27:  key = \"esc\";   break;\r\n\t\t\tcase 36:  key = \"home\";  break;\r\n\t\t\tcase 35:  key = \"end\";   break;\r\n\t\t\tcase 9:   key = \"tab\";   break;\r\n\t\t\tcase 17:  key = \"ctrl\";  break;\r\n\t\t\tcase 18:  key = \"alt\";   break;\r\n\t\t\tcase 16:  key = \"shift\"; break;\r\n\t\t\tcase 32:  key = \"space\"; break;\r\n\t\t\tcase 36:  key = \"home\";  break;\r\n\t\t\tcase 35:  key = \"end\";   break;\r\n\t\t\tcase 33:  key = \"pgup\";  break;\r\n\t\t\tcase 34:  key = \"pgdn\";  break;\r\n\t\t\tcase 45:  key = \"ins\";   break;\r\n\t\t\tcase 46:  key = \"del\";   break;\r\n\t\t\tcase 107: key = \"plus\";  break;\r\n\t\t\tcase 109: key = \"minus\"; break;\r\n\t\t\tdefault:  key = \"other\"; break;\r\n\t\t}\r\n\r\n\t\treturn key;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if event key is one or more of the selected named keys.\r\n\t *\r\n\t * @param ev   Keyboard event\r\n\t * @param key  Named key or array of keys\r\n\t * @return Is event key one of the list?\r\n\t */\r\n\tpublic isKey(ev: KeyboardEvent, key: string | string[]): boolean {\r\n\t\tlet eventKey = this.getEventKey(ev);\r\n\t\tif ($type.isString(key)) {\r\n\t\t\tkey = [key];\r\n\t\t}\r\n\t\treturn key.indexOf(eventKey) !== -1;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if shift key was presset at the moment of the event.\r\n\t *\r\n\t * @param ev  Event object\r\n\t * @return Was shift pressed?\r\n\t */\r\n\tpublic shiftKey(ev: KeyboardEvent | MouseEvent): boolean {\r\n\t\treturn ev.shiftKey;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if ctrl key was presset at the moment of the event.\r\n\t *\r\n\t * @param ev  Event object\r\n\t * @return Was ctrl pressed?\r\n\t */\r\n\tpublic ctrlKey(ev: KeyboardEvent | MouseEvent): boolean {\r\n\t\treturn ev.ctrlKey;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if alt key was presset at the moment of the event\r\n\t * @param ev  Event object\r\n\t * @return Was alt pressed?\r\n\t */\r\n\tpublic altKey(ev: KeyboardEvent | MouseEvent): boolean {\r\n\t\treturn ev.altKey;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if meta key was presset at the moment of the event\r\n\t * @param ev  Event object\r\n\t * @return Was meta pressed?\r\n\t */\r\n\tpublic metaKey(ev: KeyboardEvent | MouseEvent): boolean {\r\n\t\treturn ev.metaKey;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * A single [[Keyboard]] instance to be reused across all elements so that\r\n * they don't need to instantiate their own.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport let keyboard = new Keyboard();\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}