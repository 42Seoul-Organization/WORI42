{"ast":null,"code":"/**\r\n * Module that defines everything related to building Curved Columns.\r\n * It is a container which has CurvedColumn element which is a Sprite.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Column } from \"./Column\";\nimport { Sprite } from \"../../core/Sprite\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport { registry } from \"../../core/Registry\";\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\nimport { percent } from \"../../core/utils/Percent\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Class used to creates CurvedColumns.\r\n *\r\n * @see {@link ICurvedColumnEvents} for a list of available events\r\n * @see {@link ICurvedColumnAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar CurvedColumn =\n/** @class */\nfunction (_super) {\n  __extends(CurvedColumn, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function CurvedColumn() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"CurvedColumn\";\n    return _this;\n  }\n  /**\r\n   * [createAssets description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  CurvedColumn.prototype.createAssets = function () {\n    this.curvedColumn = this.createChild(Sprite);\n    this.curvedColumn.shouldClone = false;\n    this.setPropertyValue(\"tension\", 0.7);\n    this.width = percent(120);\n    this.height = percent(120); // some dirty hack so that if user access column, it won't get error\n\n    this.column = this.curvedColumn;\n  };\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  CurvedColumn.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    var w = this.realWidth;\n    var h = this.realHeight;\n    var x = this.realX - this.pixelX;\n    var y = this.realY - this.pixelY;\n    var points; // TODO can this be removed ?\n\n    $utils.used(this.width);\n    var tensionX = 1;\n    var tensionY = 1;\n\n    if (this.orientation == \"vertical\") {\n      tensionX = this.tension;\n      points = [{\n        x: 0,\n        y: h + y\n      }, {\n        x: w / 2,\n        y: y\n      }, {\n        x: w,\n        y: h + y\n      }];\n    } else {\n      tensionY = this.tension;\n      points = [{\n        x: x,\n        y: 0\n      }, {\n        x: x + w,\n        y: h / 2\n      }, {\n        x: x,\n        y: h\n      }];\n    }\n\n    var path = $path.moveTo(points[0]) + new $smoothing.Tension(tensionX, tensionY).smooth(points);\n    this.column.path = path;\n  };\n  /**\r\n   * Copies all parameters from another [[CurvedColumn]].\r\n   *\r\n   * @param source  Source CurvedColumn\r\n   */\n\n\n  CurvedColumn.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    if (this.curvedColumn) {\n      this.curvedColumn.copyFrom(source.curvedColumn);\n    }\n  };\n\n  Object.defineProperty(CurvedColumn.prototype, \"tension\", {\n    /**\r\n     * @return Tension (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tension\");\n    },\n\n    /**\r\n     * Horizontal tension of the curve.\r\n     *\r\n     * Tension defines how \"lose\" the line will be.\r\n     *\r\n     * 1 is the maximum tension which would result in pointy columns with\r\n     * straight edges.\r\n     *\r\n     * The smaller the tension th wider the column will be.\r\n     *\r\n     * @default 0.7\r\n     * @param value tension (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tension\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CurvedColumn.prototype, \"orientation\", {\n    /**\r\n     * Orientation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"orientation\");\n    },\n\n    /**\r\n     * Orientation of the column.\r\n     *\r\n     * Available options: \"vertical\" (default) and \"horizontal\".\r\n     *\r\n     * @default \"vertical\"\r\n     * @param value  Orientation\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"orientation\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return CurvedColumn;\n}(Column);\n\nexport { CurvedColumn };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"CurvedColumn\"] = CurvedColumn;","map":{"version":3,"sources":["../../../../../src/.internal/charts/elements/CurvedColumn.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Module that defines everything related to building Curved Columns.\r\n * It is a container which has CurvedColumn element which is a Sprite.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnProperties extends IColumnProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Tension\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * Orientation of the column\r\n\t *\r\n\t * @default \"vertical\"\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnAdapters extends IColumnAdapters, ICurvedColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates CurvedColumns.\r\n *\r\n * @see {@link ICurvedColumnEvents} for a list of available events\r\n * @see {@link ICurvedColumnAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICurvedColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICurvedColumnEvents;\r\n\r\n\t/**\r\n\t * The element that holds curved column shape.\r\n\t */\r\n\tpublic curvedColumn: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * [createAssets description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected createAssets(): void {\r\n\t\tthis.curvedColumn = this.createChild(Sprite);\r\n\t\tthis.curvedColumn.shouldClone = false;\r\n\r\n\t\tthis.setPropertyValue(\"tension\", 0.7);\r\n\r\n\t\tthis.width = percent(120);\r\n\t\tthis.height = percent(120);\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.curvedColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tlet w = this.realWidth;\r\n\t\tlet h = this.realHeight;\r\n\t\tlet x = this.realX - this.pixelX;\r\n\t\tlet y = this.realY - this.pixelY;\r\n\r\n\t\tlet points: IPoint[];\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\t$utils.used(this.width);\r\n\r\n\t\tlet tensionX = 1;\r\n\t\tlet tensionY = 1;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\ttensionX = this.tension;\r\n\t\t\tpoints = [{ x: 0, y: h + y }, { x: w / 2, y: y }, { x: w, y: h + y }];\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttensionY = this.tension;\r\n\t\t\tpoints = [{ x: x, y: 0 }, { x: x + w, y: h / 2 }, { x: x, y: h }];\r\n\t\t}\r\n\r\n\t\tlet path = $path.moveTo(points[0]) + new $smoothing.Tension(tensionX, tensionY).smooth(points);\r\n\t\tthis.column.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[CurvedColumn]].\r\n\t *\r\n\t * @param source  Source CurvedColumn\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.curvedColumn) {\r\n\t\t\tthis.curvedColumn.copyFrom(source.curvedColumn);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension of the curve.\r\n\t *\r\n\t * Tension defines how \"lose\" the line will be.\r\n\t *\r\n\t * 1 is the maximum tension which would result in pointy columns with\r\n\t * straight edges.\r\n\t *\r\n\t * The smaller the tension th wider the column will be.\r\n\t *\r\n\t * @default 0.7\r\n\t * @param value tension (0-1)\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tension (0-1)\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the column.\r\n\t *\r\n\t * Available options: \"vertical\" (default) and \"horizontal\".\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumn\"] = CurvedColumn;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}