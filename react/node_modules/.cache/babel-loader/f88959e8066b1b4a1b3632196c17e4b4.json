{"ast":null,"code":"/**\r\n * This module contains a base class for an SVG filter.\r\n *\r\n * Filters can be used to decorate, change and transform just about any DOM\r\n * element.\r\n *\r\n * A Filter works by applying one or more effects (primitives) to SVG element.\r\n *\r\n * For more information on how SVG filters work, refer to\r\n * [this MDN tutorial](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/SVG_Filters_Tutorial).\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { BaseObject } from \"../../Base\";\nimport { getGhostPaper } from \"../Paper\";\nimport { Animation, AnimationDisposer } from \"../../utils/Animation\";\nimport { List } from \"../../utils/List\";\nimport * as $object from \"../../utils/Object\";\nimport * as $iter from \"../../utils/Iterator\";\n;\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Base filter class.\r\n *\r\n * This class while can be instantiated will not do anything. It is just a base\r\n * functionality for any other \"real\" filters to extend.\r\n *\r\n * Filters can be used to decorate, change and transform just about any DOM\r\n * element.\r\n *\r\n * A Filter works by applying one or more effects (primitives) to SVG element.\r\n *\r\n * For more information on how SVG filters work, refer to\r\n * [this MDN tutorial](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/SVG_Filters_Tutorial).\r\n *\r\n * @todo Example\r\n */\n\nvar Filter =\n/** @class */\nfunction (_super) {\n  __extends(Filter, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Filter() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * A storage for Filter property/value pairs.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @see {@link FilterProperties}\r\n     */\n\n\n    _this.properties = {};\n    /**\r\n     * Identifies if this object is a \"template\" and should not be treated as\r\n     * real object that is drawn or actually used in the chart.\r\n     */\n\n    _this.isTemplate = false;\n    /**\r\n     * [_scale description]\r\n     *\r\n     * @todo Description\r\n     */\n\n    _this._scale = 1;\n    /**\r\n     * [_nonScaling description]\r\n     *\r\n     * @todo Description\r\n     */\n\n    _this._nonScaling = true;\n    _this.className = \"Filter\"; // Create a list to hold primitives (effect elements)\n\n    _this.filterPrimitives = new List();\n    _this.properties.filterUnits = \"objectBoundingBox\"; // Automatically add added primitives to `_disposers` so they are discarded\n    // when Filter object is destroyed (disposed)\n\n    _this.filterPrimitives.events.on(\"inserted\", function (ev) {\n      _this._disposers.push(ev.newValue);\n    }); // Set default dimensions\n\n\n    _this.width = 120;\n    _this.height = 120; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Appends actual filter elements to the filter group.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param filterElement An SVG `<group>` element to add filter element to\r\n   */\n\n\n  Filter.prototype.appendPrimitives = function (filterElement) {\n    $iter.each(this.filterPrimitives.iterator(), function (filterPrimitive) {\n      filterElement.add(filterPrimitive);\n    });\n  };\n  /**\r\n   * Uses Transitions filter's values from current to target. This is used to\r\n   * smoothly appear filter, rather than it pop into effect.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param animationOptions  Animation options\r\n   * @param duration          Duration in milliseconds\r\n   * @param easing            Easing function\r\n   * @return Animation instance\r\n   */\n\n\n  Filter.prototype.animate = function (animationOptions, duration, easing) {\n    var animation = new Animation(this, animationOptions, duration, easing).start();\n    return animation;\n  };\n\n  Object.defineProperty(Filter.prototype, \"width\", {\n    /**\r\n     * @return Width (%)\r\n     */\n    get: function get() {\n      return this.properties[\"width\"];\n    },\n\n    /**\r\n     * Width of the filter element in percent.\r\n     *\r\n     * If the filter is designed to \"bleed out\" of the original target element,\r\n     * like for example a shadow, you need this bigger than 100, or the\r\n     * non-fitting parts will be clipped.\r\n     *\r\n     * @default 120\r\n     * @param value Width (px)\r\n     */\n    set: function set(value) {\n      this.properties[\"width\"] = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Filter.prototype, \"height\", {\n    /**\r\n     * @return Height\r\n     */\n    get: function get() {\n      return this.properties[\"height\"];\n    },\n\n    /**\r\n     * Height of the filter element in percent.\r\n     *\r\n     * If the filter is designed to \"bleed out\" of the original target element,\r\n     * like for example a shadow, you need this bigger than 100, or the\r\n     * non-fitting parts will be clipped.\r\n     *\r\n     * @default 120\r\n     * @param value Height (%)\r\n     */\n    set: function set(value) {\n      this.properties[\"height\"] = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies properties from another [[Filter]] object.\r\n   *\r\n   * @param filter Source [[Filter]] object\r\n   */\n\n  Filter.prototype.copyFrom = function (filter) {\n    var _this = this;\n\n    _super.prototype.copyFrom.call(this, filter);\n\n    $object.each(filter.properties, function (key, value) {\n      _this[key] = value;\n    });\n  };\n\n  Object.defineProperty(Filter.prototype, \"paper\", {\n    /**\r\n     * @return Paper\r\n     */\n    get: function get() {\n      if (this._paper) {\n        return this._paper;\n      }\n\n      return getGhostPaper();\n    },\n\n    /**\r\n     * Sets [[Paper]] instance to create filter's elements in.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param paper  Paper\r\n     */\n    set: function set(paper) {\n      if (this._paper != paper) {\n        this._paper = paper;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Filter.prototype, \"animations\", {\n    /**\r\n     * All animations currently in play.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return List of animations\r\n     */\n    get: function get() {\n      if (!this._animations) {\n        this._animations = [];\n\n        this._disposers.push(new AnimationDisposer(this._animations));\n      }\n\n      return this._animations;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Filter.prototype, \"scale\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     */\n    get: function get() {\n      return this._scale;\n    },\n\n    /**\r\n     * [[Sprite]] uses this method to inform filter about it's scale.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    set: function set(value) {\n      this._scale = value;\n      this.updateScale();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates filter properties which depend on scale.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Filter.prototype.updateScale = function () {// Dummy method for extending classes to override.\n  };\n\n  Object.defineProperty(Filter.prototype, \"filterUnits\", {\n    /**\r\n     * @return Filter units\r\n     */\n    get: function get() {\n      return this.properties.filterUnits;\n    },\n\n    /**\r\n     * Which units are used when drawing filter.\r\n     *\r\n     * Use `\"userSpaceOnUse\"` when applying filters on a perfectly straight line.\r\n     *\r\n     * @since 4.9.17\r\n     * @default objectBoundingBox\r\n     * @param value Filter units\r\n     */\n    set: function set(value) {\n      this.properties.filterUnits = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Filter.prototype, \"nonScaling\", {\n    /**\r\n     * @return Non scaling?\r\n     */\n    get: function get() {\n      return this._nonScaling;\n    },\n\n    /**\r\n     * If a filter is non scaling, it will look the same even if the sprite is\r\n     * scaled, otherwise filter will scale together with a [[Sprite]].\r\n     *\r\n     * @default false\r\n     * @param value  Non scaling?\r\n     */\n    set: function set(value) {\n      this._nonScaling = value;\n\n      if (!value) {\n        this._scale = 1;\n      }\n\n      this.updateScale();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Filter.prototype, \"sprite\", {\n    /**\r\n     * A target element this filter is currently attached to.\r\n     *\r\n     * We need to keep track of it because one filter can be used for just one\r\n     * element, so we have to remove it from the old \"parent\" when attaching to\r\n     * the new one.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Target element\r\n     */\n    set: function set(value) {\n      this.setSprite(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets filter's target element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value  Element filter is being attached to\r\n   */\n\n  Filter.prototype.setSprite = function (value) {\n    if (this._sprite && this._sprite != value) {\n      this._sprite.filters.removeValue(this);\n    }\n\n    this._sprite = value;\n  };\n\n  return Filter;\n}(BaseObject);\n\nexport { Filter };","map":{"version":3,"sources":["../../../../../../src/.internal/core/rendering/filters/Filter.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * This module contains a base class for an SVG filter.\r\n *\r\n * Filters can be used to decorate, change and transform just about any DOM\r\n * element.\r\n *\r\n * A Filter works by applying one or more effects (primitives) to SVG element.\r\n *\r\n * For more information on how SVG filters work, refer to\r\n * [this MDN tutorial](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/SVG_Filters_Tutorial).\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../../Base\";\r\nimport { Paper, getGhostPaper } from \"../Paper\";\r\nimport { Group } from \"../Group\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { Animation, IAnimatable, IAnimationOptions, AnimationDisposer } from \"../../utils/Animation\";\r\nimport { List } from \"../../utils/List\";\r\nimport { Sprite } from \"../../Sprite\";\r\nimport * as $object from \"../../utils/Object\";\r\nimport * as $iter from \"../../utils/Iterator\";\r\nimport * as $type from \"../../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for a base filter\r\n */\r\nexport interface FilterProperties {\r\n\r\n\t/**\r\n\t * Width of the filter in percent.\r\n\t *\r\n\t * @default 120\r\n\t */\r\n\twidth: number;\r\n\r\n\t/**\r\n\t * Height of the filter in percent.\r\n\t *\r\n\t * @default 120\r\n\t */\r\n\theight: number;\r\n\r\n  /**\r\n   * https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/filterUnits\r\n   */\r\n\tfilterUnits: \"userSpaceOnUse\" | \"objectBoundingBox\";\r\n\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base filter class.\r\n *\r\n * This class while can be instantiated will not do anything. It is just a base\r\n * functionality for any other \"real\" filters to extend.\r\n *\r\n * Filters can be used to decorate, change and transform just about any DOM\r\n * element.\r\n *\r\n * A Filter works by applying one or more effects (primitives) to SVG element.\r\n *\r\n * For more information on how SVG filters work, refer to\r\n * [this MDN tutorial](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/SVG_Filters_Tutorial).\r\n *\r\n * @todo Example\r\n */\r\nexport class Filter extends BaseObject implements IAnimatable {\r\n\r\n\t/**\r\n\t * List of animations currently running for the filter.\r\n\t */\r\n\tprotected _animations: $type.Optional<Array<Animation>>;\r\n\r\n\t/**\r\n\t * Contains a list of filter primitives (effects) applied by the filter.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic filterPrimitives: List<AMElement>;\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: FilterProperties;\r\n\r\n\t/**\r\n\t * A storage for Filter property/value pairs.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @see {@link FilterProperties}\r\n\t */\r\n\tpublic properties: this[\"_properties\"] = <any>{};\r\n\t//public propertyValues = new Dictionary<FilterProperties, any>();\r\n\r\n\t/**\r\n\t * An SVG `<group>` element hold primitive (effect) definitions.\r\n\t */\r\n\tpublic filterElement: $type.Optional<Group>;\r\n\r\n\t/**\r\n\t * Identifies if this object is a \"template\" and should not be treated as\r\n\t * real object that is drawn or actually used in the chart.\r\n\t */\r\n\tpublic isTemplate: boolean = false;\r\n\r\n\t/**\r\n\t * A Paper instance to add element to.\r\n\t */\r\n\tprotected _paper: $type.Optional<Paper>;\r\n\r\n\t/**\r\n\t * [_scale description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _scale: number = 1;\r\n\r\n\t/**\r\n\t * [_nonScaling description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _nonScaling: boolean = true;\r\n\r\n\t/**\r\n\t * A target element this filter is currently attached to.\r\n\t *\r\n\t * We need to keep track of it because one filter can be used for just one\r\n\t * element, so we have to remove it from the old \"parent\" when attaching to\r\n\t * the new one.\r\n\t */\r\n\tprotected _sprite: $type.Optional<Sprite>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Filter\";\r\n\r\n\t\t// Create a list to hold primitives (effect elements)\r\n\t\tthis.filterPrimitives = new List<any>();\r\n\t\tthis.properties.filterUnits = \"objectBoundingBox\";\r\n\r\n\t\t// Automatically add added primitives to `_disposers` so they are discarded\r\n\t\t// when Filter object is destroyed (disposed)\r\n\t\tthis.filterPrimitives.events.on(\"inserted\", (ev) => {\r\n\t\t\tthis._disposers.push(ev.newValue);\r\n\t\t});\r\n\r\n\t\t// Set default dimensions\r\n\t\tthis.width = 120;\r\n\t\tthis.height = 120;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Appends actual filter elements to the filter group.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param filterElement An SVG `<group>` element to add filter element to\r\n\t */\r\n\tpublic appendPrimitives(filterElement: Group): void {\r\n\t\t$iter.each(this.filterPrimitives.iterator(), (filterPrimitive) => {\r\n\t\t\tfilterElement.add(filterPrimitive);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Uses Transitions filter's values from current to target. This is used to\r\n\t * smoothly appear filter, rather than it pop into effect.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param animationOptions  Animation options\r\n\t * @param duration          Duration in milliseconds\r\n\t * @param easing            Easing function\r\n\t * @return Animation instance\r\n\t */\r\n\tpublic animate(animationOptions: IAnimationOptions[] | IAnimationOptions, duration: number, easing?: (value: number) => number): Animation {\r\n\t\tlet animation: Animation = new Animation(this, animationOptions, duration, easing).start();\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the filter element in percent.\r\n\t *\r\n\t * If the filter is designed to \"bleed out\" of the original target element,\r\n\t * like for example a shadow, you need this bigger than 100, or the\r\n\t * non-fitting parts will be clipped.\r\n\t *\r\n\t * @default 120\r\n\t * @param value Width (px)\r\n\t */\r\n\tpublic set width(value: number) {\r\n\t\tthis.properties[\"width\"] = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (%)\r\n\t */\r\n\tpublic get width(): number {\r\n\t\treturn this.properties[\"width\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Height of the filter element in percent.\r\n\t *\r\n\t * If the filter is designed to \"bleed out\" of the original target element,\r\n\t * like for example a shadow, you need this bigger than 100, or the\r\n\t * non-fitting parts will be clipped.\r\n\t *\r\n\t * @default 120\r\n\t * @param value Height (%)\r\n\t */\r\n\tpublic set height(value: number) {\r\n\t\tthis.properties[\"height\"] = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Height\r\n\t */\r\n\tpublic get height(): number {\r\n\t\treturn this.properties[\"height\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties from another [[Filter]] object.\r\n\t *\r\n\t * @param filter Source [[Filter]] object\r\n\t */\r\n\tpublic copyFrom(filter: this): void {\r\n\t\tsuper.copyFrom(filter);\r\n\t\t$object.each(filter.properties, (key, value) => {\r\n\t\t\t(<any>this)[key] = value;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Sets [[Paper]] instance to create filter's elements in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param paper  Paper\r\n\t */\r\n\tpublic set paper(paper: Paper) {\r\n\t\tif (this._paper != paper) {\r\n\t\t\tthis._paper = paper;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Paper\r\n\t */\r\n\tpublic get paper(): Paper {\r\n\t\tif (this._paper) {\r\n\t\t\treturn this._paper;\r\n\t\t}\r\n\t\treturn getGhostPaper();\r\n\t}\r\n\r\n\t/**\r\n\t * All animations currently in play.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return List of animations\r\n\t */\r\n\tpublic get animations(): Array<Animation> {\r\n\t\tif (!this._animations) {\r\n\t\t\tthis._animations = [];\r\n\t\t\tthis._disposers.push(new AnimationDisposer(this._animations));\r\n\t\t}\r\n\t\treturn this._animations;\r\n\t}\r\n\r\n\t/**\r\n\t * [[Sprite]] uses this method to inform filter about it's scale.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic set scale(value: number) {\r\n\t\tthis._scale = value;\r\n\t\tthis.updateScale();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get scale(): number {\r\n\t\treturn this._scale;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates filter properties which depend on scale.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateScale() {\r\n\t\t// Dummy method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Which units are used when drawing filter.\r\n\t *\r\n\t * Use `\"userSpaceOnUse\"` when applying filters on a perfectly straight line.\r\n\t *\r\n\t * @since 4.9.17\r\n\t * @default objectBoundingBox\r\n\t * @param value Filter units\r\n\t */\r\n\tpublic set filterUnits(value: \"objectBoundingBox\" | \"userSpaceOnUse\") {\r\n\t\tthis.properties.filterUnits = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Filter units\r\n\t */\r\n\tpublic get filterUnits(): \"objectBoundingBox\" | \"userSpaceOnUse\" {\r\n\t\treturn this.properties.filterUnits;\r\n\t}\r\n\r\n\t/**\r\n\t * If a filter is non scaling, it will look the same even if the sprite is\r\n\t * scaled, otherwise filter will scale together with a [[Sprite]].\r\n\t *\r\n\t * @default false\r\n\t * @param value  Non scaling?\r\n\t */\r\n\tpublic set nonScaling(value: boolean) {\r\n\t\tthis._nonScaling = value;\r\n\t\tif (!value) {\r\n\t\t\tthis._scale = 1;\r\n\t\t}\r\n\t\tthis.updateScale();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Non scaling?\r\n\t */\r\n\tpublic get nonScaling(): boolean {\r\n\t\treturn this._nonScaling;\r\n\t}\r\n\r\n\t/**\r\n\t * A target element this filter is currently attached to.\r\n\t *\r\n\t * We need to keep track of it because one filter can be used for just one\r\n\t * element, so we have to remove it from the old \"parent\" when attaching to\r\n\t * the new one.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Target element\r\n\t */\r\n\tpublic set sprite(value: Sprite) {\r\n\t\tthis.setSprite(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets filter's target element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Element filter is being attached to\r\n\t */\r\n\tprotected setSprite(value: Sprite): void {\r\n\t\tif (this._sprite && this._sprite != value) {\r\n\t\t\tthis._sprite.filters.removeValue(this);\r\n\t\t}\r\n\t\tthis._sprite = value;\r\n\t}\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}