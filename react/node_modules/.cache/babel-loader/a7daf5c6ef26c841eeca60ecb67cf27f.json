{"ast":null,"code":"/**\r\n * CSV parser.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { DataParser } from \"./DataParser\";\nimport * as $type from \"../utils/Type\";\nimport * as $array from \"../utils/Array\";\n/**\r\n * Define possible separators.\r\n */\n\nvar separators = [\",\", \";\", \"\\t\"];\n/**\r\n * A parser for CSV format.\r\n *\r\n * @important\r\n */\n\nvar CSVParser =\n/** @class */\nfunction (_super) {\n  __extends(CSVParser, _super);\n\n  function CSVParser() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * Content-type suitable for CSV format.\r\n     */\n\n\n    _this.contentType = \"text/csv\";\n    /**\r\n     * Parser options.\r\n     *\r\n     * @see {@link ICSVOptions} for description of each option\r\n     */\n\n    _this.options = {\n      delimiter: \"\",\n      reverse: false,\n      skipRows: 0,\n      skipEmpty: true,\n      useColumnNames: false\n    };\n    return _this;\n  }\n  /**\r\n   * Tests if the format is CSV.\r\n   *\r\n   * @param data  Source data\r\n   * @return Is it CSV?\r\n   */\n\n\n  CSVParser.isCSV = function (data) {\n    return CSVParser.getDelimiterFromData(data) ? true : false;\n  };\n  /**\r\n   * Tries to determine a column separator.\r\n   *\r\n   * @param data  Source data\r\n   * @return Separator\r\n   */\n\n\n  CSVParser.getDelimiterFromData = function (data) {\n    // We're going to take first few lines of the CSV with different\n    // possible separators and check if it results in same number of columns.\n    // If it does, we're going to assume it's a CSV\n    var lines = data.split(\"\\n\");\n    var len = lines.length;\n    var separator;\n    $array.each(separators, function (sep) {\n      var columns = 0,\n          lineColums = 0; // TODO replace with iterators\n\n      for (var i = 0; i < len; ++i) {\n        // Get number of columns in a line\n        columns = lines[i].split(sep).length;\n\n        if (columns > 1) {\n          // More than one column - possible candidate\n          if (lineColums === 0) {\n            // First line\n            lineColums = columns;\n          } else if (columns != lineColums) {\n            // Incorrect number of columns, give up on this separator\n            lineColums = 0;\n            break;\n          }\n        } else {\n          // Not this separator\n          // Not point in continuing\n          lineColums = 0;\n          break;\n        }\n      } // Check if we have a winner\n\n\n      if (lineColums) {\n        separator = sep;\n      }\n    });\n    return separator;\n  };\n  /**\r\n   * Parses and returns data.\r\n   *\r\n   * @param data  Unparsed data\r\n   * @return Parsed data\r\n   */\n\n\n  CSVParser.prototype.parse = function (csv) {\n    // Check if we have delimiter set\n    if (!this.options.delimiter) {\n      this.options.delimiter = CSVParser.getDelimiterFromData(csv);\n    } // Get CSV data as array\n\n\n    var data = this.CSVToArray(csv, this.options.delimiter); // Do we need to cast some fields to numbers?\n\n    var empty = $type.hasValue(this.options.emptyAs);\n    var numbers = this.parsableNumbers;\n    var dates = this.parsableDates; // Init resuling array\n\n    var res = [],\n        cols = [],\n        col,\n        i; // Skip rows\n\n    for (i = 0; i < this.options.skipRows; i++) {\n      data.shift();\n    } // First row holds column names?\n\n\n    if (this.options.useColumnNames) {\n      cols = data.shift(); // Normalize column names\n\n      for (var x = 0; x < cols.length; x++) {\n        // trim\n        col = $type.hasValue(cols[x]) ? cols[x].replace(/^\\s+|\\s+$/gm, \"\") : \"\"; // Check for empty\n\n        if (\"\" === col) {\n          col = \"col\" + x;\n        }\n\n        cols[x] = col;\n      }\n    } // Iterate through the result set\n\n\n    var row;\n\n    while (true) {\n      row = this.options.reverse ? data.pop() : data.shift();\n\n      if (!row) {\n        break;\n      }\n\n      if (this.options.skipEmpty && row.length === 1 && row[0] === \"\") {\n        continue;\n      }\n\n      var dataPoint = {};\n\n      for (i = 0; i < row.length; i++) {\n        col = undefined === cols[i] ? \"col\" + i : cols[i];\n        dataPoint[col] = row[i] === \"\" ? this.options.emptyAs : row[i]; // Convert\n\n        if (empty) {\n          dataPoint[col] = this.maybeToEmpty(dataPoint[col]);\n        }\n\n        if (numbers) {\n          dataPoint[col] = this.maybeToNumber(col, dataPoint[col]);\n        }\n\n        if (dates) {\n          dataPoint[col] = this.maybeToDate(col, dataPoint[col]);\n        }\n      }\n\n      res.push(dataPoint);\n    }\n\n    return res;\n  };\n  /**\r\n   * Converts CSV into array.\r\n   *\r\n   * The functionality of this function is taken from here:\r\n   * http://www.bennadel.com/blog/1504-ask-ben-parsing-csv-strings-with-javascript-exec-regular-expression-command.htm\r\n   *\r\n   * @param data       Source data\r\n   * @param delimiter  Column delimiter\r\n   * @return Parsed array\r\n   */\n\n\n  CSVParser.prototype.CSVToArray = function (data, delimiter) {\n    // Check to see if the delimiter is defined. If not,\n    // then default to comma.\n    delimiter = delimiter || ','; // Create a regular expression to parse the CSV values.\n\n    var objPattern = new RegExp( // Delimiters.\n    \"(\\\\\" + delimiter + \"|\\\\r?\\\\n|\\\\r|^)\" + // Quoted fields.\n    \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" + // Standard fields.\n    \"([^\\\"\\\\\" + delimiter + \"\\\\r\\\\n]*))\", \"gi\"); // Create an array to hold our data. Give the array\n    // a default empty first row.\n\n    var arrData = [[]]; // Create an array to hold our individual pattern\n    // matching groups.\n\n    var arrMatches = null; // Keep looping over the regular expression matches\n    // until we can no longer find a match.\n\n    while (true) {\n      arrMatches = objPattern.exec(data);\n\n      if (!arrMatches) {\n        break;\n      } // Get the delimiter that was found.\n\n\n      var strMatchedDelimiter = arrMatches[1]; // Check to see if the given delimiter has a length\n      // (is not the start of string) and if it matches\n      // field delimiter. If id does not, then we know\n      // that this delimiter is a row delimiter.\n\n      if (strMatchedDelimiter.length && strMatchedDelimiter !== delimiter) {\n        // Since we have reached a new row of data,\n        // add an empty row to our data array.\n        arrData.push([]);\n      } // Now that we have our delimiter out of the way,\n      // let's check to see which kind of value we\n      // captured (quoted or unquoted).\n\n\n      var strMatchedValue = void 0;\n\n      if (arrMatches[2]) {\n        // We found a quoted value. When we capture\n        // this value, unescape any double quotes.\n        strMatchedValue = arrMatches[2].replace(new RegExp(\"\\\"\\\"\", \"g\"), \"\\\"\");\n      } else {\n        // We found a non-quoted value.\n        strMatchedValue = arrMatches[3];\n      } // Now that we have our value string, let's add\n      // it to the data array.\n\n\n      arrData[arrData.length - 1].push(strMatchedValue);\n    } // Return the parsed data.\n\n\n    return arrData;\n  };\n\n  return CSVParser;\n}(DataParser);\n\nexport { CSVParser };","map":{"version":3,"sources":["../../../../../src/.internal/core/data/CSVParser.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * CSV parser.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { DataParser, IDataParserOptions } from \"./DataParser\";\r\nimport { DateFormatter } from \"../formatters/DateFormatter\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $array from \"../utils/Array\";\r\n\r\n/**\r\n * Defines options for CSV format parser\r\n */\r\nexport interface ICSVOptions extends IDataParserOptions {\r\n\r\n\t/**\r\n\t * A delimiter character for columns.\r\n\t *\r\n\t * @default ','\r\n\t */\r\n\tdelimiter?: string;\r\n\r\n\t/**\r\n\t * The data is in reverse order.\r\n\t *\r\n\t * If iset to `true`, parser will invert the order of the data items before\r\n\t * passing back the data.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\treverse?: boolean;\r\n\r\n\t/**\r\n\t * Skip a number of rows from the beginning of the data.\r\n\t *\r\n\t * Useful if your data contains non-data headers, such as column names or\r\n\t * empty rows.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tskipRows?: number;\r\n\r\n\t/**\r\n\t * Skip empty rows.\r\n\t *\r\n\t * If set to `false`, parser will generate empty data points for empty rows\r\n\t * in data.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tskipEmpty?: boolean;\r\n\r\n\t/**\r\n\t * Use the first row in data to generte column names.\r\n\t *\r\n\t * Normally, parser will name each column `col0`, `col1`, etc.\r\n\t *\r\n\t * Setting this to `true` will make the parser look at the first row, for\r\n\t * actual column names.\r\n\t *\r\n\t * Please note that if you use it with `skipRows`, the specified number of\r\n\t * rows will be removed, then the parser will look for column names in the\r\n\t * first row of what's left.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tuseColumnNames?: boolean;\r\n\r\n\t/**\r\n\t * A list of fields that should be treaded as numeric.\r\n\t *\r\n\t * Any information container in such fields will be converted to `number`.\r\n\t */\r\n\tnumberFields?: string[];\r\n\r\n\t/**\r\n\t * A list of fields that hold date/time infromation.\r\n\t *\r\n\t * Parser will try to convert such fields into `Date` objects.\r\n\t */\r\n\tdateFields?: string[];\r\n\r\n\t/**\r\n\t * A date formatted to be used when parsing dates.\r\n\t */\r\n\tdateFormatter?: DateFormatter;\r\n}\r\n\r\n/**\r\n * Define possible separators.\r\n */\r\nlet separators = [\",\", \";\", \"\\t\"];\r\n\r\n/**\r\n * A parser for CSV format.\r\n *\r\n * @important\r\n */\r\nexport class CSVParser extends DataParser {\r\n\r\n\t/**\r\n\t * Tests if the format is CSV.\r\n\t *\r\n\t * @param data  Source data\r\n\t * @return Is it CSV?\r\n\t */\r\n\tstatic isCSV(data: string): boolean {\r\n\t\treturn CSVParser.getDelimiterFromData(data) ? true : false;\r\n\t}\r\n\r\n\t/**\r\n\t * Tries to determine a column separator.\r\n\t *\r\n\t * @param data  Source data\r\n\t * @return Separator\r\n\t */\r\n\tstatic getDelimiterFromData(data: string): string {\r\n\r\n\t\t// We're going to take first few lines of the CSV with different\r\n\t\t// possible separators and check if it results in same number of columns.\r\n\t\t// If it does, we're going to assume it's a CSV\r\n\t\tlet lines = data.split(\"\\n\");\r\n\t\tlet len = lines.length;\r\n\t\tlet separator: string;\r\n\r\n\t\t$array.each(separators, (sep) => {\r\n\t\t\tlet columns = 0,\r\n\t\t\t\tlineColums = 0;\r\n\r\n\t\t\t// TODO replace with iterators\r\n\t\t\tfor (let i = 0; i < len; ++i) {\r\n\r\n\t\t\t\t// Get number of columns in a line\r\n\t\t\t\tcolumns = lines[i].split(sep).length;\r\n\r\n\t\t\t\tif (columns > 1) {\r\n\r\n\t\t\t\t\t// More than one column - possible candidate\r\n\t\t\t\t\tif (lineColums === 0) {\r\n\t\t\t\t\t\t// First line\r\n\t\t\t\t\t\tlineColums = columns;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (columns != lineColums) {\r\n\t\t\t\t\t\t// Incorrect number of columns, give up on this separator\r\n\t\t\t\t\t\tlineColums = 0;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t\t// Not this separator\r\n\t\t\t\t\t// Not point in continuing\r\n\t\t\t\t\tlineColums = 0;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Check if we have a winner\r\n\t\t\tif (lineColums) {\r\n\t\t\t\tseparator = sep;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn separator;\r\n\t}\r\n\r\n\t/**\r\n\t * Content-type suitable for CSV format.\r\n\t */\r\n\tpublic contentType: string = \"text/csv\";\r\n\r\n\t/**\r\n\t * Parser options.\r\n\t *\r\n\t * @see {@link ICSVOptions} for description of each option\r\n\t */\r\n\tpublic options: ICSVOptions = {\r\n\t\tdelimiter: \"\",\r\n\t\treverse: false,\r\n\t\tskipRows: 0,\r\n\t\tskipEmpty: true,\r\n\t\tuseColumnNames: false\r\n\t};\r\n\r\n\t/**\r\n\t * Parses and returns data.\r\n\t *\r\n\t * @param data  Unparsed data\r\n\t * @return Parsed data\r\n\t */\r\n\tpublic parse(csv: string): any[] {\r\n\r\n\t\t// Check if we have delimiter set\r\n\t\tif (!this.options.delimiter) {\r\n\t\t\tthis.options.delimiter = CSVParser.getDelimiterFromData(csv);\r\n\t\t}\r\n\r\n\t\t// Get CSV data as array\r\n\t\tlet data = this.CSVToArray(csv, this.options.delimiter);\r\n\r\n\t\t// Do we need to cast some fields to numbers?\r\n\t\tlet empty = $type.hasValue(this.options.emptyAs);\r\n\t\tlet numbers = this.parsableNumbers;\r\n\t\tlet dates = this.parsableDates;\r\n\r\n\t\t// Init resuling array\r\n\t\tlet res: any[] = [],\r\n\t\t\tcols: string[] = [],\r\n\t\t\tcol: string,\r\n\t\t\ti: number;\r\n\r\n\t\t// Skip rows\r\n\t\tfor (i = 0; i < this.options.skipRows; i++) {\r\n\t\t\tdata.shift();\r\n\t\t}\r\n\r\n\t\t// First row holds column names?\r\n\t\tif (this.options.useColumnNames) {\r\n\t\t\tcols = data.shift();\r\n\r\n\t\t\t// Normalize column names\r\n\t\t\tfor (let x = 0; x < cols.length; x++) {\r\n\t\t\t\t// trim\r\n\t\t\t\tcol = $type.hasValue(cols[x]) ? cols[x].replace(/^\\s+|\\s+$/gm, \"\") : \"\";\r\n\r\n\t\t\t\t// Check for empty\r\n\t\t\t\tif (\"\" === col) {\r\n\t\t\t\t\tcol = \"col\" + x;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcols[x] = col;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Iterate through the result set\r\n\t\tlet row;\r\n\t\twhile (true) {\r\n\t\t\trow = this.options.reverse ? data.pop() : data.shift();\r\n\r\n\t\t\tif (!row) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.options.skipEmpty && row.length === 1 && row[0] === \"\") {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tlet dataPoint: any = {};\r\n\t\t\tfor (i = 0; i < row.length; i++) {\r\n\t\t\t\tcol = undefined === cols[i] ? \"col\" + i : cols[i];\r\n\t\t\t\tdataPoint[col] = row[i] === \"\" ? this.options.emptyAs : row[i];\r\n\r\n\t\t\t\t// Convert\r\n\t\t\t\tif (empty) {\r\n\t\t\t\t\tdataPoint[col] = this.maybeToEmpty(dataPoint[col]);\r\n\t\t\t\t}\r\n\t\t\t\tif (numbers) {\r\n\t\t\t\t\tdataPoint[col] = this.maybeToNumber(col, dataPoint[col]);\r\n\t\t\t\t}\r\n\t\t\t\tif (dates) {\r\n\t\t\t\t\tdataPoint[col] = this.maybeToDate(col, dataPoint[col]);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tres.push(dataPoint);\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n \t * Converts CSV into array.\r\n \t *\r\n \t * The functionality of this function is taken from here:\r\n \t * http://www.bennadel.com/blog/1504-ask-ben-parsing-csv-strings-with-javascript-exec-regular-expression-command.htm\r\n \t *\r\n \t * @param data       Source data\r\n \t * @param delimiter  Column delimiter\r\n \t * @return Parsed array\r\n \t */\r\n\tpublic CSVToArray(data: string, delimiter: string): any[] {\r\n\r\n\t\t// Check to see if the delimiter is defined. If not,\r\n\t\t// then default to comma.\r\n\t\tdelimiter = (delimiter || ',');\r\n\r\n\t\t// Create a regular expression to parse the CSV values.\r\n\t\tlet objPattern = new RegExp(\r\n\t\t\t(\r\n\t\t\t\t// Delimiters.\r\n\t\t\t\t\"(\\\\\" + delimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\r\n\r\n\t\t\t\t// Quoted fields.\r\n\t\t\t\t\"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\r\n\r\n\t\t\t\t// Standard fields.\r\n\t\t\t\t\"([^\\\"\\\\\" + delimiter + \"\\\\r\\\\n]*))\"\r\n\t\t\t),\r\n\t\t\t\"gi\"\r\n\t\t);\r\n\r\n\r\n\t\t// Create an array to hold our data. Give the array\r\n\t\t// a default empty first row.\r\n\t\tlet arrData: any[] = [\r\n\t\t\t[]\r\n\t\t];\r\n\r\n\t\t// Create an array to hold our individual pattern\r\n\t\t// matching groups.\r\n\t\tlet arrMatches = null;\r\n\r\n\t\t// Keep looping over the regular expression matches\r\n\t\t// until we can no longer find a match.\r\n\t\twhile (true) {\r\n\t\t\tarrMatches = objPattern.exec(data);\r\n\r\n\t\t\tif (!arrMatches) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t// Get the delimiter that was found.\r\n\t\t\tlet strMatchedDelimiter = arrMatches[1];\r\n\r\n\t\t\t// Check to see if the given delimiter has a length\r\n\t\t\t// (is not the start of string) and if it matches\r\n\t\t\t// field delimiter. If id does not, then we know\r\n\t\t\t// that this delimiter is a row delimiter.\r\n\t\t\tif (\r\n\t\t\t\tstrMatchedDelimiter.length &&\r\n\t\t\t\t(strMatchedDelimiter !== delimiter)\r\n\t\t\t) {\r\n\r\n\t\t\t\t// Since we have reached a new row of data,\r\n\t\t\t\t// add an empty row to our data array.\r\n\t\t\t\tarrData.push([]);\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Now that we have our delimiter out of the way,\r\n\t\t\t// let's check to see which kind of value we\r\n\t\t\t// captured (quoted or unquoted).\r\n\t\t\tlet strMatchedValue;\r\n\t\t\tif (arrMatches[2]) {\r\n\r\n\t\t\t\t// We found a quoted value. When we capture\r\n\t\t\t\t// this value, unescape any double quotes.\r\n\t\t\t\tstrMatchedValue = arrMatches[2].replace(\r\n\t\t\t\t\tnew RegExp(\"\\\"\\\"\", \"g\"),\r\n\t\t\t\t\t\"\\\"\"\r\n\t\t\t\t);\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// We found a non-quoted value.\r\n\t\t\t\tstrMatchedValue = arrMatches[3];\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Now that we have our value string, let's add\r\n\t\t\t// it to the data array.\r\n\t\t\tarrData[arrData.length - 1].push(strMatchedValue);\r\n\t\t}\r\n\r\n\t\t// Return the parsed data.\r\n\t\treturn (arrData);\r\n\t}\r\n\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}