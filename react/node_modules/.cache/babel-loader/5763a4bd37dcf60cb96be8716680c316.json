{"ast":null,"code":"/**\r\n * ConeSeries module\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { ColumnSeries, ColumnSeriesDataItem } from \"./ColumnSeries\";\nimport { ConeColumn } from \"../elements/ConeColumn\";\nimport { registry } from \"../../core/Registry\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar ConeSeriesDataItem =\n/** @class */\nfunction (_super) {\n  __extends(ConeSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ConeSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"ConeSeriesDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return ConeSeriesDataItem;\n}(ColumnSeriesDataItem);\n\nexport { ConeSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines [[Series]] for a cone graph.\r\n *\r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\n\nvar ConeSeries =\n/** @class */\nfunction (_super) {\n  __extends(ConeSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ConeSeries() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"ConeSeries\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Returns an element to use for Candlestick\r\n   * @ignore\r\n   * @return Element.\r\n   */\n\n\n  ConeSeries.prototype.createColumnTemplate = function () {\n    return new ConeColumn();\n  };\n  /**\r\n   * Returns an SVG path to use as series mask.\r\n   *\r\n   * @return SVG path\r\n   */\n\n\n  ConeSeries.prototype.getMaskPath = function () {\n    var dx = 0;\n    var dy = 0;\n    var column = this.columns.getIndex(0);\n\n    if (column) {\n      if (this.baseAxis == this.xAxis) {\n        dy = column.coneColumn.innerWidth / 2 + 1;\n      } else {\n        dx = column.coneColumn.innerHeight / 2 + 1;\n      }\n\n      return $path.rectToPath({\n        x: -dx,\n        y: 0,\n        width: this.xAxis.axisLength + dx,\n        height: this.yAxis.axisLength + dy\n      });\n    }\n  };\n  /**\r\n   * Validates data item's elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n\n  ConeSeries.prototype.validateDataElementReal = function (dataItem) {\n    _super.prototype.validateDataElementReal.call(this, dataItem);\n\n    var column = dataItem.column;\n\n    if (column) {\n      var coneColumn = dataItem.column.coneColumn;\n      coneColumn.fill = dataItem.column.fill;\n\n      if (this.baseAxis == this.yAxis) {\n        coneColumn.orientation = \"horizontal\";\n      } else {\n        coneColumn.orientation = \"vertical\";\n      }\n    }\n  };\n\n  return ConeSeries;\n}(ColumnSeries);\n\nexport { ConeSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"ConeSeries\"] = ConeSeries;\nregistry.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;","map":{"version":3,"sources":["../../../../../src/.internal/charts/series/ConeSeries.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ConeSeries module\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { ConeColumn } from \"../elements/ConeColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ConeSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: ConeSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeSeriesAdapters extends IColumnSeriesAdapters, IConeSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a cone graph.\r\n *\r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ConeSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: ConeSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IConeSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IConeSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IConeSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IConeSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ConeSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new ConeColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\t\t\r\n\t\tlet dx = 0;\r\n\t\tlet dy = 0;\r\n\t\tlet column = this.columns.getIndex(0);\r\n\r\n\t\tif(column){\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tdy = column.coneColumn.innerWidth / 2 + 1\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdx = column.coneColumn.innerHeight / 2 + 1;\r\n\t\t\t}\r\n\r\n\t\t\treturn $path.rectToPath({\r\n\t\t\t\tx: -dx,\r\n\t\t\t\ty: 0,\r\n\t\t\t\twidth: this.xAxis.axisLength + dx,\r\n\t\t\t\theight: this.yAxis.axisLength + dy\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tlet column = dataItem.column;\r\n\t\tif(column){\r\n\t\t\tlet coneColumn = dataItem.column.coneColumn;\r\n\r\n\t\t\tconeColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tconeColumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconeColumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeSeries\"] = ConeSeries;\r\nregistry.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}