{"ast":null,"code":"/**\r\n * A collection of network-related functions\r\n */\n\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport * as $type from \"./Type\";\n/**\r\n * Loads an external file via its URL.\r\n *\r\n * Please note that this is an asynchronous function.\r\n *\r\n * It will not return the result, but rather a `Promise`.\r\n *\r\n * You can use the `await` notion, or `then()`.\r\n *\r\n * ```TypeScript\r\n * // Using await\r\n * let response = await Net.load( \"http://www.my.com/data.json\" );\r\n * console.log( response.response );\r\n *\r\n * // Using then()\r\n * Net.load( \"http://www.my.com/data.json\" ).then( ( response ) => {\r\n *   console.log( response.response );\r\n * } );\r\n * ```\r\n * ```JavaScript\r\n * // Using then()\r\n * Net.load( \"http://www.my.com/data.json\" ).then( function( response ) {\r\n *   console.log( response.response );\r\n * } );\r\n * ```\r\n *\r\n * @async\r\n * @param url      URL for the file to load\r\n * @param target   A target element that is requesting the net load\r\n * @param options  Request options\r\n * @return Result (Promise)\r\n */\n\nexport function load(url, target, options) {\n  return new Promise(function (success, error) {\n    // Is return type Blob?\n    var isBlob = $type.hasValue(options) && options.responseType == \"blob\"; // Create request and set up handlers\n\n    var xhr = new XMLHttpRequest();\n\n    xhr.onload = function () {\n      if (xhr.status === 200) {\n        var response = void 0;\n        var blob_1;\n\n        if (isBlob) {\n          blob_1 = xhr.response;\n          readBlob(blob_1).then(function (response) {\n            var output = {\n              xhr: xhr,\n              error: false,\n              response: response,\n              blob: blob_1,\n              type: xhr.getResponseHeader(\"Content-Type\"),\n              target: target\n            };\n            success(output);\n          });\n          return;\n        } else {\n          response = xhr.responseText || xhr.response;\n        }\n\n        var output = {\n          xhr: xhr,\n          error: false,\n          response: response,\n          blob: blob_1,\n          type: xhr.getResponseHeader(\"Content-Type\"),\n          target: target\n        };\n        success(output);\n      } else {\n        error({\n          xhr: xhr,\n          error: true,\n          type: xhr.getResponseHeader(\"Content-Type\"),\n          target: target\n        });\n      }\n    };\n\n    xhr.onerror = function () {\n      error({\n        xhr: xhr,\n        error: true,\n        type: xhr.getResponseHeader(\"Content-Type\"),\n        target: target\n      });\n    }; // Open request\n\n\n    xhr.open(\"GET\", url, true);\n\n    if (options && options.withCredentials) {\n      xhr.withCredentials = true;\n    } // Process options\n\n\n    if ($type.hasValue(options)) {\n      if ($type.hasValue(options.requestHeaders)) {\n        for (var i = 0; i < options.requestHeaders.length; i++) {\n          var header = options.requestHeaders[i];\n          xhr.setRequestHeader(header.key, header.value);\n        }\n      }\n\n      if ($type.hasValue(options.responseType)) {\n        xhr.responseType = options.responseType;\n      }\n    } // Send request\n\n\n    xhr.send();\n  });\n}\n/**\r\n * Returns textual representation of a Blob object.\r\n *\r\n * @param   blob  Target blob\r\n * @return        Text promise\r\n */\n\nexport function readBlob(blob) {\n  return new Promise(function (success, error) {\n    var reader = new FileReader();\n\n    reader.onload = function (event) {\n      success(reader.result);\n    };\n\n    reader.onerror = function (e) {\n      error(e);\n    };\n\n    reader.readAsText(blob);\n  });\n}","map":{"version":3,"sources":["../../../../../src/.internal/core/utils/Net.ts"],"names":[],"mappings":"AAAA;;;;AAIA;;;;;;AAMA,OAAO,KAAK,KAAZ,MAAuB,QAAvB;AA6DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,OAAM,SAAU,IAAV,CAAkB,GAAlB,EAA+B,MAA/B,EAA2C,OAA3C,EAAuE;AAC5E,SAAO,IAAI,OAAJ,CAA+B,UAAC,OAAD,EAAU,KAAV,EAAe;AAEpD;AACA,QAAI,MAAM,GAAG,KAAK,CAAC,QAAN,CAAe,OAAf,KAA2B,OAAO,CAAC,YAAR,IAAwB,MAAhE,CAHoD,CAKpD;;AACA,QAAI,GAAG,GAAG,IAAI,cAAJ,EAAV;;AACA,IAAA,GAAG,CAAC,MAAJ,GAAa,YAAA;AACZ,UAAI,GAAG,CAAC,MAAJ,KAAe,GAAnB,EAAwB;AAEvB,YAAI,QAAQ,GAAA,KAAA,CAAZ;AACA,YAAI,MAAJ;;AAEA,YAAI,MAAJ,EAAY;AACX,UAAA,MAAI,GAAG,GAAG,CAAC,QAAX;AACA,UAAA,QAAQ,CAAC,MAAD,CAAR,CAAe,IAAf,CAAoB,UAAC,QAAD,EAAS;AAC5B,gBAAI,MAAM,GAAsB;AAC/B,cAAA,GAAG,EAAE,GAD0B;AAE/B,cAAA,KAAK,EAAE,KAFwB;AAG/B,cAAA,QAAQ,EAAE,QAHqB;AAI/B,cAAA,IAAI,EAAE,MAJyB;AAK/B,cAAA,IAAI,EAAE,GAAG,CAAC,iBAAJ,CAAsB,cAAtB,CALyB;AAM/B,cAAA,MAAM,EAAE;AANuB,aAAhC;AAQA,YAAA,OAAO,CAAC,MAAD,CAAP;AACA,WAVD;AAWA;AACA,SAdD,MAeK;AACJ,UAAA,QAAQ,GAAG,GAAG,CAAC,YAAJ,IAAoB,GAAG,CAAC,QAAnC;AACA;;AAED,YAAI,MAAM,GAAsB;AAC/B,UAAA,GAAG,EAAE,GAD0B;AAE/B,UAAA,KAAK,EAAE,KAFwB;AAG/B,UAAA,QAAQ,EAAE,QAHqB;AAI/B,UAAA,IAAI,EAAE,MAJyB;AAK/B,UAAA,IAAI,EAAE,GAAG,CAAC,iBAAJ,CAAsB,cAAtB,CALyB;AAM/B,UAAA,MAAM,EAAE;AANuB,SAAhC;AAQA,QAAA,OAAO,CAAC,MAAD,CAAP;AACA,OAjCD,MAkCK;AACJ,QAAA,KAAK,CAAC;AACL,UAAA,GAAG,EAAE,GADA;AAEL,UAAA,KAAK,EAAE,IAFF;AAGL,UAAA,IAAI,EAAE,GAAG,CAAC,iBAAJ,CAAsB,cAAtB,CAHD;AAIL,UAAA,MAAM,EAAE;AAJH,SAAD,CAAL;AAMA;AACD,KA3CD;;AA4CA,IAAA,GAAG,CAAC,OAAJ,GAAc,YAAA;AACb,MAAA,KAAK,CAAC;AACL,QAAA,GAAG,EAAE,GADA;AAEL,QAAA,KAAK,EAAE,IAFF;AAGL,QAAA,IAAI,EAAE,GAAG,CAAC,iBAAJ,CAAsB,cAAtB,CAHD;AAIL,QAAA,MAAM,EAAE;AAJH,OAAD,CAAL;AAMA,KAPD,CAnDoD,CA4DpD;;;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,KAAT,EAAgB,GAAhB,EAAqB,IAArB;;AAEA,QAAI,OAAO,IAAI,OAAO,CAAC,eAAvB,EAAwC;AACvC,MAAA,GAAG,CAAC,eAAJ,GAAsB,IAAtB;AACA,KAjEmD,CAmEpD;;;AACA,QAAI,KAAK,CAAC,QAAN,CAAe,OAAf,CAAJ,EAA6B;AAE5B,UAAI,KAAK,CAAC,QAAN,CAAe,OAAO,CAAC,cAAvB,CAAJ,EAA4C;AAC3C,aAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,OAAO,CAAC,cAAR,CAAuB,MAA3C,EAAmD,CAAC,EAApD,EAAwD;AACvD,cAAI,MAAM,GAAG,OAAO,CAAC,cAAR,CAAuB,CAAvB,CAAb;AACA,UAAA,GAAG,CAAC,gBAAJ,CAAqB,MAAM,CAAC,GAA5B,EAAiC,MAAM,CAAC,KAAxC;AACA;AACD;;AAED,UAAI,KAAK,CAAC,QAAN,CAAe,OAAO,CAAC,YAAvB,CAAJ,EAA0C;AACzC,QAAA,GAAG,CAAC,YAAJ,GAAmB,OAAO,CAAC,YAA3B;AACA;AACD,KAhFmD,CAkFpD;;;AACA,IAAA,GAAG,CAAC,IAAJ;AAEA,GArFM,CAAP;AAuFA;AAED;;;;;;;AAMA,OAAM,SAAU,QAAV,CAAmB,IAAnB,EAA6B;AAClC,SAAO,IAAI,OAAJ,CAAoB,UAAC,OAAD,EAAU,KAAV,EAAe;AACzC,QAAM,MAAM,GAAG,IAAI,UAAJ,EAAf;;AAEA,IAAA,MAAM,CAAC,MAAP,GAAgB,UAAA,KAAA,EAAK;AACpB,MAAA,OAAO,CAAS,MAAM,CAAC,MAAhB,CAAP;AACA,KAFD;;AAIA,IAAA,MAAM,CAAC,OAAP,GAAiB,UAAC,CAAD,EAAE;AAClB,MAAA,KAAK,CAAC,CAAD,CAAL;AACA,KAFD;;AAIA,IAAA,MAAM,CAAC,UAAP,CAAkB,IAAlB;AACA,GAZM,CAAP;AAaA","sourcesContent":["/**\r\n * A collection of network-related functions\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $type from \"./Type\";\r\n\r\n/**\r\n * Defines an interface for objects that hold a net request result.\r\n */\r\nexport interface INetLoadResult<A> {\r\n\r\n\t/**\r\n\t * A reference to original [[XMLHttpRequest]].\r\n\t */\r\n\txhr: XMLHttpRequest;\r\n\r\n\t/**\r\n\t * Request response body.\r\n\t */\r\n\tresponse?: string;\r\n\r\n\t/**\r\n\t * Request response as Blob. (if set `responseType = \"blob\"`)\r\n\t */\r\n\tblob?: Blob;\r\n\r\n\t/**\r\n\t * Response `Content-Type`.\r\n\t */\r\n\ttype: string | null;\r\n\r\n\t/**\r\n\t * Was there an error?\r\n\t */\r\n\terror: boolean;\r\n\r\n\t/**\r\n\t * A target object that made the net load request.\r\n\t */\r\n\ttarget?: A;\r\n\r\n}\r\n\r\nexport interface INetRequestOptions {\r\n\r\n\t/**\r\n\t * Custom request headers to be added to HTTP(S) request.\r\n\t */\r\n\trequestHeaders?: { key: string, value: string }[];\r\n\r\n\t/**\r\n\t * Specify expected response type.\r\n\t *\r\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType} for more info\r\n\t */\r\n\tresponseType?: XMLHttpRequestResponseType;\r\n\r\n\t/**\r\n\t * Specify whether to send CORS credentials (defaults to `false`).\r\n\t *\r\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials} for more info\r\n\t */\r\n\twithCredentials?: boolean;\r\n}\r\n\r\n/**\r\n * Loads an external file via its URL.\r\n *\r\n * Please note that this is an asynchronous function.\r\n *\r\n * It will not return the result, but rather a `Promise`.\r\n *\r\n * You can use the `await` notion, or `then()`.\r\n *\r\n * ```TypeScript\r\n * // Using await\r\n * let response = await Net.load( \"http://www.my.com/data.json\" );\r\n * console.log( response.response );\r\n *\r\n * // Using then()\r\n * Net.load( \"http://www.my.com/data.json\" ).then( ( response ) => {\r\n *   console.log( response.response );\r\n * } );\r\n * ```\r\n * ```JavaScript\r\n * // Using then()\r\n * Net.load( \"http://www.my.com/data.json\" ).then( function( response ) {\r\n *   console.log( response.response );\r\n * } );\r\n * ```\r\n *\r\n * @async\r\n * @param url      URL for the file to load\r\n * @param target   A target element that is requesting the net load\r\n * @param options  Request options\r\n * @return Result (Promise)\r\n */\r\nexport function load<A>(url: string, target?: A, options?: INetRequestOptions): Promise<INetLoadResult<A>> {\r\n\treturn new Promise<INetLoadResult<A>>((success, error) => {\r\n\r\n\t\t// Is return type Blob?\r\n\t\tlet isBlob = $type.hasValue(options) && options.responseType == \"blob\";\r\n\r\n\t\t// Create request and set up handlers\r\n\t\tlet xhr = new XMLHttpRequest();\r\n\t\txhr.onload = () => {\r\n\t\t\tif (xhr.status === 200) {\r\n\r\n\t\t\t\tlet response: $type.Optional<string>;\r\n\t\t\t\tlet blob: $type.Optional<Blob>;\r\n\r\n\t\t\t\tif (isBlob) {\r\n\t\t\t\t\tblob = xhr.response;\r\n\t\t\t\t\treadBlob(blob).then((response) => {\r\n\t\t\t\t\t\tlet output: INetLoadResult<A> = {\r\n\t\t\t\t\t\t\txhr: xhr,\r\n\t\t\t\t\t\t\terror: false,\r\n\t\t\t\t\t\t\tresponse: response,\r\n\t\t\t\t\t\t\tblob: blob,\r\n\t\t\t\t\t\t\ttype: xhr.getResponseHeader(\"Content-Type\"),\r\n\t\t\t\t\t\t\ttarget: target\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tsuccess(output);\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tresponse = xhr.responseText || xhr.response\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet output: INetLoadResult<A> = {\r\n\t\t\t\t\txhr: xhr,\r\n\t\t\t\t\terror: false,\r\n\t\t\t\t\tresponse: response,\r\n\t\t\t\t\tblob: blob,\r\n\t\t\t\t\ttype: xhr.getResponseHeader(\"Content-Type\"),\r\n\t\t\t\t\ttarget: target\r\n\t\t\t\t};\r\n\t\t\t\tsuccess(output);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\terror({\r\n\t\t\t\t\txhr: xhr,\r\n\t\t\t\t\terror: true,\r\n\t\t\t\t\ttype: xhr.getResponseHeader(\"Content-Type\"),\r\n\t\t\t\t\ttarget: target\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\t\txhr.onerror = () => {\r\n\t\t\terror({\r\n\t\t\t\txhr: xhr,\r\n\t\t\t\terror: true,\r\n\t\t\t\ttype: xhr.getResponseHeader(\"Content-Type\"),\r\n\t\t\t\ttarget: target\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t// Open request\r\n\t\txhr.open(\"GET\", url, true);\r\n\r\n\t\tif (options && options.withCredentials) {\r\n\t\t\txhr.withCredentials = true;\r\n\t\t}\r\n\r\n\t\t// Process options\r\n\t\tif ($type.hasValue(options)) {\r\n\r\n\t\t\tif ($type.hasValue(options.requestHeaders)) {\r\n\t\t\t\tfor (let i = 0; i < options.requestHeaders.length; i++) {\r\n\t\t\t\t\tlet header = options.requestHeaders[i];\r\n\t\t\t\t\txhr.setRequestHeader(header.key, header.value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(options.responseType)) {\r\n\t\t\t\txhr.responseType = options.responseType;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Send request\r\n\t\txhr.send();\r\n\r\n\t});\r\n\r\n}\r\n\r\n/**\r\n * Returns textual representation of a Blob object.\r\n *\r\n * @param   blob  Target blob\r\n * @return        Text promise\r\n */\r\nexport function readBlob(blob: Blob): Promise<string> {\r\n\treturn new Promise<string>((success, error) => {\r\n\t\tconst reader = new FileReader()\r\n\r\n\t\treader.onload = event => {\r\n\t\t\tsuccess(<string>reader.result);\r\n\t\t}\r\n\r\n\t\treader.onerror = (e) => {\r\n\t\t\terror(e);\r\n\t\t}\r\n\r\n\t\treader.readAsText(blob);\r\n\t});\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}