{"ast":null,"code":"/**\r\n * This module contains a version of ColorSet that can (and should) be used for\r\n * coloring UI elements.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { BaseObject } from \"../Base\";\nimport { registry } from \"../Registry\";\nimport { color } from \"./Color\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * This module contains a version of ColorSet that can (and should) be used for\r\n * coloring UI elements.\r\n *\r\n * The main difference from the basic [[ColorSet]] is that instead of sequenced\r\n * colors, it uses a concept of named colors.\r\n *\r\n * This way, every element in the UI can extract an exact color theme author\r\n * meant for the specific purpose, like strokes, backgrounds, etc.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\n\nvar InterfaceColorSet =\n/** @class */\nfunction (_super) {\n  __extends(InterfaceColorSet, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function InterfaceColorSet() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Maps the list of purposes (like \"stroke\") to an index of color of the\r\n     * color set.\r\n     */\n\n\n    _this._purposes = {\n      stroke: color(\"#e5e5e5\"),\n      fill: color(\"#f3f3f3\"),\n      primaryButton: color(\"#6794dc\"),\n      primaryButtonHover: color(\"#6771dc\"),\n      primaryButtonDown: color(\"#68dc75\"),\n      primaryButtonActive: color(\"#68dc75\"),\n      primaryButtonText: color(\"#FFFFFF\"),\n      primaryButtonStroke: color(\"#FFFFFF\"),\n      secondaryButton: color(\"#d9d9d9\"),\n      secondaryButtonHover: color(\"#d9d9d9\").brighten(-0.25),\n      secondaryButtonDown: color(\"#d9d9d9\").brighten(-0.35),\n      secondaryButtonActive: color(\"#d9d9d9\").brighten(0.35),\n      secondaryButtonText: color(\"#000000\"),\n      secondaryButtonStroke: color(\"#FFFFFF\"),\n      grid: color(\"#000000\"),\n      background: color(\"#ffffff\"),\n      alternativeBackground: color(\"#000000\"),\n      text: color(\"#000000\"),\n      alternativeText: color(\"#FFFFFF\"),\n      disabledBackground: color(\"#999999\"),\n      positive: color(\"#67dc75\"),\n      negative: color(\"#dc6788\")\n    };\n    _this.className = \"InterfaceColorSet\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  InterfaceColorSet.prototype.debug = function () {};\n  /**\r\n   * Returns a color to be used for the specific purpose.\r\n   *\r\n   * ```TypeScript\r\n   * let uicolors = new am4core.InterfaceColorSet();\r\n   * console.log(uicolors.getFor(\"stroke\"));\r\n   * ```\r\n   * ```JavaScript\r\n   * var uicolors = new am4core.InterfaceColorSet();\r\n   * console.log(uicolors.getFor(\"stroke\"));\r\n   * ```\r\n   *\r\n   * @param purpose  Color use purpuse\r\n   * @return Color\r\n   */\n\n\n  InterfaceColorSet.prototype.getFor = function (purpose) {\n    return this._purposes[purpose];\n  };\n  /**\r\n   * Sets color to be used for the specific purpose.\r\n   *\r\n   * @param purpose  Color use purpose\r\n   * @param color    Color\r\n   */\n\n\n  InterfaceColorSet.prototype.setFor = function (purpose, color) {\n    this._purposes[purpose] = color;\n  };\n\n  return InterfaceColorSet;\n}(BaseObject);\n\nexport { InterfaceColorSet };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"InterfaceColorSet\"] = InterfaceColorSet;","map":{"version":3,"sources":["../../../../../src/.internal/core/utils/InterfaceColorSet.ts"],"names":[],"mappings":"AAAA;;;;;AAKA;;;;;;;AAMA,SAAS,UAAT,QAA2B,SAA3B;AACA,SAAS,QAAT,QAAyB,aAAzB;AACA,SAAgB,KAAhB,QAA6B,SAA7B;AA4CA;;;;;;;AAOA;;;;;;;;;;;;;AAYA,IAAA,iBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAuC,EAAA,SAAA,CAAA,iBAAA,EAAA,MAAA,CAAA;AAmCtC;;;;;AAGA,WAAA,iBAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADR;AApCA;;;;;;AAIU,IAAA,KAAA,CAAA,SAAA,GAA2B;AACpC,MAAA,MAAM,EAAE,KAAK,CAAC,SAAD,CADuB;AAEpC,MAAA,IAAI,EAAE,KAAK,CAAC,SAAD,CAFyB;AAIpC,MAAA,aAAa,EAAE,KAAK,CAAC,SAAD,CAJgB;AAKpC,MAAA,kBAAkB,EAAE,KAAK,CAAC,SAAD,CALW;AAMpC,MAAA,iBAAiB,EAAE,KAAK,CAAC,SAAD,CANY;AAOpC,MAAA,mBAAmB,EAAE,KAAK,CAAC,SAAD,CAPU;AAQpC,MAAA,iBAAiB,EAAE,KAAK,CAAC,SAAD,CARY;AASpC,MAAA,mBAAmB,EAAE,KAAK,CAAC,SAAD,CATU;AAWpC,MAAA,eAAe,EAAE,KAAK,CAAC,SAAD,CAXc;AAYpC,MAAA,oBAAoB,EAAE,KAAK,CAAC,SAAD,CAAL,CAAiB,QAAjB,CAA0B,CAAC,IAA3B,CAZc;AAapC,MAAA,mBAAmB,EAAE,KAAK,CAAC,SAAD,CAAL,CAAiB,QAAjB,CAA0B,CAAC,IAA3B,CAbe;AAcpC,MAAA,qBAAqB,EAAE,KAAK,CAAC,SAAD,CAAL,CAAiB,QAAjB,CAA0B,IAA1B,CAda;AAepC,MAAA,mBAAmB,EAAE,KAAK,CAAC,SAAD,CAfU;AAiBpC,MAAA,qBAAqB,EAAE,KAAK,CAAC,SAAD,CAjBQ;AAmBpC,MAAA,IAAI,EAAE,KAAK,CAAC,SAAD,CAnByB;AAoBpC,MAAA,UAAU,EAAE,KAAK,CAAC,SAAD,CApBmB;AAqBpC,MAAA,qBAAqB,EAAE,KAAK,CAAC,SAAD,CArBQ;AAsBpC,MAAA,IAAI,EAAE,KAAK,CAAC,SAAD,CAtByB;AAuBpC,MAAA,eAAe,EAAE,KAAK,CAAC,SAAD,CAvBc;AAwBpC,MAAA,kBAAkB,EAAE,KAAK,CAAC,SAAD,CAxBW;AAyBpC,MAAA,QAAQ,EAAE,KAAK,CAAC,SAAD,CAzBqB;AA0BpC,MAAA,QAAQ,EAAE,KAAK,CAAC,SAAD;AA1BqB,KAA3B;AAkCT,IAAA,KAAI,CAAC,SAAL,GAAiB,mBAAjB;;AACA,IAAA,KAAI,CAAC,UAAL;;;AACA;;AAES,EAAA,iBAAA,CAAA,SAAA,CAAA,KAAA,GAAV,YAAA,CAA0B,CAAhB;AAEV;;;;;;;;;;;;;;;;;AAeO,EAAA,iBAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,OAAd,EAA0C;AACzC,WAAO,KAAK,SAAL,CAAe,OAAf,CAAP;AACA,GAFM;AAIP;;;;;;;;AAMO,EAAA,iBAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,OAAd,EAA4C,KAA5C,EAAwD;AACvD,SAAK,SAAL,CAAe,OAAf,IAA0B,KAA1B;AACA,GAFM;;AAIR,SAAA,iBAAA;AAAC,CA3ED,CAAuC,UAAvC,CAAA;;;AA6EA;;;;;;;AAMA,QAAQ,CAAC,iBAAT,CAA2B,mBAA3B,IAAkD,iBAAlD","sourcesContent":["/**\r\n * This module contains a version of ColorSet that can (and should) be used for\r\n * coloring UI elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../Base\";\r\nimport { registry } from \"../Registry\";\r\nimport { Color, color } from \"./Color\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines available color purposes and their relation with the color set color\r\n * index.\r\n */\r\nexport interface IColorPurpose {\r\n\tstroke: Color,\r\n\tfill: Color,\r\n\r\n\tprimaryButton: Color,\r\n\tprimaryButtonHover: Color,\r\n\tprimaryButtonDown: Color,\r\n\tprimaryButtonActive: Color,\r\n\tprimaryButtonText: Color,\r\n\tprimaryButtonStroke: Color,\r\n\r\n\tsecondaryButton: Color,\r\n\tsecondaryButtonHover: Color,\r\n\tsecondaryButtonDown: Color,\r\n\tsecondaryButtonActive: Color,\r\n\tsecondaryButtonText: Color,\r\n\tsecondaryButtonStroke: Color,\r\n\r\n\tgrid: Color,\r\n\tbackground: Color,\r\n\talternativeBackground: Color,\r\n\ttext: Color,\r\n\talternativeText: Color,\r\n\tdisabledBackground: Color,\r\n\r\n\tpositive: Color,\r\n\tnegative: Color\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This module contains a version of ColorSet that can (and should) be used for\r\n * coloring UI elements.\r\n *\r\n * The main difference from the basic [[ColorSet]] is that instead of sequenced\r\n * colors, it uses a concept of named colors.\r\n *\r\n * This way, every element in the UI can extract an exact color theme author\r\n * meant for the specific purpose, like strokes, backgrounds, etc.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\r\nexport class InterfaceColorSet extends BaseObject {\r\n\r\n\t/**\r\n\t * Maps the list of purposes (like \"stroke\") to an index of color of the\r\n\t * color set.\r\n\t */\r\n\tprotected _purposes: IColorPurpose = {\r\n\t\tstroke: color(\"#e5e5e5\"),\r\n\t\tfill: color(\"#f3f3f3\"),\r\n\r\n\t\tprimaryButton: color(\"#6794dc\"),\r\n\t\tprimaryButtonHover: color(\"#6771dc\"),\r\n\t\tprimaryButtonDown: color(\"#68dc75\"),\r\n\t\tprimaryButtonActive: color(\"#68dc75\"),\r\n\t\tprimaryButtonText: color(\"#FFFFFF\"),\r\n\t\tprimaryButtonStroke: color(\"#FFFFFF\"),\r\n\r\n\t\tsecondaryButton: color(\"#d9d9d9\"),\r\n\t\tsecondaryButtonHover: color(\"#d9d9d9\").brighten(-0.25),\r\n\t\tsecondaryButtonDown: color(\"#d9d9d9\").brighten(-0.35),\r\n\t\tsecondaryButtonActive: color(\"#d9d9d9\").brighten(0.35),\r\n\t\tsecondaryButtonText: color(\"#000000\"),\r\n\r\n\t\tsecondaryButtonStroke: color(\"#FFFFFF\"),\r\n\r\n\t\tgrid: color(\"#000000\"),\r\n\t\tbackground: color(\"#ffffff\"),\r\n\t\talternativeBackground: color(\"#000000\"),\r\n\t\ttext: color(\"#000000\"),\r\n\t\talternativeText: color(\"#FFFFFF\"),\r\n\t\tdisabledBackground: color(\"#999999\"),\r\n\t\tpositive: color(\"#67dc75\"),\r\n\t\tnegative: color(\"#dc6788\")\r\n\t};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"InterfaceColorSet\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tprotected debug(): void {}\r\n\r\n\t/**\r\n\t * Returns a color to be used for the specific purpose.\r\n\t *\r\n\t * ```TypeScript\r\n\t * let uicolors = new am4core.InterfaceColorSet();\r\n\t * console.log(uicolors.getFor(\"stroke\"));\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * var uicolors = new am4core.InterfaceColorSet();\r\n\t * console.log(uicolors.getFor(\"stroke\"));\r\n\t * ```\r\n\t *\r\n\t * @param purpose  Color use purpuse\r\n\t * @return Color\r\n\t */\r\n\tpublic getFor(purpose: keyof IColorPurpose): Color {\r\n\t\treturn this._purposes[purpose];\r\n\t}\r\n\r\n\t/**\r\n\t * Sets color to be used for the specific purpose.\r\n\t *\r\n\t * @param purpose  Color use purpose\r\n\t * @param color    Color\r\n\t */\r\n\tpublic setFor(purpose: keyof IColorPurpose, color: Color): void {\r\n\t\tthis._purposes[purpose] = color;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"InterfaceColorSet\"] = InterfaceColorSet;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}