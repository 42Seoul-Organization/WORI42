{"ast":null,"code":"/**\r\n * Line drawing functionality.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Sprite } from \"../Sprite\";\nimport { color } from \"../utils/Color\";\nimport { LinearGradient } from \"../rendering/fills/LinearGradient\";\nimport { registry } from \"../Registry\";\nimport * as $type from \"../utils/Type\";\nimport * as $math from \"../utils/Math\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Draws a line.\r\n *\r\n * @see {@link ILineEvents} for a list of available events\r\n * @see {@link ILineAdapters} for a list of available Adapters\r\n */\n\nvar Line =\n/** @class */\nfunction (_super) {\n  __extends(Line, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Line() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Line\";\n    _this.element = _this.paper.add(\"line\");\n    _this.fill = color(); //\"none\";\n\n    _this.x1 = 0;\n    _this.y1 = 0;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the line.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Line.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    if (this.x1 == this.x2 || this.y1 == this.y2) {\n      this.pixelPerfect = true;\n    } else {\n      this.pixelPerfect = false;\n    }\n\n    this.x1 = this.x1;\n    this.x2 = this.x2;\n    this.y1 = this.y1;\n    this.y2 = this.y2;\n  };\n\n  Object.defineProperty(Line.prototype, \"x1\", {\n    /**\r\n     * @return X\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"x1\");\n    },\n\n    /**\r\n     * X coordinate of first end.\r\n     *\r\n     * @param value X\r\n     */\n    set: function set(value) {\n      if (!$type.isNumber(value)) {\n        value = 0;\n      }\n\n      var delta = 0;\n\n      if (this.pixelPerfect && this.stroke instanceof LinearGradient) {\n        delta = 0.00001;\n      }\n\n      this.setPropertyValue(\"x1\", value, true);\n      this.element.attr({\n        \"x1\": value + delta\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Line.prototype, \"x2\", {\n    /**\r\n     * @return X\r\n     */\n    get: function get() {\n      var value = this.getPropertyValue(\"x2\");\n\n      if (!$type.isNumber(value)) {\n        value = this.pixelWidth;\n      }\n\n      return value;\n    },\n\n    /**\r\n     * X coordinate of second end.\r\n     *\r\n     * @param value X\r\n     */\n    set: function set(value) {\n      if (!$type.isNumber(value)) {\n        value = 0;\n      }\n\n      this.setPropertyValue(\"x2\", value, true);\n      this.element.attr({\n        \"x2\": value\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Line.prototype, \"y1\", {\n    /**\r\n     * @return Y\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"y1\");\n    },\n\n    /**\r\n     * Y coordinate of first end.\r\n     *\r\n     * @param value Y\r\n     */\n    set: function set(value) {\n      if (!$type.isNumber(value)) {\n        value = 0;\n      }\n\n      var delta = 0;\n\n      if (this.pixelPerfect && this.stroke instanceof LinearGradient) {\n        delta = 0.00001;\n      }\n\n      this.setPropertyValue(\"y1\", value, true);\n      this.element.attr({\n        \"y1\": value + delta\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Line.prototype, \"y2\", {\n    /**\r\n     * @return Y\r\n     */\n    get: function get() {\n      var value = this.getPropertyValue(\"y2\");\n\n      if (!$type.isNumber(value)) {\n        value = this.pixelHeight;\n      }\n\n      return value;\n    },\n\n    /**\r\n     * Y coordinate of second end.\r\n     *\r\n     * @param value Y\r\n     */\n    set: function set(value) {\n      if (!$type.isNumber(value)) {\n        value = 0;\n      }\n\n      this.setPropertyValue(\"y2\", value, true);\n      this.element.attr({\n        \"y2\": value\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts relative position along the line (0-1) into pixel coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @return Coordinates\r\n   */\n\n  Line.prototype.positionToPoint = function (position) {\n    var point1 = {\n      x: this.x1,\n      y: this.y1\n    };\n    var point2 = {\n      x: this.x2,\n      y: this.y2\n    };\n    var point = $math.getMidPoint(point1, point2, position);\n    var angle = $math.getAngle(point1, point2);\n    return {\n      x: point.x,\n      y: point.y,\n      angle: angle\n    };\n  };\n\n  return Line;\n}(Sprite);\n\nexport { Line };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Line\"] = Line;","map":{"version":3,"sources":["../../../../../src/.internal/core/elements/Line.ts"],"names":[],"mappings":"AAAA;;;;AAIA;;;;;;;AAMA,SAAS,MAAT,QAA0E,WAA1E;AACA,SAAS,KAAT,QAAsB,gBAAtB;AACA,SAAS,cAAT,QAA+B,mCAA/B;AACA,SAAS,QAAT,QAAyB,aAAzB;AACA,OAAO,KAAK,KAAZ,MAAuB,eAAvB;AACA,OAAO,KAAK,KAAZ,MAAuB,eAAvB;AAoDA;;;;;;;AAOA;;;;;;;AAMA,IAAA,IAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA0B,EAAA,SAAA,CAAA,IAAA,EAAA,MAAA,CAAA;AAiBzB;;;;;AAGA,WAAA,IAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADR;;AAEC,IAAA,KAAI,CAAC,SAAL,GAAiB,MAAjB;AACA,IAAA,KAAI,CAAC,OAAL,GAAe,KAAI,CAAC,KAAL,CAAW,GAAX,CAAe,MAAf,CAAf;AACA,IAAA,KAAI,CAAC,IAAL,GAAY,KAAK,EAAjB,CAJD,CAIsB;;AAErB,IAAA,KAAI,CAAC,EAAL,GAAU,CAAV;AACA,IAAA,KAAI,CAAC,EAAL,GAAU,CAAV;;AAEA,IAAA,KAAI,CAAC,UAAL;;;AACA;AAED;;;;;;;AAKO,EAAA,IAAA,CAAA,SAAA,CAAA,IAAA,GAAP,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,IAAN,CAAU,IAAV,CAAU,IAAV;;AACA,QAAI,KAAK,EAAL,IAAW,KAAK,EAAhB,IAAsB,KAAK,EAAL,IAAW,KAAK,EAA1C,EAA8C;AAC7C,WAAK,YAAL,GAAoB,IAApB;AACA,KAFD,MAGK;AACJ,WAAK,YAAL,GAAoB,KAApB;AACA;;AAED,SAAK,EAAL,GAAU,KAAK,EAAf;AACA,SAAK,EAAL,GAAU,KAAK,EAAf;AAEA,SAAK,EAAL,GAAU,KAAK,EAAf;AACA,SAAK,EAAL,GAAU,KAAK,EAAf;AACA,GAdM;;AAqBP,EAAA,MAAA,CAAA,cAAA,CAAW,IAAA,CAAA,SAAX,EAAW,IAAX,EAAa;AAab;;;SAGA,eAAA;AACC,aAAO,KAAK,gBAAL,CAAsB,IAAtB,CAAP;AACA,KAlBY;;AALb;;;;;SAKA,aAAc,KAAd,EAA2B;AAC1B,UAAI,CAAC,KAAK,CAAC,QAAN,CAAe,KAAf,CAAL,EAA4B;AAC3B,QAAA,KAAK,GAAG,CAAR;AACA;;AACD,UAAI,KAAK,GAAG,CAAZ;;AACA,UAAI,KAAK,YAAL,IAAqB,KAAK,MAAL,YAAuB,cAAhD,EAAgE;AAC/D,QAAA,KAAK,GAAG,OAAR;AACA;;AAED,WAAK,gBAAL,CAAsB,IAAtB,EAA4B,KAA5B,EAAmC,IAAnC;AACA,WAAK,OAAL,CAAa,IAAb,CAAkB;AAAE,cAAM,KAAK,GAAG;AAAhB,OAAlB;AACA,KAXY;oBAAA;;AAAA,GAAb;AAyBA,EAAA,MAAA,CAAA,cAAA,CAAW,IAAA,CAAA,SAAX,EAAW,IAAX,EAAa;AAQb;;;SAGA,eAAA;AACC,UAAI,KAAK,GAAG,KAAK,gBAAL,CAAsB,IAAtB,CAAZ;;AACA,UAAI,CAAC,KAAK,CAAC,QAAN,CAAe,KAAf,CAAL,EAA4B;AAC3B,QAAA,KAAK,GAAG,KAAK,UAAb;AACA;;AACD,aAAO,KAAP;AACA,KAjBY;;AALb;;;;;SAKA,aAAc,KAAd,EAA2B;AAC1B,UAAI,CAAC,KAAK,CAAC,QAAN,CAAe,KAAf,CAAL,EAA4B;AAC3B,QAAA,KAAK,GAAG,CAAR;AACA;;AACD,WAAK,gBAAL,CAAsB,IAAtB,EAA4B,KAA5B,EAAmC,IAAnC;AACA,WAAK,OAAL,CAAa,IAAb,CAAkB;AAAE,cAAM;AAAR,OAAlB;AACA,KANY;oBAAA;;AAAA,GAAb;AAwBA,EAAA,MAAA,CAAA,cAAA,CAAW,IAAA,CAAA,SAAX,EAAW,IAAX,EAAa;AAcb;;;SAGA,eAAA;AACC,aAAO,KAAK,gBAAL,CAAsB,IAAtB,CAAP;AACA,KAnBY;;AALb;;;;;SAKA,aAAc,KAAd,EAA2B;AAC1B,UAAI,CAAC,KAAK,CAAC,QAAN,CAAe,KAAf,CAAL,EAA4B;AAC3B,QAAA,KAAK,GAAG,CAAR;AACA;;AAED,UAAI,KAAK,GAAG,CAAZ;;AACA,UAAI,KAAK,YAAL,IAAqB,KAAK,MAAL,YAAuB,cAAhD,EAAgE;AAC/D,QAAA,KAAK,GAAG,OAAR;AACA;;AAED,WAAK,gBAAL,CAAsB,IAAtB,EAA4B,KAA5B,EAAmC,IAAnC;AACA,WAAK,OAAL,CAAa,IAAb,CAAkB;AAAE,cAAM,KAAK,GAAG;AAAhB,OAAlB;AACA,KAZY;oBAAA;;AAAA,GAAb;AA0BA,EAAA,MAAA,CAAA,cAAA,CAAW,IAAA,CAAA,SAAX,EAAW,IAAX,EAAa;AAQb;;;SAGA,eAAA;AACC,UAAI,KAAK,GAAG,KAAK,gBAAL,CAAsB,IAAtB,CAAZ;;AACA,UAAI,CAAC,KAAK,CAAC,QAAN,CAAe,KAAf,CAAL,EAA4B;AAC3B,QAAA,KAAK,GAAG,KAAK,WAAb;AACA;;AACD,aAAO,KAAP;AACA,KAjBY;;AALb;;;;;SAKA,aAAc,KAAd,EAA2B;AAC1B,UAAI,CAAC,KAAK,CAAC,QAAN,CAAe,KAAf,CAAL,EAA4B;AAC3B,QAAA,KAAK,GAAG,CAAR;AACA;;AACD,WAAK,gBAAL,CAAsB,IAAtB,EAA4B,KAA5B,EAAmC,IAAnC;AACA,WAAK,OAAL,CAAa,IAAb,CAAkB;AAAE,cAAM;AAAR,OAAlB;AACA,KANY;oBAAA;;AAAA,GAAb;AAmBA;;;;;;;AAMO,EAAA,IAAA,CAAA,SAAA,CAAA,eAAA,GAAP,UAAuB,QAAvB,EAAuC;AACtC,QAAI,MAAM,GAAG;AAAE,MAAA,CAAC,EAAE,KAAK,EAAV;AAAc,MAAA,CAAC,EAAE,KAAK;AAAtB,KAAb;AACA,QAAI,MAAM,GAAG;AAAE,MAAA,CAAC,EAAE,KAAK,EAAV;AAAc,MAAA,CAAC,EAAE,KAAK;AAAtB,KAAb;AACA,QAAI,KAAK,GAAG,KAAK,CAAC,WAAN,CAAkB,MAAlB,EAA0B,MAA1B,EAAkC,QAAlC,CAAZ;AACA,QAAI,KAAK,GAAG,KAAK,CAAC,QAAN,CAAe,MAAf,EAAuB,MAAvB,CAAZ;AAEA,WAAO;AAAC,MAAA,CAAC,EAAC,KAAK,CAAC,CAAT;AAAY,MAAA,CAAC,EAAC,KAAK,CAAC,CAApB;AAAuB,MAAA,KAAK,EAAC;AAA7B,KAAP;AACA,GAPM;;AAQR,SAAA,IAAA;AAAC,CAtKD,CAA0B,MAA1B,CAAA;;;AAwKA;;;;;;;AAMA,QAAQ,CAAC,iBAAT,CAA2B,MAA3B,IAAqC,IAArC","sourcesContent":["/**\r\n * Line drawing functionality.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../Sprite\";\r\nimport { color } from \"../utils/Color\";\r\nimport { LinearGradient } from \"../rendering/fills/LinearGradient\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $math from \"../utils/Math\";\r\nimport { IOrientationPoint } from \"../defs/IPoint\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Line]].\r\n */\r\nexport interface ILineProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * X coordinate of first end.\r\n\t */\r\n\tx1?: number;\r\n\r\n\t/**\r\n\t * Y coordinate of first end.\r\n\t */\r\n\ty1?: number;\r\n\r\n\t/**\r\n\t * X coordinate of second end.\r\n\t */\r\n\tx2?: number;\r\n\r\n\t/**\r\n\t * Y coordinate of second end.\r\n\t */\r\n\ty2?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Line]].\r\n */\r\nexport interface ILineEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Line]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineAdapters extends ISpriteAdapters, ILineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a line.\r\n *\r\n * @see {@link ILineEvents} for a list of available events\r\n * @see {@link ILineAdapters} for a list of available Adapters\r\n */\r\nexport class Line extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILineEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Line\";\r\n\t\tthis.element = this.paper.add(\"line\");\r\n\t\tthis.fill = color(); //\"none\";\r\n\r\n\t\tthis.x1 = 0;\r\n\t\tthis.y1 = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the line.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.x1 == this.x2 || this.y1 == this.y2) {\r\n\t\t\tthis.pixelPerfect = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.pixelPerfect = false;\r\n\t\t}\r\n\r\n\t\tthis.x1 = this.x1;\r\n\t\tthis.x2 = this.x2;\r\n\r\n\t\tthis.y1 = this.y1;\r\n\t\tthis.y2 = this.y2;\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate of first end.\r\n\t *\r\n\t * @param value X\r\n\t */\r\n\tpublic set x1(value: number) {\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t}\r\n\t\tlet delta = 0;\r\n\t\tif (this.pixelPerfect && this.stroke instanceof LinearGradient) {\r\n\t\t\tdelta = 0.00001;\r\n\t\t}\r\n\r\n\t\tthis.setPropertyValue(\"x1\", value, true);\r\n\t\tthis.element.attr({ \"x1\": value + delta });\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get x1(): number {\r\n\t\treturn this.getPropertyValue(\"x1\");\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate of second end.\r\n\t *\r\n\t * @param value X\r\n\t */\r\n\tpublic set x2(value: number) {\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t}\r\n\t\tthis.setPropertyValue(\"x2\", value, true);\r\n\t\tthis.element.attr({ \"x2\": value });\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get x2(): number {\r\n\t\tlet value = this.getPropertyValue(\"x2\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.pixelWidth;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate of first end.\r\n\t *\r\n\t * @param value Y\r\n\t */\r\n\tpublic set y1(value: number) {\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t}\r\n\r\n\t\tlet delta = 0;\r\n\t\tif (this.pixelPerfect && this.stroke instanceof LinearGradient) {\r\n\t\t\tdelta = 0.00001;\r\n\t\t}\r\n\r\n\t\tthis.setPropertyValue(\"y1\", value, true);\r\n\t\tthis.element.attr({ \"y1\": value + delta });\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get y1(): number {\r\n\t\treturn this.getPropertyValue(\"y1\");\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate of second end.\r\n\t *\r\n\t * @param value Y\r\n\t */\r\n\tpublic set y2(value: number) {\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t}\r\n\t\tthis.setPropertyValue(\"y2\", value, true);\r\n\t\tthis.element.attr({ \"y2\": value });\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get y2(): number {\r\n\t\tlet value = this.getPropertyValue(\"y2\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.pixelHeight;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tlet point1 = { x: this.x1, y: this.y1 };\r\n\t\tlet point2 = { x: this.x2, y: this.y2 };\r\n\t\tlet point = $math.getMidPoint(point1, point2, position);\r\n\t\tlet angle = $math.getAngle(point1, point2);\r\n\r\n\t\treturn {x:point.x, y:point.y, angle:angle};\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Line\"] = Line;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}