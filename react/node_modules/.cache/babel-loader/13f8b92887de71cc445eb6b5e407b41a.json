{"ast":null,"code":"/**\r\n * A collection of universal utility functions.\r\n */\nimport { Percent } from \"./Percent\";\nimport { isSafari } from \"./Browser\";\nimport * as $math from \"../utils/Math\";\nimport * as $type from \"../utils/Type\";\nimport * as $string from \"./String\";\nimport * as $strings from \"./Strings\";\nimport * as $object from \"./Object\";\nimport * as $array from \"./Array\";\n/**\r\n * ============================================================================\r\n * MISC FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Marks a value as being used (e.g. because the value has side effects).\r\n */\n\nexport function used(value) {}\n/**\r\n * Copies all properties of one object to the other, omitting undefined.\r\n *\r\n * @param fromObject  Source object\r\n * @param toObject    Target object\r\n * @return Updated target object\r\n * @todo Maybe consolidate with utils.copy?\r\n */\n\nexport function copyProperties(source, target) {\n  $object.each(source, function (key, value) {\n    // only if value is set\n    if ($type.hasValue(value)) {\n      target[key] = value;\n    }\n  });\n  return target;\n}\n/**\r\n * Removes target from url\r\n */\n\nexport function stripHash(url) {\n  return /^[^#]*/.exec(url)[0];\n}\nexport function getBaseURI() {\n  var url = \"#\"; // Needed until https://bugs.webkit.org/show_bug.cgi?id=189499 is fixed\n\n  if (isSafari()) {\n    var baseURI = document.baseURI;\n\n    if (baseURI) {\n      baseURI = stripHash(baseURI);\n      var loc = stripHash(location.href);\n\n      if (baseURI !== loc) {\n        url = loc + url;\n      }\n    }\n  }\n\n  return url;\n}\n/**\r\n * Copies all properties of one object to the other, omitting undefined, but only if property in target object doesn't have a value set.\r\n *\r\n * @param fromObject  Source object\r\n * @param toObject    Target object\r\n * @return Updated target object\r\n * @todo Maybe consolidate with utils.copy?\r\n */\n\nexport function softCopyProperties(source, target) {\n  $object.each(source, function (key, value) {\n    // only if value is set\n    if ($type.hasValue(value) && !$type.hasValue(target[key])) {\n      target[key] = value;\n    }\n  });\n  return target;\n}\n/**\r\n * Copies all properties of one object to the other.\r\n *\r\n * @param source     Source object\r\n * @param recipient  Target object\r\n * @return Updated target object\r\n */\n\nexport function copy(source, target) {\n  $object.each(source, function (key, value) {\n    target[key] = value;\n  });\n  return target;\n}\n/**\r\n * Checks if value is not empty (undefined or zero-length string).\r\n *\r\n * @param value  Value to check\r\n * @return `true` if value is not \"empty\"\r\n */\n\nexport function isNotEmpty(value) {\n  return $type.hasValue(value) && value.toString() !== \"\";\n}\n/**\r\n * [relativeToValue description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param percent  [description]\r\n * @param full     [description]\r\n * @return [description]\r\n */\n\nexport function relativeToValue(percent, full) {\n  if ($type.isNumber(percent)) {\n    return percent;\n  } else if (percent != null && $type.isNumber(percent.value) && $type.isNumber(full)) {\n    return full * percent.value;\n  } else {\n    return 0;\n  }\n}\n/**\r\n * [relativeRadiusToValue description]\r\n *\r\n * Differs from relativeToValue so that if a value is negative, it subtracts\r\n * it from full value.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param percent             [description]\r\n * @param full                [description]\r\n * @param subtractIfNegative  [description]\r\n * @return [description]\r\n */\n\nexport function relativeRadiusToValue(percent, full, subtractIfNegative) {\n  var value;\n\n  if ($type.isNumber(percent)) {\n    value = percent;\n\n    if (value < 0) {\n      if (subtractIfNegative) {\n        value = full + value;\n      } else {\n        value = full - value;\n      }\n    }\n  } else if (percent != null && $type.isNumber(percent.value)) {\n    value = full * percent.value;\n  }\n\n  return value;\n}\n/**\r\n * [valueToRelative description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param value  [description]\r\n * @param full   [description]\r\n * @return [description]\r\n */\n\nexport function valueToRelative(value, full) {\n  if (value instanceof Percent) {\n    return value.value;\n  } else {\n    return value / full;\n  }\n}\n/**\r\n * Returns pixel ratio of the current screen (used on retina displays).\r\n *\r\n * @return Pixel ratio\r\n */\n\nexport function getPixelRatio() {\n  var ratio = window.devicePixelRatio || 1;\n  return ratio;\n}\n/**\r\n * ============================================================================\r\n * STRING FORMATTING FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Converts camelCased text to dashed version:\r\n * (\"thisIsString\" > \"this-is-string\")\r\n *\r\n * @param str  Input\r\n * @return Output\r\n */\n\nexport function camelToDashed(str) {\n  return str.replace(/\\W+/g, '-').replace(/([a-z\\d])([A-Z])/g, '$1-$2').toLowerCase();\n}\n/**\r\n * Converts tring to uppercase.\r\n *\r\n * @param str  String to convert\r\n * @return uppercased string\r\n * @todo Maybe make it better\r\n */\n\nexport function capitalize(str) {\n  var arr = str.split(\"\");\n  arr[0] = arr[0].toUpperCase();\n  return arr.join(\"\");\n}\n/**\r\n * Converts any value into its string representation.\r\n *\r\n * @param value  Value\r\n * @return String represantation of the value\r\n */\n\nexport function stringify(value) {\n  return JSON.stringify(value);\n}\n/**\r\n * Escapes string so it can safely be used in a Regex.\r\n *\r\n * @param value  Unsescaped string\r\n * @return Escaped string\r\n */\n\nexport function escapeForRgex(value) {\n  return value.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n}\n/**\r\n * Splits the text into multiple lines, respecting maximum character count.\r\n * Prioretizes splitting on spaces and punctuation. Falls back on splitting\r\n * mid-word if there's no other option.\r\n *\r\n * @param text      Text\r\n * @param maxChars  Maximum number of characters per line\r\n * @return An array of split text\r\n */\n\nexport function splitTextByCharCount(text, maxChars, fullWords, rtl) {\n  // Maybe the text fits?\n  if (text.length <= maxChars) {\n    return [text];\n  } // Init result\n\n\n  var res = []; // Split by words or by charts\n\n  if (fullWords) {\n    // Split by words first\n    // Split by spacing\n    var currentIndex = -1;\n    var tmpText = text.replace(/([,;:!?\\\\\\/\\.]+[\\s]+|[\\s])/g, $strings.PLACEHOLDER + \"$1\" + $strings.PLACEHOLDER);\n    var words = tmpText.split($strings.PLACEHOLDER); // Process each word\n\n    for (var i = 0; i < words.length; i++) {\n      // Get word and symbol count\n      var word = words[i];\n      var wordLength = word.length; // Ignore empty words\n\n      if (wordLength === 0) {\n        continue;\n      } // Check word length\n      //if ((wordLength > maxChars) && fullWords !== true) {\n\n\n      if (wordLength > maxChars) {\n        // A single word is longer than allowed symbol count\n        // Break it up\n        if (rtl) {\n          word = reverseString(word);\n        }\n\n        var parts = word.match(new RegExp(\".{1,\" + maxChars + \"}\", \"g\")); // TODO is this correct ?\n\n        if (parts) {\n          if (rtl) {\n            for (var x = 0; x < parts.length; x++) {\n              parts[x] = reverseString(parts[x]);\n            } //parts.reverse();\n\n          }\n\n          res = res.concat(parts);\n        }\n      } else {\n        // Init current line\n        if (currentIndex === -1) {\n          res.push(\"\");\n          currentIndex = 0;\n        } // Check if we need to break into another line\n\n\n        if (res[currentIndex].length + wordLength + 1 > maxChars && res[currentIndex] !== \"\") {\n          res.push(\"\");\n          currentIndex++;\n        } // Add word\n\n\n        res[currentIndex] += word;\n      } // Update index\n\n\n      currentIndex = res.length - 1;\n    }\n  } else {\n    // Splitting by anywhere (living la vida facil)\n    var parts = text.match(new RegExp(\".{1,\" + maxChars + \"}\", \"g\"));\n\n    if (parts) {\n      if (rtl) {\n        for (var x = 0; x < parts.length; x++) {\n          parts[x] = reverseString(parts[x]);\n        }\n      }\n\n      res = parts;\n    }\n  } // Do we have only one word that does not fit?\n  // Since fullWords is set and we can't split the word, we end up with empty\n  // set.\n\n\n  if (res.length == 1 && fullWords && res[0].length > maxChars) {\n    res = [];\n  }\n\n  return res;\n}\n/**\r\n * Truncates the text to certain character count.\r\n *\r\n * Will add ellipsis if the string is truncated. Optionally, can truncate on\r\n * full words only.\r\n *\r\n * For RTL support, pass in the fifth parameter as `true`.\r\n *\r\n * @param text       Input text\r\n * @param maxChars   Maximum character count of output\r\n * @param ellipsis   Ellipsis string, i.e. \"...\"\r\n * @param fullWords  If `true`, will not break mid-word, unless there's a single word and it does not with into `maxChars`\r\n * @param rtl        Is this an RTL text?\r\n * @return Truncated text\r\n */\n\nexport function truncateWithEllipsis(text, maxChars, ellipsis, fullWords, rtl) {\n  if (text.length <= maxChars) {\n    return text;\n  } // Calc max chars\n\n\n  maxChars -= ellipsis.length;\n\n  if (maxChars < 1) {\n    maxChars = 1; //ellipsis = \"\";\n  } // Get lines\n\n\n  var lines = splitTextByCharCount(text, maxChars, fullWords, rtl); // Use first line\n\n  return (lines[0] || \"\") + ellipsis;\n}\n/**\r\n * Removes whitespace from beginning and end of the string.\r\n *\r\n * @param str  Input\r\n * @return Output\r\n */\n\nexport function trim(str) {\n  return str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, \"\");\n}\n;\n/**\r\n * Removes whitespace from end of the string.\r\n *\r\n * @param str  Input\r\n * @return Output\r\n */\n\nexport function rtrim(str) {\n  return str.replace(/[\\s\\uFEFF\\xA0]+$/g, \"\");\n}\n;\n/**\r\n * Removes whitespace from beginning of the string.\r\n *\r\n * @param str  Input\r\n * @return Output\r\n */\n\nexport function ltrim(str) {\n  return str.replace(/^[\\s\\uFEFF\\xA0]+/g, \"\");\n}\n;\n/**\r\n * Reverses string.\r\n *\r\n * @param str  Input\r\n * @return Output\r\n */\n\nexport function reverseString(str) {\n  return str.split(\"\").reverse().join(\"\");\n}\n/**\r\n * Removes quotes from the string.\r\n *\r\n * @param str  Input\r\n * @return Output\r\n */\n\nexport function unquote(str) {\n  var res = str.trim();\n  res = str.replace(/^'(.*)'$/, \"$1\");\n\n  if (res == str) {\n    res = str.replace(/^\"(.*)\"$/, \"$1\");\n  }\n\n  return res;\n}\n/**\r\n * Pads a string with additional characters to certain length.\r\n *\r\n * @param value  A numeric value\r\n * @param len    Result string length in characters\r\n * @param char   A character to use for padding\r\n * @return Padded value as string\r\n */\n\nexport function padString(value, len, char) {\n  if (len === void 0) {\n    len = 0;\n  }\n\n  if (char === void 0) {\n    char = \"0\";\n  }\n\n  if (typeof value !== \"string\") {\n    value = value.toString();\n  }\n\n  return len > value.length ? Array(len - value.length + 1).join(char) + value : value;\n}\n/**\r\n * Tries to determine format type.\r\n *\r\n * @ignore Exclude from docs\r\n * @param format  Format string\r\n * @return Format type (\"string\" | \"number\" | \"date\" | \"duration\")\r\n */\n\nexport function getFormat(format) {\n  // Undefined?\n  if (typeof format === \"undefined\") {\n    return $strings.STRING;\n  } // Cleanup and lowercase format\n\n\n  format = format.toLowerCase().replace(/^\\[[^\\]]*\\]/, \"\"); // Remove style tags\n\n  format = format.replace(/\\[[^\\]]+\\]/, \"\"); // Trim\n\n  format = format.trim(); // Check for any explicit format hints (i.e. /Date)\n\n  var hints = format.match(/\\/(date|number|duration)$/);\n\n  if (hints) {\n    return hints[1];\n  } // Check for explicit hints\n\n\n  if (format === $strings.NUMBER) {\n    return $strings.NUMBER;\n  }\n\n  if (format === $strings.DATE) {\n    return $strings.DATE;\n  }\n\n  if (format === $strings.DURATION) {\n    return $strings.DURATION;\n  } // Detect number formatting symbols\n\n\n  if (format.match(/[#0]/)) {\n    return $strings.NUMBER;\n  } // Detect date formatting symbols\n\n\n  if (format.match(/[ymwdhnsqaxkzgtei]/)) {\n    return $strings.DATE;\n  } // Nothing? Let's display as string\n\n\n  return $strings.STRING;\n}\n/**\r\n * Cleans up format:\r\n * * Strips out formatter hints\r\n *\r\n * @ignore Exclude from docs\r\n * @param format  Format\r\n * @return Cleaned format\r\n */\n\nexport function cleanFormat(format) {\n  return format.replace(/\\/(date|number|duration)$/i, \"\");\n}\n/**\r\n * Strips all tags from the string.\r\n *\r\n * @param text  Source string\r\n * @return String without tags\r\n */\n\nexport function stripTags(text) {\n  return text ? text.replace(/<[^>]*>/g, \"\") : text;\n}\n/**\r\n * Removes new lines and tags from a string.\r\n *\r\n * @param text  String to conver\r\n * @return Converted string\r\n */\n\nexport function plainText(text) {\n  return text ? stripTags(text.replace(/[\\n\\r]+/g, \". \")) : text;\n}\n/**\r\n * ============================================================================\r\n * TYPE CONVERSION FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Converts numeric value into string. Deals with large or small numbers that\r\n * would otherwise use exponents.\r\n *\r\n * @param value  Numeric value\r\n * @return Numeric value as string\r\n */\n\nexport function numberToString(value) {\n  // TODO handle Infinity and -Infinity\n  if ($type.isNaN(value)) {\n    return \"NaN\";\n  }\n\n  if (value === Infinity) {\n    return \"Infinity\";\n  }\n\n  if (value === -Infinity) {\n    return \"-Infinity\";\n  } // Negative 0\n\n\n  if (value === 0 && 1 / value === -Infinity) {\n    return \"-0\";\n  } // Preserve negative and deal with absoute values\n\n\n  var negative = value < 0;\n  value = Math.abs(value); // TODO test this\n\n  var parsed = $type.getValue(/^([0-9]+)(?:\\.([0-9]+))?(?:e[\\+\\-]([0-9]+))?$/.exec(\"\" + value));\n  var digits = parsed[1];\n  var decimals = parsed[2] || \"\";\n  var res; // Leave the nummber as it is if it does not use exponents\n\n  if (parsed[3] == null) {\n    res = decimals === \"\" ? digits : digits + \".\" + decimals;\n  } else {\n    var exponent = +parsed[3]; // Deal with decimals\n\n    if (value < 1) {\n      var zeros = exponent - 1;\n      res = \"0.\" + $string.repeat(\"0\", zeros) + digits + decimals; // Deal with integers\n    } else {\n      var zeros = exponent - decimals.length;\n\n      if (zeros === 0) {\n        res = digits + decimals;\n      } else if (zeros < 0) {\n        res = digits + decimals.slice(0, zeros) + \".\" + decimals.slice(zeros);\n      } else {\n        res = digits + decimals + $string.repeat(\"0\", zeros);\n      }\n    }\n  }\n\n  return negative ? \"-\" + res : res;\n}\n/**\r\n * Converts anything to Date object.\r\n *\r\n * @param value  A value of any type\r\n * @return Date object representing a value\r\n */\n\nexport function anyToDate(value) {\n  if ($type.isDate(value)) {\n    // TODO maybe don't create a new Date ?\n    return new Date(value);\n  } else if ($type.isNumber(value)) {\n    return new Date(value);\n  } else {\n    // Try converting to number (assuming timestamp)\n    var num = Number(value);\n\n    if (!$type.isNumber(num)) {\n      return new Date(value);\n    } else {\n      return new Date(num);\n    }\n  }\n}\n/**\r\n * Tries converting any value to a number.\r\n *\r\n * @param value  Source value\r\n * @return Number\r\n */\n\nexport function anyToNumber(value) {\n  if ($type.isDate(value)) {\n    return value.getTime();\n  } else if ($type.isNumber(value)) {\n    return value;\n  } else if ($type.isString(value)) {\n    // Try converting to number (assuming timestamp)\n    var num = Number(value);\n\n    if (!$type.isNumber(num)) {\n      // Failing\n      return undefined;\n    } else {\n      return num;\n    }\n  }\n}\n/**\r\n * ============================================================================\r\n * DATE-RELATED FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Returns a year day.\r\n *\r\n * @param date  Date\r\n * @param utc   Assume UTC dates?\r\n * @return Year day\r\n * @todo Account for UTC\r\n */\n\nexport function getYearDay(date, utc) {\n  if (utc === void 0) {\n    utc = false;\n  }\n\n  var start = new Date(date.getFullYear(), 0, 0);\n  var diff = date.getTime() - start.getTime() + (start.getTimezoneOffset() - date.getTimezoneOffset()) * 60 * 1000;\n  var oneDay = 1000 * 60 * 60 * 24;\n  return Math.floor(diff / oneDay);\n}\n/**\r\n * Returns week number for a given date.\r\n *\r\n * @param date  Date\r\n * @param utc   Assume UTC dates?\r\n * @return Week number\r\n * @todo Account for UTC\r\n */\n\nexport function getWeek(date, utc) {\n  if (utc === void 0) {\n    utc = false;\n  }\n\n  var day = getYearDay(date, utc) - 1;\n  var week = Math.floor((day - (date.getDay() || 7) + 10) / 7);\n\n  if (week === 0) {\n    week = 53;\n  } else if (week === 53) {\n    week = 1;\n  }\n\n  return week;\n}\n/**\r\n * Returns a week number in the month.\r\n *\r\n * @param date  Source Date\r\n * @param utc   Assume UTC dates?\r\n * @return Week number in month\r\n */\n\nexport function getMonthWeek(date, utc) {\n  if (utc === void 0) {\n    utc = false;\n  }\n\n  var firstWeek = getWeek(new Date(date.getFullYear(), date.getMonth(), 1), utc);\n  var currentWeek = getWeek(date, utc);\n\n  if (currentWeek == 1) {\n    currentWeek = 53;\n  }\n\n  return currentWeek - firstWeek + 1;\n}\n/**\r\n * Returns a year day out of the given week number.\r\n *\r\n * @param week     Week\r\n * @param year     Year\r\n * @param weekday  Weekday\r\n * @param utc      Assume UTC dates\r\n * @return Day in a year\r\n */\n\nexport function getDayFromWeek(week, year, weekday, utc) {\n  if (weekday === void 0) {\n    weekday = 1;\n  }\n\n  if (utc === void 0) {\n    utc = false;\n  }\n\n  var date = new Date(year, 0, 4, 0, 0, 0, 0);\n\n  if (utc) {\n    date.setUTCFullYear(year);\n  }\n\n  var day = week * 7 + weekday - ((date.getDay() || 7) + 3);\n  return day;\n}\n/**\r\n * Returns 12-hour representation out of the 24-hour hours.\r\n *\r\n * @param hours  24-hour number\r\n * @return 12-hour number\r\n */\n\nexport function get12Hours(hours, base) {\n  if (hours > 12) {\n    hours -= 12;\n  } else if (hours === 0) {\n    hours = 12;\n  }\n\n  return $type.hasValue(base) ? hours + (base - 1) : hours;\n}\n/**\r\n * Returns a string name of the tome zone.\r\n *\r\n * @param date     Date object\r\n * @param long     Should return long (\"Pacific Standard Time\") or short abbreviation (\"PST\")\r\n * @param savings  Include information if it's in daylight savings mode\r\n * @param utc      Assume UTC dates\r\n * @return Time zone name\r\n */\n\nexport function getTimeZone(date, long, savings, utc) {\n  if (long === void 0) {\n    long = false;\n  }\n\n  if (savings === void 0) {\n    savings = false;\n  }\n\n  if (utc === void 0) {\n    utc = false;\n  }\n\n  if (utc) {\n    return long ? \"Coordinated Universal Time\" : \"UTC\";\n  }\n\n  var wotz = date.toLocaleString(\"UTC\");\n  var wtz = date.toLocaleString(\"UTC\", {\n    timeZoneName: long ? \"long\" : \"short\"\n  }).substr(wotz.length); //wtz = wtz.replace(/[+-]+[0-9]+$/, \"\");\n\n  if (savings === false) {\n    wtz = wtz.replace(/ (standard|daylight|summer|winter) /i, \" \");\n  }\n\n  return wtz;\n}\n/**\r\n * ============================================================================\r\n * NUMBER-RELATED FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Returns a random number between `from` and `to`.\r\n *\r\n * @param from  From number\r\n * @param to    To number\r\n * @return Random number\r\n */\n\nexport function random(from, to) {\n  return Math.floor(Math.random() * to) + from;\n}\n/**\r\n * Fits the number into specific `min` and `max` bounds.\r\n *\r\n * @param value  Input value\r\n * @param min    Minimum value\r\n * @param max    Maximum value\r\n * @return Possibly adjusted value\r\n */\n\nexport function fitNumber(value, min, max) {\n  if (value > max) {\n    return max;\n  } else if (value < min) {\n    return min;\n  }\n\n  return value;\n}\n/**\r\n * Fits the number into specific `min` and `max` bounds.\r\n *\r\n * If the value is does not fit withing specified range, it \"wraps\" around the\r\n * values.\r\n *\r\n * For example, if we have input value 10 with min set at 1 and max set at 8,\r\n * the value will not fit. The remainder that does not fit (2) will be added\r\n * to `min`, resulting in 3.\r\n *\r\n * The output of regular `fitNumber()` would return 8 instead.\r\n *\r\n * @param value  Input value\r\n * @param min    Minimum value\r\n * @param max    Maximum value\r\n * @return Possibly adjusted value\r\n */\n\nexport function fitNumberRelative(value, min, max) {\n  var gap = max - min;\n\n  if (value > max) {\n    value = min + (value - gap * Math.floor(value / gap));\n  } else if (value < min) {\n    value = min + (value - gap * Math.floor(value / gap));\n  }\n\n  return value;\n}\n/**\r\n * ============================================================================\r\n * SPRITE-RELATED FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Converts SVG element coordinates to coordinates within specific [[Sprite]].\r\n *\r\n * @param point   SVG coordinates\r\n * @param sprite  Sprite\r\n * @return Sprite coordinates\r\n */\n\nexport function svgPointToSprite(point, sprite) {\n  var x = point.x;\n  var y = point.y;\n  var sprites = [];\n\n  if (sprite) {\n    while ($type.hasValue(sprite.parent)) {\n      sprites.push(sprite);\n      sprite = sprite.parent;\n    }\n\n    sprites.reverse();\n\n    for (var i = 0; i < sprites.length; i++) {\n      var sprite_1 = sprites[i];\n      var angle = sprite_1.rotation;\n      var relativeX = x - sprite_1.pixelX - sprite_1.ex;\n      var relativeY = y - sprite_1.pixelY - sprite_1.ey;\n\n      if (sprite_1.dx) {\n        x -= sprite_1.dx;\n      }\n\n      if (sprite_1.dy) {\n        y -= sprite_1.dy;\n      }\n\n      var scale = sprite_1.scale; // this handles nonscaling\n\n      if (sprite_1.group) {\n        scale = sprite_1.group.scale;\n      }\n\n      x = ($math.cos(-angle) * relativeX - $math.sin(-angle) * relativeY) / scale - sprite_1.pixelPaddingLeft;\n      y = ($math.cos(-angle) * relativeY + $math.sin(-angle) * relativeX) / scale - sprite_1.pixelPaddingTop;\n    }\n  }\n\n  return {\n    x: x,\n    y: y\n  };\n}\n/**\r\n * Converts coordinates within [[Sprite]] to coordinates relative to the whole\r\n * SVG element.\r\n *\r\n * @param point   Sprite coordinates\r\n * @param sprite  Sprite\r\n * @return SVG coordinates\r\n */\n\nexport function spritePointToSvg(point, sprite) {\n  var x = point.x;\n  var y = point.y;\n\n  if (sprite) {\n    while ($type.hasValue(sprite.parent)) {\n      var angle = sprite.rotation;\n      x += sprite.pixelPaddingLeft + sprite.ex;\n      y += sprite.pixelPaddingTop + sprite.ey;\n      var scale = sprite.scale; // this handles nonscaling\n\n      if (sprite.group) {\n        scale = sprite.group.scale;\n      }\n\n      var relativeX = sprite.pixelX + (x * $math.cos(angle) - y * $math.sin(angle)) * scale;\n      var relativeY = sprite.pixelY + (x * $math.sin(angle) + y * $math.cos(angle)) * scale;\n\n      if (sprite.dx) {\n        relativeX += sprite.dx;\n      }\n\n      if (sprite.dy) {\n        relativeY += sprite.dy;\n      }\n\n      x = relativeX;\n      y = relativeY;\n      sprite = sprite.parent;\n    }\n  }\n\n  return {\n    x: x,\n    y: y\n  };\n}\n/**\r\n * Converts coordinates of one sprite to another.\r\n *\r\n * @param point   Sprite coordinates\r\n * @param sprite  Sprite\r\n * @param toSprite  Sprite\r\n * @return converted coordinates\r\n */\n\nexport function spritePointToSprite(point, sprite, toSprite) {\n  return svgPointToSprite(spritePointToSvg(point, sprite), toSprite);\n}\n/**\r\n * Converts a rectangle expressed in SVG element coordinates to coordinates\r\n * within specific [[Sprite]].\r\n *\r\n * @param rect    SVG rectangle\r\n * @param sprite  Sprite\r\n * @return Sprite rectangle\r\n */\n\nexport function svgRectToSprite(rect, sprite) {\n  var p1 = svgPointToSprite(rect, sprite);\n  var p2 = svgPointToSprite({\n    x: rect.x + rect.width,\n    y: rect.y + rect.height\n  }, sprite);\n  return {\n    x: p1.x,\n    y: p1.y,\n    width: p2.x - p1.x,\n    height: p2.y - p1.y\n  };\n}\n/**\r\n * Converts a rectangle expressed in [[Sprite]] coordinates to SVG coordinates.\r\n *\r\n * @param rect    Sprite rectangle\r\n * @param sprite  Sprite\r\n * @return SVG rectangle\r\n */\n\nexport function spriteRectToSvg(rect, sprite) {\n  var p1 = spritePointToSvg(rect, sprite);\n  var p2 = spritePointToSvg({\n    x: rect.x + rect.width,\n    y: rect.y + rect.height\n  }, sprite);\n  return {\n    x: p1.x,\n    y: p1.y,\n    width: p2.x - p1.x,\n    height: p2.y - p1.y\n  };\n}\n/**\r\n * Converts global document-wide coordinates to coordinates within SVG element.\r\n *\r\n * @param point         Global coordinates\r\n * @param svgContainer  SVG element\r\n * @return SVG coordinates\r\n */\n\nexport function documentPointToSvg(point, svgContainer, cssScale) {\n  try {\n    var bbox = svgContainer.getBoundingClientRect();\n\n    if (!$type.isNumber(cssScale)) {\n      cssScale = 1;\n    }\n\n    return {\n      \"x\": (point.x - bbox.left) / cssScale,\n      \"y\": (point.y - bbox.top) / cssScale\n    };\n  } catch (e) {\n    return point;\n  }\n}\n/**\r\n * Converts SVG coordinates to global document-wide coordinates.\r\n *\r\n * @param point         SVG coordinates\r\n * @param svgContainer  SVG element\r\n * @return Global coordinates\r\n */\n\nexport function svgPointToDocument(point, svgContainer) {\n  try {\n    var bbox = svgContainer.getBoundingClientRect();\n    return {\n      \"x\": point.x + bbox.left,\n      \"y\": point.y + bbox.top\n    };\n  } catch (e) {\n    return point;\n  }\n}\n/**\r\n * Converts document-wide global coordinates to coordinates within specific\r\n * [[Sprite]].\r\n *\r\n * @param point   Global coordinates\r\n * @param sprite  Sprite\r\n * @return Sprite coordinates\r\n */\n\nexport function documentPointToSprite(point, sprite) {\n  if (sprite && sprite.htmlContainer) {\n    var svgPoint = documentPointToSvg(point, $type.getValue(sprite.htmlContainer), sprite.svgContainer.cssScale);\n    return svgPointToSprite(svgPoint, sprite);\n  } else {\n    return point;\n  }\n}\n/**\r\n * Converts coordinates within [[Sprite]] to global document coordinates.\r\n *\r\n * @param point   Sprite coordinates\r\n * @param sprite  Sprite\r\n * @return Global coordinates\r\n */\n\nexport function spritePointToDocument(point, sprite) {\n  if (sprite && sprite.htmlContainer) {\n    var svgPoint = spritePointToSvg(point, sprite);\n    return svgPointToDocument(svgPoint, $type.getValue(sprite.htmlContainer));\n  } else {\n    return point;\n  }\n}\n/**\r\n * ============================================================================\r\n * DEPRECATED FUNCTIONS\r\n * @todo Review and remove\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Returns element's width.\r\n *\r\n * @ignore Exclude from docs\r\n * @param element  Element\r\n * @return Width (px)\r\n * @deprecated Not used anywhere\r\n */\n\nexport function width(element) {\n  var cs = getComputedStyle(element);\n  var paddingX = parseFloat(cs.paddingLeft) + parseFloat(cs.paddingRight);\n  var borderX = parseFloat(cs.borderLeftWidth) + parseFloat(cs.borderRightWidth);\n  return element.clientWidth - paddingX - borderX;\n}\n/**\r\n * Returns element's height.\r\n *\r\n * @ignore Exclude from docs\r\n * @param element  Element\r\n * @return Height (px)\r\n * @deprecated Not used anywhere\r\n */\n\nexport function height(element) {\n  var cs = getComputedStyle(element);\n  var paddingY = parseFloat(cs.paddingTop) + parseFloat(cs.paddingBottom);\n  var borderY = parseFloat(cs.borderTopWidth) + parseFloat(cs.borderBottomWidth);\n  return element.clientHeight - paddingY - borderY;\n}\n/**\r\n * Returns number of decimals\r\n *\r\n * @ignore Exclude from docs\r\n * @param number  Input number\r\n * @return Number of decimals\r\n */\n\nexport function decimalPlaces(number) {\n  var match = ('' + number).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n\n  if (!match) {\n    return 0;\n  }\n\n  return Math.max(0, (match[1] ? match[1].length : 0) - (match[2] ? +match[2] : 0));\n}\nvar urlRegexp = /^([a-zA-Z][a-zA-Z0-9\\+\\.\\-]*:)?(?:(\\/\\/)([^\\@]+\\@)?([^\\/\\?\\#\\:]*)(\\:[0-9]+)?)?([^\\?\\#]*)(\\?[^\\#]*)?(\\#.*)?$/;\n/**\r\n * Parses a URL\r\n *\r\n * @ignore Exclude from docs\r\n */\n// TODO test this\n\nexport function parseUrl(url) {\n  var match = urlRegexp.exec(url);\n  return {\n    protocol: match && match[1] || \"\",\n    separator: match && match[2] || \"\",\n    authority: match && match[3] || \"\",\n    domain: match && match[4] || \"\",\n    port: match && match[5] || \"\",\n    path: match && match[6] || \"\",\n    query: match && match[7] || \"\",\n    hash: match && match[8] || \"\"\n  };\n}\n/**\r\n * Serializes a Url into a string\r\n *\r\n * @ignore Exclude from docs\r\n */\n\nexport function serializeUrl(url) {\n  return url.protocol + url.separator + url.authority + url.domain + url.port + url.path + url.query + url.hash;\n}\n/**\r\n * Checks whether a Url is relative or not\r\n *\r\n * @ignore Exclude from docs\r\n */\n// TODO is this correct ?\n\nfunction isRelativeUrl(url) {\n  return url.protocol === \"\" && url.separator === \"\" && url.authority === \"\" && url.domain === \"\" && url.port === \"\";\n}\n/**\r\n * Joins together two URLs, resolving relative URLs correctly\r\n *\r\n * @ignore Exclude from docs\r\n */\n// TODO test this\n\n\nexport function joinUrl(left, right) {\n  var parsedLeft = parseUrl(left);\n  var parsedRight = parseUrl(right);\n\n  if (isRelativeUrl(parsedLeft)) {\n    throw new Error(\"Left URL is not absolute\");\n  }\n\n  if (isRelativeUrl(parsedRight)) {\n    // TODO is this correct ?\n    if (parsedRight.path !== \"\") {\n      if (parsedRight.path[0] === \"/\") {\n        parsedLeft.path = parsedRight.path; // TODO is this correct ?\n      } else {\n        var leftPath = parsedLeft.path.split(/\\//);\n        var rightPath = parsedRight.path.split(/\\//); // TODO is this correct ?\n\n        if (leftPath.length === 0) {\n          if (rightPath.length !== 0) {\n            leftPath.push(\"\");\n          }\n        } else if (leftPath.length > 1) {\n          leftPath.pop();\n        }\n\n        $array.pushAll(leftPath, rightPath);\n        parsedLeft.path = leftPath.join(\"/\");\n\n        if (parsedLeft.path !== \"\" && parsedLeft.path[0] !== \"/\") {\n          throw new Error(\"URL path must start with /\");\n        }\n      }\n    } // TODO is this correct ?\n\n\n    parsedLeft.query = parsedRight.query;\n    parsedLeft.hash = parsedRight.hash;\n    return serializeUrl(parsedLeft);\n  } else {\n    return serializeUrl(parsedRight);\n  }\n}\n/**\r\n * Detects MSIE.\r\n *\r\n * @return Is IE?\r\n */\n\nexport function isIE() {\n  return !!window.MSInputMethodContext && !!document.documentMode;\n}","map":{"version":3,"sources":["../../../../../src/.internal/core/utils/Utils.ts"],"names":[],"mappings":"AAAA;;;AAaA,SAAS,OAAT,QAAwB,WAAxB;AACA,SAAS,QAAT,QAAyB,WAAzB;AACA,OAAO,KAAK,KAAZ,MAAuB,eAAvB;AACA,OAAO,KAAK,KAAZ,MAAuB,eAAvB;AACA,OAAO,KAAK,OAAZ,MAAyB,UAAzB;AACA,OAAO,KAAK,QAAZ,MAA0B,WAA1B;AACA,OAAO,KAAK,OAAZ,MAAyB,UAAzB;AACA,OAAO,KAAK,MAAZ,MAAwB,SAAxB;AAGA;;;;;;;AAQA;;;;AAGA,OAAM,SAAU,IAAV,CAAkB,KAAlB,EAA0B,CAAK;AAErC;;;;;;;;;AAQA,OAAM,SAAU,cAAV,CAAyB,MAAzB,EAAyC,MAAzC,EAAuD;AAC5D,EAAA,OAAO,CAAC,IAAR,CAAa,MAAb,EAAqB,UAAC,GAAD,EAAM,KAAN,EAAW;AAC/B;AACA,QAAI,KAAK,CAAC,QAAN,CAAe,KAAf,CAAJ,EAA2B;AACpB,MAAA,MAAO,CAAC,GAAD,CAAP,GAAe,KAAf;AACN;AACD,GALD;AAOA,SAAO,MAAP;AACA;AAED;;;;AAGA,OAAM,SAAU,SAAV,CAAoB,GAApB,EAA+B;AACpC,SAAO,SAAS,IAAT,CAAc,GAAd,EAAmB,CAAnB,CAAP;AACA;AAED,OAAM,SAAU,UAAV,GAAoB;AACzB,MAAI,GAAG,GAAG,GAAV,CADyB,CAGzB;;AACA,MAAI,QAAQ,EAAZ,EAAgB;AACf,QAAI,OAAO,GAAG,QAAQ,CAAC,OAAvB;;AACA,QAAI,OAAJ,EAAa;AACZ,MAAA,OAAO,GAAG,SAAS,CAAC,OAAD,CAAnB;AACA,UAAI,GAAG,GAAG,SAAS,CAAC,QAAQ,CAAC,IAAV,CAAnB;;AACA,UAAI,OAAO,KAAK,GAAhB,EAAqB;AACpB,QAAA,GAAG,GAAG,GAAG,GAAG,GAAZ;AACA;AACD;AACD;;AAED,SAAO,GAAP;AACA;AAED;;;;;;;;;AAQA,OAAM,SAAU,kBAAV,CAA6B,MAA7B,EAA6C,MAA7C,EAA2D;AAChE,EAAA,OAAO,CAAC,IAAR,CAAa,MAAb,EAAqB,UAAC,GAAD,EAAM,KAAN,EAAW;AAC/B;AACA,QAAI,KAAK,CAAC,QAAN,CAAe,KAAf,KAAyB,CAAE,KAAK,CAAC,QAAN,CAAqB,MAAO,CAAC,GAAD,CAA5B,CAA/B,EAAoE;AAC7D,MAAA,MAAO,CAAC,GAAD,CAAP,GAAe,KAAf;AACN;AACD,GALD;AAMA,SAAO,MAAP;AACA;AAED;;;;;;;;AAOA,OAAM,SAAU,IAAV,CAAe,MAAf,EAA+B,MAA/B,EAA6C;AAClD,EAAA,OAAO,CAAC,IAAR,CAAa,MAAb,EAAqB,UAAC,GAAD,EAAM,KAAN,EAAW;AACzB,IAAA,MAAO,CAAC,GAAD,CAAP,GAAe,KAAf;AACN,GAFD;AAGA,SAAO,MAAP;AACA;AAED;;;;;;;AAMA,OAAM,SAAU,UAAV,CAAqB,KAArB,EAAkD;AACvD,SAAO,KAAK,CAAC,QAAN,CAAe,KAAf,KAA0B,KAAK,CAAC,QAAN,OAAqB,EAAtD;AACA;AAED;;;;;;;;;;AASA,OAAM,SAAU,eAAV,CAA0B,OAA1B,EAAqE,IAArE,EAAiF;AACtF,MAAI,KAAK,CAAC,QAAN,CAAe,OAAf,CAAJ,EAA6B;AAC5B,WAAO,OAAP;AACA,GAFD,MAEO,IAAI,OAAO,IAAI,IAAX,IAAmB,KAAK,CAAC,QAAN,CAAe,OAAO,CAAC,KAAvB,CAAnB,IAAoD,KAAK,CAAC,QAAN,CAAe,IAAf,CAAxD,EAA8E;AACpF,WAAO,IAAI,GAAG,OAAO,CAAC,KAAtB;AAEA,GAHM,MAGA;AACN,WAAO,CAAP;AACA;AACD;AAED;;;;;;;;;;;;;;AAaA,OAAM,SAAU,qBAAV,CAAgC,OAAhC,EAA2E,IAA3E,EAAyF,kBAAzF,EAAqH;AAC1H,MAAI,KAAJ;;AAEA,MAAI,KAAK,CAAC,QAAN,CAAe,OAAf,CAAJ,EAA6B;AAC5B,IAAA,KAAK,GAAG,OAAR;;AAEA,QAAI,KAAK,GAAG,CAAZ,EAAe;AACd,UAAI,kBAAJ,EAAwB;AACvB,QAAA,KAAK,GAAG,IAAI,GAAG,KAAf;AACA,OAFD,MAGK;AACJ,QAAA,KAAK,GAAG,IAAI,GAAG,KAAf;AACA;AACD;AAED,GAZD,MAYO,IAAI,OAAO,IAAI,IAAX,IAAmB,KAAK,CAAC,QAAN,CAAe,OAAO,CAAC,KAAvB,CAAvB,EAAsD;AAC5D,IAAA,KAAK,GAAG,IAAI,GAAG,OAAO,CAAC,KAAvB;AACA;;AAED,SAAO,KAAP;AACA;AAED;;;;;;;;;;AASA,OAAM,SAAU,eAAV,CAA0B,KAA1B,EAAmD,IAAnD,EAA+D;AACpE,MAAI,KAAK,YAAY,OAArB,EAA8B;AAC7B,WAAO,KAAK,CAAC,KAAb;AACA,GAFD,MAGK;AACJ,WAAO,KAAK,GAAG,IAAf;AACA;AACD;AAED;;;;;;AAKA,OAAM,SAAU,aAAV,GAAuB;AAC5B,MAAI,KAAK,GAAG,MAAM,CAAC,gBAAP,IAA2B,CAAvC;AACA,SAAO,KAAP;AACA;AAGD;;;;;;;AAOA;;;;;;;;AAOA,OAAM,SAAU,aAAV,CAAwB,GAAxB,EAAmC;AACxC,SAAO,GAAG,CAAC,OAAJ,CAAY,MAAZ,EAAoB,GAApB,EAAyB,OAAzB,CAAiC,mBAAjC,EAAsD,OAAtD,EAA+D,WAA/D,EAAP;AACA;AAED;;;;;;;;AAOA,OAAM,SAAU,UAAV,CAAqB,GAArB,EAAgC;AACrC,MAAI,GAAG,GAAa,GAAG,CAAC,KAAJ,CAAU,EAAV,CAApB;AACA,EAAA,GAAG,CAAC,CAAD,CAAH,GAAS,GAAG,CAAC,CAAD,CAAH,CAAO,WAAP,EAAT;AACA,SAAO,GAAG,CAAC,IAAJ,CAAS,EAAT,CAAP;AACA;AAED;;;;;;;AAMA,OAAM,SAAU,SAAV,CAAoB,KAApB,EAA8B;AACnC,SAAO,IAAI,CAAC,SAAL,CAAe,KAAf,CAAP;AACA;AAED;;;;;;;AAMA,OAAM,SAAU,aAAV,CAAwB,KAAxB,EAAqC;AAC1C,SAAO,KAAK,CAAC,OAAN,CAAc,0BAAd,EAA0C,MAA1C,CAAP;AACA;AAED;;;;;;;;;;AASA,OAAM,SAAU,oBAAV,CAA+B,IAA/B,EAA6C,QAA7C,EAA+D,SAA/D,EAAoF,GAApF,EAAiG;AAEtG;AACA,MAAI,IAAI,CAAC,MAAL,IAAe,QAAnB,EAA6B;AAC5B,WAAO,CAAC,IAAD,CAAP;AACA,GALqG,CAOtG;;;AACA,MAAI,GAAG,GAAa,EAApB,CARsG,CAUtG;;AACA,MAAI,SAAJ,EAAe;AAEd;AAEA;AACA,QAAI,YAAY,GAAW,CAAC,CAA5B;AACA,QAAI,OAAO,GAAG,IAAI,CAAC,OAAL,CAAa,6BAAb,EAA4C,QAAQ,CAAC,WAAT,GAAuB,IAAvB,GAA8B,QAAQ,CAAC,WAAnF,CAAd;AACA,QAAI,KAAK,GAAG,OAAO,CAAC,KAAR,CAAc,QAAQ,CAAC,WAAvB,CAAZ,CAPc,CASd;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AAEtC;AACA,UAAI,IAAI,GAAW,KAAK,CAAC,CAAD,CAAxB;AACA,UAAI,UAAU,GAAW,IAAI,CAAC,MAA9B,CAJsC,CAMtC;;AACA,UAAI,UAAU,KAAK,CAAnB,EAAsB;AACrB;AACA,OATqC,CAWtC;AACA;;;AACA,UAAI,UAAU,GAAG,QAAjB,EAA2B;AAC1B;AACA;AACA,YAAI,GAAJ,EAAS;AACR,UAAA,IAAI,GAAG,aAAa,CAAC,IAAD,CAApB;AACA;;AACD,YAAI,KAAK,GAA4B,IAAI,CAAC,KAAL,CAAW,IAAI,MAAJ,CAAW,SAAS,QAAT,GAAoB,GAA/B,EAAoC,GAApC,CAAX,CAArC,CAN0B,CAQ1B;;AACA,YAAI,KAAJ,EAAW;AACV,cAAI,GAAJ,EAAS;AACR,iBAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACtC,cAAA,KAAK,CAAC,CAAD,CAAL,GAAW,aAAa,CAAC,KAAK,CAAC,CAAD,CAAN,CAAxB;AACA,aAHO,CAIR;;AACA;;AAED,UAAA,GAAG,GAAG,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAN;AACA;AACD,OAnBD,MAoBK;AAEJ;AACA,YAAI,YAAY,KAAK,CAAC,CAAtB,EAAyB;AACxB,UAAA,GAAG,CAAC,IAAJ,CAAS,EAAT;AACA,UAAA,YAAY,GAAG,CAAf;AACA,SANG,CAQJ;;;AACA,YAAM,GAAG,CAAC,YAAD,CAAH,CAAkB,MAAlB,GAA2B,UAA3B,GAAwC,CAAzC,GAA8C,QAA/C,IAA4D,GAAG,CAAC,YAAD,CAAH,KAAsB,EAAtF,EAA0F;AACzF,UAAA,GAAG,CAAC,IAAJ,CAAS,EAAT;AACA,UAAA,YAAY;AACZ,SAZG,CAcJ;;;AACA,QAAA,GAAG,CAAC,YAAD,CAAH,IAAqB,IAArB;AAEA,OAlDqC,CAoDtC;;;AACA,MAAA,YAAY,GAAG,GAAG,CAAC,MAAJ,GAAa,CAA5B;AACA;AACD,GAjED,MAkEK;AAEJ;AACA,QAAI,KAAK,GAA4B,IAAI,CAAC,KAAL,CAAW,IAAI,MAAJ,CAAW,SAAS,QAAT,GAAoB,GAA/B,EAAoC,GAApC,CAAX,CAArC;;AAEA,QAAI,KAAJ,EAAW;AACV,UAAI,GAAJ,EAAS;AACR,aAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACtC,UAAA,KAAK,CAAC,CAAD,CAAL,GAAW,aAAa,CAAC,KAAK,CAAC,CAAD,CAAN,CAAxB;AACA;AACD;;AAED,MAAA,GAAG,GAAG,KAAN;AACA;AAED,GA5FqG,CA8FtG;AACA;AACA;;;AACA,MAAI,GAAG,CAAC,MAAJ,IAAc,CAAd,IAAmB,SAAnB,IAAiC,GAAG,CAAC,CAAD,CAAH,CAAO,MAAP,GAAgB,QAArD,EAAgE;AAC/D,IAAA,GAAG,GAAG,EAAN;AACA;;AAED,SAAO,GAAP;AACA;AAED;;;;;;;;;;;;;;;;AAeA,OAAM,SAAU,oBAAV,CAA+B,IAA/B,EAA6C,QAA7C,EAA+D,QAA/D,EAAiF,SAAjF,EAAsG,GAAtG,EAAmH;AAExH,MAAI,IAAI,CAAC,MAAL,IAAe,QAAnB,EAA6B;AAC5B,WAAO,IAAP;AACA,GAJuH,CAMxH;;;AACA,EAAA,QAAQ,IAAI,QAAQ,CAAC,MAArB;;AACA,MAAI,QAAQ,GAAG,CAAf,EAAkB;AACjB,IAAA,QAAQ,GAAG,CAAX,CADiB,CAEjB;AACA,GAXuH,CAaxH;;;AACA,MAAI,KAAK,GAAG,oBAAoB,CAAC,IAAD,EAAO,QAAP,EAAiB,SAAjB,EAA4B,GAA5B,CAAhC,CAdwH,CAgBxH;;AACA,SAAO,CAAC,KAAK,CAAC,CAAD,CAAL,IAAY,EAAb,IAAmB,QAA1B;AACA;AAED;;;;;;;AAMA,OAAM,SAAU,IAAV,CAAe,GAAf,EAA0B;AAC/B,SAAO,GAAG,CAAC,OAAJ,CAAY,oCAAZ,EAAkD,EAAlD,CAAP;AACA;AAAA;AAED;;;;;;;AAMA,OAAM,SAAU,KAAV,CAAgB,GAAhB,EAA2B;AAChC,SAAO,GAAG,CAAC,OAAJ,CAAY,mBAAZ,EAAiC,EAAjC,CAAP;AACA;AAAA;AAED;;;;;;;AAMA,OAAM,SAAU,KAAV,CAAgB,GAAhB,EAA2B;AAChC,SAAO,GAAG,CAAC,OAAJ,CAAY,mBAAZ,EAAiC,EAAjC,CAAP;AACA;AAAA;AAED;;;;;;;AAMA,OAAM,SAAU,aAAV,CAAwB,GAAxB,EAAmC;AACxC,SAAO,GAAG,CAAC,KAAJ,CAAU,EAAV,EAAc,OAAd,GAAwB,IAAxB,CAA6B,EAA7B,CAAP;AACA;AAED;;;;;;;AAMA,OAAM,SAAU,OAAV,CAAkB,GAAlB,EAA6B;AAClC,MAAI,GAAG,GAAG,GAAG,CAAC,IAAJ,EAAV;AACA,EAAA,GAAG,GAAG,GAAG,CAAC,OAAJ,CAAY,UAAZ,EAAwB,IAAxB,CAAN;;AACA,MAAI,GAAG,IAAI,GAAX,EAAgB;AACf,IAAA,GAAG,GAAG,GAAG,CAAC,OAAJ,CAAY,UAAZ,EAAwB,IAAxB,CAAN;AACA;;AACD,SAAO,GAAP;AACA;AAED;;;;;;;;;AAQA,OAAM,SAAU,SAAV,CAAoB,KAApB,EAAgC,GAAhC,EAAiD,IAAjD,EAAmE;AAAnC,MAAA,GAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,GAAA,GAAA,CAAA;AAAe;;AAAE,MAAA,IAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,IAAA,GAAA,GAAA;AAAkB;;AACxE,MAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC9B,IAAA,KAAK,GAAG,KAAK,CAAC,QAAN,EAAR;AACA;;AAED,SAAO,GAAG,GAAG,KAAK,CAAC,MAAZ,GAAqB,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,MAAZ,GAAqB,CAAtB,CAAL,CAA8B,IAA9B,CAAmC,IAAnC,IAA2C,KAAhE,GAAwE,KAA/E;AACA;AAED;;;;;;;;AAOA,OAAM,SAAU,SAAV,CAAoB,MAApB,EAAkC;AAEvC;AACA,MAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;AAClC,WAAO,QAAQ,CAAC,MAAhB;AACA,GALsC,CAOvC;;;AACA,EAAA,MAAM,GAAG,MAAM,CAAC,WAAP,GAAqB,OAArB,CAA6B,aAA7B,EAA4C,EAA5C,CAAT,CARuC,CAUvC;;AACA,EAAA,MAAM,GAAG,MAAM,CAAC,OAAP,CAAe,YAAf,EAA6B,EAA7B,CAAT,CAXuC,CAavC;;AACA,EAAA,MAAM,GAAG,MAAM,CAAC,IAAP,EAAT,CAduC,CAgBvC;;AACA,MAAI,KAAK,GAA4B,MAAM,CAAC,KAAP,CAAa,2BAAb,CAArC;;AAEA,MAAI,KAAJ,EAAW;AACV,WAAO,KAAK,CAAC,CAAD,CAAZ;AACA,GArBsC,CAuBvC;;;AACA,MAAI,MAAM,KAAK,QAAQ,CAAC,MAAxB,EAAgC;AAC/B,WAAO,QAAQ,CAAC,MAAhB;AACA;;AAED,MAAI,MAAM,KAAK,QAAQ,CAAC,IAAxB,EAA8B;AAC7B,WAAO,QAAQ,CAAC,IAAhB;AACA;;AAED,MAAI,MAAM,KAAK,QAAQ,CAAC,QAAxB,EAAkC;AACjC,WAAO,QAAQ,CAAC,QAAhB;AACA,GAlCsC,CAoCvC;;;AACA,MAAI,MAAM,CAAC,KAAP,CAAa,MAAb,CAAJ,EAA0B;AACzB,WAAO,QAAQ,CAAC,MAAhB;AACA,GAvCsC,CAyCvC;;;AACA,MAAI,MAAM,CAAC,KAAP,CAAa,oBAAb,CAAJ,EAAwC;AACvC,WAAO,QAAQ,CAAC,IAAhB;AACA,GA5CsC,CA8CvC;;;AACA,SAAO,QAAQ,CAAC,MAAhB;AACA;AAED;;;;;;;;;AAQA,OAAM,SAAU,WAAV,CAAsB,MAAtB,EAAoC;AACzC,SAAO,MAAM,CAAC,OAAP,CAAe,4BAAf,EAA6C,EAA7C,CAAP;AACA;AAED;;;;;;;AAMA,OAAM,SAAU,SAAV,CAAoB,IAApB,EAAgC;AACrC,SAAO,IAAI,GAAG,IAAI,CAAC,OAAL,CAAa,UAAb,EAAyB,EAAzB,CAAH,GAAkC,IAA7C;AACA;AAED;;;;;;;AAMA,OAAM,SAAU,SAAV,CAAoB,IAApB,EAAgC;AACrC,SAAO,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,OAAL,CAAa,UAAb,EAAyB,IAAzB,CAAD,CAAZ,GAA+C,IAA1D;AACA;AAGD;;;;;;;AAOA;;;;;;;;AAOA,OAAM,SAAU,cAAV,CAAyB,KAAzB,EAAsC;AAC3C;AACA,MAAI,KAAK,CAAC,KAAN,CAAY,KAAZ,CAAJ,EAAwB;AACvB,WAAO,KAAP;AACA;;AAED,MAAI,KAAK,KAAK,QAAd,EAAwB;AACvB,WAAO,UAAP;AACA;;AAED,MAAI,KAAK,KAAK,CAAC,QAAf,EAAyB;AACxB,WAAO,WAAP;AACA,GAZ0C,CAc3C;;;AACA,MAAK,KAAK,KAAK,CAAX,IAAkB,IAAI,KAAJ,KAAc,CAAC,QAArC,EAAgD;AAC/C,WAAO,IAAP;AACA,GAjB0C,CAmB3C;;;AACA,MAAI,QAAQ,GAAG,KAAK,GAAG,CAAvB;AAEA,EAAA,KAAK,GAAG,IAAI,CAAC,GAAL,CAAS,KAAT,CAAR,CAtB2C,CAwB3C;;AACA,MAAI,MAAM,GAAG,KAAK,CAAC,QAAN,CAAe,gDAAgD,IAAhD,CAAqD,KAAK,KAA1D,CAAf,CAAb;AACA,MAAI,MAAM,GAAG,MAAM,CAAC,CAAD,CAAnB;AACA,MAAI,QAAQ,GAAG,MAAM,CAAC,CAAD,CAAN,IAAa,EAA5B;AAEA,MAAI,GAAJ,CA7B2C,CA+B3C;;AACA,MAAI,MAAM,CAAC,CAAD,CAAN,IAAa,IAAjB,EAAuB;AACtB,IAAA,GAAG,GAAI,QAAQ,KAAK,EAAb,GAAkB,MAAlB,GAA2B,MAAM,GAAG,GAAT,GAAe,QAAjD;AAEA,GAHD,MAGO;AACN,QAAI,QAAQ,GAAG,CAAC,MAAM,CAAC,CAAD,CAAtB,CADM,CAGN;;AACA,QAAI,KAAK,GAAG,CAAZ,EAAe;AACd,UAAI,KAAK,GAAG,QAAQ,GAAG,CAAvB;AAEA,MAAA,GAAG,GAAG,OAAO,OAAO,CAAC,MAAR,CAAe,GAAf,EAAoB,KAApB,CAAP,GAAoC,MAApC,GAA6C,QAAnD,CAHc,CAKd;AACA,KAND,MAMO;AACN,UAAI,KAAK,GAAG,QAAQ,GAAG,QAAQ,CAAC,MAAhC;;AAEA,UAAI,KAAK,KAAK,CAAd,EAAiB;AAChB,QAAA,GAAG,GAAG,MAAM,GAAG,QAAf;AAEA,OAHD,MAGO,IAAI,KAAK,GAAG,CAAZ,EAAe;AACrB,QAAA,GAAG,GAAG,MAAM,GAAG,QAAQ,CAAC,KAAT,CAAe,CAAf,EAAkB,KAAlB,CAAT,GAAoC,GAApC,GAA0C,QAAQ,CAAC,KAAT,CAAe,KAAf,CAAhD;AAEA,OAHM,MAGA;AACN,QAAA,GAAG,GAAG,MAAM,GAAG,QAAT,GAAoB,OAAO,CAAC,MAAR,CAAe,GAAf,EAAoB,KAApB,CAA1B;AACA;AACD;AACD;;AAED,SAAO,QAAQ,GAAG,MAAM,GAAT,GAAe,GAA9B;AACA;AAED;;;;;;;AAMA,OAAM,SAAU,SAAV,CAAoB,KAApB,EAAiD;AACtD,MAAI,KAAK,CAAC,MAAN,CAAa,KAAb,CAAJ,EAAyB;AACxB;AACA,WAAO,IAAI,IAAJ,CAAS,KAAT,CAAP;AACA,GAHD,MAKK,IAAI,KAAK,CAAC,QAAN,CAAe,KAAf,CAAJ,EAA2B;AAC/B,WAAO,IAAI,IAAJ,CAAS,KAAT,CAAP;AACA,GAFI,MAIA;AACJ;AACA,QAAI,GAAG,GAAG,MAAM,CAAC,KAAD,CAAhB;;AAEA,QAAI,CAAC,KAAK,CAAC,QAAN,CAAe,GAAf,CAAL,EAA0B;AACzB,aAAO,IAAI,IAAJ,CAAS,KAAT,CAAP;AACA,KAFD,MAGK;AACJ,aAAO,IAAI,IAAJ,CAAS,GAAT,CAAP;AACA;AACD;AACD;AAED;;;;;;;AAMA,OAAM,SAAU,WAAV,CAAsB,KAAtB,EAAmD;AACxD,MAAI,KAAK,CAAC,MAAN,CAAa,KAAb,CAAJ,EAAyB;AACxB,WAAO,KAAK,CAAC,OAAN,EAAP;AACA,GAFD,MAIK,IAAI,KAAK,CAAC,QAAN,CAAe,KAAf,CAAJ,EAA2B;AAC/B,WAAO,KAAP;AACA,GAFI,MAIA,IAAI,KAAK,CAAC,QAAN,CAAe,KAAf,CAAJ,EAA2B;AAC/B;AACA,QAAI,GAAG,GAAG,MAAM,CAAC,KAAD,CAAhB;;AAEA,QAAI,CAAC,KAAK,CAAC,QAAN,CAAe,GAAf,CAAL,EAA0B;AACzB;AACA,aAAO,SAAP;AACA,KAHD,MAIK;AACJ,aAAO,GAAP;AACA;AACD;AACD;AAGD;;;;;;;AAOA;;;;;;;;;AAQA,OAAM,SAAU,UAAV,CAAqB,IAArB,EAAiC,GAAjC,EAAqD;AAApB,MAAA,GAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,GAAA,GAAA,KAAA;AAAoB;;AAC1D,MAAM,KAAK,GAAG,IAAI,IAAJ,CAAS,IAAI,CAAC,WAAL,EAAT,EAA6B,CAA7B,EAAgC,CAAhC,CAAd;AACA,MAAM,IAAI,GAAI,IAAI,CAAC,OAAL,KAAiB,KAAK,CAAC,OAAN,EAAlB,GAAsC,CAAC,KAAK,CAAC,iBAAN,KAA4B,IAAI,CAAC,iBAAL,EAA7B,IAAyD,EAAzD,GAA8D,IAAjH;AACA,MAAM,MAAM,GAAG,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAhC;AACA,SAAO,IAAI,CAAC,KAAL,CAAW,IAAI,GAAG,MAAlB,CAAP;AACA;AAED;;;;;;;;;AAQA,OAAM,SAAU,OAAV,CAAkB,IAAlB,EAA8B,GAA9B,EAAkD;AAApB,MAAA,GAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,GAAA,GAAA,KAAA;AAAoB;;AACvD,MAAM,GAAG,GAAG,UAAU,CAAC,IAAD,EAAO,GAAP,CAAV,GAAwB,CAApC;AACA,MAAI,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,CAAC,GAAG,IAAI,IAAI,CAAC,MAAL,MAAiB,CAArB,CAAH,GAA6B,EAA9B,IAAoC,CAA/C,CAAX;;AACA,MAAI,IAAI,KAAK,CAAb,EAAgB;AACf,IAAA,IAAI,GAAG,EAAP;AACA,GAFD,MAGK,IAAI,IAAI,KAAK,EAAb,EAAiB;AACrB,IAAA,IAAI,GAAG,CAAP;AACA;;AACD,SAAO,IAAP;AACA;AAED;;;;;;;;AAOA,OAAM,SAAU,YAAV,CAAuB,IAAvB,EAAmC,GAAnC,EAAuD;AAApB,MAAA,GAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,GAAA,GAAA,KAAA;AAAoB;;AAC5D,MAAM,SAAS,GAAG,OAAO,CAAC,IAAI,IAAJ,CAAS,IAAI,CAAC,WAAL,EAAT,EAA6B,IAAI,CAAC,QAAL,EAA7B,EAA8C,CAA9C,CAAD,EAAmD,GAAnD,CAAzB;AACA,MAAI,WAAW,GAAG,OAAO,CAAC,IAAD,EAAO,GAAP,CAAzB;;AACA,MAAI,WAAW,IAAI,CAAnB,EAAsB;AACrB,IAAA,WAAW,GAAG,EAAd;AACA;;AACD,SAAO,WAAW,GAAG,SAAd,GAA0B,CAAjC;AACA;AAED;;;;;;;;;;AASA,OAAM,SAAU,cAAV,CAAyB,IAAzB,EAAuC,IAAvC,EAAqD,OAArD,EAA0E,GAA1E,EAA8F;AAAzC,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,CAAA;AAAmB;;AAAE,MAAA,GAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,GAAA,GAAA,KAAA;AAAoB;;AACnG,MAAI,IAAI,GAAG,IAAI,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,CAAX;;AACA,MAAI,GAAJ,EAAS;AACR,IAAA,IAAI,CAAC,cAAL,CAAoB,IAApB;AACA;;AACD,MAAI,GAAG,GAAG,IAAI,GAAG,CAAP,GAAW,OAAX,IAAsB,CAAC,IAAI,CAAC,MAAL,MAAiB,CAAlB,IAAuB,CAA7C,CAAV;AACA,SAAO,GAAP;AACA;AAED;;;;;;;AAMA,OAAM,SAAU,UAAV,CAAqB,KAArB,EAAoC,IAApC,EAAiD;AACtD,MAAI,KAAK,GAAG,EAAZ,EAAgB;AACf,IAAA,KAAK,IAAI,EAAT;AACA,GAFD,MAGK,IAAI,KAAK,KAAK,CAAd,EAAiB;AACrB,IAAA,KAAK,GAAG,EAAR;AACA;;AACD,SAAO,KAAK,CAAC,QAAN,CAAe,IAAf,IAAuB,KAAK,IAAI,IAAI,GAAG,CAAX,CAA5B,GAA4C,KAAnD;AACA;AAED;;;;;;;;;;AASA,OAAM,SAAU,WAAV,CAAsB,IAAtB,EAAkC,IAAlC,EAAyD,OAAzD,EAAmF,GAAnF,EAAuG;AAArE,MAAA,IAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,IAAA,GAAA,KAAA;AAAqB;;AAAE,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,KAAA;AAAwB;;AAAE,MAAA,GAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,GAAA,GAAA,KAAA;AAAoB;;AAC5G,MAAI,GAAJ,EAAS;AACR,WAAO,IAAI,GAAG,4BAAH,GAAkC,KAA7C;AACA;;AACD,MAAI,IAAI,GAAG,IAAI,CAAC,cAAL,CAAoB,KAApB,CAAX;AACA,MAAI,GAAG,GAAG,IAAI,CAAC,cAAL,CAAoB,KAApB,EAA2B;AAAE,IAAA,YAAY,EAAE,IAAI,GAAG,MAAH,GAAY;AAAhC,GAA3B,EAAsE,MAAtE,CAA6E,IAAI,CAAC,MAAlF,CAAV,CAL4G,CAM5G;;AACA,MAAI,OAAO,KAAK,KAAhB,EAAuB;AACtB,IAAA,GAAG,GAAG,GAAG,CAAC,OAAJ,CAAY,sCAAZ,EAAoD,GAApD,CAAN;AACA;;AACD,SAAO,GAAP;AACA;AAGD;;;;;;;AAOA;;;;;;;;AAOA,OAAM,SAAU,MAAV,CAAiB,IAAjB,EAA+B,EAA/B,EAAyC;AAC9C,SAAO,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,KAAgB,EAA3B,IAAiC,IAAxC;AACA;AAED;;;;;;;;;AAQA,OAAM,SAAU,SAAV,CAAoB,KAApB,EAAmC,GAAnC,EAAgD,GAAhD,EAA2D;AAChE,MAAI,KAAK,GAAG,GAAZ,EAAiB;AAChB,WAAO,GAAP;AACA,GAFD,MAGK,IAAI,KAAK,GAAG,GAAZ,EAAiB;AACrB,WAAO,GAAP;AACA;;AACD,SAAO,KAAP;AACA;AAED;;;;;;;;;;;;;;;;;;AAiBA,OAAM,SAAU,iBAAV,CAA4B,KAA5B,EAA2C,GAA3C,EAAwD,GAAxD,EAAmE;AACxE,MAAI,GAAG,GAAG,GAAG,GAAG,GAAhB;;AACA,MAAI,KAAK,GAAG,GAAZ,EAAiB;AAChB,IAAA,KAAK,GAAG,GAAG,IAAI,KAAK,GAAG,GAAG,GAAG,IAAI,CAAC,KAAL,CAAW,KAAK,GAAG,GAAnB,CAAlB,CAAX;AACA,GAFD,MAGK,IAAI,KAAK,GAAG,GAAZ,EAAiB;AACrB,IAAA,KAAK,GAAG,GAAG,IAAI,KAAK,GAAG,GAAG,GAAG,IAAI,CAAC,KAAL,CAAW,KAAK,GAAG,GAAnB,CAAlB,CAAX;AACA;;AACD,SAAO,KAAP;AACA;AAGD;;;;;;;AAOA;;;;;;;;AAOA,OAAM,SAAU,gBAAV,CAA2B,KAA3B,EAA0C,MAA1C,EAAwD;AAC7D,MAAI,CAAC,GAAW,KAAK,CAAC,CAAtB;AACA,MAAI,CAAC,GAAW,KAAK,CAAC,CAAtB;AACA,MAAI,OAAO,GAAa,EAAxB;;AACA,MAAI,MAAJ,EAAY;AACX,WAAO,KAAK,CAAC,QAAN,CAAe,MAAM,CAAC,MAAtB,CAAP,EAAsC;AACrC,MAAA,OAAO,CAAC,IAAR,CAAa,MAAb;AACA,MAAA,MAAM,GAAG,MAAM,CAAC,MAAhB;AACA;;AAED,IAAA,OAAO,CAAC,OAAR;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,OAAO,CAAC,MAA5B,EAAoC,CAAC,EAArC,EAAyC;AACxC,UAAI,QAAM,GAAW,OAAO,CAAC,CAAD,CAA5B;AACA,UAAI,KAAK,GAAW,QAAM,CAAC,QAA3B;AAEA,UAAI,SAAS,GAAG,CAAC,GAAG,QAAM,CAAC,MAAX,GAAoB,QAAM,CAAC,EAA3C;AACA,UAAI,SAAS,GAAG,CAAC,GAAG,QAAM,CAAC,MAAX,GAAoB,QAAM,CAAC,EAA3C;;AAEA,UAAI,QAAM,CAAC,EAAX,EAAe;AACd,QAAA,CAAC,IAAI,QAAM,CAAC,EAAZ;AACA;;AACD,UAAI,QAAM,CAAC,EAAX,EAAe;AACd,QAAA,CAAC,IAAI,QAAM,CAAC,EAAZ;AACA;;AAED,UAAI,KAAK,GAAG,QAAM,CAAC,KAAnB,CAdwC,CAgBxC;;AACA,UAAG,QAAM,CAAC,KAAV,EAAgB;AACf,QAAA,KAAK,GAAG,QAAM,CAAC,KAAP,CAAa,KAArB;AACA;;AAED,MAAA,CAAC,GAAG,CAAC,KAAK,CAAC,GAAN,CAAU,CAAC,KAAX,IAAoB,SAApB,GAAgC,KAAK,CAAC,GAAN,CAAU,CAAC,KAAX,IAAoB,SAArD,IAAkE,KAAlE,GAA0E,QAAM,CAAC,gBAArF;AACA,MAAA,CAAC,GAAG,CAAC,KAAK,CAAC,GAAN,CAAU,CAAC,KAAX,IAAoB,SAApB,GAAgC,KAAK,CAAC,GAAN,CAAU,CAAC,KAAX,IAAoB,SAArD,IAAkE,KAAlE,GAA0E,QAAM,CAAC,eAArF;AACA;AACD;;AAED,SAAO;AAAE,IAAA,CAAC,EAAE,CAAL;AAAQ,IAAA,CAAC,EAAE;AAAX,GAAP;AACA;AAED;;;;;;;;;AAQA,OAAM,SAAU,gBAAV,CAA2B,KAA3B,EAA0C,MAA1C,EAAwD;AAC7D,MAAI,CAAC,GAAW,KAAK,CAAC,CAAtB;AACA,MAAI,CAAC,GAAW,KAAK,CAAC,CAAtB;;AAEA,MAAI,MAAJ,EAAY;AACX,WAAO,KAAK,CAAC,QAAN,CAAe,MAAM,CAAC,MAAtB,CAAP,EAAsC;AACrC,UAAI,KAAK,GAAW,MAAM,CAAC,QAA3B;AAEA,MAAA,CAAC,IAAI,MAAM,CAAC,gBAAP,GAA0B,MAAM,CAAC,EAAtC;AACA,MAAA,CAAC,IAAI,MAAM,CAAC,eAAP,GAAyB,MAAM,CAAC,EAArC;AAEA,UAAI,KAAK,GAAG,MAAM,CAAC,KAAnB,CANqC,CAQrC;;AACA,UAAG,MAAM,CAAC,KAAV,EAAgB;AACf,QAAA,KAAK,GAAG,MAAM,CAAC,KAAP,CAAa,KAArB;AACA;;AAED,UAAI,SAAS,GAAG,MAAM,CAAC,MAAP,GAAgB,CAAE,CAAC,GAAG,KAAK,CAAC,GAAN,CAAU,KAAV,CAAJ,GAAuB,CAAC,GAAG,KAAK,CAAC,GAAN,CAAU,KAAV,CAA7B,IAAkD,KAAlF;AACA,UAAI,SAAS,GAAG,MAAM,CAAC,MAAP,GAAgB,CAAE,CAAC,GAAG,KAAK,CAAC,GAAN,CAAU,KAAV,CAAJ,GAAuB,CAAC,GAAG,KAAK,CAAC,GAAN,CAAU,KAAV,CAA7B,IAAkD,KAAlF;;AAEA,UAAI,MAAM,CAAC,EAAX,EAAe;AACd,QAAA,SAAS,IAAI,MAAM,CAAC,EAApB;AACA;;AACD,UAAI,MAAM,CAAC,EAAX,EAAe;AACd,QAAA,SAAS,IAAI,MAAM,CAAC,EAApB;AACA;;AAED,MAAA,CAAC,GAAG,SAAJ;AACA,MAAA,CAAC,GAAG,SAAJ;AAEA,MAAA,MAAM,GAAG,MAAM,CAAC,MAAhB;AACA;AACD;;AACD,SAAO;AAAE,IAAA,CAAC,EAAE,CAAL;AAAQ,IAAA,CAAC,EAAE;AAAX,GAAP;AACA;AAGD;;;;;;;;;AAQA,OAAM,SAAU,mBAAV,CAA8B,KAA9B,EAA6C,MAA7C,EAA6D,QAA7D,EAA6E;AAClF,SAAO,gBAAgB,CAAC,gBAAgB,CAAC,KAAD,EAAQ,MAAR,CAAjB,EAAkC,QAAlC,CAAvB;AACA;AAGD;;;;;;;;;AAQA,OAAM,SAAU,eAAV,CAA0B,IAA1B,EAA4C,MAA5C,EAA0D;AAC/D,MAAI,EAAE,GAAW,gBAAgB,CAAC,IAAD,EAAO,MAAP,CAAjC;AACA,MAAI,EAAE,GAAW,gBAAgB,CAAC;AAAE,IAAA,CAAC,EAAE,IAAI,CAAC,CAAL,GAAS,IAAI,CAAC,KAAnB;AAA0B,IAAA,CAAC,EAAE,IAAI,CAAC,CAAL,GAAS,IAAI,CAAC;AAA3C,GAAD,EAAsD,MAAtD,CAAjC;AACA,SAAO;AAAE,IAAA,CAAC,EAAE,EAAE,CAAC,CAAR;AAAW,IAAA,CAAC,EAAE,EAAE,CAAC,CAAjB;AAAoB,IAAA,KAAK,EAAE,EAAE,CAAC,CAAH,GAAO,EAAE,CAAC,CAArC;AAAwC,IAAA,MAAM,EAAE,EAAE,CAAC,CAAH,GAAO,EAAE,CAAC;AAA1D,GAAP;AACA;AAED;;;;;;;;AAOA,OAAM,SAAU,eAAV,CAA0B,IAA1B,EAA4C,MAA5C,EAA0D;AAC/D,MAAI,EAAE,GAAW,gBAAgB,CAAC,IAAD,EAAO,MAAP,CAAjC;AACA,MAAI,EAAE,GAAW,gBAAgB,CAAC;AAAE,IAAA,CAAC,EAAE,IAAI,CAAC,CAAL,GAAS,IAAI,CAAC,KAAnB;AAA0B,IAAA,CAAC,EAAE,IAAI,CAAC,CAAL,GAAS,IAAI,CAAC;AAA3C,GAAD,EAAsD,MAAtD,CAAjC;AACA,SAAO;AAAE,IAAA,CAAC,EAAE,EAAE,CAAC,CAAR;AAAW,IAAA,CAAC,EAAE,EAAE,CAAC,CAAjB;AAAoB,IAAA,KAAK,EAAE,EAAE,CAAC,CAAH,GAAO,EAAE,CAAC,CAArC;AAAwC,IAAA,MAAM,EAAE,EAAE,CAAC,CAAH,GAAO,EAAE,CAAC;AAA1D,GAAP;AACA;AAED;;;;;;;;AAOA,OAAM,SAAU,kBAAV,CAA6B,KAA7B,EAA4C,YAA5C,EAAuE,QAAvE,EAAwF;AAC7F,MAAI;AACH,QAAI,IAAI,GAAG,YAAY,CAAC,qBAAb,EAAX;;AAEA,QAAI,CAAC,KAAK,CAAC,QAAN,CAAe,QAAf,CAAL,EAA+B;AAC9B,MAAA,QAAQ,GAAG,CAAX;AACA;;AAED,WAAO;AACN,WAAK,CAAC,KAAK,CAAC,CAAN,GAAU,IAAI,CAAC,IAAhB,IAAwB,QADvB;AAEN,WAAK,CAAC,KAAK,CAAC,CAAN,GAAU,IAAI,CAAC,GAAhB,IAAuB;AAFtB,KAAP;AAIA,GAXD,CAYA,OAAO,CAAP,EAAU;AACT,WAAO,KAAP;AACA;AACD;AAED;;;;;;;;AAOA,OAAM,SAAU,kBAAV,CAA6B,KAA7B,EAA4C,YAA5C,EAAqE;AAC1E,MAAI;AACH,QAAI,IAAI,GAAG,YAAY,CAAC,qBAAb,EAAX;AAEA,WAAO;AACN,WAAK,KAAK,CAAC,CAAN,GAAU,IAAI,CAAC,IADd;AAEN,WAAK,KAAK,CAAC,CAAN,GAAU,IAAI,CAAC;AAFd,KAAP;AAIA,GAPD,CAQA,OAAO,CAAP,EAAU;AACT,WAAO,KAAP;AACA;AACD;AAED;;;;;;;;;AAQA,OAAM,SAAU,qBAAV,CAAgC,KAAhC,EAA+C,MAA/C,EAA6D;AAClE,MAAI,MAAM,IAAI,MAAM,CAAC,aAArB,EAAoC;AACnC,QAAI,QAAQ,GAAW,kBAAkB,CAAC,KAAD,EAAQ,KAAK,CAAC,QAAN,CAAe,MAAM,CAAC,aAAtB,CAAR,EAA8C,MAAM,CAAC,YAAP,CAAoB,QAAlE,CAAzC;AACA,WAAO,gBAAgB,CAAC,QAAD,EAAW,MAAX,CAAvB;AACA,GAHD,MAIK;AACJ,WAAO,KAAP;AACA;AACD;AAED;;;;;;;;AAOA,OAAM,SAAU,qBAAV,CAAgC,KAAhC,EAA+C,MAA/C,EAA6D;AAClE,MAAI,MAAM,IAAI,MAAM,CAAC,aAArB,EAAoC;AACnC,QAAI,QAAQ,GAAW,gBAAgB,CAAC,KAAD,EAAQ,MAAR,CAAvC;AACA,WAAO,kBAAkB,CAAC,QAAD,EAAW,KAAK,CAAC,QAAN,CAAe,MAAM,CAAC,aAAtB,CAAX,CAAzB;AACA,GAHD,MAIK;AACJ,WAAO,KAAP;AACA;AACD;AAGD;;;;;;;;AAQA;;;;;;;;;AAQA,OAAM,SAAU,KAAV,CAAgB,OAAhB,EAAoC;AAEzC,MAAI,EAAE,GAAG,gBAAgB,CAAC,OAAD,CAAzB;AAEA,MAAI,QAAQ,GAAG,UAAU,CAAC,EAAE,CAAC,WAAJ,CAAV,GAA6B,UAAU,CAAC,EAAE,CAAC,YAAJ,CAAtD;AACA,MAAI,OAAO,GAAG,UAAU,CAAC,EAAE,CAAC,eAAJ,CAAV,GAAiC,UAAU,CAAC,EAAE,CAAC,gBAAJ,CAAzD;AAEA,SAAO,OAAO,CAAC,WAAR,GAAsB,QAAtB,GAAiC,OAAxC;AACA;AAED;;;;;;;;;AAQA,OAAM,SAAU,MAAV,CAAiB,OAAjB,EAAqC;AAE1C,MAAI,EAAE,GAAG,gBAAgB,CAAC,OAAD,CAAzB;AAEA,MAAI,QAAQ,GAAG,UAAU,CAAC,EAAE,CAAC,UAAJ,CAAV,GAA4B,UAAU,CAAC,EAAE,CAAC,aAAJ,CAArD;AACA,MAAI,OAAO,GAAG,UAAU,CAAC,EAAE,CAAC,cAAJ,CAAV,GAAgC,UAAU,CAAC,EAAE,CAAC,iBAAJ,CAAxD;AAEA,SAAO,OAAO,CAAC,YAAR,GAAuB,QAAvB,GAAkC,OAAzC;AACA;AAED;;;;;;;;AAOA,OAAM,SAAU,aAAV,CAAwB,MAAxB,EAAsC;AAC3C,MAAI,KAAK,GAAG,CAAC,KAAK,MAAN,EAAc,KAAd,CAAoB,kCAApB,CAAZ;;AACA,MAAI,CAAC,KAAL,EAAY;AAAE,WAAO,CAAP;AAAW;;AACzB,SAAO,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,CAAC,KAAK,CAAC,CAAD,CAAL,GAAW,KAAK,CAAC,CAAD,CAAL,CAAS,MAApB,GAA6B,CAA9B,KAAoC,KAAK,CAAC,CAAD,CAAL,GAAW,CAAC,KAAK,CAAC,CAAD,CAAjB,GAAuB,CAA3D,CAAZ,CAAP;AACA;AAmBD,IAAM,SAAS,GAAG,6GAAlB;AAEA;;;;;AAKA;;AACA,OAAM,SAAU,QAAV,CAAmB,GAAnB,EAA8B;AACnC,MAAM,KAAK,GAAG,SAAS,CAAC,IAAV,CAAe,GAAf,CAAd;AAEA,SAAO;AACN,IAAA,QAAQ,EAAG,KAAK,IAAI,KAAK,CAAC,CAAD,CAAf,IAAuB,EAD3B;AAEN,IAAA,SAAS,EAAG,KAAK,IAAI,KAAK,CAAC,CAAD,CAAf,IAAuB,EAF5B;AAGN,IAAA,SAAS,EAAG,KAAK,IAAI,KAAK,CAAC,CAAD,CAAf,IAAuB,EAH5B;AAIN,IAAA,MAAM,EAAG,KAAK,IAAI,KAAK,CAAC,CAAD,CAAf,IAAuB,EAJzB;AAKN,IAAA,IAAI,EAAG,KAAK,IAAI,KAAK,CAAC,CAAD,CAAf,IAAuB,EALvB;AAMN,IAAA,IAAI,EAAG,KAAK,IAAI,KAAK,CAAC,CAAD,CAAf,IAAuB,EANvB;AAON,IAAA,KAAK,EAAG,KAAK,IAAI,KAAK,CAAC,CAAD,CAAf,IAAuB,EAPxB;AAQN,IAAA,IAAI,EAAG,KAAK,IAAI,KAAK,CAAC,CAAD,CAAf,IAAuB;AARvB,GAAP;AAUA;AAED;;;;;;AAKA,OAAM,SAAU,YAAV,CAAuB,GAAvB,EAA+B;AACpC,SAAO,GAAG,CAAC,QAAJ,GAAe,GAAG,CAAC,SAAnB,GAA+B,GAAG,CAAC,SAAnC,GAA+C,GAAG,CAAC,MAAnD,GAA4D,GAAG,CAAC,IAAhE,GAAuE,GAAG,CAAC,IAA3E,GAAkF,GAAG,CAAC,KAAtF,GAA8F,GAAG,CAAC,IAAzG;AACA;AAED;;;;;AAKA;;AACA,SAAS,aAAT,CAAuB,GAAvB,EAA+B;AAC9B,SAAO,GAAG,CAAC,QAAJ,KAAiB,EAAjB,IACN,GAAG,CAAC,SAAJ,KAAkB,EADZ,IAEN,GAAG,CAAC,SAAJ,KAAkB,EAFZ,IAGN,GAAG,CAAC,MAAJ,KAAe,EAHT,IAIN,GAAG,CAAC,IAAJ,KAAa,EAJd;AAKA;AAED;;;;;AAKA;;;AACA,OAAM,SAAU,OAAV,CAAkB,IAAlB,EAAgC,KAAhC,EAA6C;AAClD,MAAM,UAAU,GAAG,QAAQ,CAAC,IAAD,CAA3B;AACA,MAAM,WAAW,GAAG,QAAQ,CAAC,KAAD,CAA5B;;AAEA,MAAI,aAAa,CAAC,UAAD,CAAjB,EAA+B;AAC9B,UAAM,IAAI,KAAJ,CAAU,0BAAV,CAAN;AACA;;AAED,MAAI,aAAa,CAAC,WAAD,CAAjB,EAAgC;AAC/B;AACA,QAAI,WAAW,CAAC,IAAZ,KAAqB,EAAzB,EAA6B;AAC5B,UAAI,WAAW,CAAC,IAAZ,CAAiB,CAAjB,MAAwB,GAA5B,EAAiC;AAChC,QAAA,UAAU,CAAC,IAAX,GAAkB,WAAW,CAAC,IAA9B,CADgC,CAGhC;AACA,OAJD,MAIO;AACN,YAAM,QAAQ,GAAG,UAAU,CAAC,IAAX,CAAgB,KAAhB,CAAsB,IAAtB,CAAjB;AACA,YAAM,SAAS,GAAG,WAAW,CAAC,IAAZ,CAAiB,KAAjB,CAAuB,IAAvB,CAAlB,CAFM,CAIN;;AACA,YAAI,QAAQ,CAAC,MAAT,KAAoB,CAAxB,EAA2B;AAC1B,cAAI,SAAS,CAAC,MAAV,KAAqB,CAAzB,EAA4B;AAC3B,YAAA,QAAQ,CAAC,IAAT,CAAc,EAAd;AACA;AAED,SALD,MAKO,IAAI,QAAQ,CAAC,MAAT,GAAkB,CAAtB,EAAyB;AAC/B,UAAA,QAAQ,CAAC,GAAT;AACA;;AAED,QAAA,MAAM,CAAC,OAAP,CAAe,QAAf,EAAyB,SAAzB;AAEA,QAAA,UAAU,CAAC,IAAX,GAAkB,QAAQ,CAAC,IAAT,CAAc,GAAd,CAAlB;;AAEA,YAAI,UAAU,CAAC,IAAX,KAAoB,EAApB,IAA0B,UAAU,CAAC,IAAX,CAAgB,CAAhB,MAAuB,GAArD,EAA0D;AACzD,gBAAM,IAAI,KAAJ,CAAU,4BAAV,CAAN;AACA;AACD;AACD,KA7B8B,CA+B/B;;;AACA,IAAA,UAAU,CAAC,KAAX,GAAmB,WAAW,CAAC,KAA/B;AACA,IAAA,UAAU,CAAC,IAAX,GAAkB,WAAW,CAAC,IAA9B;AAEA,WAAO,YAAY,CAAC,UAAD,CAAnB;AAEA,GArCD,MAqCO;AACN,WAAO,YAAY,CAAC,WAAD,CAAnB;AACA;AACD;AAED;;;;;;AAKA,OAAM,SAAU,IAAV,GAAc;AACnB,SAAO,CAAC,CAAO,MAAO,CAAC,oBAAhB,IAAwC,CAAC,CAAO,QAAS,CAAC,YAAjE;AACA","sourcesContent":["/**\r\n * A collection of universal utility functions.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport { IPoint } from \"../defs/IPoint\";\r\nimport { IRectangle } from \"../defs/IRectangle\";\r\nimport { Percent } from \"./Percent\";\r\nimport { isSafari } from \"./Browser\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $string from \"./String\";\r\nimport * as $strings from \"./Strings\";\r\nimport * as $object from \"./Object\";\r\nimport * as $array from \"./Array\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MISC FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n\r\n/**\r\n * Marks a value as being used (e.g. because the value has side effects).\r\n */\r\nexport function used<A>(value: A) { }\r\n\r\n/**\r\n * Copies all properties of one object to the other, omitting undefined.\r\n *\r\n * @param fromObject  Source object\r\n * @param toObject    Target object\r\n * @return Updated target object\r\n * @todo Maybe consolidate with utils.copy?\r\n */\r\nexport function copyProperties(source: Object, target: Object): Object {\r\n\t$object.each(source, (key, value) => {\r\n\t\t// only if value is set\r\n\t\tif ($type.hasValue(value)) {\r\n\t\t\t(<any>target)[key] = value;\r\n\t\t}\r\n\t});\r\n\r\n\treturn target;\r\n}\r\n\r\n/**\r\n * Removes target from url\r\n */\r\nexport function stripHash(url: string): string {\r\n\treturn /^[^#]*/.exec(url)[0];\r\n}\r\n\r\nexport function getBaseURI() {\r\n\tlet url = \"#\";\r\n\r\n\t// Needed until https://bugs.webkit.org/show_bug.cgi?id=189499 is fixed\r\n\tif (isSafari()) {\r\n\t\tlet baseURI = document.baseURI;\r\n\t\tif (baseURI) {\r\n\t\t\tbaseURI = stripHash(baseURI);\r\n\t\t\tlet loc = stripHash(location.href);\r\n\t\t\tif (baseURI !== loc) {\r\n\t\t\t\turl = loc + url;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn url;\r\n}\r\n\r\n/**\r\n * Copies all properties of one object to the other, omitting undefined, but only if property in target object doesn't have a value set.\r\n *\r\n * @param fromObject  Source object\r\n * @param toObject    Target object\r\n * @return Updated target object\r\n * @todo Maybe consolidate with utils.copy?\r\n */\r\nexport function softCopyProperties(source: Object, target: Object): Object {\r\n\t$object.each(source, (key, value) => {\r\n\t\t// only if value is set\r\n\t\tif ($type.hasValue(value) && !($type.hasValue((<any>target)[key]))) {\r\n\t\t\t(<any>target)[key] = value;\r\n\t\t}\r\n\t});\r\n\treturn target;\r\n}\r\n\r\n/**\r\n * Copies all properties of one object to the other.\r\n *\r\n * @param source     Source object\r\n * @param recipient  Target object\r\n * @return Updated target object\r\n */\r\nexport function copy(source: Object, target: Object): Object {\r\n\t$object.each(source, (key, value) => {\r\n\t\t(<any>target)[key] = value;\r\n\t});\r\n\treturn target;\r\n}\r\n\r\n/**\r\n * Checks if value is not empty (undefined or zero-length string).\r\n *\r\n * @param value  Value to check\r\n * @return `true` if value is not \"empty\"\r\n */\r\nexport function isNotEmpty(value: $type.Optional<string>): value is string {\r\n\treturn $type.hasValue(value) && (value.toString() !== \"\");\r\n}\r\n\r\n/**\r\n * [relativeToValue description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param percent  [description]\r\n * @param full     [description]\r\n * @return [description]\r\n */\r\nexport function relativeToValue(percent: $type.Optional<number | Percent>, full: number): number {\r\n\tif ($type.isNumber(percent)) {\r\n\t\treturn percent;\r\n\t} else if (percent != null && $type.isNumber(percent.value) && $type.isNumber(full)) {\r\n\t\treturn full * percent.value;\r\n\r\n\t} else {\r\n\t\treturn 0;\r\n\t}\r\n}\r\n\r\n/**\r\n * [relativeRadiusToValue description]\r\n *\r\n * Differs from relativeToValue so that if a value is negative, it subtracts\r\n * it from full value.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param percent             [description]\r\n * @param full                [description]\r\n * @param subtractIfNegative  [description]\r\n * @return [description]\r\n */\r\nexport function relativeRadiusToValue(percent: $type.Optional<number | Percent>, full: number, subtractIfNegative?: boolean): $type.Optional<number> {\r\n\tlet value: $type.Optional<number>;\r\n\r\n\tif ($type.isNumber(percent)) {\r\n\t\tvalue = percent;\r\n\r\n\t\tif (value < 0) {\r\n\t\t\tif (subtractIfNegative) {\r\n\t\t\t\tvalue = full + value;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = full - value;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} else if (percent != null && $type.isNumber(percent.value)) {\r\n\t\tvalue = full * percent.value;\r\n\t}\r\n\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * [valueToRelative description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param value  [description]\r\n * @param full   [description]\r\n * @return [description]\r\n */\r\nexport function valueToRelative(value: number | Percent, full: number): number {\r\n\tif (value instanceof Percent) {\r\n\t\treturn value.value;\r\n\t}\r\n\telse {\r\n\t\treturn value / full;\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns pixel ratio of the current screen (used on retina displays).\r\n *\r\n * @return Pixel ratio\r\n */\r\nexport function getPixelRatio(): number {\r\n\tlet ratio = window.devicePixelRatio || 1;\r\n\treturn ratio;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * STRING FORMATTING FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Converts camelCased text to dashed version:\r\n * (\"thisIsString\" > \"this-is-string\")\r\n *\r\n * @param str  Input\r\n * @return Output\r\n */\r\nexport function camelToDashed(str: string): string {\r\n\treturn str.replace(/\\W+/g, '-').replace(/([a-z\\d])([A-Z])/g, '$1-$2').toLowerCase();\r\n}\r\n\r\n/**\r\n * Converts tring to uppercase.\r\n *\r\n * @param str  String to convert\r\n * @return uppercased string\r\n * @todo Maybe make it better\r\n */\r\nexport function capitalize(str: string): string {\r\n\tlet arr: string[] = str.split(\"\");\r\n\tarr[0] = arr[0].toUpperCase();\r\n\treturn arr.join(\"\");\r\n}\r\n\r\n/**\r\n * Converts any value into its string representation.\r\n *\r\n * @param value  Value\r\n * @return String represantation of the value\r\n */\r\nexport function stringify(value: any): string {\r\n\treturn JSON.stringify(value);\r\n}\r\n\r\n/**\r\n * Escapes string so it can safely be used in a Regex.\r\n *\r\n * @param value  Unsescaped string\r\n * @return Escaped string\r\n */\r\nexport function escapeForRgex(value: string): string {\r\n\treturn value.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\r\n}\r\n\r\n/**\r\n * Splits the text into multiple lines, respecting maximum character count.\r\n * Prioretizes splitting on spaces and punctuation. Falls back on splitting\r\n * mid-word if there's no other option.\r\n *\r\n * @param text      Text\r\n * @param maxChars  Maximum number of characters per line\r\n * @return An array of split text\r\n */\r\nexport function splitTextByCharCount(text: string, maxChars: number, fullWords?: boolean, rtl?: boolean): string[] {\r\n\r\n\t// Maybe the text fits?\r\n\tif (text.length <= maxChars) {\r\n\t\treturn [text];\r\n\t}\r\n\r\n\t// Init result\r\n\tlet res: string[] = [];\r\n\r\n\t// Split by words or by charts\r\n\tif (fullWords) {\r\n\r\n\t\t// Split by words first\r\n\r\n\t\t// Split by spacing\r\n\t\tlet currentIndex: number = -1;\r\n\t\tlet tmpText = text.replace(/([,;:!?\\\\\\/\\.]+[\\s]+|[\\s])/g, $strings.PLACEHOLDER + \"$1\" + $strings.PLACEHOLDER);\r\n\t\tlet words = tmpText.split($strings.PLACEHOLDER);\r\n\r\n\t\t// Process each word\r\n\t\tfor (let i = 0; i < words.length; i++) {\r\n\r\n\t\t\t// Get word and symbol count\r\n\t\t\tlet word: string = words[i];\r\n\t\t\tlet wordLength: number = word.length;\r\n\r\n\t\t\t// Ignore empty words\r\n\t\t\tif (wordLength === 0) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t// Check word length\r\n\t\t\t//if ((wordLength > maxChars) && fullWords !== true) {\r\n\t\t\tif (wordLength > maxChars) {\r\n\t\t\t\t// A single word is longer than allowed symbol count\r\n\t\t\t\t// Break it up\r\n\t\t\t\tif (rtl) {\r\n\t\t\t\t\tword = reverseString(word);\r\n\t\t\t\t}\r\n\t\t\t\tlet parts: RegExpMatchArray | null = word.match(new RegExp(\".{1,\" + maxChars + \"}\", \"g\"));\r\n\r\n\t\t\t\t// TODO is this correct ?\r\n\t\t\t\tif (parts) {\r\n\t\t\t\t\tif (rtl) {\r\n\t\t\t\t\t\tfor (let x = 0; x < parts.length; x++) {\r\n\t\t\t\t\t\t\tparts[x] = reverseString(parts[x]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//parts.reverse();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tres = res.concat(parts);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\r\n\t\t\t\t// Init current line\r\n\t\t\t\tif (currentIndex === -1) {\r\n\t\t\t\t\tres.push(\"\");\r\n\t\t\t\t\tcurrentIndex = 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Check if we need to break into another line\r\n\t\t\t\tif (((res[currentIndex].length + wordLength + 1) > maxChars) && res[currentIndex] !== \"\") {\r\n\t\t\t\t\tres.push(\"\");\r\n\t\t\t\t\tcurrentIndex++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Add word\r\n\t\t\t\tres[currentIndex] += word;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Update index\r\n\t\t\tcurrentIndex = res.length - 1;\r\n\t\t}\r\n\t}\r\n\telse {\r\n\r\n\t\t// Splitting by anywhere (living la vida facil)\r\n\t\tlet parts: RegExpMatchArray | null = text.match(new RegExp(\".{1,\" + maxChars + \"}\", \"g\"));\r\n\r\n\t\tif (parts) {\r\n\t\t\tif (rtl) {\r\n\t\t\t\tfor (let x = 0; x < parts.length; x++) {\r\n\t\t\t\t\tparts[x] = reverseString(parts[x]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tres = parts;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Do we have only one word that does not fit?\r\n\t// Since fullWords is set and we can't split the word, we end up with empty\r\n\t// set.\r\n\tif (res.length == 1 && fullWords && (res[0].length > maxChars)) {\r\n\t\tres = [];\r\n\t}\r\n\r\n\treturn res;\r\n}\r\n\r\n/**\r\n * Truncates the text to certain character count.\r\n *\r\n * Will add ellipsis if the string is truncated. Optionally, can truncate on\r\n * full words only.\r\n *\r\n * For RTL support, pass in the fifth parameter as `true`.\r\n *\r\n * @param text       Input text\r\n * @param maxChars   Maximum character count of output\r\n * @param ellipsis   Ellipsis string, i.e. \"...\"\r\n * @param fullWords  If `true`, will not break mid-word, unless there's a single word and it does not with into `maxChars`\r\n * @param rtl        Is this an RTL text?\r\n * @return Truncated text\r\n */\r\nexport function truncateWithEllipsis(text: string, maxChars: number, ellipsis: string, fullWords?: boolean, rtl?: boolean): string {\r\n\r\n\tif (text.length <= maxChars) {\r\n\t\treturn text;\r\n\t}\r\n\r\n\t// Calc max chars\r\n\tmaxChars -= ellipsis.length;\r\n\tif (maxChars < 1) {\r\n\t\tmaxChars = 1;\r\n\t\t//ellipsis = \"\";\r\n\t}\r\n\r\n\t// Get lines\r\n\tlet lines = splitTextByCharCount(text, maxChars, fullWords, rtl);\r\n\r\n\t// Use first line\r\n\treturn (lines[0] || \"\") + ellipsis;\r\n}\r\n\r\n/**\r\n * Removes whitespace from beginning and end of the string.\r\n *\r\n * @param str  Input\r\n * @return Output\r\n */\r\nexport function trim(str: string): string {\r\n\treturn str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, \"\");\r\n};\r\n\r\n/**\r\n * Removes whitespace from end of the string.\r\n *\r\n * @param str  Input\r\n * @return Output\r\n */\r\nexport function rtrim(str: string): string {\r\n\treturn str.replace(/[\\s\\uFEFF\\xA0]+$/g, \"\");\r\n};\r\n\r\n/**\r\n * Removes whitespace from beginning of the string.\r\n *\r\n * @param str  Input\r\n * @return Output\r\n */\r\nexport function ltrim(str: string): string {\r\n\treturn str.replace(/^[\\s\\uFEFF\\xA0]+/g, \"\");\r\n};\r\n\r\n/**\r\n * Reverses string.\r\n *\r\n * @param str  Input\r\n * @return Output\r\n */\r\nexport function reverseString(str: string): string {\r\n\treturn str.split(\"\").reverse().join(\"\");\r\n}\r\n\r\n/**\r\n * Removes quotes from the string.\r\n *\r\n * @param str  Input\r\n * @return Output\r\n */\r\nexport function unquote(str: string): string {\r\n\tlet res = str.trim();\r\n\tres = str.replace(/^'(.*)'$/, \"$1\");\r\n\tif (res == str) {\r\n\t\tres = str.replace(/^\"(.*)\"$/, \"$1\");\r\n\t}\r\n\treturn res;\r\n}\r\n\r\n/**\r\n * Pads a string with additional characters to certain length.\r\n *\r\n * @param value  A numeric value\r\n * @param len    Result string length in characters\r\n * @param char   A character to use for padding\r\n * @return Padded value as string\r\n */\r\nexport function padString(value: any, len: number = 0, char: string = \"0\"): string {\r\n\tif (typeof value !== \"string\") {\r\n\t\tvalue = value.toString();\r\n\t}\r\n\r\n\treturn len > value.length ? Array(len - value.length + 1).join(char) + value : value;\r\n}\r\n\r\n/**\r\n * Tries to determine format type.\r\n *\r\n * @ignore Exclude from docs\r\n * @param format  Format string\r\n * @return Format type (\"string\" | \"number\" | \"date\" | \"duration\")\r\n */\r\nexport function getFormat(format: string): string {\r\n\r\n\t// Undefined?\r\n\tif (typeof format === \"undefined\") {\r\n\t\treturn $strings.STRING;\r\n\t}\r\n\r\n\t// Cleanup and lowercase format\r\n\tformat = format.toLowerCase().replace(/^\\[[^\\]]*\\]/, \"\");\r\n\r\n\t// Remove style tags\r\n\tformat = format.replace(/\\[[^\\]]+\\]/, \"\");\r\n\r\n\t// Trim\r\n\tformat = format.trim();\r\n\r\n\t// Check for any explicit format hints (i.e. /Date)\r\n\tlet hints: RegExpMatchArray | null = format.match(/\\/(date|number|duration)$/);\r\n\r\n\tif (hints) {\r\n\t\treturn hints[1];\r\n\t}\r\n\r\n\t// Check for explicit hints\r\n\tif (format === $strings.NUMBER) {\r\n\t\treturn $strings.NUMBER;\r\n\t}\r\n\r\n\tif (format === $strings.DATE) {\r\n\t\treturn $strings.DATE;\r\n\t}\r\n\r\n\tif (format === $strings.DURATION) {\r\n\t\treturn $strings.DURATION;\r\n\t}\r\n\r\n\t// Detect number formatting symbols\r\n\tif (format.match(/[#0]/)) {\r\n\t\treturn $strings.NUMBER;\r\n\t}\r\n\r\n\t// Detect date formatting symbols\r\n\tif (format.match(/[ymwdhnsqaxkzgtei]/)) {\r\n\t\treturn $strings.DATE;\r\n\t}\r\n\r\n\t// Nothing? Let's display as string\r\n\treturn $strings.STRING;\r\n}\r\n\r\n/**\r\n * Cleans up format:\r\n * * Strips out formatter hints\r\n *\r\n * @ignore Exclude from docs\r\n * @param format  Format\r\n * @return Cleaned format\r\n */\r\nexport function cleanFormat(format: string): string {\r\n\treturn format.replace(/\\/(date|number|duration)$/i, \"\");\r\n}\r\n\r\n/**\r\n * Strips all tags from the string.\r\n *\r\n * @param text  Source string\r\n * @return String without tags\r\n */\r\nexport function stripTags(text: string): string {\r\n\treturn text ? text.replace(/<[^>]*>/g, \"\") : text;\r\n}\r\n\r\n/**\r\n * Removes new lines and tags from a string.\r\n *\r\n * @param text  String to conver\r\n * @return Converted string\r\n */\r\nexport function plainText(text: string): string {\r\n\treturn text ? stripTags(text.replace(/[\\n\\r]+/g, \". \")) : text;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * TYPE CONVERSION FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Converts numeric value into string. Deals with large or small numbers that\r\n * would otherwise use exponents.\r\n *\r\n * @param value  Numeric value\r\n * @return Numeric value as string\r\n */\r\nexport function numberToString(value: number): string {\r\n\t// TODO handle Infinity and -Infinity\r\n\tif ($type.isNaN(value)) {\r\n\t\treturn \"NaN\";\r\n\t}\r\n\r\n\tif (value === Infinity) {\r\n\t\treturn \"Infinity\";\r\n\t}\r\n\r\n\tif (value === -Infinity) {\r\n\t\treturn \"-Infinity\";\r\n\t}\r\n\r\n\t// Negative 0\r\n\tif ((value === 0) && (1 / value === -Infinity)) {\r\n\t\treturn \"-0\";\r\n\t}\r\n\r\n\t// Preserve negative and deal with absoute values\r\n\tlet negative = value < 0;\r\n\r\n\tvalue = Math.abs(value);\r\n\r\n\t// TODO test this\r\n\tlet parsed = $type.getValue(/^([0-9]+)(?:\\.([0-9]+))?(?:e[\\+\\-]([0-9]+))?$/.exec(\"\" + value));\r\n\tlet digits = parsed[1];\r\n\tlet decimals = parsed[2] || \"\";\r\n\r\n\tlet res: string;\r\n\r\n\t// Leave the nummber as it is if it does not use exponents\r\n\tif (parsed[3] == null) {\r\n\t\tres = (decimals === \"\" ? digits : digits + \".\" + decimals);\r\n\r\n\t} else {\r\n\t\tlet exponent = +parsed[3];\r\n\r\n\t\t// Deal with decimals\r\n\t\tif (value < 1) {\r\n\t\t\tlet zeros = exponent - 1;\r\n\r\n\t\t\tres = \"0.\" + $string.repeat(\"0\", zeros) + digits + decimals;\r\n\r\n\t\t\t// Deal with integers\r\n\t\t} else {\r\n\t\t\tlet zeros = exponent - decimals.length;\r\n\r\n\t\t\tif (zeros === 0) {\r\n\t\t\t\tres = digits + decimals;\r\n\r\n\t\t\t} else if (zeros < 0) {\r\n\t\t\t\tres = digits + decimals.slice(0, zeros) + \".\" + decimals.slice(zeros);\r\n\r\n\t\t\t} else {\r\n\t\t\t\tres = digits + decimals + $string.repeat(\"0\", zeros);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn negative ? \"-\" + res : res;\r\n}\r\n\r\n/**\r\n * Converts anything to Date object.\r\n *\r\n * @param value  A value of any type\r\n * @return Date object representing a value\r\n */\r\nexport function anyToDate(value: Date | number | string): Date {\r\n\tif ($type.isDate(value)) {\r\n\t\t// TODO maybe don't create a new Date ?\r\n\t\treturn new Date(value);\r\n\t}\r\n\r\n\telse if ($type.isNumber(value)) {\r\n\t\treturn new Date(value);\r\n\t}\r\n\r\n\telse {\r\n\t\t// Try converting to number (assuming timestamp)\r\n\t\tlet num = Number(value);\r\n\r\n\t\tif (!$type.isNumber(num)) {\r\n\t\t\treturn new Date(value);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn new Date(num);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Tries converting any value to a number.\r\n *\r\n * @param value  Source value\r\n * @return Number\r\n */\r\nexport function anyToNumber(value: Date | number | string): $type.Optional<number> {\r\n\tif ($type.isDate(value)) {\r\n\t\treturn value.getTime();\r\n\t}\r\n\r\n\telse if ($type.isNumber(value)) {\r\n\t\treturn value;\r\n\t}\r\n\r\n\telse if ($type.isString(value)) {\r\n\t\t// Try converting to number (assuming timestamp)\r\n\t\tlet num = Number(value);\r\n\r\n\t\tif (!$type.isNumber(num)) {\r\n\t\t\t// Failing\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn num;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATE-RELATED FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Returns a year day.\r\n *\r\n * @param date  Date\r\n * @param utc   Assume UTC dates?\r\n * @return Year day\r\n * @todo Account for UTC\r\n */\r\nexport function getYearDay(date: Date, utc: boolean = false): number {\r\n\tconst start = new Date(date.getFullYear(), 0, 0);\r\n\tconst diff = (date.getTime() - start.getTime()) + ((start.getTimezoneOffset() - date.getTimezoneOffset()) * 60 * 1000);\r\n\tconst oneDay = 1000 * 60 * 60 * 24;\r\n\treturn Math.floor(diff / oneDay);\r\n}\r\n\r\n/**\r\n * Returns week number for a given date.\r\n *\r\n * @param date  Date\r\n * @param utc   Assume UTC dates?\r\n * @return Week number\r\n * @todo Account for UTC\r\n */\r\nexport function getWeek(date: Date, utc: boolean = false): number {\r\n\tconst day = getYearDay(date, utc) - 1;\r\n\tlet week = Math.floor((day - (date.getDay() || 7) + 10) / 7);\r\n\tif (week === 0) {\r\n\t\tweek = 53;\r\n\t}\r\n\telse if (week === 53) {\r\n\t\tweek = 1;\r\n\t}\r\n\treturn week;\r\n}\r\n\r\n/**\r\n * Returns a week number in the month.\r\n *\r\n * @param date  Source Date\r\n * @param utc   Assume UTC dates?\r\n * @return Week number in month\r\n */\r\nexport function getMonthWeek(date: Date, utc: boolean = false): number {\r\n\tconst firstWeek = getWeek(new Date(date.getFullYear(), date.getMonth(), 1), utc);\r\n\tlet currentWeek = getWeek(date, utc);\r\n\tif (currentWeek == 1) {\r\n\t\tcurrentWeek = 53;\r\n\t}\r\n\treturn currentWeek - firstWeek + 1;\r\n}\r\n\r\n/**\r\n * Returns a year day out of the given week number.\r\n *\r\n * @param week     Week\r\n * @param year     Year\r\n * @param weekday  Weekday\r\n * @param utc      Assume UTC dates\r\n * @return Day in a year\r\n */\r\nexport function getDayFromWeek(week: number, year: number, weekday: number = 1, utc: boolean = false): number {\r\n\tlet date = new Date(year, 0, 4, 0, 0, 0, 0);\r\n\tif (utc) {\r\n\t\tdate.setUTCFullYear(year);\r\n\t}\r\n\tlet day = week * 7 + weekday - ((date.getDay() || 7) + 3);\r\n\treturn day;\r\n}\r\n\r\n/**\r\n * Returns 12-hour representation out of the 24-hour hours.\r\n *\r\n * @param hours  24-hour number\r\n * @return 12-hour number\r\n */\r\nexport function get12Hours(hours: number, base?: number): number {\r\n\tif (hours > 12) {\r\n\t\thours -= 12;\r\n\t}\r\n\telse if (hours === 0) {\r\n\t\thours = 12;\r\n\t}\r\n\treturn $type.hasValue(base) ? hours + (base - 1) : hours;\r\n}\r\n\r\n/**\r\n * Returns a string name of the tome zone.\r\n *\r\n * @param date     Date object\r\n * @param long     Should return long (\"Pacific Standard Time\") or short abbreviation (\"PST\")\r\n * @param savings  Include information if it's in daylight savings mode\r\n * @param utc      Assume UTC dates\r\n * @return Time zone name\r\n */\r\nexport function getTimeZone(date: Date, long: boolean = false, savings: boolean = false, utc: boolean = false): string {\r\n\tif (utc) {\r\n\t\treturn long ? \"Coordinated Universal Time\" : \"UTC\";\r\n\t}\r\n\tlet wotz = date.toLocaleString(\"UTC\");\r\n\tlet wtz = date.toLocaleString(\"UTC\", { timeZoneName: long ? \"long\" : \"short\" }).substr(wotz.length);\r\n\t//wtz = wtz.replace(/[+-]+[0-9]+$/, \"\");\r\n\tif (savings === false) {\r\n\t\twtz = wtz.replace(/ (standard|daylight|summer|winter) /i, \" \");\r\n\t}\r\n\treturn wtz;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * NUMBER-RELATED FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Returns a random number between `from` and `to`.\r\n *\r\n * @param from  From number\r\n * @param to    To number\r\n * @return Random number\r\n */\r\nexport function random(from: number, to: number): number {\r\n\treturn Math.floor(Math.random() * to) + from;\r\n}\r\n\r\n/**\r\n * Fits the number into specific `min` and `max` bounds.\r\n *\r\n * @param value  Input value\r\n * @param min    Minimum value\r\n * @param max    Maximum value\r\n * @return Possibly adjusted value\r\n */\r\nexport function fitNumber(value: number, min: number, max: number): number {\r\n\tif (value > max) {\r\n\t\treturn max;\r\n\t}\r\n\telse if (value < min) {\r\n\t\treturn min;\r\n\t}\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * Fits the number into specific `min` and `max` bounds.\r\n *\r\n * If the value is does not fit withing specified range, it \"wraps\" around the\r\n * values.\r\n *\r\n * For example, if we have input value 10 with min set at 1 and max set at 8,\r\n * the value will not fit. The remainder that does not fit (2) will be added\r\n * to `min`, resulting in 3.\r\n *\r\n * The output of regular `fitNumber()` would return 8 instead.\r\n *\r\n * @param value  Input value\r\n * @param min    Minimum value\r\n * @param max    Maximum value\r\n * @return Possibly adjusted value\r\n */\r\nexport function fitNumberRelative(value: number, min: number, max: number): number {\r\n\tlet gap = max - min;\r\n\tif (value > max) {\r\n\t\tvalue = min + (value - gap * Math.floor(value / gap));\r\n\t}\r\n\telse if (value < min) {\r\n\t\tvalue = min + (value - gap * Math.floor(value / gap));\r\n\t}\r\n\treturn value;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * SPRITE-RELATED FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Converts SVG element coordinates to coordinates within specific [[Sprite]].\r\n *\r\n * @param point   SVG coordinates\r\n * @param sprite  Sprite\r\n * @return Sprite coordinates\r\n */\r\nexport function svgPointToSprite(point: IPoint, sprite: Sprite): IPoint {\r\n\tlet x: number = point.x;\r\n\tlet y: number = point.y;\r\n\tlet sprites: Sprite[] = [];\r\n\tif (sprite) {\r\n\t\twhile ($type.hasValue(sprite.parent)) {\r\n\t\t\tsprites.push(sprite);\r\n\t\t\tsprite = sprite.parent as any;\r\n\t\t}\r\n\r\n\t\tsprites.reverse();\r\n\r\n\t\tfor (let i = 0; i < sprites.length; i++) {\r\n\t\t\tlet sprite: Sprite = sprites[i];\r\n\t\t\tlet angle: number = sprite.rotation;\r\n\r\n\t\t\tlet relativeX = x - sprite.pixelX - sprite.ex;\r\n\t\t\tlet relativeY = y - sprite.pixelY - sprite.ey;\r\n\r\n\t\t\tif (sprite.dx) {\r\n\t\t\t\tx -= sprite.dx;\r\n\t\t\t}\r\n\t\t\tif (sprite.dy) {\r\n\t\t\t\ty -= sprite.dy;\r\n\t\t\t}\r\n\r\n\t\t\tlet scale = sprite.scale;\r\n\r\n\t\t\t// this handles nonscaling\r\n\t\t\tif(sprite.group){\r\n\t\t\t\tscale = sprite.group.scale; \r\n\t\t\t}\r\n\r\n\t\t\tx = ($math.cos(-angle) * relativeX - $math.sin(-angle) * relativeY) / scale - sprite.pixelPaddingLeft;\r\n\t\t\ty = ($math.cos(-angle) * relativeY + $math.sin(-angle) * relativeX) / scale - sprite.pixelPaddingTop;\r\n\t\t}\r\n\t}\r\n\r\n\treturn { x: x, y: y };\r\n}\r\n\r\n/**\r\n * Converts coordinates within [[Sprite]] to coordinates relative to the whole\r\n * SVG element.\r\n *\r\n * @param point   Sprite coordinates\r\n * @param sprite  Sprite\r\n * @return SVG coordinates\r\n */\r\nexport function spritePointToSvg(point: IPoint, sprite: Sprite): IPoint {\r\n\tlet x: number = point.x;\r\n\tlet y: number = point.y;\r\n\r\n\tif (sprite) {\r\n\t\twhile ($type.hasValue(sprite.parent)) {\r\n\t\t\tlet angle: number = sprite.rotation;\r\n\r\n\t\t\tx += sprite.pixelPaddingLeft + sprite.ex;\r\n\t\t\ty += sprite.pixelPaddingTop + sprite.ey;\r\n\r\n\t\t\tlet scale = sprite.scale;\r\n\r\n\t\t\t// this handles nonscaling\r\n\t\t\tif(sprite.group){\r\n\t\t\t\tscale = sprite.group.scale; \r\n\t\t\t}\r\n\r\n\t\t\tlet relativeX = sprite.pixelX + ((x * $math.cos(angle) - y * $math.sin(angle))) * scale;\r\n\t\t\tlet relativeY = sprite.pixelY + ((x * $math.sin(angle) + y * $math.cos(angle))) * scale;\r\n\r\n\t\t\tif (sprite.dx) {\r\n\t\t\t\trelativeX += sprite.dx;\r\n\t\t\t}\r\n\t\t\tif (sprite.dy) {\r\n\t\t\t\trelativeY += sprite.dy;\r\n\t\t\t}\r\n\r\n\t\t\tx = relativeX;\r\n\t\t\ty = relativeY;\r\n\r\n\t\t\tsprite = sprite.parent as any;\r\n\t\t}\r\n\t}\r\n\treturn { x: x, y: y };\r\n}\r\n\r\n\r\n/**\r\n * Converts coordinates of one sprite to another.\r\n *\r\n * @param point   Sprite coordinates\r\n * @param sprite  Sprite\r\n * @param toSprite  Sprite\r\n * @return converted coordinates\r\n */\r\nexport function spritePointToSprite(point: IPoint, sprite: Sprite, toSprite: Sprite): IPoint {\r\n\treturn svgPointToSprite(spritePointToSvg(point, sprite), toSprite);\r\n}\r\n\r\n\r\n/**\r\n * Converts a rectangle expressed in SVG element coordinates to coordinates\r\n * within specific [[Sprite]].\r\n *\r\n * @param rect    SVG rectangle\r\n * @param sprite  Sprite\r\n * @return Sprite rectangle\r\n */\r\nexport function svgRectToSprite(rect: IRectangle, sprite: Sprite): IRectangle {\r\n\tlet p1: IPoint = svgPointToSprite(rect, sprite);\r\n\tlet p2: IPoint = svgPointToSprite({ x: rect.x + rect.width, y: rect.y + rect.height }, sprite);\r\n\treturn { x: p1.x, y: p1.y, width: p2.x - p1.x, height: p2.y - p1.y };\r\n}\r\n\r\n/**\r\n * Converts a rectangle expressed in [[Sprite]] coordinates to SVG coordinates.\r\n *\r\n * @param rect    Sprite rectangle\r\n * @param sprite  Sprite\r\n * @return SVG rectangle\r\n */\r\nexport function spriteRectToSvg(rect: IRectangle, sprite: Sprite): IRectangle {\r\n\tlet p1: IPoint = spritePointToSvg(rect, sprite);\r\n\tlet p2: IPoint = spritePointToSvg({ x: rect.x + rect.width, y: rect.y + rect.height }, sprite);\r\n\treturn { x: p1.x, y: p1.y, width: p2.x - p1.x, height: p2.y - p1.y };\r\n}\r\n\r\n/**\r\n * Converts global document-wide coordinates to coordinates within SVG element.\r\n *\r\n * @param point         Global coordinates\r\n * @param svgContainer  SVG element\r\n * @return SVG coordinates\r\n */\r\nexport function documentPointToSvg(point: IPoint, svgContainer: HTMLElement, cssScale?: number): IPoint {\r\n\ttry {\r\n\t\tlet bbox = svgContainer.getBoundingClientRect();\r\n\r\n\t\tif (!$type.isNumber(cssScale)) {\r\n\t\t\tcssScale = 1;\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\t\"x\": (point.x - bbox.left) / cssScale,\r\n\t\t\t\"y\": (point.y - bbox.top) / cssScale\r\n\t\t};\r\n\t}\r\n\tcatch (e) {\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Converts SVG coordinates to global document-wide coordinates.\r\n *\r\n * @param point         SVG coordinates\r\n * @param svgContainer  SVG element\r\n * @return Global coordinates\r\n */\r\nexport function svgPointToDocument(point: IPoint, svgContainer: HTMLElement): IPoint {\r\n\ttry {\r\n\t\tlet bbox = svgContainer.getBoundingClientRect();\r\n\r\n\t\treturn {\r\n\t\t\t\"x\": point.x + bbox.left,\r\n\t\t\t\"y\": point.y + bbox.top\r\n\t\t};\r\n\t}\r\n\tcatch (e) {\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Converts document-wide global coordinates to coordinates within specific\r\n * [[Sprite]].\r\n *\r\n * @param point   Global coordinates\r\n * @param sprite  Sprite\r\n * @return Sprite coordinates\r\n */\r\nexport function documentPointToSprite(point: IPoint, sprite: Sprite): IPoint {\r\n\tif (sprite && sprite.htmlContainer) {\r\n\t\tlet svgPoint: IPoint = documentPointToSvg(point, $type.getValue(sprite.htmlContainer), sprite.svgContainer.cssScale);\r\n\t\treturn svgPointToSprite(svgPoint, sprite);\r\n\t}\r\n\telse {\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Converts coordinates within [[Sprite]] to global document coordinates.\r\n *\r\n * @param point   Sprite coordinates\r\n * @param sprite  Sprite\r\n * @return Global coordinates\r\n */\r\nexport function spritePointToDocument(point: IPoint, sprite: Sprite): IPoint {\r\n\tif (sprite && sprite.htmlContainer) {\r\n\t\tlet svgPoint: IPoint = spritePointToSvg(point, sprite);\r\n\t\treturn svgPointToDocument(svgPoint, $type.getValue(sprite.htmlContainer));\r\n\t}\r\n\telse {\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DEPRECATED FUNCTIONS\r\n * @todo Review and remove\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Returns element's width.\r\n *\r\n * @ignore Exclude from docs\r\n * @param element  Element\r\n * @return Width (px)\r\n * @deprecated Not used anywhere\r\n */\r\nexport function width(element: HTMLElement): number {\r\n\r\n\tlet cs = getComputedStyle(element);\r\n\r\n\tlet paddingX = parseFloat(cs.paddingLeft) + parseFloat(cs.paddingRight);\r\n\tlet borderX = parseFloat(cs.borderLeftWidth) + parseFloat(cs.borderRightWidth);\r\n\r\n\treturn element.clientWidth - paddingX - borderX;\r\n}\r\n\r\n/**\r\n * Returns element's height.\r\n *\r\n * @ignore Exclude from docs\r\n * @param element  Element\r\n * @return Height (px)\r\n * @deprecated Not used anywhere\r\n */\r\nexport function height(element: HTMLElement): number {\r\n\r\n\tlet cs = getComputedStyle(element);\r\n\r\n\tlet paddingY = parseFloat(cs.paddingTop) + parseFloat(cs.paddingBottom);\r\n\tlet borderY = parseFloat(cs.borderTopWidth) + parseFloat(cs.borderBottomWidth);\r\n\r\n\treturn element.clientHeight - paddingY - borderY;\r\n}\r\n\r\n/**\r\n * Returns number of decimals\r\n *\r\n * @ignore Exclude from docs\r\n * @param number  Input number\r\n * @return Number of decimals\r\n */\r\nexport function decimalPlaces(number: number): number {\r\n\tlet match = ('' + number).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\r\n\tif (!match) { return 0; }\r\n\treturn Math.max(0, (match[1] ? match[1].length : 0) - (match[2] ? +match[2] : 0));\r\n}\r\n\r\n\r\n/**\r\n * A parsed URL\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport interface Url {\r\n\tprotocol: string;\r\n\tseparator: string;\r\n\tauthority: string;\r\n\tdomain: string;\r\n\tport: string;\r\n\tpath: string;\r\n\tquery: string;\r\n\thash: string;\r\n}\r\n\r\nconst urlRegexp = /^([a-zA-Z][a-zA-Z0-9\\+\\.\\-]*:)?(?:(\\/\\/)([^\\@]+\\@)?([^\\/\\?\\#\\:]*)(\\:[0-9]+)?)?([^\\?\\#]*)(\\?[^\\#]*)?(\\#.*)?$/;\r\n\r\n/**\r\n * Parses a URL\r\n *\r\n * @ignore Exclude from docs\r\n */\r\n// TODO test this\r\nexport function parseUrl(url: string): Url {\r\n\tconst match = urlRegexp.exec(url);\r\n\r\n\treturn {\r\n\t\tprotocol: (match && match[1]) || \"\",\r\n\t\tseparator: (match && match[2]) || \"\",\r\n\t\tauthority: (match && match[3]) || \"\",\r\n\t\tdomain: (match && match[4]) || \"\",\r\n\t\tport: (match && match[5]) || \"\",\r\n\t\tpath: (match && match[6]) || \"\",\r\n\t\tquery: (match && match[7]) || \"\",\r\n\t\thash: (match && match[8]) || \"\"\r\n\t};\r\n}\r\n\r\n/**\r\n * Serializes a Url into a string\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport function serializeUrl(url: Url): string {\r\n\treturn url.protocol + url.separator + url.authority + url.domain + url.port + url.path + url.query + url.hash;\r\n}\r\n\r\n/**\r\n * Checks whether a Url is relative or not\r\n *\r\n * @ignore Exclude from docs\r\n */\r\n// TODO is this correct ?\r\nfunction isRelativeUrl(url: Url): boolean {\r\n\treturn url.protocol === \"\" &&\r\n\t\turl.separator === \"\" &&\r\n\t\turl.authority === \"\" &&\r\n\t\turl.domain === \"\" &&\r\n\t\turl.port === \"\";\r\n}\r\n\r\n/**\r\n * Joins together two URLs, resolving relative URLs correctly\r\n *\r\n * @ignore Exclude from docs\r\n */\r\n// TODO test this\r\nexport function joinUrl(left: string, right: string): string {\r\n\tconst parsedLeft = parseUrl(left);\r\n\tconst parsedRight = parseUrl(right);\r\n\r\n\tif (isRelativeUrl(parsedLeft)) {\r\n\t\tthrow new Error(\"Left URL is not absolute\");\r\n\t}\r\n\r\n\tif (isRelativeUrl(parsedRight)) {\r\n\t\t// TODO is this correct ?\r\n\t\tif (parsedRight.path !== \"\") {\r\n\t\t\tif (parsedRight.path[0] === \"/\") {\r\n\t\t\t\tparsedLeft.path = parsedRight.path;\r\n\r\n\t\t\t\t// TODO is this correct ?\r\n\t\t\t} else {\r\n\t\t\t\tconst leftPath = parsedLeft.path.split(/\\//);\r\n\t\t\t\tconst rightPath = parsedRight.path.split(/\\//);\r\n\r\n\t\t\t\t// TODO is this correct ?\r\n\t\t\t\tif (leftPath.length === 0) {\r\n\t\t\t\t\tif (rightPath.length !== 0) {\r\n\t\t\t\t\t\tleftPath.push(\"\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if (leftPath.length > 1) {\r\n\t\t\t\t\tleftPath.pop();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$array.pushAll(leftPath, rightPath);\r\n\r\n\t\t\t\tparsedLeft.path = leftPath.join(\"/\");\r\n\r\n\t\t\t\tif (parsedLeft.path !== \"\" && parsedLeft.path[0] !== \"/\") {\r\n\t\t\t\t\tthrow new Error(\"URL path must start with /\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// TODO is this correct ?\r\n\t\tparsedLeft.query = parsedRight.query;\r\n\t\tparsedLeft.hash = parsedRight.hash;\r\n\r\n\t\treturn serializeUrl(parsedLeft);\r\n\r\n\t} else {\r\n\t\treturn serializeUrl(parsedRight);\r\n\t}\r\n}\r\n\r\n/**\r\n * Detects MSIE.\r\n *\r\n * @return Is IE?\r\n */\r\nexport function isIE(): boolean {\r\n\treturn !!(<any>window).MSInputMethodContext && !!(<any>document).documentMode;\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}