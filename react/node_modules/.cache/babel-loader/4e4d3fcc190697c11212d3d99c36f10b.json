{"ast":null,"code":"/**\r\n * Functionality related to inertia\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { BaseObject } from \"../Base\";\nimport { getInteraction } from \"./Interaction\";\nimport { AnimationDisposer } from \"../utils/Animation\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * A point of inertia is to simulate gradually drecreasing motion even after\r\n * actual interaction by user, that caused it, has already ended.\r\n *\r\n * [[Inertia]] object will continue triggering the same [[Sprite]] handlers\r\n * as if the interaction was still happening, gradually reducing\r\n * shift/angle/scale values until full stop.\r\n *\r\n * Basically, from the target element's point of view, while inertia is\r\n * playing, it is still being interacted with by user, albeit with a\r\n * decreasing speed.\r\n */\n\nvar Inertia =\n/** @class */\nfunction (_super) {\n  __extends(Inertia, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Inertia(interaction, type, point, startPoint) {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * List of animations currently playing.\r\n     */\n\n\n    _this.animations = [];\n    _this.className = \"Inertia\";\n    _this.interaction = interaction;\n    _this.type = type;\n    _this.point = point;\n    _this.startPoint = startPoint; // Make animations disposable\n\n    _this._disposers.push(new AnimationDisposer(_this.animations));\n\n    return _this;\n  }\n\n  Object.defineProperty(Inertia.prototype, \"x\", {\n    /**\r\n     * Returns current X coordinate.\r\n     *\r\n     * @return X\r\n     */\n    get: function get() {\n      return this.point.x;\n    },\n\n    /**\r\n     * Sets current X coordinate.\r\n     *\r\n     * Will trigger \"drag\" event for the target element.\r\n     *\r\n     * @param value X\r\n     */\n    set: function set(value) {\n      if ($type.isNumber(value)) {\n        this.point.x = value;\n        this.handleMove();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Inertia.prototype, \"y\", {\n    /**\r\n     * Returns current Y coordinate.\r\n     *\r\n     * @return Y\r\n     */\n    get: function get() {\n      return this.point.y;\n    },\n\n    /**\r\n     * Sets current Y coordinate.\r\n     *\r\n     * Will trigger \"drag\" event for the target element.\r\n     *\r\n     * @param value Y\r\n     */\n    set: function set(value) {\n      if ($type.isNumber(value)) {\n        this.point.y = value;\n        this.handleMove();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Simulates dragging of element.\r\n   */\n\n  Inertia.prototype.handleMove = function () {\n    // Prepare {InteractionEvent} object\n    if (this.interaction.events.isEnabled(\"drag\")) {\n      var imev = {\n        type: \"drag\",\n        target: this.interaction,\n        shift: {\n          x: this.x - this.startPoint.x,\n          y: this.y - this.startPoint.y\n        },\n        startPoint: this.startPoint,\n        point: {\n          x: this.x,\n          y: this.y\n        },\n        touch: false\n      }; // Call handler\n\n      this.interaction.events.dispatchImmediately(\"drag\", imev);\n    }\n  };\n  /**\r\n   * Finishes up the inertia animation. (removes reference to this animation\r\n   * object)\r\n   */\n\n\n  Inertia.prototype.done = function () {\n    // Remove inertia animation from the object\n    this.interaction.inertias.removeKey(this.type); // Move ended\n\n    if (this.type === \"move\") {\n      getInteraction().processDragStop(this.interaction);\n    } // Destroy\n\n\n    this.dispose();\n  };\n\n  return Inertia;\n}(BaseObject);\n\nexport { Inertia };","map":{"version":3,"sources":["../../../../../src/.internal/core/interaction/Inertia.ts"],"names":[],"mappings":"AAAA;;;;AAIA;;;;;;;AAMA,SAAS,UAAT,QAA2B,SAA3B;AACA,SAAS,cAAT,QAA+B,eAA/B;AAEA,SAAiC,iBAAjC,QAA0D,oBAA1D;AAGA,OAAO,KAAK,KAAZ,MAAuB,eAAvB;AAOA;;;;;;;;;;;;;AAYA,IAAA,OAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA6B,EAAA,SAAA,CAAA,OAAA,EAAA,MAAA,CAAA;AA4B5B;;;;;AAGA,WAAA,OAAA,CAAY,WAAZ,EAA4C,IAA5C,EAAgE,KAAhE,EAA+E,UAA/E,EAAiG;AAAjG,QAAA,KAAA,GAEC;AACA,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IAHR;AARA;;;;;AAGO,IAAA,KAAA,CAAA,UAAA,GAA+B,EAA/B;AASN,IAAA,KAAI,CAAC,SAAL,GAAiB,SAAjB;AAEA,IAAA,KAAI,CAAC,WAAL,GAAmB,WAAnB;AACA,IAAA,KAAI,CAAC,IAAL,GAAY,IAAZ;AACA,IAAA,KAAI,CAAC,KAAL,GAAa,KAAb;AACA,IAAA,KAAI,CAAC,UAAL,GAAkB,UAAlB,CATgG,CAWhG;;AACA,IAAA,KAAI,CAAC,UAAL,CAAgB,IAAhB,CAAqB,IAAI,iBAAJ,CAAsB,KAAI,CAAC,UAA3B,CAArB;;;AAEA;;AASD,EAAA,MAAA,CAAA,cAAA,CAAW,OAAA,CAAA,SAAX,EAAW,GAAX,EAAY;AAOZ;;;;;SAKA,eAAA;AACC,aAAO,KAAK,KAAL,CAAW,CAAlB;AACA,KAdW;;AAPZ;;;;;;;SAOA,aAAa,KAAb,EAA0B;AACzB,UAAI,KAAK,CAAC,QAAN,CAAe,KAAf,CAAJ,EAA2B;AAC1B,aAAK,KAAL,CAAW,CAAX,GAAe,KAAf;AACA,aAAK,UAAL;AACA;AACD,KALW;oBAAA;;AAAA,GAAZ;AAuBA,EAAA,MAAA,CAAA,cAAA,CAAW,OAAA,CAAA,SAAX,EAAW,GAAX,EAAY;AAOZ;;;;;SAKA,eAAA;AACC,aAAO,KAAK,KAAL,CAAW,CAAlB;AACA,KAdW;;AAPZ;;;;;;;SAOA,aAAa,KAAb,EAA0B;AACzB,UAAI,KAAK,CAAC,QAAN,CAAe,KAAf,CAAJ,EAA2B;AAC1B,aAAK,KAAL,CAAW,CAAX,GAAe,KAAf;AACA,aAAK,UAAL;AACA;AACD,KALW;oBAAA;;AAAA,GAAZ;AAgBA;;;;AAGO,EAAA,OAAA,CAAA,SAAA,CAAA,UAAA,GAAP,YAAA;AAEC;AACA,QAAI,KAAK,WAAL,CAAiB,MAAjB,CAAwB,SAAxB,CAAkC,MAAlC,CAAJ,EAA+C;AAC9C,UAAI,IAAI,GAAiE;AACxE,QAAA,IAAI,EAAE,MADkE;AAExE,QAAA,MAAM,EAAE,KAAK,WAF2D;AAGxE,QAAA,KAAK,EAAE;AACN,UAAA,CAAC,EAAE,KAAK,CAAL,GAAS,KAAK,UAAL,CAAgB,CADtB;AAEN,UAAA,CAAC,EAAE,KAAK,CAAL,GAAS,KAAK,UAAL,CAAgB;AAFtB,SAHiE;AAOxE,QAAA,UAAU,EAAE,KAAK,UAPuD;AAQxE,QAAA,KAAK,EAAE;AACN,UAAA,CAAC,EAAE,KAAK,CADF;AAEN,UAAA,CAAC,EAAE,KAAK;AAFF,SARiE;AAYxE,QAAA,KAAK,EAAE;AAZiE,OAAzE,CAD8C,CAgB9C;;AACA,WAAK,WAAL,CAAiB,MAAjB,CAAwB,mBAAxB,CAA4C,MAA5C,EAAoD,IAApD;AACA;AAED,GAvBM;AAyBP;;;;;;AAIO,EAAA,OAAA,CAAA,SAAA,CAAA,IAAA,GAAP,YAAA;AAEC;AACA,SAAK,WAAL,CAAiB,QAAjB,CAA0B,SAA1B,CAAoC,KAAK,IAAzC,EAHD,CAKC;;AACA,QAAI,KAAK,IAAL,KAAc,MAAlB,EAA0B;AACzB,MAAA,cAAc,GAAG,eAAjB,CAAiC,KAAK,WAAtC;AACA,KARF,CAUC;;;AACA,SAAK,OAAL;AAEA,GAbM;;AAeR,SAAA,OAAA;AAAC,CA5ID,CAA6B,UAA7B,CAAA","sourcesContent":["/**\r\n * Functionality related to inertia\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../Base\";\r\nimport { getInteraction } from \"./Interaction\";\r\nimport { InteractionObject, IInteractionObjectEvents } from \"./InteractionObject\";\r\nimport { Animation, IAnimatable, AnimationDisposer } from \"../utils/Animation\";\r\nimport { AMEvent } from \"../utils/EventDispatcher\";\r\nimport { IPoint } from \"../defs/IPoint\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * Defines a list of available inertia types.\r\n */\r\nexport type InertiaTypes = \"move\" | \"resize\";\r\n\r\n/**\r\n * A point of inertia is to simulate gradually drecreasing motion even after\r\n * actual interaction by user, that caused it, has already ended.\r\n *\r\n * [[Inertia]] object will continue triggering the same [[Sprite]] handlers\r\n * as if the interaction was still happening, gradually reducing\r\n * shift/angle/scale values until full stop.\r\n *\r\n * Basically, from the target element's point of view, while inertia is\r\n * playing, it is still being interacted with by user, albeit with a\r\n * decreasing speed.\r\n */\r\nexport class Inertia extends BaseObject implements IAnimatable {\r\n\r\n\t/**\r\n\t * Holds what type of inertia it is.\r\n\t */\r\n\tpublic type: InertiaTypes;\r\n\r\n\t/**\r\n\t * An element we're performing animation on.\r\n\t */\r\n\tpublic interaction: InteractionObject;\r\n\r\n\t/**\r\n\t * Starting pointer position. The position of pointer when we \"released\"\r\n\t * the element.\r\n\t */\r\n\tpublic startPoint: IPoint;\r\n\r\n\t/**\r\n\t * Current (simulated) pointer position.\r\n\t */\r\n\tpublic point: IPoint;\r\n\r\n\t/**\r\n\t * List of animations currently playing.\r\n\t */\r\n\tpublic animations: Array<Animation> = [];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor(interaction: InteractionObject, type: InertiaTypes, point: IPoint, startPoint: IPoint) {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Inertia\";\r\n\r\n\t\tthis.interaction = interaction;\r\n\t\tthis.type = type;\r\n\t\tthis.point = point;\r\n\t\tthis.startPoint = startPoint;\r\n\r\n\t\t// Make animations disposable\r\n\t\tthis._disposers.push(new AnimationDisposer(this.animations));\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets current X coordinate.\r\n\t *\r\n\t * Will trigger \"drag\" event for the target element.\r\n\t *\r\n\t * @param value X\r\n\t */\r\n\tpublic set x(value: number) {\r\n\t\tif ($type.isNumber(value)) {\r\n\t\t\tthis.point.x = value;\r\n\t\t\tthis.handleMove();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current X coordinate.\r\n\t *\r\n\t * @return X\r\n\t */\r\n\tpublic get x(): number {\r\n\t\treturn this.point.x;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets current Y coordinate.\r\n\t *\r\n\t * Will trigger \"drag\" event for the target element.\r\n\t *\r\n\t * @param value Y\r\n\t */\r\n\tpublic set y(value: number) {\r\n\t\tif ($type.isNumber(value)) {\r\n\t\t\tthis.point.y = value;\r\n\t\t\tthis.handleMove();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current Y coordinate.\r\n\t *\r\n\t * @return Y\r\n\t */\r\n\tpublic get y(): number {\r\n\t\treturn this.point.y;\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates dragging of element.\r\n\t */\r\n\tpublic handleMove() {\r\n\r\n\t\t// Prepare {InteractionEvent} object\r\n\t\tif (this.interaction.events.isEnabled(\"drag\")) {\r\n\t\t\tlet imev: AMEvent<InteractionObject, IInteractionObjectEvents>[\"drag\"] = {\r\n\t\t\t\ttype: \"drag\",\r\n\t\t\t\ttarget: this.interaction,\r\n\t\t\t\tshift: {\r\n\t\t\t\t\tx: this.x - this.startPoint.x,\r\n\t\t\t\t\ty: this.y - this.startPoint.y\r\n\t\t\t\t},\r\n\t\t\t\tstartPoint: this.startPoint,\r\n\t\t\t\tpoint: {\r\n\t\t\t\t\tx: this.x,\r\n\t\t\t\t\ty: this.y\r\n\t\t\t\t},\r\n\t\t\t\ttouch: false\r\n\t\t\t};\r\n\r\n\t\t\t// Call handler\r\n\t\t\tthis.interaction.events.dispatchImmediately(\"drag\", imev);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Finishes up the inertia animation. (removes reference to this animation\r\n\t * object)\r\n\t */\r\n\tpublic done() {\r\n\r\n\t\t// Remove inertia animation from the object\r\n\t\tthis.interaction.inertias.removeKey(this.type);\r\n\r\n\t\t// Move ended\r\n\t\tif (this.type === \"move\") {\r\n\t\t\tgetInteraction().processDragStop(this.interaction);\r\n\t\t}\r\n\r\n\t\t// Destroy\r\n\t\tthis.dispose();\r\n\r\n\t}\r\n\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}