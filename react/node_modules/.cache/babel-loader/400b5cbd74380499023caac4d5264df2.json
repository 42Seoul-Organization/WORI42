{"ast":null,"code":"/**\r\n * Ellipse module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Circle } from \"./Circle\";\nimport { registry } from \"../Registry\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Draws an ellipse\r\n * @see {@link IEllipseEvents} for a list of available events\r\n * @see {@link IEllipseAdapters} for a list of available Adapters\r\n */\n\nvar Ellipse =\n/** @class */\nfunction (_super) {\n  __extends(Ellipse, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Ellipse() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Ellipse\";\n    _this.element = _this.paper.add(\"ellipse\");\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the ellipsis.\r\n   */\n\n\n  Ellipse.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    this.element.attr({\n      \"rx\": this.radius\n    });\n    this.element.attr({\n      \"ry\": this.radiusY\n    });\n  };\n\n  Object.defineProperty(Ellipse.prototype, \"radiusY\", {\n    /**\r\n     * @return Vertical radius\r\n     */\n    get: function get() {\n      return this.innerHeight / 2;\n    },\n\n    /**\r\n     * Vertical radius.\r\n     *\r\n     * It's a relative size to the `radius`.\r\n     *\r\n     * E.g. 0.8 will mean the height of the ellipsis will be 80% of it's\r\n     * horizontal radius.\r\n     *\r\n     * @param value  Vertical radius\r\n     */\n    set: function set(value) {\n      this.height = value * 2;\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Ellipse.prototype, \"radius\", {\n    /**\r\n     * @return Horizontal radius\r\n     */\n    get: function get() {\n      return this.innerWidth / 2;\n    },\n\n    /**\r\n     * Horizontal radius.\r\n     *\r\n     * @param value  Horizontal radius\r\n     */\n    set: function set(value) {\n      this.width = value * 2;\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Ellipse;\n}(Circle);\n\nexport { Ellipse };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Ellipse\"] = Ellipse;","map":{"version":3,"sources":["../../../../../src/.internal/core/elements/Ellipse.ts"],"names":[],"mappings":"AAAA;;;;AAIA;;;;;;;AAMA,SAAS,MAAT,QAA0E,UAA1E;AACA,SAAS,QAAT,QAAyB,aAAzB;AAwCA;;;;;;;AAOA;;;;;;AAKA,IAAA,OAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA6B,EAAA,SAAA,CAAA,OAAA,EAAA,MAAA,CAAA;AAiB5B;;;;;AAGA,WAAA,OAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADR;;AAEC,IAAA,KAAI,CAAC,SAAL,GAAiB,SAAjB;AAEA,IAAA,KAAI,CAAC,OAAL,GAAe,KAAI,CAAC,KAAL,CAAW,GAAX,CAAe,SAAf,CAAf;;AAEA,IAAA,KAAI,CAAC,UAAL;;;AACA;AAED;;;;;AAGU,EAAA,OAAA,CAAA,SAAA,CAAA,IAAA,GAAV,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,IAAN,CAAU,IAAV,CAAU,IAAV;;AACA,SAAK,OAAL,CAAa,IAAb,CAAkB;AAAE,YAAM,KAAK;AAAb,KAAlB;AACA,SAAK,OAAL,CAAa,IAAb,CAAkB;AAAE,YAAM,KAAK;AAAb,KAAlB;AACA,GAJS;;AAgBV,EAAA,MAAA,CAAA,cAAA,CAAW,OAAA,CAAA,SAAX,EAAW,SAAX,EAAkB;AAKlB;;;SAGA,eAAA;AACC,aAAO,KAAK,WAAL,GAAmB,CAA1B;AACA,KAViB;;AAVlB;;;;;;;;;;SAUA,aAAmB,KAAnB,EAAgC;AAC/B,WAAK,MAAL,GAAc,KAAK,GAAG,CAAtB;AACA,WAAK,UAAL;AACA,KAHiB;oBAAA;;AAAA,GAAlB;AAiBA,EAAA,MAAA,CAAA,cAAA,CAAW,OAAA,CAAA,SAAX,EAAW,QAAX,EAAiB;AAKjB;;;SAGA,eAAA;AACC,aAAO,KAAK,UAAL,GAAkB,CAAzB;AACA,KAVgB;;AALjB;;;;;SAKA,aAAkB,KAAlB,EAA+B;AAC9B,WAAK,KAAL,GAAa,KAAK,GAAG,CAArB;AACA,WAAK,UAAL;AACA,KAHgB;oBAAA;;AAAA,GAAjB;AAYD,SAAA,OAAA;AAAC,CA7ED,CAA6B,MAA7B,CAAA;;;AA+EA;;;;;;;AAMA,QAAQ,CAAC,iBAAT,CAA2B,SAA3B,IAAwC,OAAxC","sourcesContent":["/**\r\n * Ellipse module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Circle, ICircleProperties, ICircleAdapters, ICircleEvents } from \"./Circle\";\r\nimport { registry } from \"../Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Ellipse]].\r\n */\r\nexport interface IEllipseProperties extends ICircleProperties {\r\n\r\n\t/**\r\n\t * Vertical radius.\r\n\t *\r\n\t * It's a relative size to the `radius`.\r\n\t *\r\n\t * E.g. 0.8 will mean the height of the ellipsis will be 80% of it's\r\n\t * horizontal radius.\r\n\t */\r\n\tradiusY?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Ellipse]].\r\n */\r\nexport interface IEllipseEvents extends ICircleEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface IEllipseAdapters extends ICircleAdapters, IEllipseProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an ellipse\r\n * @see {@link IEllipseEvents} for a list of available events\r\n * @see {@link IEllipseAdapters} for a list of available Adapters\r\n */\r\nexport class Ellipse extends Circle {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IEllipseProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IEllipseAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IEllipseEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Ellipse\";\r\n\r\n\t\tthis.element = this.paper.add(\"ellipse\");\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the ellipsis.\r\n\t */\r\n\tprotected draw() {\r\n\t\tsuper.draw();\r\n\t\tthis.element.attr({ \"rx\": this.radius });\r\n\t\tthis.element.attr({ \"ry\": this.radiusY });\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical radius.\r\n\t *\r\n\t * It's a relative size to the `radius`.\r\n\t *\r\n\t * E.g. 0.8 will mean the height of the ellipsis will be 80% of it's\r\n\t * horizontal radius.\r\n\t *\r\n\t * @param value  Vertical radius\r\n\t */\r\n\tpublic set radiusY(value: number) {\r\n\t\tthis.height = value * 2;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical radius\r\n\t */\r\n\tpublic get radiusY(): number {\r\n\t\treturn this.innerHeight / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal radius.\r\n\t *\r\n\t * @param value  Horizontal radius\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.width = value * 2;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Horizontal radius\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.innerWidth / 2;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Ellipse\"] = Ellipse;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}