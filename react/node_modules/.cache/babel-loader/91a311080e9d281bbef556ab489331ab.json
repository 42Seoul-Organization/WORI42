{"ast":null,"code":"/**\r\n * Module for \"Focus\" filter.\r\n */\nimport { __extends } from \"tslib\";\nimport { Filter } from \"./Filter\";\nimport { InterfaceColorSet } from \"../../utils/InterfaceColorSet\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a \"Focus\" filter.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/accessibility/} more about accessibility\r\n * @see {@link https://www.amcharts.com/docs/v4/tutorials/changing-appearance-of-focused-items/} cusomizing focus appearance\r\n */\n\nvar FocusFilter =\n/** @class */\nfunction (_super) {\n  __extends(FocusFilter, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function FocusFilter() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"FocusFilter\"; // Create elements\n    // NOTE: we do not need to add each individual element to `_disposers`\n    // because `filterPrimitives` has an event handler which automatically adds\n    // anything added to it to `_disposers`\n\n    _this.feFlood = _this.paper.add(\"feFlood\");\n\n    _this.feFlood.attr({\n      \"flood-color\": new InterfaceColorSet().getFor(\"primaryButtonHover\"),\n      \"result\": \"base\"\n    });\n\n    _this.filterPrimitives.push(_this.feFlood);\n\n    _this.feMorphology = _this.paper.add(\"feMorphology\");\n\n    _this.feMorphology.attr({\n      \"result\": \"bigger\",\n      \"in\": \"SourceGraphic\",\n      \"operator\": \"dilate\",\n      \"radius\": \"2\"\n    });\n\n    _this.filterPrimitives.push(_this.feMorphology);\n\n    _this.feColorMatrix = _this.paper.add(\"feColorMatrix\");\n\n    _this.feColorMatrix.attr({\n      \"result\": \"mask\",\n      \"in\": \"bigger\",\n      \"type\": \"matrix\",\n      \"values\": \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0\"\n    });\n\n    _this.filterPrimitives.push(_this.feColorMatrix);\n\n    _this.feComposite = _this.paper.add(\"feComposite\");\n\n    _this.feComposite.attr({\n      \"result\": \"drop\",\n      \"in\": \"base\",\n      \"in2\": \"mask\",\n      \"operator\": \"in\"\n    });\n\n    _this.filterPrimitives.push(_this.feComposite);\n\n    _this.feBlend = _this.paper.add(\"feBlend\");\n\n    _this.feBlend.attr({\n      \"in\": \"SourceGraphic\",\n      \"in2\": \"drop\",\n      \"mode\": \"normal\"\n    });\n\n    _this.filterPrimitives.push(_this.feBlend); // Set default properties\n\n\n    _this.width = 130;\n    _this.height = 130;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(FocusFilter.prototype, \"stroke\", {\n    /**\r\n     * @return Color\r\n     */\n    get: function get() {\n      return this.properties[\"stroke\"];\n    },\n\n    /**\r\n     * Stroke (outline) color.\r\n     *\r\n     * @param value  Color\r\n     */\n    set: function set(value) {\n      this.properties[\"stroke\"] = value;\n      this.feFlood.attr({\n        \"flood-color\": value\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FocusFilter.prototype, \"strokeWidth\", {\n    /**\r\n     * @return Outline thickness (px)\r\n     */\n    get: function get() {\n      return this.properties[\"strokeWidth\"];\n    },\n\n    /**\r\n     * Stroke (outline) thickness in pixels.\r\n     *\r\n     * @param value  Outline thickness (px)\r\n     */\n    set: function set(value) {\n      this.properties[\"strokeWidth\"] = value;\n      this.feMorphology.attr({\n        \"radius\": value\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FocusFilter.prototype, \"opacity\", {\n    /**\r\n     * @return Outline opacity (0-1)\r\n     */\n    get: function get() {\n      return this.properties[\"opacity\"];\n    },\n\n    /**\r\n     * Opacity of the outline. (0-1)\r\n     *\r\n     * @param value  Outline opacity (0-1)\r\n     */\n    set: function set(value) {\n      this.properties[\"opacity\"] = value;\n      this.feColorMatrix.attr({\n        \"values\": \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \" + value + \" 0\"\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets filter's target element.\r\n   *\r\n   * In addition it also disables built-in focus outline on element this\r\n   * filter is applied to.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value  Element filter is being attached to\r\n   */\n\n  FocusFilter.prototype.setSprite = function (value) {\n    if (this._sprite && this._sprite != value) {\n      this._sprite.group.removeStyle(\"outline\");\n    }\n\n    value.group.addStyle({\n      \"outline\": \"none\"\n    });\n\n    _super.prototype.setSprite.call(this, value);\n  };\n\n  return FocusFilter;\n}(Filter);\n\nexport { FocusFilter };","map":{"version":3,"sources":["../../../../../../src/.internal/core/rendering/filters/FocusFilter.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Module for \"Focus\" filter.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../../Sprite\";\r\nimport { Filter, FilterProperties } from \"./Filter\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { Color } from \"../../utils/Color\";\r\nimport { InterfaceColorSet } from \"../../utils/InterfaceColorSet\";\r\nimport * as $type from \"../../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines additional properties relative to the \"Focus\" filter.\r\n */\r\nexport interface FocusFilterProperties extends FilterProperties {\r\n\r\n\t/**\r\n\t * Opacity of the outline. (0-1)\r\n\t */\r\n\topacity?: number;\r\n\r\n\t/**\r\n\t * Stroke (outline) color.\r\n\t */\r\n\tstroke?: Color;\r\n\r\n\t/**\r\n\t * Stroke (outline) thickness in pixels.\r\n\t */\r\n\tstrokeWidth?: number;\r\n\r\n\t/**\r\n\t * Stroke (outline) opacity. (0-1)\r\n\t */\r\n\tstrokeOpacity?: number;\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"Focus\" filter.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/accessibility/} more about accessibility\r\n * @see {@link https://www.amcharts.com/docs/v4/tutorials/changing-appearance-of-focused-items/} cusomizing focus appearance\r\n */\r\nexport class FocusFilter extends Filter {\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: FocusFilterProperties;\r\n\r\n\t/**\r\n\t * A storage for Filter property/value pairs.\r\n\t * @see [@link FocusFilterProperties]\r\n\t */\r\n\t//public propertyValues: Dictionary<FocusFilterProperties, any>;\r\n\r\n\t/**\r\n\t * Reference to the `<feFlood>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic feFlood: AMElement;\r\n\r\n\t/**\r\n\t * Reference to the `<feMorphology>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic feMorphology: AMElement;\r\n\r\n\t/**\r\n\t * Reference to the `<feFlood>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic feColorMatrix: AMElement;\r\n\r\n\t/**\r\n\t * Reference to the `<feComposite>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic feComposite: AMElement;\r\n\r\n\t/**\r\n\t * Reference to the `<feFlood>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic feBlend: AMElement;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"FocusFilter\";\r\n\r\n\t\t// Create elements\r\n\t\t// NOTE: we do not need to add each individual element to `_disposers`\r\n\t\t// because `filterPrimitives` has an event handler which automatically adds\r\n\t\t// anything added to it to `_disposers`\r\n\t\tthis.feFlood = this.paper.add(\"feFlood\");\r\n\t\tthis.feFlood.attr({ \"flood-color\": new InterfaceColorSet().getFor(\"primaryButtonHover\"), \"result\": \"base\" });\r\n\t\tthis.filterPrimitives.push(this.feFlood);\r\n\r\n\t\tthis.feMorphology = this.paper.add(\"feMorphology\");\r\n\t\tthis.feMorphology.attr({ \"result\": \"bigger\", \"in\": \"SourceGraphic\", \"operator\": \"dilate\", \"radius\": \"2\" });\r\n\t\tthis.filterPrimitives.push(this.feMorphology);\r\n\r\n\t\tthis.feColorMatrix = this.paper.add(\"feColorMatrix\");\r\n\t\tthis.feColorMatrix.attr({ \"result\": \"mask\", \"in\": \"bigger\", \"type\": \"matrix\", \"values\": \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0\" });\r\n\t\tthis.filterPrimitives.push(this.feColorMatrix);\r\n\r\n\t\tthis.feComposite = this.paper.add(\"feComposite\");\r\n\t\tthis.feComposite.attr({ \"result\": \"drop\", \"in\": \"base\", \"in2\": \"mask\", \"operator\": \"in\" });\r\n\t\tthis.filterPrimitives.push(this.feComposite);\r\n\r\n\t\tthis.feBlend = this.paper.add(\"feBlend\");\r\n\t\tthis.feBlend.attr({ \"in\": \"SourceGraphic\", \"in2\": \"drop\", \"mode\": \"normal\" });\r\n\t\tthis.filterPrimitives.push(this.feBlend);\r\n\r\n\t\t// Set default properties\r\n\t\tthis.width = 130;\r\n\t\tthis.height = 130;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Stroke (outline) color.\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set stroke(value: $type.Optional<Color>) {\r\n\t\tthis.properties[\"stroke\"] = value;\r\n\t\tthis.feFlood.attr({ \"flood-color\": value });\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get stroke(): $type.Optional<Color> {\r\n\t\treturn this.properties[\"stroke\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Stroke (outline) thickness in pixels.\r\n\t *\r\n\t * @param value  Outline thickness (px)\r\n\t */\r\n\tpublic set strokeWidth(value: $type.Optional<number>) {\r\n\t\tthis.properties[\"strokeWidth\"] = value;\r\n\t\tthis.feMorphology.attr({ \"radius\": value });\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outline thickness (px)\r\n\t */\r\n\tpublic get strokeWidth(): $type.Optional<number> {\r\n\t\treturn this.properties[\"strokeWidth\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Opacity of the outline. (0-1)\r\n\t *\r\n\t * @param value  Outline opacity (0-1)\r\n\t */\r\n\tpublic set opacity(value: $type.Optional<number>) {\r\n\t\tthis.properties[\"opacity\"] = value;\r\n\t\tthis.feColorMatrix.attr({ \"values\": \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \" + value + \" 0\" });\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outline opacity (0-1)\r\n\t */\r\n\tpublic get opacity(): $type.Optional<number> {\r\n\t\treturn this.properties[\"opacity\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Sets filter's target element.\r\n\t *\r\n\t * In addition it also disables built-in focus outline on element this\r\n\t * filter is applied to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Element filter is being attached to\r\n\t */\r\n\tprotected setSprite(value: Sprite): void {\r\n\t\tif (this._sprite && this._sprite != value) {\r\n\t\t\tthis._sprite.group.removeStyle(\"outline\");\r\n\t\t}\r\n\t\tvalue.group.addStyle({\r\n\t\t\t\"outline\": \"none\"\r\n\t\t});\r\n\t\tsuper.setSprite(value);\r\n\t}\r\n\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}