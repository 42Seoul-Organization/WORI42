{"ast":null,"code":"/**\r\n * Defines Pie Chart Series.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { PercentSeries, PercentSeriesDataItem } from \"./PercentSeries\";\nimport { Slice } from \"../../core/elements/Slice\"; //import { Slice3D } from \"../../core/elements/3D/Slice3D\";\n\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\nimport { PieTick } from \"../elements/PieTick\";\nimport { registry } from \"../../core/Registry\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport { Percent, percent } from \"../../core/utils/Percent\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n//@todo: sequenced?\n\n/**\r\n * Defines a [[DataItem]] for [[PieSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar PieSeriesDataItem =\n/** @class */\nfunction (_super) {\n  __extends(PieSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function PieSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"PieSeriesDataItem\";\n    _this.values.radiusValue = {};\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(PieSeriesDataItem.prototype, \"radiusValue\", {\n    /**\r\n     * @return Radius\r\n     */\n    get: function () {\n      return this.values.radiusValue.value;\n    },\n\n    /**\r\n     * Slice's radius, if other than default.\r\n     *\r\n     * @param value  Radius\r\n     */\n    set: function (value) {\n      this.setValue(\"radiusValue\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Hide the data item (and corresponding visual elements).\r\n   *\r\n   * @param duration  Duration (ms)\r\n   * @param delay     Delay hiding (ms)\r\n   * @param toValue   Target value for animation\r\n   * @param fields    Fields to animate while hiding\r\n   */\n\n  PieSeriesDataItem.prototype.hide = function (duration, delay, toValue, fields) {\n    return _super.prototype.hide.call(this, duration, delay, 0, [\"value\", \"radiusValue\"]);\n  };\n  /**\r\n   * Show hidden data item (and corresponding visual elements).\r\n   *\r\n   * @param duration  Duration (ms)\r\n   * @param delay     Delay hiding (ms)\r\n   * @param fields    Fields to animate while hiding\r\n   */\n\n\n  PieSeriesDataItem.prototype.show = function (duration, delay, fields) {\n    return _super.prototype.show.call(this, duration, delay, [\"value\", \"radiusValue\"]);\n  };\n\n  return PieSeriesDataItem;\n}(PercentSeriesDataItem);\n\nexport { PieSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines [[Series]] for a slice series on a Pie chart.\r\n *\r\n * @see {@link IPieSeriesEvents} for a list of available Events\r\n * @see {@link IPieSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\n\nvar PieSeries =\n/** @class */\nfunction (_super) {\n  __extends(PieSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function PieSeries() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"PieSeries\";\n    _this.alignLabels = true; //this.startAngle = -90;\n    //this.endAngle = 270;\n\n    _this.layout = \"none\";\n    _this.labels.template.radius = percent(5);\n\n    _this.addDisposer(_this.labels.template.events.on(\"enabled\", _this.invalidate, _this, false));\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * creates slice\r\n   */\n\n\n  PieSeries.prototype.createSlice = function () {\n    return new Slice();\n  };\n  /**\r\n   * creates tick\r\n   */\n\n\n  PieSeries.prototype.createTick = function () {\n    return new PieTick();\n  };\n  /**\r\n   * creates label\r\n   */\n\n\n  PieSeries.prototype.createLabel = function () {\n    return new AxisLabelCircular();\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  PieSeries.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Pie Slice Series\");\n    }\n  };\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  PieSeries.prototype.createDataItem = function () {\n    return new PieSeriesDataItem();\n  };\n  /**\r\n   * Inits slice.\r\n   *\r\n   * @param slice to init\r\n   */\n\n\n  PieSeries.prototype.initSlice = function (slice) {\n    slice.isMeasured = false;\n    slice.defaultState.properties.scale = 1;\n    slice.observe(\"scale\", this.handleSliceScale, this);\n    slice.observe([\"dx\", \"dy\", \"x\", \"y\", \"shiftRadius\"], this.handleSliceMove, this);\n    slice.tooltipText = \"{category}: {value.percent.formatNumber('#.#')}% ({value.value})\";\n    var hoverState = slice.states.create(\"hover\");\n    hoverState.properties.scale = 1.05;\n    var defaultState = slice.defaultState;\n    defaultState.properties.shiftRadius = 0;\n    slice.togglable = true;\n    slice.events.on(\"toggled\", function (event) {\n      event.target.hideTooltip();\n    });\n    var activeState = slice.states.create(\"active\");\n    activeState.properties.shiftRadius = 0.10;\n  };\n  /**\r\n   * (Re)validates the whole series, effectively causing it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  PieSeries.prototype.validate = function () {\n    this._leftItems = [];\n    this._rightItems = [];\n    this._currentStartAngle = this.startAngle;\n    this._arcRect = $math.getArcRect(this.startAngle, this.endAngle);\n    this._maxRadiusPercent = 0;\n\n    for (var i = this.startIndex; i < this.endIndex; i++) {\n      var dataItem = this.dataItems.getIndex(i);\n      var radiusValuePercent = dataItem.values.radiusValue.percent;\n\n      if (radiusValuePercent > this._maxRadiusPercent) {\n        this._maxRadiusPercent = radiusValuePercent;\n      }\n    }\n\n    _super.prototype.validate.call(this);\n\n    if (this.alignLabels) {\n      if (this.startAngle > this.endAngle) {\n        this._rightItems.reverse();\n      } else {\n        this._leftItems.reverse();\n      }\n\n      this._rightItems.sort(function (a, b) {\n        var aAngle = (a.slice.middleAngle + 360) % 360;\n        var bAngle = (b.slice.middleAngle + 360) % 360;\n\n        if (aAngle > 270) {\n          aAngle -= 360;\n        }\n\n        if (bAngle > 270) {\n          bAngle -= 360;\n        }\n\n        if (aAngle < bAngle) {\n          return -1;\n        } else if (aAngle > bAngle) {\n          return 1;\n        } else {\n          return 0;\n        }\n      });\n\n      this._leftItems.sort(function (a, b) {\n        var aAngle = (a.slice.middleAngle + 360) % 360;\n        var bAngle = (b.slice.middleAngle + 360) % 360;\n\n        if (aAngle < bAngle) {\n          return 1;\n        } else if (aAngle > bAngle) {\n          return -1;\n        } else {\n          return 0;\n        }\n      });\n\n      this.arrangeLabels(this._rightItems);\n      this.arrangeLabels2(this._rightItems);\n      this.arrangeLabels(this._leftItems);\n      this.arrangeLabels2(this._leftItems);\n    }\n  };\n  /**\r\n   * Validates data item's element, effectively redrawing it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n\n  PieSeries.prototype.validateDataElement = function (dataItem) {\n    if (this.pixelRadius > 0) {\n      if (this.ignoreZeroValues && dataItem.value == 0) {\n        dataItem.__disabled = true;\n      } else {\n        dataItem.__disabled = false;\n      } // SLICE\n\n\n      var slice = dataItem.slice;\n      slice.radius = this.pixelRadius;\n\n      if ($type.isNumber(dataItem.radiusValue)) {\n        slice.radius = this.pixelInnerRadius + (this.pixelRadius - this.pixelInnerRadius) * dataItem.values.radiusValue.percent / this._maxRadiusPercent;\n      }\n\n      if (!(slice.innerRadius instanceof Percent)) {\n        slice.innerRadius = this.pixelInnerRadius;\n      }\n\n      slice.startAngle = this._currentStartAngle;\n      slice.arc = Math.abs(dataItem.values.value.percent) * (this.endAngle - this.startAngle) / 100; // LABEL\n\n      if (!this.labels.template.disabled) {\n        var label = dataItem.label;\n        var tick = dataItem.tick;\n        tick.slice = slice;\n        tick.label = label;\n        var normalizedMiddleAngle = (slice.middleAngle + 360) % 360; // force angle to be 0 - 360;\n\n        var point = void 0;\n\n        if (this.alignLabels) {\n          var labelRadius = label.pixelRadius(slice.radius);\n          var x = tick.length + labelRadius;\n          label.dx = 0;\n          label.dy = 0;\n          label.verticalCenter = \"middle\";\n          var arcRect = this._arcRect; // right half\n\n          if (normalizedMiddleAngle > 270 || normalizedMiddleAngle <= 90) {\n            x += (arcRect.width + arcRect.x) * this.pixelRadius;\n            label.horizontalCenter = \"left\";\n\n            this._rightItems.push(dataItem);\n          } // left half\n          else {\n              x -= arcRect.x * this.pixelRadius;\n              label.horizontalCenter = \"right\";\n\n              this._leftItems.push(dataItem);\n\n              x *= -1;\n            }\n\n          var distance = slice.radius + tick.length + labelRadius;\n          point = {\n            x: x,\n            y: slice.iy * distance\n          };\n          label.moveTo(point);\n        } else {\n          var depth = slice[\"depth\"];\n\n          if (!$type.isNumber(depth)) {\n            depth = 0;\n          }\n\n          label.fixPosition(slice.middleAngle, slice.radius, slice.radiusY, 0, -depth);\n        }\n      }\n\n      this._currentStartAngle += slice.arc; // do this at the end, otherwise bullets won't be positioned properly\n\n      _super.prototype.validateDataElement.call(this, dataItem);\n    }\n  };\n\n  Object.defineProperty(PieSeries.prototype, \"radius\", {\n    /**\r\n     * @return Radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n\n    /**\r\n     * Outer radius for the series' slices in pixels or [[Percent]].\r\n     *\r\n     * @param value  Radius\r\n     */\n    set: function (value) {\n      if (this.setPercentProperty(\"radius\", value, true, false, 10, false)) {\n        this.invalidateDataItems();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PieSeries.prototype, \"pixelRadius\", {\n    /**\r\n     * @return Radius\r\n     * @ignore\r\n     */\n    get: function () {\n      return this._pixelRadius;\n    },\n\n    /**\r\n     * @ignore\r\n     */\n    set: function (value) {\n      if (this._pixelRadius != value) {\n        this._pixelRadius = value;\n        this.invalidateDataItems();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PieSeries.prototype, \"pixelInnerRadius\", {\n    /**\r\n     * @return Pixel inner radius\r\n     * @ignore\r\n     */\n    get: function () {\n      return this._pixelInnerRadius;\n    },\n\n    /**\r\n     * @ignore\r\n     */\n    set: function (value) {\n      if (this._pixelInnerRadius != value) {\n        this._pixelInnerRadius = value;\n        this.invalidateDataItems();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PieSeries.prototype, \"innerRadius\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n\n    /**\r\n     * Inner radius for the series' slices in pixels.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Redo so that users can set it\r\n     * @param value  Radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PieSeries.prototype, \"startAngle\", {\n    /**\r\n     * @return Angle\r\n     */\n    get: function () {\n      var startAngle = this.getPropertyValue(\"startAngle\");\n\n      if ($type.isNumber(startAngle)) {\n        return startAngle;\n      } else {\n        return this._startAngleInternal;\n      }\n    },\n\n    /**\r\n     * Start angle for the series' slices in degrees. (0-360)\r\n     *\r\n     * @param value  Angle\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PieSeries.prototype, \"endAngle\", {\n    /**\r\n     * @return Angle\r\n     */\n    get: function () {\n      var endAngle = this.getPropertyValue(\"endAngle\");\n\n      if ($type.isNumber(endAngle)) {\n        return endAngle;\n      } else {\n        return this._endAngleInternal;\n      }\n    },\n\n    /**\r\n     * End angle for the series' slices in degrees. (0-360)\r\n     *\r\n     * @param value  Angle\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"endAngle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Positions series bullet.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param bullet  Bullet\r\n   */\n\n  PieSeries.prototype.positionBullet = function (bullet) {\n    _super.prototype.positionBullet.call(this, bullet);\n\n    var dataItem = bullet.dataItem;\n    var slice = dataItem.slice;\n    var locationX = bullet.locationX;\n\n    if (!$type.isNumber(locationX)) {\n      locationX = 0.5;\n    }\n\n    var locationY = bullet.locationY;\n\n    if (!$type.isNumber(locationY)) {\n      locationY = 1;\n    }\n\n    var angle = slice.startAngle + slice.arc * locationX;\n    bullet.x = locationY * slice.radius * $math.cos(angle);\n    bullet.y = locationY * slice.radiusY * $math.sin(angle);\n  };\n  /**\r\n   * Repositions bullet and labels when slice moves.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n\n\n  PieSeries.prototype.handleSliceMove = function (event) {\n    if (!this.alignLabels) {\n      var slice = event.target;\n      var dataItem = slice.dataItem; // moving textelement, as label dx and dy are already employed for aligning\n      //@labeltodo\n\n      if (dataItem) {\n        var label = dataItem.label;\n\n        if (label) {\n          label.dx = label.fdx + slice.dx + slice.pixelX;\n          label.dy = label.fdy + slice.dy + slice.pixelY;\n        }\n      }\n    }\n  };\n\n  Object.defineProperty(PieSeries.prototype, \"bbox\", {\n    /**\r\n     * Returns bounding box (square) for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    get: function () {\n      if (this.definedBBox) {\n        return this.definedBBox;\n      }\n\n      var chart = this.chart;\n\n      if (chart) {\n        return $math.getArcRect(chart.startAngle, chart.endAngle, this.pixelRadius);\n      }\n\n      return $math.getArcRect(this.startAngle, this.endAngle, this.pixelRadius);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PieSeries;\n}(PercentSeries);\n\nexport { PieSeries };\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"PieSeries\"] = PieSeries;\nregistry.registeredClasses[\"PieSeriesDataItem\"] = PieSeriesDataItem;","map":{"version":3,"sources":["../../../../../src/.internal/charts/series/PieSeries.ts"],"names":[],"mappings":"AAAA;;;;AAIA;;;;;;;AAMA,SAA2G,aAA3G,EAA0H,qBAA1H,QAAuJ,iBAAvJ;AAEA,SAAS,KAAT,QAAsB,2BAAtB,C,CACA;;AACA,SAAS,iBAAT,QAAkC,2BAAlC;AACA,SAAS,OAAT,QAAwB,qBAAxB;AAGA,SAAS,QAAT,QAAyB,qBAAzB;AAIA,OAAO,KAAK,KAAZ,MAAuB,uBAAvB;AACA,OAAO,KAAK,KAAZ,MAAuB,uBAAvB;AACA,SAAS,OAAT,EAAkB,OAAlB,QAAiC,0BAAjC;AAIA;;;;;;AAOA;;AAEA;;;;;;AAKA,IAAA,iBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAuC,EAAA,SAAA,CAAA,iBAAA,EAAA,MAAA,CAAA;AAsBtC;;;;;AAGA,WAAA,iBAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADR;;AAEC,IAAA,KAAI,CAAC,SAAL,GAAiB,mBAAjB;AAEA,IAAA,KAAI,CAAC,MAAL,CAAY,WAAZ,GAA0B,EAA1B;;AAEA,IAAA,KAAI,CAAC,UAAL;;;AACA;;AAOD,EAAA,MAAA,CAAA,cAAA,CAAW,iBAAA,CAAA,SAAX,EAAW,aAAX,EAAsB;AAItB;;;SAGA,YAAA;AACC,aAAO,KAAK,MAAL,CAAY,WAAZ,CAAwB,KAA/B;AACA,KATqB;;AALtB;;;;;SAKA,UAAuB,KAAvB,EAAoC;AACnC,WAAK,QAAL,CAAc,aAAd,EAA6B,KAA7B;AACA,KAFqB;oBAAA;;AAAA,GAAtB;AAWA;;;;;;;;;AAQO,EAAA,iBAAA,CAAA,SAAA,CAAA,IAAA,GAAP,UAAY,QAAZ,EAA+B,KAA/B,EAA+C,OAA/C,EAAiE,MAAjE,EAAkF;AACjF,WAAO,MAAA,CAAA,SAAA,CAAM,IAAN,CAAU,IAAV,CAAU,IAAV,EAAW,QAAX,EAAqB,KAArB,EAA4B,CAA5B,EAA+B,CAAC,OAAD,EAAU,aAAV,CAA/B,CAAP;AACA,GAFM;AAIP;;;;;;;;;AAOO,EAAA,iBAAA,CAAA,SAAA,CAAA,IAAA,GAAP,UAAY,QAAZ,EAA+B,KAA/B,EAA+C,MAA/C,EAAgE;AAC/D,WAAO,MAAA,CAAA,SAAA,CAAM,IAAN,CAAU,IAAV,CAAU,IAAV,EAAW,QAAX,EAAqB,KAArB,EAA4B,CAAC,OAAD,EAAU,aAAV,CAA5B,CAAP;AACA,GAFM;;AAGR,SAAA,iBAAA;AAAC,CAxED,CAAuC,qBAAvC,CAAA;;;AA+IA;;;;;;;AAOA;;;;;;;;;AAQA,IAAA,SAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA+B,EAAA,SAAA,CAAA,SAAA,EAAA,MAAA,CAAA;AAyF9B;;;;;AAGA,WAAA,SAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADR;;AAGC,IAAA,KAAI,CAAC,SAAL,GAAiB,WAAjB;AAEA,IAAA,KAAI,CAAC,WAAL,GAAmB,IAAnB,CALD,CAMC;AACA;;AAEA,IAAA,KAAI,CAAC,MAAL,GAAc,MAAd;AAEA,IAAA,KAAI,CAAC,MAAL,CAAY,QAAZ,CAAqB,MAArB,GAA8B,OAAO,CAAC,CAAD,CAArC;;AAEA,IAAA,KAAI,CAAC,WAAL,CAAiB,KAAI,CAAC,MAAL,CAAY,QAAZ,CAAqB,MAArB,CAA4B,EAA5B,CAA+B,SAA/B,EAA0C,KAAI,CAAC,UAA/C,EAA2D,KAA3D,EAAiE,KAAjE,CAAjB;;AAEA,IAAA,KAAI,CAAC,UAAL;;;AACA;AAED;;;;;AAGU,EAAA,SAAA,CAAA,SAAA,CAAA,WAAA,GAAV,YAAA;AACC,WAAO,IAAI,KAAJ,EAAP;AACA,GAFS;AAIV;;;;;AAGU,EAAA,SAAA,CAAA,SAAA,CAAA,UAAA,GAAV,YAAA;AACC,WAAO,IAAI,OAAJ,EAAP;AACA,GAFS;AAIV;;;;;AAGU,EAAA,SAAA,CAAA,SAAA,CAAA,WAAA,GAAV,YAAA;AACC,WAAO,IAAI,iBAAJ,EAAP;AACA,GAFS;AAIV;;;;;;AAIU,EAAA,SAAA,CAAA,SAAA,CAAA,qBAAA,GAAV,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,qBAAN,CAA2B,IAA3B,CAA2B,IAA3B;;AACA,QAAI,CAAC,KAAK,CAAC,QAAN,CAAe,KAAK,WAApB,CAAL,EAAuC;AACtC,WAAK,WAAL,GAAmB,KAAK,QAAL,CAAc,SAAd,CAAwB,kBAAxB,CAAnB;AACA;AACD,GALS;AAOV;;;;;;;;AAMU,EAAA,SAAA,CAAA,SAAA,CAAA,cAAA,GAAV,YAAA;AACC,WAAO,IAAI,iBAAJ,EAAP;AACA,GAFS;AAIV;;;;;;;AAKU,EAAA,SAAA,CAAA,SAAA,CAAA,SAAA,GAAV,UAAoB,KAApB,EAAyC;AACxC,IAAA,KAAK,CAAC,UAAN,GAAmB,KAAnB;AACA,IAAA,KAAK,CAAC,YAAN,CAAmB,UAAnB,CAA8B,KAA9B,GAAsC,CAAtC;AACA,IAAA,KAAK,CAAC,OAAN,CAAc,OAAd,EAAuB,KAAK,gBAA5B,EAA8C,IAA9C;AACA,IAAA,KAAK,CAAC,OAAN,CAAc,CAAC,IAAD,EAAO,IAAP,EAAa,GAAb,EAAkB,GAAlB,EAAuB,aAAvB,CAAd,EAAqD,KAAK,eAA1D,EAA2E,IAA3E;AACA,IAAA,KAAK,CAAC,WAAN,GAAoB,kEAApB;AAEA,QAAI,UAAU,GAAG,KAAK,CAAC,MAAN,CAAa,MAAb,CAAoB,OAApB,CAAjB;AACA,IAAA,UAAU,CAAC,UAAX,CAAsB,KAAtB,GAA8B,IAA9B;AAEA,QAAI,YAAY,GAAG,KAAK,CAAC,YAAzB;AACA,IAAA,YAAY,CAAC,UAAb,CAAwB,WAAxB,GAAsC,CAAtC;AAEA,IAAA,KAAK,CAAC,SAAN,GAAkB,IAAlB;AAEA,IAAA,KAAK,CAAC,MAAN,CAAa,EAAb,CAAgB,SAAhB,EAA2B,UAAC,KAAD,EAAM;AAChC,MAAA,KAAK,CAAC,MAAN,CAAa,WAAb;AACA,KAFD;AAIA,QAAI,WAAW,GAAG,KAAK,CAAC,MAAN,CAAa,MAAb,CAAoB,QAApB,CAAlB;AACA,IAAA,WAAW,CAAC,UAAZ,CAAuB,WAAvB,GAAqC,IAArC;AACA,GArBS;AAuBV;;;;;;;AAKO,EAAA,SAAA,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA;AACC,SAAK,UAAL,GAAkB,EAAlB;AACA,SAAK,WAAL,GAAmB,EAAnB;AAEA,SAAK,kBAAL,GAA0B,KAAK,UAA/B;AACA,SAAK,QAAL,GAAgB,KAAK,CAAC,UAAN,CAAiB,KAAK,UAAtB,EAAkC,KAAK,QAAvC,CAAhB;AAEA,SAAK,iBAAL,GAAyB,CAAzB;;AACA,SAAK,IAAI,CAAC,GAAG,KAAK,UAAlB,EAA8B,CAAC,GAAG,KAAK,QAAvC,EAAiD,CAAC,EAAlD,EAAsD;AACrD,UAAI,QAAQ,GAAG,KAAK,SAAL,CAAe,QAAf,CAAwB,CAAxB,CAAf;AACA,UAAI,kBAAkB,GAAG,QAAQ,CAAC,MAAT,CAAgB,WAAhB,CAA4B,OAArD;;AACA,UAAI,kBAAkB,GAAG,KAAK,iBAA9B,EAAiD;AAChD,aAAK,iBAAL,GAAyB,kBAAzB;AACA;AACD;;AAED,IAAA,MAAA,CAAA,SAAA,CAAM,QAAN,CAAc,IAAd,CAAc,IAAd;;AAEA,QAAI,KAAK,WAAT,EAAsB;AACrB,UAAI,KAAK,UAAL,GAAkB,KAAK,QAA3B,EAAqC;AACpC,aAAK,WAAL,CAAiB,OAAjB;AACA,OAFD,MAGK;AACJ,aAAK,UAAL,CAAgB,OAAhB;AACA;;AAGD,WAAK,WAAL,CAAiB,IAAjB,CAAsB,UAAC,CAAD,EAAI,CAAJ,EAAK;AAC1B,YAAI,MAAM,GAAG,CAAC,CAAC,CAAC,KAAF,CAAQ,WAAR,GAAsB,GAAvB,IAA8B,GAA3C;AACA,YAAI,MAAM,GAAG,CAAC,CAAC,CAAC,KAAF,CAAQ,WAAR,GAAsB,GAAvB,IAA8B,GAA3C;;AAEA,YAAI,MAAM,GAAG,GAAb,EAAkB;AACjB,UAAA,MAAM,IAAI,GAAV;AACA;;AAED,YAAI,MAAM,GAAG,GAAb,EAAkB;AACjB,UAAA,MAAM,IAAI,GAAV;AACA;;AAED,YAAI,MAAM,GAAG,MAAb,EAAqB;AACpB,iBAAO,CAAC,CAAR;AACA,SAFD,MAGK,IAAI,MAAM,GAAG,MAAb,EAAqB;AACzB,iBAAO,CAAP;AACA,SAFI,MAGA;AACJ,iBAAO,CAAP;AACA;AACD,OArBD;;AAuBA,WAAK,UAAL,CAAgB,IAAhB,CAAqB,UAAC,CAAD,EAAI,CAAJ,EAAK;AAEzB,YAAI,MAAM,GAAG,CAAC,CAAC,CAAC,KAAF,CAAQ,WAAR,GAAsB,GAAvB,IAA8B,GAA3C;AACA,YAAI,MAAM,GAAG,CAAC,CAAC,CAAC,KAAF,CAAQ,WAAR,GAAsB,GAAvB,IAA8B,GAA3C;;AAEA,YAAI,MAAM,GAAG,MAAb,EAAqB;AACpB,iBAAO,CAAP;AACA,SAFD,MAGK,IAAI,MAAM,GAAG,MAAb,EAAqB;AACzB,iBAAO,CAAC,CAAR;AACA,SAFI,MAGA;AACJ,iBAAO,CAAP;AACA;AACD,OAdD;;AAgBA,WAAK,aAAL,CAAmB,KAAK,WAAxB;AACA,WAAK,cAAL,CAAoB,KAAK,WAAzB;AACA,WAAK,aAAL,CAAmB,KAAK,UAAxB;AACA,WAAK,cAAL,CAAoB,KAAK,UAAzB;AACA;AACD,GAvEM;AAyEP;;;;;;;;AAMO,EAAA,SAAA,CAAA,SAAA,CAAA,mBAAA,GAAP,UAA2B,QAA3B,EAAsD;AACrD,QAAI,KAAK,WAAL,GAAmB,CAAvB,EAA0B;AAEzB,UAAI,KAAK,gBAAL,IAAyB,QAAQ,CAAC,KAAT,IAAkB,CAA/C,EAAkD;AACjD,QAAA,QAAQ,CAAC,UAAT,GAAsB,IAAtB;AACA,OAFD,MAGK;AACJ,QAAA,QAAQ,CAAC,UAAT,GAAsB,KAAtB;AACA,OAPwB,CASzB;;;AACA,UAAI,KAAK,GAAU,QAAQ,CAAC,KAA5B;AACA,MAAA,KAAK,CAAC,MAAN,GAAe,KAAK,WAApB;;AAEA,UAAI,KAAK,CAAC,QAAN,CAAe,QAAQ,CAAC,WAAxB,CAAJ,EAA0C;AACzC,QAAA,KAAK,CAAC,MAAN,GAAe,KAAK,gBAAL,GAAwB,CAAC,KAAK,WAAL,GAAmB,KAAK,gBAAzB,IAA6C,QAAQ,CAAC,MAAT,CAAgB,WAAhB,CAA4B,OAAzE,GAAmF,KAAK,iBAA/H;AACA;;AACD,UAAI,EAAE,KAAK,CAAC,WAAN,YAA6B,OAA/B,CAAJ,EAA6C;AAC5C,QAAA,KAAK,CAAC,WAAN,GAAoB,KAAK,gBAAzB;AACA;;AACD,MAAA,KAAK,CAAC,UAAN,GAAmB,KAAK,kBAAxB;AAEA,MAAA,KAAK,CAAC,GAAN,GAAY,IAAI,CAAC,GAAL,CAAS,QAAQ,CAAC,MAAT,CAAgB,KAAhB,CAAsB,OAA/B,KAA2C,KAAK,QAAL,GAAgB,KAAK,UAAhE,IAA8E,GAA1F,CArByB,CAuBzB;;AACA,UAAI,CAAC,KAAK,MAAL,CAAY,QAAZ,CAAqB,QAA1B,EAAoC;AACnC,YAAI,KAAK,GAAG,QAAQ,CAAC,KAArB;AAEA,YAAI,IAAI,GAAG,QAAQ,CAAC,IAApB;AACA,QAAA,IAAI,CAAC,KAAL,GAAa,KAAb;AACA,QAAA,IAAI,CAAC,KAAL,GAAa,KAAb;AAEA,YAAI,qBAAqB,GAAW,CAAC,KAAK,CAAC,WAAN,GAAoB,GAArB,IAA4B,GAAhE,CAPmC,CAOkC;;AAErE,YAAI,KAAK,GAAA,KAAA,CAAT;;AAEA,YAAI,KAAK,WAAT,EAAsB;AACrB,cAAI,WAAW,GAAG,KAAK,CAAC,WAAN,CAAkB,KAAK,CAAC,MAAxB,CAAlB;AACA,cAAI,CAAC,GAAW,IAAI,CAAC,MAAL,GAAc,WAA9B;AACA,UAAA,KAAK,CAAC,EAAN,GAAW,CAAX;AACA,UAAA,KAAK,CAAC,EAAN,GAAW,CAAX;AACA,UAAA,KAAK,CAAC,cAAN,GAAuB,QAAvB;AACA,cAAI,OAAO,GAAG,KAAK,QAAnB,CANqB,CAOrB;;AACA,cAAI,qBAAqB,GAAG,GAAxB,IAA+B,qBAAqB,IAAI,EAA5D,EAAgE;AAC/D,YAAA,CAAC,IAAI,CAAC,OAAO,CAAC,KAAR,GAAgB,OAAO,CAAC,CAAzB,IAA8B,KAAK,WAAxC;AACA,YAAA,KAAK,CAAC,gBAAN,GAAyB,MAAzB;;AACA,iBAAK,WAAL,CAAiB,IAAjB,CAAsB,QAAtB;AACA,WAJD,CAKA;AALA,eAMK;AACJ,cAAA,CAAC,IAAI,OAAO,CAAC,CAAR,GAAY,KAAK,WAAtB;AACA,cAAA,KAAK,CAAC,gBAAN,GAAyB,OAAzB;;AACA,mBAAK,UAAL,CAAgB,IAAhB,CAAqB,QAArB;;AACA,cAAA,CAAC,IAAI,CAAC,CAAN;AACA;;AAED,cAAI,QAAQ,GAAG,KAAK,CAAC,MAAN,GAAe,IAAI,CAAC,MAApB,GAA6B,WAA5C;AACA,UAAA,KAAK,GAAG;AAAE,YAAA,CAAC,EAAE,CAAL;AAAQ,YAAA,CAAC,EAAE,KAAK,CAAC,EAAN,GAAW;AAAtB,WAAR;AACA,UAAA,KAAK,CAAC,MAAN,CAAa,KAAb;AACA,SAxBD,MAyBK;AACJ,cAAI,KAAK,GAAS,KAAM,CAAC,OAAD,CAAxB;;AACA,cAAI,CAAC,KAAK,CAAC,QAAN,CAAe,KAAf,CAAL,EAA4B;AAC3B,YAAA,KAAK,GAAG,CAAR;AACA;;AACD,UAAA,KAAK,CAAC,WAAN,CAAkB,KAAK,CAAC,WAAxB,EAAqC,KAAK,CAAC,MAA3C,EAAmD,KAAK,CAAC,OAAzD,EAAkE,CAAlE,EAAqE,CAAC,KAAtE;AACA;AACD;;AAED,WAAK,kBAAL,IAA2B,KAAK,CAAC,GAAjC,CArEyB,CAuEzB;;AACA,MAAA,MAAA,CAAA,SAAA,CAAM,mBAAN,CAAyB,IAAzB,CAAyB,IAAzB,EAA0B,QAA1B;AACA;AACD,GA3EM;;AAkFP,EAAA,MAAA,CAAA,cAAA,CAAW,SAAA,CAAA,SAAX,EAAW,QAAX,EAAiB;AAMjB;;;SAGA,YAAA;AACC,aAAO,KAAK,gBAAL,CAAsB,QAAtB,CAAP;AACA,KAXgB;;AALjB;;;;;SAKA,UAAkB,KAAlB,EAAyC;AACxC,UAAI,KAAK,kBAAL,CAAwB,QAAxB,EAAkC,KAAlC,EAAyC,IAAzC,EAA+C,KAA/C,EAAsD,EAAtD,EAA0D,KAA1D,CAAJ,EAAsE;AACrE,aAAK,mBAAL;AACA;AACD,KAJgB;oBAAA;;AAAA,GAAjB;AAiBA,EAAA,MAAA,CAAA,cAAA,CAAW,SAAA,CAAA,SAAX,EAAW,aAAX,EAAsB;AAJtB;;;;SAIA,YAAA;AACC,aAAO,KAAK,YAAZ;AACA,KAFqB;;AAItB;;;SAGA,UAAuB,KAAvB,EAAoC;AACnC,UAAI,KAAK,YAAL,IAAqB,KAAzB,EAAgC;AAC/B,aAAK,YAAL,GAAoB,KAApB;AACA,aAAK,mBAAL;AACA;AACD,KAZqB;oBAAA;;AAAA,GAAtB;AAkBA,EAAA,MAAA,CAAA,cAAA,CAAW,SAAA,CAAA,SAAX,EAAW,kBAAX,EAA2B;AAJ3B;;;;SAIA,YAAA;AACC,aAAO,KAAK,iBAAZ;AACA,KAF0B;;AAI3B;;;SAGA,UAA4B,KAA5B,EAAyC;AACxC,UAAI,KAAK,iBAAL,IAA0B,KAA9B,EAAqC;AACpC,aAAK,iBAAL,GAAyB,KAAzB;AACA,aAAK,mBAAL;AACA;AACD,KAZ0B;oBAAA;;AAAA,GAA3B;AAqBA,EAAA,MAAA,CAAA,cAAA,CAAW,SAAA,CAAA,SAAX,EAAW,aAAX,EAAsB;AAItB;;;;SAIA,YAAA;AACC,aAAO,KAAK,gBAAL,CAAsB,aAAtB,CAAP;AACA,KAVqB;;AAPtB;;;;;;;SAOA,UAAuB,KAAvB,EAA8C;AAC7C,WAAK,kBAAL,CAAwB,aAAxB,EAAuC,KAAvC,EAA8C,IAA9C,EAAoD,KAApD,EAA2D,EAA3D,EAA+D,KAA/D;AACA,KAFqB;oBAAA;;AAAA,GAAtB;AAiBA,EAAA,MAAA,CAAA,cAAA,CAAW,SAAA,CAAA,SAAX,EAAW,YAAX,EAAqB;AAIrB;;;SAGA,YAAA;AACC,UAAI,UAAU,GAAG,KAAK,gBAAL,CAAsB,YAAtB,CAAjB;;AACA,UAAI,KAAK,CAAC,QAAN,CAAe,UAAf,CAAJ,EAAgC;AAC/B,eAAO,UAAP;AACA,OAFD,MAGK;AACJ,eAAO,KAAK,mBAAZ;AACA;AACD,KAfoB;;AALrB;;;;;SAKA,UAAsB,KAAtB,EAAmC;AAClC,WAAK,gBAAL,CAAsB,YAAtB,EAAoC,KAAK,CAAC,cAAN,CAAqB,KAArB,CAApC,EAAiE,IAAjE;AACA,KAFoB;oBAAA;;AAAA,GAArB;AAsBA,EAAA,MAAA,CAAA,cAAA,CAAW,SAAA,CAAA,SAAX,EAAW,UAAX,EAAmB;AAInB;;;SAGA,YAAA;AACC,UAAI,QAAQ,GAAG,KAAK,gBAAL,CAAsB,UAAtB,CAAf;;AACA,UAAI,KAAK,CAAC,QAAN,CAAe,QAAf,CAAJ,EAA8B;AAC7B,eAAO,QAAP;AACA,OAFD,MAGK;AACJ,eAAO,KAAK,iBAAZ;AACA;AACD,KAfkB;;AALnB;;;;;SAKA,UAAoB,KAApB,EAAiC;AAChC,WAAK,gBAAL,CAAsB,UAAtB,EAAkC,KAAlC,EAAyC,IAAzC;AACA,KAFkB;oBAAA;;AAAA,GAAnB;AAkBA;;;;;;;AAMO,EAAA,SAAA,CAAA,SAAA,CAAA,cAAA,GAAP,UAAsB,MAAtB,EAAoC;AACnC,IAAA,MAAA,CAAA,SAAA,CAAM,cAAN,CAAoB,IAApB,CAAoB,IAApB,EAAqB,MAArB;;AAEA,QAAI,QAAQ,GAAyC,MAAM,CAAC,QAA5D;AACA,QAAI,KAAK,GAAU,QAAQ,CAAC,KAA5B;AAEA,QAAI,SAAS,GAAG,MAAM,CAAC,SAAvB;;AACA,QAAI,CAAC,KAAK,CAAC,QAAN,CAAe,SAAf,CAAL,EAAgC;AAC/B,MAAA,SAAS,GAAG,GAAZ;AACA;;AACD,QAAI,SAAS,GAAG,MAAM,CAAC,SAAvB;;AACA,QAAI,CAAC,KAAK,CAAC,QAAN,CAAe,SAAf,CAAL,EAAgC;AAC/B,MAAA,SAAS,GAAG,CAAZ;AACA;;AAED,QAAI,KAAK,GAAG,KAAK,CAAC,UAAN,GAAmB,KAAK,CAAC,GAAN,GAAY,SAA3C;AAEA,IAAA,MAAM,CAAC,CAAP,GAAW,SAAS,GAAG,KAAK,CAAC,MAAlB,GAA2B,KAAK,CAAC,GAAN,CAAU,KAAV,CAAtC;AACA,IAAA,MAAM,CAAC,CAAP,GAAW,SAAS,GAAG,KAAK,CAAC,OAAlB,GAA4B,KAAK,CAAC,GAAN,CAAU,KAAV,CAAvC;AACA,GAnBM;AAsBP;;;;;;;;AAMU,EAAA,SAAA,CAAA,SAAA,CAAA,eAAA,GAAV,UAA0B,KAA1B,EAA0F;AACzF,QAAI,CAAC,KAAK,WAAV,EAAuB;AAEtB,UAAI,KAAK,GAAG,KAAK,CAAC,MAAlB;AACA,UAAI,QAAQ,GAAyC,KAAK,CAAC,QAA3D,CAHsB,CAItB;AACA;;AACA,UAAI,QAAJ,EAAc;AACb,YAAI,KAAK,GAAG,QAAQ,CAAC,KAArB;;AACA,YAAI,KAAJ,EAAW;AACV,UAAA,KAAK,CAAC,EAAN,GAAW,KAAK,CAAC,GAAN,GAAY,KAAK,CAAC,EAAlB,GAAuB,KAAK,CAAC,MAAxC;AACA,UAAA,KAAK,CAAC,EAAN,GAAW,KAAK,CAAC,GAAN,GAAY,KAAK,CAAC,EAAlB,GAAuB,KAAK,CAAC,MAAxC;AACA;AACD;AACD;AACD,GAfS;;AAuBV,EAAA,MAAA,CAAA,cAAA,CAAW,SAAA,CAAA,SAAX,EAAW,MAAX,EAAe;AALf;;;;;SAKA,YAAA;AACC,UAAI,KAAK,WAAT,EAAsB;AACrB,eAAO,KAAK,WAAZ;AACA;;AACD,UAAI,KAAK,GAAG,KAAK,KAAjB;;AACA,UAAI,KAAJ,EAAW;AACV,eAAO,KAAK,CAAC,UAAN,CAAiB,KAAK,CAAC,UAAvB,EAAmC,KAAK,CAAC,QAAzC,EAAmD,KAAK,WAAxD,CAAP;AACA;;AAED,aAAO,KAAK,CAAC,UAAN,CAAiB,KAAK,UAAtB,EAAkC,KAAK,QAAvC,EAAiD,KAAK,WAAtD,CAAP;AACA,KAVc;oBAAA;;AAAA,GAAf;AAWD,SAAA,SAAA;AAAC,CA/gBD,CAA+B,aAA/B,CAAA;;;AAihBA;;;;;;;AAMA,QAAQ,CAAC,iBAAT,CAA2B,WAA3B,IAA0C,SAA1C;AACA,QAAQ,CAAC,iBAAT,CAA2B,mBAA3B,IAAkD,iBAAlD","sourcesContent":["/**\r\n * Defines Pie Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPercentSeriesAdapters, IPercentSeriesDataFields, IPercentSeriesEvents, IPercentSeriesProperties, PercentSeries, PercentSeriesDataItem } from \"./PercentSeries\";\r\nimport { ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\n//import { Slice3D } from \"../../core/elements/3D/Slice3D\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { PieTick } from \"../elements/PieTick\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { PieChart } from \"../types/PieChart\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeriesDataItem extends PercentSeriesDataItem {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t */\r\n\tpublic _slice: Slice;\r\n\r\n\t/**\r\n\t * A reference to a slice label element.\r\n\t */\r\n\tpublic _label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * A reference to a slice tick element.\r\n\t */\r\n\tpublic _tick: PieTick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PieSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeriesDataItem\";\r\n\r\n\t\tthis.values.radiusValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice's radius, if other than default.\r\n\t *\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set radiusValue(value: number) {\r\n\t\tthis.setValue(\"radiusValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get radiusValue(): number {\r\n\t\treturn this.values.radiusValue.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Hide the data item (and corresponding visual elements).\r\n\t *\r\n\t * @param duration  Duration (ms)\r\n\t * @param delay     Delay hiding (ms)\r\n\t * @param toValue   Target value for animation\r\n\t * @param fields    Fields to animate while hiding\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\treturn super.hide(duration, delay, 0, [\"value\", \"radiusValue\"]);\r\n\t}\r\n\r\n\t/**\r\n\t * Show hidden data item (and corresponding visual elements).\r\n\t *\r\n\t * @param duration  Duration (ms)\r\n\t * @param delay     Delay hiding (ms)\r\n\t * @param fields    Fields to animate while hiding\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\treturn super.show(duration, delay, [\"value\", \"radiusValue\"]);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesDataFields extends IPercentSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds item's radius value.\r\n\t */\r\n\tradiusValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesProperties extends IPercentSeriesProperties {\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t */\r\n\tendAngle?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesEvents extends IPercentSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeriesAdapters extends IPercentSeriesAdapters, IPieSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a Pie chart.\r\n *\r\n * @see {@link IPieSeriesEvents} for a list of available Events\r\n * @see {@link IPieSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries extends PercentSeries {\r\n\r\n\tpublic _slice: Slice;\r\n\r\n\tpublic _tick: PieTick;\r\n\r\n\tpublic _label: AxisLabelCircular;\r\n\r\n\tpublic _chart: PieChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPieSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PieSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds current angle for the next slice to start on.\r\n\t */\r\n\tprotected _currentStartAngle: number;\r\n\r\n\t/**\r\n\t * Data items that fall to the left side of the pie.\r\n\t */\r\n\tprotected _leftItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * Data items that fall to the right side of the pie.\r\n\t */\r\n\tprotected _rightItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * [_arcRect description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _arcRect: IRectangle;\r\n\r\n\t/**\r\n\t * [_maxRadiusPercent description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _maxRadiusPercent: number;\r\n\r\n\t/**\r\n\t * [_pixelRadius description]\r\n\t *\r\n\t * @ignore this is set by pie chart, not by user\r\n\t */\r\n\tprotected _pixelRadius: number;\r\n\r\n\t/**\r\n\t * [_pixelInnerRadius description]\r\n\t *\r\n\t * @ignore this is set by pie chart, not by user\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _startAngleInternal: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _endAngleInternal: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PieSeries\";\r\n\r\n\t\tthis.alignLabels = true;\r\n\t\t//this.startAngle = -90;\r\n\t\t//this.endAngle = 270;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.labels.template.radius = percent(5);\r\n\r\n\t\tthis.addDisposer(this.labels.template.events.on(\"enabled\", this.invalidate, this, false));\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * creates slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Slice();\r\n\t}\r\n\r\n\t/**\r\n\t * creates tick\r\n\t */\r\n\tprotected createTick(): this[\"_tick\"] {\r\n\t\treturn new PieTick();\r\n\t}\r\n\r\n\t/**\r\n\t * creates label\r\n\t */\r\n\tprotected createLabel(): this[\"_label\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie Slice Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits slice.\r\n\t *\r\n\t * @param slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tslice.isMeasured = false;\r\n\t\tslice.defaultState.properties.scale = 1;\r\n\t\tslice.observe(\"scale\", this.handleSliceScale, this);\r\n\t\tslice.observe([\"dx\", \"dy\", \"x\", \"y\", \"shiftRadius\"], this.handleSliceMove, this);\r\n\t\tslice.tooltipText = \"{category}: {value.percent.formatNumber('#.#')}% ({value.value})\";\r\n\r\n\t\tlet hoverState = slice.states.create(\"hover\");\r\n\t\thoverState.properties.scale = 1.05;\r\n\r\n\t\tlet defaultState = slice.defaultState;\r\n\t\tdefaultState.properties.shiftRadius = 0;\r\n\r\n\t\tslice.togglable = true;\r\n\r\n\t\tslice.events.on(\"toggled\", (event) => {\r\n\t\t\tevent.target.hideTooltip();\r\n\t\t});\r\n\r\n\t\tlet activeState = slice.states.create(\"active\");\r\n\t\tactiveState.properties.shiftRadius = 0.10;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tthis._leftItems = [];\r\n\t\tthis._rightItems = [];\r\n\r\n\t\tthis._currentStartAngle = this.startAngle;\r\n\t\tthis._arcRect = $math.getArcRect(this.startAngle, this.endAngle);\r\n\r\n\t\tthis._maxRadiusPercent = 0;\r\n\t\tfor (let i = this.startIndex; i < this.endIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet radiusValuePercent = dataItem.values.radiusValue.percent;\r\n\t\t\tif (radiusValuePercent > this._maxRadiusPercent) {\r\n\t\t\t\tthis._maxRadiusPercent = radiusValuePercent;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tif (this.startAngle > this.endAngle) {\r\n\t\t\t\tthis._rightItems.reverse();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._leftItems.reverse()\r\n\t\t\t}\r\n\r\n\r\n\t\t\tthis._rightItems.sort((a, b) => {\r\n\t\t\t\tlet aAngle = (a.slice.middleAngle + 360) % 360;\r\n\t\t\t\tlet bAngle = (b.slice.middleAngle + 360) % 360;\r\n\r\n\t\t\t\tif (aAngle > 270) {\r\n\t\t\t\t\taAngle -= 360;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (bAngle > 270) {\r\n\t\t\t\t\tbAngle -= 360;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (aAngle < bAngle) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if (aAngle > bAngle) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tthis._leftItems.sort((a, b) => {\r\n\r\n\t\t\t\tlet aAngle = (a.slice.middleAngle + 360) % 360;\r\n\t\t\t\tlet bAngle = (b.slice.middleAngle + 360) % 360;\r\n\r\n\t\t\t\tif (aAngle < bAngle) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if (aAngle > bAngle) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tthis.arrangeLabels(this._rightItems);\r\n\t\t\tthis.arrangeLabels2(this._rightItems);\r\n\t\t\tthis.arrangeLabels(this._leftItems);\r\n\t\t\tthis.arrangeLabels2(this._leftItems);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tif (this.pixelRadius > 0) {\r\n\r\n\t\t\tif (this.ignoreZeroValues && dataItem.value == 0) {\r\n\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t}\r\n\r\n\t\t\t// SLICE\r\n\t\t\tlet slice: Slice = dataItem.slice;\r\n\t\t\tslice.radius = this.pixelRadius;\r\n\r\n\t\t\tif ($type.isNumber(dataItem.radiusValue)) {\r\n\t\t\t\tslice.radius = this.pixelInnerRadius + (this.pixelRadius - this.pixelInnerRadius) * dataItem.values.radiusValue.percent / this._maxRadiusPercent;\r\n\t\t\t}\r\n\t\t\tif (!(slice.innerRadius instanceof Percent)) {\r\n\t\t\t\tslice.innerRadius = this.pixelInnerRadius;\r\n\t\t\t}\r\n\t\t\tslice.startAngle = this._currentStartAngle;\r\n\r\n\t\t\tslice.arc = Math.abs(dataItem.values.value.percent) * (this.endAngle - this.startAngle) / 100;\r\n\r\n\t\t\t// LABEL\r\n\t\t\tif (!this.labels.template.disabled) {\r\n\t\t\t\tlet label = dataItem.label;\r\n\r\n\t\t\t\tlet tick = dataItem.tick;\r\n\t\t\t\ttick.slice = slice;\r\n\t\t\t\ttick.label = label;\r\n\r\n\t\t\t\tlet normalizedMiddleAngle: number = (slice.middleAngle + 360) % 360; // force angle to be 0 - 360;\r\n\r\n\t\t\t\tlet point: IPoint;\r\n\r\n\t\t\t\tif (this.alignLabels) {\r\n\t\t\t\t\tlet labelRadius = label.pixelRadius(slice.radius);\r\n\t\t\t\t\tlet x: number = tick.length + labelRadius;\r\n\t\t\t\t\tlabel.dx = 0;\r\n\t\t\t\t\tlabel.dy = 0;\r\n\t\t\t\t\tlabel.verticalCenter = \"middle\";\r\n\t\t\t\t\tlet arcRect = this._arcRect;\r\n\t\t\t\t\t// right half\r\n\t\t\t\t\tif (normalizedMiddleAngle > 270 || normalizedMiddleAngle <= 90) {\r\n\t\t\t\t\t\tx += (arcRect.width + arcRect.x) * this.pixelRadius;\r\n\t\t\t\t\t\tlabel.horizontalCenter = \"left\";\r\n\t\t\t\t\t\tthis._rightItems.push(dataItem);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// left half\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tx -= arcRect.x * this.pixelRadius;\r\n\t\t\t\t\t\tlabel.horizontalCenter = \"right\";\r\n\t\t\t\t\t\tthis._leftItems.push(dataItem);\r\n\t\t\t\t\t\tx *= -1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet distance = slice.radius + tick.length + labelRadius;\r\n\t\t\t\t\tpoint = { x: x, y: slice.iy * distance };\r\n\t\t\t\t\tlabel.moveTo(point);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet depth = (<any>slice)[\"depth\"];\r\n\t\t\t\t\tif (!$type.isNumber(depth)) {\r\n\t\t\t\t\t\tdepth = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlabel.fixPosition(slice.middleAngle, slice.radius, slice.radiusY, 0, -depth);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis._currentStartAngle += slice.arc;\r\n\r\n\t\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\t\tsuper.validateDataElement(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels or [[Percent]].\r\n\t *\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"radius\", value, true, false, 10, false)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t * @ignore\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn this._pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set pixelRadius(value: number) {\r\n\t\tif (this._pixelRadius != value) {\r\n\t\t\tthis._pixelRadius = value;\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pixel inner radius\r\n\t * @ignore\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set pixelInnerRadius(value: number) {\r\n\t\tif (this._pixelInnerRadius != value) {\r\n\t\t\tthis._pixelInnerRadius = value;\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\tlet startAngle = this.getPropertyValue(\"startAngle\");\r\n\t\tif ($type.isNumber(startAngle)) {\r\n\t\t\treturn startAngle;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._startAngleInternal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\tlet endAngle = this.getPropertyValue(\"endAngle\");\r\n\t\tif ($type.isNumber(endAngle)) {\r\n\t\t\treturn endAngle;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._endAngleInternal;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice: Slice = dataItem.slice;\r\n\r\n\t\tlet locationX = bullet.locationX;\r\n\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\tlocationX = 0.5;\r\n\t\t}\r\n\t\tlet locationY = bullet.locationY;\r\n\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\tlocationY = 1;\r\n\t\t}\r\n\r\n\t\tlet angle = slice.startAngle + slice.arc * locationX;\r\n\r\n\t\tbullet.x = locationY * slice.radius * $math.cos(angle);\r\n\t\tbullet.y = locationY * slice.radiusY * $math.sin(angle);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Repositions bullet and labels when slice moves.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSliceMove(event: AMEvent<this[\"_slice\"], ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (!this.alignLabels) {\r\n\r\n\t\t\tlet slice = event.target;\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\t\t// moving textelement, as label dx and dy are already employed for aligning\r\n\t\t\t//@labeltodo\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet label = dataItem.label;\r\n\t\t\t\tif (label) {\r\n\t\t\t\t\tlabel.dx = label.fdx + slice.dx + slice.pixelX;\r\n\t\t\t\t\tlabel.dy = label.fdy + slice.dy + slice.pixelY;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\tif (this.definedBBox) {\r\n\t\t\treturn this.definedBBox;\r\n\t\t}\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\treturn $math.getArcRect(chart.startAngle, chart.endAngle, this.pixelRadius);\r\n\t\t}\r\n\r\n\t\treturn $math.getArcRect(this.startAngle, this.endAngle, this.pixelRadius);\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries\"] = PieSeries;\r\nregistry.registeredClasses[\"PieSeriesDataItem\"] = PieSeriesDataItem;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}