{"ast":null,"code":"/**\r\n * A collection of utility functions for various type checks and conversion\r\n * @todo Review unused functions for removal\r\n * @hidden\r\n */\n\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { percent, isPercent } from \"./Percent\";\n/**\r\n * ============================================================================\r\n * TYPE CHECK\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Returns `true` if value is not a number (NaN).\r\n *\r\n * @param value Input value\r\n * @return Is NaN?\r\n * @deprecated Is not used anywhere. JS built-in isNaN is used everywhere. Maybe we don't need this, or if we do, then we should use it everywhere\r\n */\n\nexport function isNaN(value) {\n  return Number(value) !== value;\n}\n/**\r\n * Returns a type of the value.\r\n *\r\n * @param value  Input value\r\n * @return Type of the value\r\n */\n\nexport function getType(value) {\n  return {}.toString.call(value);\n}\n/**\r\n * Returns a default value if the passed in value is empty.\r\n *\r\n * @param value     Input value\r\n * @param optional  Default value\r\n * @return Value or default value whichever is available\r\n * @deprecated Not used anywhere\r\n */\n\nexport function getDefault(value, optional) {\n  return value || optional;\n}\n/**\r\n * Checks if the passed in value is a string.\r\n *\r\n * @param value  Value\r\n * @return Is string?\r\n * @throws {Error}\r\n * @deprecated Not used anywhere\r\n */\n\nexport function checkString(value) {\n  if (typeof value === \"string\") {\n    return true;\n  } else {\n    throw new Error(\"Expected a string but got \" + getType(value));\n  }\n}\n/**\r\n * Checks if the passed in value is a boolean.\r\n *\r\n * @param value  Value\r\n * @return Is boolean?\r\n * @throws {Error}\r\n * @deprecated Not used anywhere\r\n */\n\nexport function checkBoolean(value) {\n  if (typeof value === \"boolean\") {\n    return true;\n  } else {\n    throw new Error(\"Expected a boolean but got \" + getType(value));\n  }\n}\n/**\r\n * Checks if the passed in value is a number.\r\n *\r\n * @param value  Value\r\n * @return Is number?\r\n * @throws {Error}\r\n */\n\nexport function checkNumber(value) {\n  if (typeof value === \"number\") {\n    if (isNaN(value)) {\n      throw new Error(\"Expected a number but got NaN\");\n    }\n  } else {\n    throw new Error(\"Expected a number but got \" + getType(value));\n  }\n\n  return true;\n}\n/**\r\n * Checks if the passed in value is an object.\r\n *\r\n * @param value  Value\r\n * @return Is object?\r\n * @throws {Error}\r\n * @todo Is the input type correct?\r\n * @deprecated Not used anywhere\r\n */\n\nexport function checkObject(value) {\n  var t = getType(value);\n\n  if (t === \"[object Object]\") {\n    return true;\n  } else {\n    throw new Error(\"Expected an object but got \" + t);\n  }\n}\n/**\r\n * Checks if the passed in value is an array.\r\n *\r\n * @param value  Value\r\n * @return Is array?\r\n * @throws {Error}\r\n * @deprecated Not used anywhere\r\n */\n\nexport function checkArray(value) {\n  if (Array.isArray(value)) {\n    return true;\n  } else {\n    throw new Error(\"Expected an array but got \" + getType(value));\n  }\n}\n/**\r\n * Checks if the passed in value is a Date object.\r\n *\r\n * @param value  Value\r\n * @return Is Date object?\r\n * @throws {Error}\r\n * @deprecated Not used anywhere\r\n */\n\nexport function checkDate(value) {\n  var t = getType(value);\n\n  if (t === \"[object Date]\") {\n    return true;\n  } else {\n    throw new Error(\"Expected a date but got \" + t);\n  }\n}\n/**\r\n * ============================================================================\r\n * TYPE CASTING\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Casts string or a number into string.\r\n *\r\n * @param value  Input\r\n * @return String value\r\n * @deprecated Not used anywhere\r\n */\n\nexport function castString(value) {\n  if (typeof value === \"string\") {\n    return value;\n  } else if (typeof value === \"number\") {\n    return \"\" + value;\n  } else {\n    throw new Error(\"Expected a string or number but got \" + getType(value));\n  }\n}\n/**\r\n * Casts string or a number into a number.\r\n *\r\n * @param value   Input value\r\n * @return Number  value\r\n * @throws {Error}\r\n */\n\nexport function castNumber(value) {\n  if (typeof value === \"string\") {\n    var number = +value;\n\n    if (isNaN(number)) {\n      throw new Error(\"Cannot cast string \" + JSON.stringify(value) + \" to a number\");\n    } else {\n      return number;\n    }\n  } else if (typeof value === \"number\") {\n    if (isNaN(value)) {\n      throw new Error(\"Expected a number but got NaN\");\n    } else {\n      return value;\n    }\n  } else {\n    var t = getType(value);\n\n    if (t === \"[object Date]\") {\n      return value.getTime();\n    } else {\n      throw new Error(\"Expected a string, number, or date but got \" + t);\n    }\n  }\n}\n/**\r\n * Casts number, string or Date into a Date object.\r\n *\r\n * @param value  Input value\r\n * @return Date object\r\n * @deprecated Not used anywhere\r\n * @throws {Error}\r\n * @hidden\r\n * @deprecated\r\n */\n\n/*export function castDate(value: string | number | Date, formatter?: DateFormatter): Date {\r\n    if (typeof value === \"string\") {\r\n        if (formatter) {\r\n            return formatter.parse(value);\r\n        }\r\n        return new Date(value);\r\n\r\n    } else if (typeof value === \"number\") {\r\n        return new Date(value);\r\n\r\n    } else {\r\n        const t = getType(value);\r\n\r\n        if (t === \"[object Date]\") {\r\n            return value;\r\n\r\n        } else {\r\n            throw new Error(\"Expected a string, number, or date but got \" + t);\r\n        }\r\n    }\r\n}*/\n\n/**\r\n * ============================================================================\r\n * QUICK CONVERSION\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Converts any value into `boolean`.\r\n *\r\n * @param value  Source value\r\n * @return `true` or `false`\r\n */\n\nexport function toBoolean(value) {\n  return value ? true : false;\n}\n/**\r\n * Converts any value into a `number`.\r\n *\r\n * @param value  Source value\r\n * @return Number representation of value\r\n */\n\nexport function toNumber(value) {\n  if (hasValue(value) && !isNumber(value)) {\n    var converted = Number(value);\n\n    if (isNaN(converted) && isString(value) && value != \"\") {\n      return toNumber(value.replace(/[^0-9.\\-]+/g, ''));\n    }\n\n    return converted;\n  }\n\n  return value;\n}\n/**\r\n * Converts any value into a string (text).\r\n *\r\n * @param value  Source value\r\n * @return String representation of the input\r\n */\n\nexport function toText(value) {\n  if (hasValue(value) && !isString(value)) {\n    if (isNumber(value)) {\n      return castString(value);\n    } else if (isObject(value)) {\n      return value.toString();\n    }\n  }\n\n  return value;\n}\n/**\r\n * Converts any value to a number or [[Percent]].\r\n *\r\n * If the parameter is a string and contains \"%\", it will\r\n * convert it into a [[Percent]].\r\n *\r\n * Otherwise, it will convert into a number.\r\n *\r\n * @param value  Number or percent\r\n * @return Percent object\r\n */\n\nexport function toNumberOrPercent(value) {\n  if (!hasValue(value) || isNumber(value) || isPercent(value)) {\n    return value;\n  }\n\n  if (isString(value) && value.indexOf(\"%\") != -1) {\n    return percent(toNumber(value));\n  }\n\n  return toNumber(value);\n}\n/**\r\n * Checks if a variable has a value.\r\n *\r\n * @param a  Input value\r\n * @returns                        Has value?\r\n */\n\nexport function hasValue(a) {\n  return a != null;\n}\n/**\r\n * Returns a value or throws an {Error} exception if the variable has not\r\n * value.\r\n *\r\n * @param a  Input value\r\n * @returns                        Value\r\n */\n\nexport function getValue(a) {\n  if (hasValue(a)) {\n    return a;\n  } else {\n    throw new Error(\"Value doesn't exist\");\n  }\n}\n/**\r\n * Returns a value, or returns the default value if it doesn't have a value.\r\n *\r\n * @param a  Input value\r\n * @returns                        Value\r\n */\n\nexport function getValueDefault(a, defaultValue) {\n  if (hasValue(a)) {\n    return a;\n  } else {\n    return defaultValue;\n  }\n}\n/**\r\n * ============================================================================\r\n * TYPE CHECK\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Checks if parameter is `Date`.\r\n *\r\n * @param value  Input value\r\n * @return Is Date?\r\n */\n\nexport function isDate(value) {\n  return getType(value) === \"[object Date]\";\n}\n/**\r\n * Checks if parameter is `string`.\r\n *\r\n * @param value  Input value\r\n * @return Is string?\r\n */\n\nexport function isString(value) {\n  return typeof value === \"string\";\n}\n/**\r\n * Checks if parameter is `number`.\r\n *\r\n * @param value  Input value\r\n * @return Is number?\r\n */\n\nexport function isNumber(value) {\n  return typeof value === \"number\" && Number(value) == value;\n}\n/**\r\n * Checks if parameter is `object`.\r\n *\r\n * @param value  Input value\r\n * @return Is object?\r\n */\n\nexport function isObject(value) {\n  return typeof value === \"object\" && value != null;\n}\n/**\r\n * Checks if parameter is `Array`.\r\n *\r\n * @param value  Input value\r\n * @return Is Array?\r\n */\n\nexport function isArray(value) {\n  return Array.isArray(value);\n}","map":{"version":3,"sources":["../../../../../src/.internal/core/utils/Type.ts"],"names":[],"mappings":"AAAA;;;;;;AAMA;;;;;;AAMA,SAAS,OAAT,EAA2B,SAA3B,QAA4C,WAA5C;AAiBA;;;;;;;AAOA;;;;;;;;AAOA,OAAM,SAAU,KAAV,CAAgB,KAAhB,EAA6B;AAClC,SAAO,MAAM,CAAC,KAAD,CAAN,KAAkB,KAAzB;AACA;AAaD;;;;;;;AAMA,OAAM,SAAU,OAAV,CAAqB,KAArB,EAA6B;AAClC,SAAQ,EAAD,CAAK,QAAL,CAAc,IAAd,CAAmB,KAAnB,CAAP;AACA;AAED;;;;;;;;;AAQA,OAAM,SAAU,UAAV,CAAwB,KAAxB,EAAqD,QAArD,EAAgE;AACrE,SAAO,KAAK,IAAI,QAAhB;AACA;AAED;;;;;;;;;AAQA,OAAM,SAAU,WAAV,CAAsB,KAAtB,EAAgC;AACrC,MAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC9B,WAAO,IAAP;AACA,GAFD,MAEO;AACN,UAAM,IAAI,KAAJ,CAAU,+BAA+B,OAAO,CAAC,KAAD,CAAhD,CAAN;AACA;AACD;AAED;;;;;;;;;AAQA,OAAM,SAAU,YAAV,CAAuB,KAAvB,EAAiC;AACtC,MAAI,OAAO,KAAP,KAAiB,SAArB,EAAgC;AAC/B,WAAO,IAAP;AACA,GAFD,MAEO;AACN,UAAM,IAAI,KAAJ,CAAU,gCAAgC,OAAO,CAAC,KAAD,CAAjD,CAAN;AACA;AACD;AAED;;;;;;;;AAOA,OAAM,SAAU,WAAV,CAAsB,KAAtB,EAAgC;AACrC,MAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC9B,QAAI,KAAK,CAAC,KAAD,CAAT,EAAkB;AACjB,YAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN;AACA;AACD,GAJD,MAIO;AACN,UAAM,IAAI,KAAJ,CAAU,+BAA+B,OAAO,CAAC,KAAD,CAAhD,CAAN;AACA;;AACD,SAAO,IAAP;AACA;AAED;;;;;;;;;;AASA,OAAM,SAAU,WAAV,CAAsB,KAAtB,EAA+B;AACpC,MAAM,CAAC,GAAG,OAAO,CAAC,KAAD,CAAjB;;AAEA,MAAI,CAAC,KAAK,iBAAV,EAA6B;AAC5B,WAAO,IAAP;AAEA,GAHD,MAGO;AACN,UAAM,IAAI,KAAJ,CAAU,gCAAgC,CAA1C,CAAN;AACA;AACD;AAED;;;;;;;;;AAQA,OAAM,SAAU,UAAV,CAAwB,KAAxB,EAAuC;AAC5C,MAAI,KAAK,CAAC,OAAN,CAAc,KAAd,CAAJ,EAA0B;AACzB,WAAO,IAAP;AAEA,GAHD,MAGO;AACN,UAAM,IAAI,KAAJ,CAAU,+BAA+B,OAAO,CAAC,KAAD,CAAhD,CAAN;AACA;AACD;AAED;;;;;;;;;AAQA,OAAM,SAAU,SAAV,CAAoB,KAApB,EAA+B;AACpC,MAAM,CAAC,GAAG,OAAO,CAAC,KAAD,CAAjB;;AAEA,MAAI,CAAC,KAAK,eAAV,EAA2B;AAC1B,WAAO,IAAP;AAEA,GAHD,MAGO;AACN,UAAM,IAAI,KAAJ,CAAU,6BAA6B,CAAvC,CAAN;AACA;AACD;AAGD;;;;;;;AAOA;;;;;;;;AAOA,OAAM,SAAU,UAAV,CAAqB,KAArB,EAA2C;AAChD,MAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC9B,WAAO,KAAP;AAEA,GAHD,MAGO,IAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AACrC,WAAO,KAAK,KAAZ;AAEA,GAHM,MAGA;AACN,UAAM,IAAI,KAAJ,CAAU,yCAAyC,OAAO,CAAC,KAAD,CAA1D,CAAN;AACA;AACD;AAED;;;;;;;;AAOA,OAAM,SAAU,UAAV,CAAqB,KAArB,EAAkD;AACvD,MAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC9B,QAAM,MAAM,GAAG,CAAC,KAAhB;;AAEA,QAAI,KAAK,CAAC,MAAD,CAAT,EAAmB;AAClB,YAAM,IAAI,KAAJ,CAAU,wBAAwB,IAAI,CAAC,SAAL,CAAe,KAAf,CAAxB,GAAgD,cAA1D,CAAN;AAEA,KAHD,MAGO;AACN,aAAO,MAAP;AACA;AAED,GAVD,MAUO,IAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AACrC,QAAI,KAAK,CAAC,KAAD,CAAT,EAAkB;AACjB,YAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN;AAEA,KAHD,MAGO;AACN,aAAO,KAAP;AACA;AAED,GARM,MAQA;AACN,QAAM,CAAC,GAAG,OAAO,CAAC,KAAD,CAAjB;;AAEA,QAAI,CAAC,KAAK,eAAV,EAA2B;AAC1B,aAAO,KAAK,CAAC,OAAN,EAAP;AAEA,KAHD,MAGO;AACN,YAAM,IAAI,KAAJ,CAAU,gDAAgD,CAA1D,CAAN;AACA;AACD;AACD;AAED;;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;AAQA;;;;;;;AAMA,OAAM,SAAU,SAAV,CAAoB,KAApB,EAA8B;AACnC,SAAO,KAAK,GAAG,IAAH,GAAU,KAAtB;AACA;AAED;;;;;;;AAMA,OAAM,SAAU,QAAV,CAAmB,KAAnB,EAA6B;AAClC,MAAI,QAAQ,CAAC,KAAD,CAAR,IAAmB,CAAC,QAAQ,CAAC,KAAD,CAAhC,EAAyC;AACxC,QAAI,SAAS,GAAG,MAAM,CAAC,KAAD,CAAtB;;AACA,QAAI,KAAK,CAAC,SAAD,CAAL,IAAoB,QAAQ,CAAC,KAAD,CAA5B,IAAuC,KAAK,IAAI,EAApD,EAAwD;AACvD,aAAO,QAAQ,CAAC,KAAK,CAAC,OAAN,CAAc,aAAd,EAA6B,EAA7B,CAAD,CAAf;AACA;;AACD,WAAO,SAAP;AACA;;AACD,SAAO,KAAP;AACA;AAED;;;;;;;AAMA,OAAM,SAAU,MAAV,CAAiB,KAAjB,EAA2B;AAChC,MAAI,QAAQ,CAAC,KAAD,CAAR,IAAmB,CAAC,QAAQ,CAAC,KAAD,CAAhC,EAAyC;AACxC,QAAI,QAAQ,CAAC,KAAD,CAAZ,EAAqB;AACpB,aAAO,UAAU,CAAC,KAAD,CAAjB;AACA,KAFD,MAGK,IAAI,QAAQ,CAAC,KAAD,CAAZ,EAAqB;AACzB,aAAO,KAAK,CAAC,QAAN,EAAP;AACA;AACD;;AACD,SAAO,KAAP;AACA;AAED;;;;;;;;;;;;AAWA,OAAM,SAAU,iBAAV,CAA4B,KAA5B,EAAsC;AAC3C,MAAI,CAAC,QAAQ,CAAC,KAAD,CAAT,IAAoB,QAAQ,CAAC,KAAD,CAA5B,IAAuC,SAAS,CAAC,KAAD,CAApD,EAA6D;AAC5D,WAAO,KAAP;AACA;;AACD,MAAI,QAAQ,CAAC,KAAD,CAAR,IAAmB,KAAK,CAAC,OAAN,CAAc,GAAd,KAAsB,CAAC,CAA9C,EAAiD;AAChD,WAAO,OAAO,CAAC,QAAQ,CAAC,KAAD,CAAT,CAAd;AACA;;AACD,SAAO,QAAQ,CAAC,KAAD,CAAf;AACA;AAeD;;;;;;;AAMA,OAAM,SAAU,QAAV,CAAsB,CAAtB,EAA2C;AAChD,SAAO,CAAC,IAAI,IAAZ;AACA;AAED;;;;;;;;AAOA,OAAM,SAAU,QAAV,CAAsB,CAAtB,EAA2C;AAChD,MAAI,QAAQ,CAAC,CAAD,CAAZ,EAAiB;AAChB,WAAO,CAAP;AAEA,GAHD,MAGO;AACN,UAAM,IAAI,KAAJ,CAAU,qBAAV,CAAN;AACA;AACD;AAED;;;;;;;AAMA,OAAM,SAAU,eAAV,CAA6B,CAA7B,EAAoD,YAApD,EAAmE;AACxE,MAAI,QAAQ,CAAC,CAAD,CAAZ,EAAiB;AAChB,WAAO,CAAP;AAEA,GAHD,MAGO;AACN,WAAO,YAAP;AACA;AACD;AAGD;;;;;;;AAOA;;;;;;;AAMA,OAAM,SAAU,MAAV,CAAiB,KAAjB,EAA2B;AAChC,SAAO,OAAO,CAAC,KAAD,CAAP,KAAmB,eAA1B;AACA;AAED;;;;;;;AAMA,OAAM,SAAU,QAAV,CAAmB,KAAnB,EAA6B;AAClC,SAAO,OAAO,KAAP,KAAiB,QAAxB;AACA;AAED;;;;;;;AAMA,OAAM,SAAU,QAAV,CAAmB,KAAnB,EAA6B;AAClC,SAAO,OAAO,KAAP,KAAiB,QAAjB,IAA6B,MAAM,CAAC,KAAD,CAAN,IAAiB,KAArD;AACA;AAED;;;;;;;AAMA,OAAM,SAAU,QAAV,CAAmB,KAAnB,EAA6B;AAClC,SAAO,OAAO,KAAP,KAAiB,QAAjB,IAA6B,KAAK,IAAI,IAA7C;AACA;AAED;;;;;;;AAMA,OAAM,SAAU,OAAV,CAAkB,KAAlB,EAA4B;AACjC,SAAO,KAAK,CAAC,OAAN,CAAc,KAAd,CAAP;AACA","sourcesContent":["/**\r\n * A collection of utility functions for various type checks and conversion\r\n * @todo Review unused functions for removal\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { percent, Percent, isPercent } from \"./Percent\";\r\n\r\n\r\n/**\r\n * @todo Description\r\n * @ignore Exclude from docs\r\n */\r\nexport type Public<T> = {[P in keyof T]: T[P]};\r\n\r\n\r\n/**\r\n * `Keyof<T>` is the same as `keyof T` except it only accepts string keys, not numbers or symbols.\r\n */\r\nexport type Keyof<T> = Extract<keyof T, string>;\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * TYPE CHECK\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Returns `true` if value is not a number (NaN).\r\n *\r\n * @param value Input value\r\n * @return Is NaN?\r\n * @deprecated Is not used anywhere. JS built-in isNaN is used everywhere. Maybe we don't need this, or if we do, then we should use it everywhere\r\n */\r\nexport function isNaN(value: number): boolean {\r\n\treturn Number(value) !== value;\r\n}\r\n\r\n/**\r\n * Represents a type for all available JavaScript variable types.\r\n */\r\nexport type Type\r\n\t= \"[object Object]\"\r\n\t| \"[object Array]\"\r\n\t| \"[object String]\"\r\n\t| \"[object Number]\"\r\n\t| \"[object Boolean]\"\r\n\t| \"[object Date]\";\r\n\r\n/**\r\n * Returns a type of the value.\r\n *\r\n * @param value  Input value\r\n * @return Type of the value\r\n */\r\nexport function getType<A>(value: A): Type {\r\n\treturn ({}).toString.call(value) as Type;\r\n}\r\n\r\n/**\r\n * Returns a default value if the passed in value is empty.\r\n *\r\n * @param value     Input value\r\n * @param optional  Default value\r\n * @return Value or default value whichever is available\r\n * @deprecated Not used anywhere\r\n */\r\nexport function getDefault<A>(value: null | undefined | A, optional: A): A {\r\n\treturn value || optional;\r\n}\r\n\r\n/**\r\n * Checks if the passed in value is a string.\r\n *\r\n * @param value  Value\r\n * @return Is string?\r\n * @throws {Error}\r\n * @deprecated Not used anywhere\r\n */\r\nexport function checkString(value: any): value is string {\r\n\tif (typeof value === \"string\") {\r\n\t\treturn true;\r\n\t} else {\r\n\t\tthrow new Error(\"Expected a string but got \" + getType(value));\r\n\t}\r\n}\r\n\r\n/**\r\n * Checks if the passed in value is a boolean.\r\n *\r\n * @param value  Value\r\n * @return Is boolean?\r\n * @throws {Error}\r\n * @deprecated Not used anywhere\r\n */\r\nexport function checkBoolean(value: any): value is boolean {\r\n\tif (typeof value === \"boolean\") {\r\n\t\treturn true;\r\n\t} else {\r\n\t\tthrow new Error(\"Expected a boolean but got \" + getType(value));\r\n\t}\r\n}\r\n\r\n/**\r\n * Checks if the passed in value is a number.\r\n *\r\n * @param value  Value\r\n * @return Is number?\r\n * @throws {Error}\r\n */\r\nexport function checkNumber(value: any): value is number {\r\n\tif (typeof value === \"number\") {\r\n\t\tif (isNaN(value)) {\r\n\t\t\tthrow new Error(\"Expected a number but got NaN\");\r\n\t\t}\r\n\t} else {\r\n\t\tthrow new Error(\"Expected a number but got \" + getType(value));\r\n\t}\r\n\treturn true;\r\n}\r\n\r\n/**\r\n * Checks if the passed in value is an object.\r\n *\r\n * @param value  Value\r\n * @return Is object?\r\n * @throws {Error}\r\n * @todo Is the input type correct?\r\n * @deprecated Not used anywhere\r\n */\r\nexport function checkObject(value: {}): value is {} {\r\n\tconst t = getType(value);\r\n\r\n\tif (t === \"[object Object]\") {\r\n\t\treturn true;\r\n\r\n\t} else {\r\n\t\tthrow new Error(\"Expected an object but got \" + t);\r\n\t}\r\n}\r\n\r\n/**\r\n * Checks if the passed in value is an array.\r\n *\r\n * @param value  Value\r\n * @return Is array?\r\n * @throws {Error}\r\n * @deprecated Not used anywhere\r\n */\r\nexport function checkArray<A>(value: Array<A>): value is Array<A> {\r\n\tif (Array.isArray(value)) {\r\n\t\treturn true;\r\n\r\n\t} else {\r\n\t\tthrow new Error(\"Expected an array but got \" + getType(value));\r\n\t}\r\n}\r\n\r\n/**\r\n * Checks if the passed in value is a Date object.\r\n *\r\n * @param value  Value\r\n * @return Is Date object?\r\n * @throws {Error}\r\n * @deprecated Not used anywhere\r\n */\r\nexport function checkDate(value: Date): value is Date {\r\n\tconst t = getType(value);\r\n\r\n\tif (t === \"[object Date]\") {\r\n\t\treturn true;\r\n\r\n\t} else {\r\n\t\tthrow new Error(\"Expected a date but got \" + t);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * TYPE CASTING\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Casts string or a number into string.\r\n *\r\n * @param value  Input\r\n * @return String value\r\n * @deprecated Not used anywhere\r\n */\r\nexport function castString(value: string | number): string {\r\n\tif (typeof value === \"string\") {\r\n\t\treturn value;\r\n\r\n\t} else if (typeof value === \"number\") {\r\n\t\treturn \"\" + value;\r\n\r\n\t} else {\r\n\t\tthrow new Error(\"Expected a string or number but got \" + getType(value));\r\n\t}\r\n}\r\n\r\n/**\r\n * Casts string or a number into a number.\r\n *\r\n * @param value   Input value\r\n * @return Number  value\r\n * @throws {Error}\r\n */\r\nexport function castNumber(value: string | number | Date): number {\r\n\tif (typeof value === \"string\") {\r\n\t\tconst number = +value;\r\n\r\n\t\tif (isNaN(number)) {\r\n\t\t\tthrow new Error(\"Cannot cast string \" + JSON.stringify(value) + \" to a number\");\r\n\r\n\t\t} else {\r\n\t\t\treturn number;\r\n\t\t}\r\n\r\n\t} else if (typeof value === \"number\") {\r\n\t\tif (isNaN(value)) {\r\n\t\t\tthrow new Error(\"Expected a number but got NaN\");\r\n\r\n\t\t} else {\r\n\t\t\treturn value;\r\n\t\t}\r\n\r\n\t} else {\r\n\t\tconst t = getType(value);\r\n\r\n\t\tif (t === \"[object Date]\") {\r\n\t\t\treturn value.getTime();\r\n\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Expected a string, number, or date but got \" + t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Casts number, string or Date into a Date object.\r\n *\r\n * @param value  Input value\r\n * @return Date object\r\n * @deprecated Not used anywhere\r\n * @throws {Error}\r\n * @hidden\r\n * @deprecated\r\n */\r\n/*export function castDate(value: string | number | Date, formatter?: DateFormatter): Date {\r\n\tif (typeof value === \"string\") {\r\n\t\tif (formatter) {\r\n\t\t\treturn formatter.parse(value);\r\n\t\t}\r\n\t\treturn new Date(value);\r\n\r\n\t} else if (typeof value === \"number\") {\r\n\t\treturn new Date(value);\r\n\r\n\t} else {\r\n\t\tconst t = getType(value);\r\n\r\n\t\tif (t === \"[object Date]\") {\r\n\t\t\treturn value;\r\n\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Expected a string, number, or date but got \" + t);\r\n\t\t}\r\n\t}\r\n}*/\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * QUICK CONVERSION\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n\r\n/**\r\n * Converts any value into `boolean`.\r\n *\r\n * @param value  Source value\r\n * @return `true` or `false`\r\n */\r\nexport function toBoolean(value: any): boolean {\r\n\treturn value ? true : false;\r\n}\r\n\r\n/**\r\n * Converts any value into a `number`.\r\n *\r\n * @param value  Source value\r\n * @return Number representation of value\r\n */\r\nexport function toNumber(value: any): number {\r\n\tif (hasValue(value) && !isNumber(value)) {\r\n\t\tlet converted = Number(value);\r\n\t\tif (isNaN(converted) && isString(value) && value != \"\") {\r\n\t\t\treturn toNumber(value.replace(/[^0-9.\\-]+/g, ''));\r\n\t\t}\r\n\t\treturn converted;\r\n\t}\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * Converts any value into a string (text).\r\n *\r\n * @param value  Source value\r\n * @return String representation of the input\r\n */\r\nexport function toText(value: any): string {\r\n\tif (hasValue(value) && !isString(value)) {\r\n\t\tif (isNumber(value)) {\r\n\t\t\treturn castString(value);\r\n\t\t}\r\n\t\telse if (isObject(value)) {\r\n\t\t\treturn value.toString();\r\n\t\t}\r\n\t}\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * Converts any value to a number or [[Percent]].\r\n *\r\n * If the parameter is a string and contains \"%\", it will\r\n * convert it into a [[Percent]].\r\n *\r\n * Otherwise, it will convert into a number.\r\n *\r\n * @param value  Number or percent\r\n * @return Percent object\r\n */\r\nexport function toNumberOrPercent(value: any): number | Percent {\r\n\tif (!hasValue(value) || isNumber(value) || isPercent(value)) {\r\n\t\treturn value;\r\n\t}\r\n\tif (isString(value) && value.indexOf(\"%\") != -1) {\r\n\t\treturn percent(toNumber(value));\r\n\t}\r\n\treturn toNumber(value);\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * VALUE PRESENCE CHECK\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines an optional value that can be of any type or `undefined`.\r\n */\r\nexport type Optional<A> = A | undefined;\r\n\r\n/**\r\n * Checks if a variable has a value.\r\n *\r\n * @param a  Input value\r\n * @returns                        Has value?\r\n */\r\nexport function hasValue<A>(a: Optional<A> | null): a is A {\r\n\treturn a != null;\r\n}\r\n\r\n/**\r\n * Returns a value or throws an {Error} exception if the variable has not\r\n * value.\r\n *\r\n * @param a  Input value\r\n * @returns                        Value\r\n */\r\nexport function getValue<A>(a: Optional<A> | null): A {\r\n\tif (hasValue(a)) {\r\n\t\treturn a;\r\n\r\n\t} else {\r\n\t\tthrow new Error(\"Value doesn't exist\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns a value, or returns the default value if it doesn't have a value.\r\n *\r\n * @param a  Input value\r\n * @returns                        Value\r\n */\r\nexport function getValueDefault<A>(a: Optional<A> | null, defaultValue: A): A {\r\n\tif (hasValue(a)) {\r\n\t\treturn a;\r\n\r\n\t} else {\r\n\t\treturn defaultValue;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * TYPE CHECK\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Checks if parameter is `Date`.\r\n *\r\n * @param value  Input value\r\n * @return Is Date?\r\n */\r\nexport function isDate(value: any): value is Date {\r\n\treturn getType(value) === \"[object Date]\";\r\n}\r\n\r\n/**\r\n * Checks if parameter is `string`.\r\n *\r\n * @param value  Input value\r\n * @return Is string?\r\n */\r\nexport function isString(value: any): value is string {\r\n\treturn typeof value === \"string\";\r\n}\r\n\r\n/**\r\n * Checks if parameter is `number`.\r\n *\r\n * @param value  Input value\r\n * @return Is number?\r\n */\r\nexport function isNumber(value: any): value is number {\r\n\treturn typeof value === \"number\" && Number(value) == value;\r\n}\r\n\r\n/**\r\n * Checks if parameter is `object`.\r\n *\r\n * @param value  Input value\r\n * @return Is object?\r\n */\r\nexport function isObject(value: any): value is object {\r\n\treturn typeof value === \"object\" && value != null;\r\n}\r\n\r\n/**\r\n * Checks if parameter is `Array`.\r\n *\r\n * @param value  Input value\r\n * @return Is Array?\r\n */\r\nexport function isArray(value: any): value is Array<any> {\r\n\treturn Array.isArray(value);\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}