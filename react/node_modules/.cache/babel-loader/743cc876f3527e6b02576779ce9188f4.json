{"ast":null,"code":"/**\r\n * SankeyLink module\r\n */\nimport { __extends } from \"tslib\";\nimport { FlowDiagramLink } from \"./FlowDiagramLink\";\nimport { registry } from \"../../core/Registry\";\nimport { Polyspline } from \"../../core/elements/Polyspline\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Sankey Diagram.\r\n *\r\n * @see {@link ISankeyLinkEvents} for a list of available events\r\n * @see {@link ISankeyLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar SankeyLink =\n/** @class */\nfunction (_super) {\n  __extends(SankeyLink, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function SankeyLink() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"SankeyLink\"; // TODO can this be removed ?\n\n    new InterfaceColorSet();\n    _this.tension = 0.8;\n    _this.controlPointDistance = 0.2;\n    _this.startAngle = 0;\n    _this.endAngle = 0;\n    _this.linkWidth = 0;\n    _this.startX = 0;\n    _this.endX = 0;\n    _this.startY = 0;\n    _this.endY = 0;\n    _this.middleLine = _this.createChild(Polyspline);\n    _this.middleLine.shouldClone = false;\n    _this.middleLine.strokeOpacity = 0;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * (Re)validates (redraws) the link.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  SankeyLink.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n\n    if (!this.isTemplate) {\n      var x0 = this.startX;\n      var y0 = this.startY;\n      var x1 = this.endX;\n      var y1 = this.endY;\n\n      if (!$type.isNumber(x1)) {\n        x1 = x0;\n      }\n\n      if (!$type.isNumber(y1)) {\n        y1 = y0;\n      }\n\n      var startAngle = this.startAngle;\n      var endAngle = this.endAngle;\n      var w = this.linkWidth;\n      var path = \"\";\n      var xt0 = x0;\n      var yt0 = y0;\n      var xt1 = x1;\n      var yt1 = y1;\n      var xb0 = x0 + w * $math.sin(startAngle);\n      var xb1 = x1 + w * $math.sin(endAngle);\n      var yb0 = y0 + w * $math.cos(startAngle);\n      var yb1 = y1 + w * $math.cos(endAngle);\n      var xm0 = x0 + w / 2 * $math.sin(startAngle);\n      var xm1 = x1 + w / 2 * $math.sin(endAngle);\n      var ym0 = y0 + w / 2 * $math.cos(startAngle);\n      var ym1 = y1 + w / 2 * $math.cos(endAngle);\n      this.zIndex = this.zIndex || this.dataItem.index;\n      var tensionX = this.tension + (1 - this.tension) * $math.sin(startAngle);\n      var tensionY = this.tension + (1 - this.tension) * $math.cos(startAngle);\n      this.middleLine.tensionX = tensionX;\n      this.middleLine.tensionY = tensionY;\n\n      if ($type.isNumber(w) && $type.isNumber(x0) && $type.isNumber(x1) && $type.isNumber(y0) && $type.isNumber(y1)) {\n        // solves issues with gradient fill of straight lines\n        if ($math.round(xt0, 3) == $math.round(xt1, 3)) {\n          xt1 += 0.01;\n        }\n\n        if ($math.round(yt0, 3) == $math.round(yt1, 3)) {\n          yt1 += 0.01;\n        }\n\n        if ($math.round(xb0, 3) == $math.round(xb1, 3)) {\n          xb1 += 0.01;\n        }\n\n        if ($math.round(yb0, 3) == $math.round(yb1, 3)) {\n          yb1 += 0.01;\n        }\n\n        var minX = Math.min(xb0, xb1, xt0, xt1);\n        var minY = Math.min(yb0, yb1, yt0, yt1);\n        var maxX = Math.max(xb0, xb1, xt0, xt1);\n        var maxY = Math.max(yb0, yb1, yt0, yt1);\n        this._bbox = {\n          x: minX,\n          y: minY,\n          width: maxX - minX,\n          height: maxY - minY\n        };\n        var cpd = this.controlPointDistance;\n        var kxt0 = xt0 + (xt1 - xt0) * cpd * $math.cos(startAngle);\n        var kyt0 = yt0 + (yt1 - yt0) * cpd * $math.sin(startAngle);\n        var kxt1 = xt1 - (xt1 - xt0) * cpd * $math.cos(endAngle);\n        var kyt1 = yt1 - (yt1 - yt0) * cpd * $math.sin(endAngle);\n        var kxm0 = xm0 + (xm1 - xm0) * cpd * $math.cos(startAngle);\n        var kym0 = ym0 + (ym1 - ym0) * cpd * $math.sin(startAngle);\n        var kxm1 = xm1 - (xm1 - xm0) * cpd * $math.cos(endAngle);\n        var kym1 = ym1 - (ym1 - ym0) * cpd * $math.sin(endAngle);\n        var angle = $math.getAngle({\n          x: kxt0,\n          y: kyt0\n        }, {\n          x: kxt1,\n          y: kyt1\n        });\n        var dx = (w / $math.cos(angle) - w) / $math.tan(angle) * $math.cos(startAngle);\n        var dy = (w / $math.sin(angle) - w) * $math.tan(angle) * $math.sin(startAngle);\n        var kxb0 = -dx / 2 + xb0 + (xb1 - xb0) * cpd * $math.cos(startAngle);\n        var kyb0 = -dy / 2 + yb0 + (yb1 - yb0) * cpd * $math.sin(startAngle);\n        var kxb1 = -dx / 2 + xb1 - (xb1 - xb0) * cpd * $math.cos(endAngle);\n        var kyb1 = -dy / 2 + yb1 - (yb1 - yb0) * cpd * $math.sin(endAngle);\n        this.middleLine.segments = [[{\n          x: xm0,\n          y: ym0\n        }, {\n          x: kxm0,\n          y: kym0\n        }, {\n          x: kxm1,\n          y: kym1\n        }, {\n          x: xm1,\n          y: ym1\n        }]];\n        kxt0 += dx / 2;\n        kyt0 += dy / 2;\n        kxt1 += dx / 2;\n        kyt1 += dy / 2;\n        path += $path.moveTo({\n          x: xt0,\n          y: yt0\n        });\n        path += new $smoothing.Tension(tensionX, tensionY).smooth([{\n          x: xt0,\n          y: yt0\n        }, {\n          x: kxt0,\n          y: kyt0\n        }, {\n          x: kxt1,\n          y: kyt1\n        }, {\n          x: xt1,\n          y: yt1\n        }]);\n        path += $path.lineTo({\n          x: xb1,\n          y: yb1\n        });\n        path += new $smoothing.Tension(tensionX, tensionY).smooth([{\n          x: xb1,\n          y: yb1\n        }, {\n          x: kxb1,\n          y: kyb1\n        }, {\n          x: kxb0,\n          y: kyb0\n        }, {\n          x: xb0,\n          y: yb0\n        }]);\n        path += $path.closePath();\n      }\n\n      this.link.path = path;\n\n      if (this.maskBullets) {\n        this.bulletsMask.path = path;\n        this.bulletsContainer.mask = this.bulletsMask;\n      }\n\n      this.positionBullets();\n    }\n  };\n\n  Object.defineProperty(SankeyLink.prototype, \"startX\", {\n    /**\r\n     * @return Start X\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startX\");\n    },\n\n    /**\r\n     * [startX description]\r\n     *\r\n     * @todo Description\r\n     * @param value  Start X\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"startX\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SankeyLink.prototype, \"endX\", {\n    /**\r\n     * @return End X\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endX\");\n    },\n\n    /**\r\n     * [endX description]\r\n     *\r\n     * @todo Description\r\n     * @param value  End X\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"endX\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SankeyLink.prototype, \"startY\", {\n    /**\r\n     * @return Start Y\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startY\");\n    },\n\n    /**\r\n     * [startY description]\r\n     *\r\n     * @todo Description\r\n     * @param value  Start Y\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"startY\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SankeyLink.prototype, \"endY\", {\n    /**\r\n     * @return End Y\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endY\");\n    },\n\n    /**\r\n     * [endY description]\r\n     *\r\n     * @todo Description\r\n     * @param value End Y\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"endY\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SankeyLink.prototype, \"linkWidth\", {\n    /**\r\n     * @return [description]\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"linkWidth\");\n    },\n\n    /**\r\n     * [linkWidth description]\r\n     *\r\n     * @todo Description\r\n     * @param value [description]\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"linkWidth\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SankeyLink.prototype, \"controlPointDistance\", {\n    /**\r\n     * @return relative control point distance\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"controlPointDistance\");\n    },\n\n    /**\r\n     * Distance of control point of a link, defines relative distance from a node at which linke should bend\r\n     * @default 0.2\r\n     * @param value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"controlPointDistance\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SankeyLink.prototype, \"tension\", {\n    /**\r\n     * @return tension value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tension\");\n    },\n\n    /**\r\n     * Tension of a spline, 1 would make the link to have sharp edges\r\n     * @default 0.8\r\n     * @param value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tension\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return SankeyLink;\n}(FlowDiagramLink);\n\nexport { SankeyLink };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"SankeyLink\"] = SankeyLink;","map":{"version":3,"sources":["../../../../../src/.internal/charts/elements/SankeyLink.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * SankeyLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SankeyDiagramDataItem } from \"../types/SankeyDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Polyspline } from \"../../core/elements/Polyspline\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SankeyLink]].\r\n */\r\nexport interface ISankeyLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [tension description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * [startX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartX?: number;\r\n\r\n\t/**\r\n\t * [startY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartY?: number;\r\n\r\n\t/**\r\n\t * [endX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendX?: number;\r\n\r\n\t/**\r\n\t * [endY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendY?: number;\r\n\r\n\t/**\r\n\t * [linkWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tlinkWidth?: number;\r\n\r\n\t/**\r\n\t * [controlPointDistance description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tcontrolPointDistance?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[SankeyLink]].\r\n */\r\nexport interface ISankeyLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SankeyLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISankeyLinkAdapters extends IFlowDiagramLinkAdapters, ISankeyLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Sankey Diagram.\r\n *\r\n * @see {@link ISankeyLinkEvents} for a list of available events\r\n * @see {@link ISankeyLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SankeyLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISankeyLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISankeyLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISankeyLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t */\r\n\tpublic _dataItem: SankeyDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n\t */\r\n\tpublic middleLine: Polyspline;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyLink\";\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\tnew InterfaceColorSet();\r\n\r\n\t\tthis.tension = 0.8;\r\n\t\tthis.controlPointDistance = 0.2;\r\n\r\n\t\tthis.startAngle = 0;\r\n\t\tthis.endAngle = 0;\r\n\r\n\t\tthis.linkWidth = 0;\r\n\r\n\t\tthis.startX = 0;\r\n\t\tthis.endX = 0;\r\n\r\n\t\tthis.startY = 0;\r\n\t\tthis.endY = 0;\r\n\r\n\t\tthis.middleLine = this.createChild(Polyspline);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\r\n\t\t\tlet x0 = this.startX\r\n\t\t\tlet y0 = this.startY;\r\n\t\t\tlet x1 = this.endX;\r\n\t\t\tlet y1 = this.endY;\r\n\r\n\t\t\tif (!$type.isNumber(x1)) {\r\n\t\t\t\tx1 = x0;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(y1)) {\r\n\t\t\t\ty1 = y0;\r\n\t\t\t}\r\n\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet w = this.linkWidth;\r\n\r\n\t\t\tlet path = \"\";\r\n\r\n\t\t\tlet xt0 = x0;\r\n\t\t\tlet yt0 = y0;\r\n\r\n\t\t\tlet xt1 = x1;\r\n\t\t\tlet yt1 = y1;\r\n\r\n\t\t\tlet xb0 = x0 + w * $math.sin(startAngle);\r\n\t\t\tlet xb1 = x1 + w * $math.sin(endAngle);\r\n\r\n\t\t\tlet yb0 = y0 + w * $math.cos(startAngle);\r\n\t\t\tlet yb1 = y1 + w * $math.cos(endAngle);\r\n\r\n\t\t\tlet xm0 = x0 + w / 2 * $math.sin(startAngle);\r\n\t\t\tlet xm1 = x1 + w / 2 * $math.sin(endAngle);\r\n\r\n\t\t\tlet ym0 = y0 + w / 2 * $math.cos(startAngle);\r\n\t\t\tlet ym1 = y1 + w / 2 * $math.cos(endAngle);\r\n\r\n\t\t\tthis.zIndex = this.zIndex || this.dataItem.index;\r\n\r\n\t\t\tlet tensionX = this.tension + (1 - this.tension) * $math.sin(startAngle);\r\n\t\t\tlet tensionY = this.tension + (1 - this.tension) * $math.cos(startAngle);\r\n\r\n\t\t\tthis.middleLine.tensionX = tensionX;\r\n\t\t\tthis.middleLine.tensionY = tensionY;\r\n\r\n\t\t\tif ($type.isNumber(w) && ($type.isNumber(x0) && $type.isNumber(x1) && $type.isNumber(y0) && $type.isNumber(y1))) {\r\n\r\n\t\t\t\t// solves issues with gradient fill of straight lines\r\n\t\t\t\tif ($math.round(xt0, 3) == $math.round(xt1, 3)) {\r\n\t\t\t\t\txt1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.round(yt0, 3) == $math.round(yt1, 3)) {\r\n\t\t\t\t\tyt1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.round(xb0, 3) == $math.round(xb1, 3)) {\r\n\t\t\t\t\txb1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.round(yb0, 3) == $math.round(yb1, 3)) {\r\n\t\t\t\t\tyb1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet minX = Math.min(xb0, xb1, xt0, xt1);\r\n\t\t\t\tlet minY = Math.min(yb0, yb1, yt0, yt1);\r\n\t\t\t\tlet maxX = Math.max(xb0, xb1, xt0, xt1);\r\n\t\t\t\tlet maxY = Math.max(yb0, yb1, yt0, yt1);\r\n\r\n\t\t\t\tthis._bbox = {\r\n\t\t\t\t\tx: minX,\r\n\t\t\t\t\ty: minY,\r\n\t\t\t\t\twidth: maxX - minX,\r\n\t\t\t\t\theight: maxY - minY\r\n\t\t\t\t};\r\n\r\n\t\t\t\tlet cpd = this.controlPointDistance;\r\n\r\n\t\t\t\tlet kxt0 = xt0 + (xt1 - xt0) * cpd * $math.cos(startAngle);\r\n\t\t\t\tlet kyt0 = yt0 + (yt1 - yt0) * cpd * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxt1 = xt1 - (xt1 - xt0) * cpd * $math.cos(endAngle);\r\n\t\t\t\tlet kyt1 = yt1 - (yt1 - yt0) * cpd * $math.sin(endAngle);\r\n\r\n\t\t\t\tlet kxm0 = xm0 + (xm1 - xm0) * cpd * $math.cos(startAngle);\r\n\t\t\t\tlet kym0 = ym0 + (ym1 - ym0) * cpd * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxm1 = xm1 - (xm1 - xm0) * cpd * $math.cos(endAngle);\r\n\t\t\t\tlet kym1 = ym1 - (ym1 - ym0) * cpd * $math.sin(endAngle);\r\n\r\n\t\t\t\tlet angle = $math.getAngle({ x: kxt0, y: kyt0 }, { x: kxt1, y: kyt1 });\r\n\r\n\t\t\t\tlet dx = (w / $math.cos(angle) - w) / $math.tan(angle) * $math.cos(startAngle);\r\n\t\t\t\tlet dy = (w / $math.sin(angle) - w) * $math.tan(angle) * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxb0 = -dx / 2 + xb0 + (xb1 - xb0) * cpd * $math.cos(startAngle);\r\n\t\t\t\tlet kyb0 = -dy / 2 + yb0 + (yb1 - yb0) * cpd * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxb1 = -dx / 2 + xb1 - (xb1 - xb0) * cpd * $math.cos(endAngle);\r\n\t\t\t\tlet kyb1 = -dy / 2 + yb1 - (yb1 - yb0) * cpd * $math.sin(endAngle);\r\n\r\n\r\n\t\t\t\tthis.middleLine.segments = [[{ x: xm0, y: ym0 }, { x: kxm0, y: kym0 }, { x: kxm1, y: kym1 }, { x: xm1, y: ym1 }]];\r\n\r\n\t\t\t\tkxt0 += dx / 2;\r\n\t\t\t\tkyt0 += dy / 2;\r\n\r\n\t\t\t\tkxt1 += dx / 2;\r\n\t\t\t\tkyt1 += dy / 2;\r\n\r\n\t\t\t\tpath += $path.moveTo({ x: xt0, y: yt0 });\r\n\t\t\t\tpath += new $smoothing.Tension(tensionX, tensionY).smooth([{ x: xt0, y: yt0 }, { x: kxt0, y: kyt0 }, { x: kxt1, y: kyt1 }, { x: xt1, y: yt1 }]);\r\n\t\t\t\tpath += $path.lineTo({ x: xb1, y: yb1 });\r\n\t\t\t\tpath += new $smoothing.Tension(tensionX, tensionY).smooth([{ x: xb1, y: yb1 }, { x: kxb1, y: kyb1 }, { x: kxb0, y: kyb0 }, { x: xb0, y: yb0 }]);\r\n\t\t\t\tpath += $path.closePath();\r\n\t\t\t}\r\n\r\n\t\t\tthis.link.path = path;\r\n\r\n\t\t\tif (this.maskBullets) {\r\n\t\t\t\tthis.bulletsMask.path = path;\r\n\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask;\r\n\t\t\t}\r\n\t\t\tthis.positionBullets();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [startX description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  Start X\r\n\t */\r\n\tpublic set startX(value: number) {\r\n\t\tthis.setPropertyValue(\"startX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start X\r\n\t */\r\n\tpublic get startX(): number {\r\n\t\treturn this.getPropertyValue(\"startX\");\r\n\t}\r\n\r\n\t/**\r\n\t * [endX description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  End X\r\n\t */\r\n\tpublic set endX(value: number) {\r\n\t\tthis.setPropertyValue(\"endX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End X\r\n\t */\r\n\tpublic get endX(): number {\r\n\t\treturn this.getPropertyValue(\"endX\");\r\n\t}\r\n\r\n\t/**\r\n\t * [startY description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  Start Y\r\n\t */\r\n\tpublic set startY(value: number) {\r\n\t\tthis.setPropertyValue(\"startY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start Y\r\n\t */\r\n\tpublic get startY(): number {\r\n\t\treturn this.getPropertyValue(\"startY\");\r\n\t}\r\n\r\n\t/**\r\n\t * [endY description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value End Y\r\n\t */\r\n\tpublic set endY(value: number) {\r\n\t\tthis.setPropertyValue(\"endY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End Y\r\n\t */\r\n\tpublic get endY(): number {\r\n\t\treturn this.getPropertyValue(\"endY\");\r\n\t}\r\n\r\n\t/**\r\n\t * [linkWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set linkWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"linkWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get linkWidth(): number {\r\n\t\treturn this.getPropertyValue(\"linkWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Distance of control point of a link, defines relative distance from a node at which linke should bend\r\n\t * @default 0.2\r\n\t * @param value\r\n\t */\r\n\tpublic set controlPointDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"controlPointDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return relative control point distance\r\n\t */\r\n\tpublic get controlPointDistance(): number {\r\n\t\treturn this.getPropertyValue(\"controlPointDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * Tension of a spline, 1 would make the link to have sharp edges\r\n\t * @default 0.8\r\n\t * @param value\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return tension value\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyLink\"] = SankeyLink;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}