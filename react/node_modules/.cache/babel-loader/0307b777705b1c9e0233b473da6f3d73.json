{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"./Container\";\nimport { List, ListDisposer } from \"./utils/List\";\nimport { OrderedListTemplate } from \"./utils/SortedList\";\nimport { Dictionary } from \"./utils/Dictionary\";\nimport { Disposer, MultiDisposer } from \"./utils/Disposer\";\nimport { DataSource } from \"./data/DataSource\";\nimport { Responsive } from \"./utils/Responsive\";\nimport { system } from \"./System\";\nimport { DataItem } from \"./DataItem\";\nimport { registry } from \"./Registry\";\nimport * as $math from \"./utils/Math\";\nimport * as $array from \"./utils/Array\";\nimport * as $ease from \"./utils/Ease\";\nimport * as $utils from \"./utils/Utils\";\nimport * as $iter from \"./utils/Iterator\";\nimport * as $object from \"./utils/Object\";\nimport * as $type from \"./utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A Component represents an independent functional element or control, that\r\n * can have it's own behavior, children, data, etc.\r\n *\r\n * A few examples of a Component: [[Legend]], [[Series]], [[Scrollbar]].\r\n *\r\n * @see {@link IComponentEvents} for a list of available events\r\n * @see {@link IComponentAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar Component =\n/** @class */\nfunction (_super) {\n  __extends(Component, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Component() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Holds data field names.\r\n     *\r\n     * Data fields define connection beween [[DataItem]] and actual properties\r\n     * in raw data.\r\n     */\n\n\n    _this.dataFields = {};\n    /**\r\n     * A list of [[DataSource]] definitions of external data source.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._dataSources = {};\n    /**\r\n     * This is used when only new data is invalidated (if added using `addData`\r\n     * method).\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._parseDataFrom = 0;\n    /**\r\n     * Holds the disposers for the dataItems and dataUsers\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._dataDisposers = [];\n    /**\r\n     * Currently selected \"data set\".\r\n     *\r\n     * If it's set to `\"\"`, main data set (unaggregated data) is used.\r\n     */\n\n    _this._currentDataSetId = \"\";\n    /**\r\n     * [_start description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._start = 0;\n    /**\r\n     * [_end description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._end = 1;\n    /**\r\n     * If set to `true`, changing data range in element will not trigger\r\n     * `daterangechanged` event.\r\n     */\n\n    _this.skipRangeEvent = false;\n    /**\r\n     * Whenever selected scope changes (chart is zoomed or panned), for example\r\n     * by interaction from a Scrollbar, or API, a chart needs to reposition\r\n     * its contents.\r\n     *\r\n     * `rangeChangeDuration` influences how this is performed.\r\n     *\r\n     * If set to zero (0), the change will happen instantenously.\r\n     *\r\n     * If set to non-zero value, the chart will gradually animate into new\r\n     * position for the set amount of milliseconds.\r\n     *\r\n     * @default 0\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     */\n\n    _this.rangeChangeDuration = 0;\n    /**\r\n     * An easing function to use for range change animation.\r\n     *\r\n     * @see {@link Ease}\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     */\n\n    _this.rangeChangeEasing = $ease.cubicOut;\n    /**\r\n     * A duration (ms) of each data parsing step. A Component parses its data in\r\n     * chunks in order to avoid completely freezing the machine when large data\r\n     * sets are used. This setting will control how many milliseconds should pass\r\n     * when parsing data until parser stops for a brief moment to let other\r\n     * processes catch up.\r\n     */\n\n    _this.parsingStepDuration = 50;\n    /**\r\n     * [dataInvalid description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n\n    _this.dataInvalid = false;\n    /**\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this.rawDataInvalid = false;\n    /**\r\n     * [dataRangeInvalid description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n\n    _this.dataRangeInvalid = false;\n    /**\r\n     * [dataItemsInvalid description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n\n    _this.dataItemsInvalid = false;\n    /**\r\n     * If set to a non-zero number the element will \"animate\" data values of its\r\n     * children.\r\n     *\r\n     * This will happen on first load and whenever data values change.\r\n     *\r\n     * Enabling interpolation will mean that elements will transit smoothly into\r\n     * new values rather than updating instantly.\r\n     *\r\n     * @default 0\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     */\n\n    _this.interpolationDuration = 0;\n    /**\r\n     * An easing function to use for interpolating values when transiting from\r\n     * one source value to another.\r\n     *\r\n     * @default cubicOut\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     * @see {@link Ease}\r\n     */\n\n    _this.interpolationEasing = $ease.cubicOut;\n    /**\r\n     * Indicates whether transition between data item's values should start and\r\n     * play out all at once, or with a small delay (as defined by\r\n     * `sequencedInterpolationDelay`) for each subsequent data item.\r\n     *\r\n     * @default true\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     */\n\n    _this.sequencedInterpolation = true;\n    /**\r\n     * A delay (ms) to wait between animating each subsequent data item's\r\n     * interpolation animation.\r\n     *\r\n     * Relative only if `sequencedInterpolation = true`.\r\n     *\r\n     * @default 0\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     */\n\n    _this.sequencedInterpolationDelay = 0;\n    /**\r\n     * A progress (0-1) for the data validation process.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this.dataValidationProgress = 0;\n    _this._addAllDataItems = true;\n    _this._usesData = true;\n    _this.className = \"Component\";\n    _this.minZoomCount = 1;\n    _this.maxZoomCount = 0;\n    _this._dataItems = new OrderedListTemplate(_this.createDataItem());\n\n    _this._dataItems.events.on(\"inserted\", _this.handleDataItemAdded, _this, false);\n\n    _this._dataItems.events.on(\"removed\", _this.handleDataItemRemoved, _this, false);\n\n    _this._disposers.push(new ListDisposer(_this._dataItems));\n\n    _this._disposers.push(_this._dataItems.template);\n\n    _this.invalidateData(); // TODO what about remove ?\n\n\n    _this.dataUsers.events.on(\"inserted\", _this.handleDataUserAdded, _this, false); // Set up disposers\n\n\n    _this._disposers.push(new MultiDisposer(_this._dataDisposers));\n\n    _this._start = 0;\n    _this._end = 1;\n    _this.maxZoomDeclination = 1; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  Component.prototype.createDataItem = function () {\n    return new DataItem();\n  };\n  /**\r\n   * [handleDataUserAdded description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param event Event object\r\n   */\n\n\n  Component.prototype.handleDataUserAdded = function (event) {\n    var dataUser = event.newValue;\n    dataUser.dataProvider = this;\n  };\n  /**\r\n   * [handleDataItemValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n\n\n  Component.prototype.handleDataItemValueChange = function (dataItem, name) {\n    if (!this.dataItemsInvalid) {\n      this.invalidateDataItems();\n    }\n  };\n  /**\r\n   * [handleDataItemWorkingValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {};\n  /**\r\n   * [handleDataItemWorkingLocationChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.handleDataItemWorkingLocationChange = function (dataItem, name) {};\n  /**\r\n   * [handleDataItemCalculatedValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.handleDataItemCalculatedValueChange = function (dataItem, name) {};\n  /**\r\n   * [handleDataItemPropertyChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.handleDataItemPropertyChange = function (dataItem, name) {};\n  /**\r\n   * Populates a [[DataItem]] width data from data source.\r\n   *\r\n   * Loops through all the fields and if such a field is found in raw data\r\n   * object, a corresponding value on passed in `dataItem` is set.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param item\r\n   */\n\n\n  Component.prototype.processDataItem = function (dataItem, dataContext) {\n    var _this = this;\n\n    if (dataItem) {\n      if (!dataContext) {\n        dataContext = {};\n      } // store reference to original data item\n\n\n      dataItem.dataContext = dataContext;\n      var hasSomeValues_1 = false;\n      $object.each(this.dataFields, function (key, fieldValue) {\n        var fieldName = key;\n        var value = dataContext[fieldValue]; // Apply adapters to a retrieved value\n\n        if (_this._adapterO) {\n          if (_this._adapterO.isEnabled(\"dataContextValue\")) {\n            value = _this._adapterO.apply(\"dataContextValue\", {\n              field: fieldName,\n              value: value,\n              dataItem: dataItem\n            }).value;\n          }\n        }\n\n        if ($type.hasValue(value)) {\n          hasSomeValues_1 = true;\n\n          if (dataItem.hasChildren[fieldName]) {\n            var template = _this.createDataItem();\n\n            template.copyFrom(_this.mainDataSet.template);\n            var children = new OrderedListTemplate(template);\n            children.events.on(\"inserted\", _this.handleDataItemAdded, _this, false);\n            children.events.on(\"removed\", _this.handleDataItemRemoved, _this, false);\n\n            _this._dataDisposers.push(new ListDisposer(children));\n\n            var count = value.length;\n\n            for (var i = 0; i < count; i++) {\n              var rawDataItem = value[i];\n              var childDataItem = children.create();\n              childDataItem.parent = dataItem;\n\n              _this.processDataItem(childDataItem, rawDataItem);\n            }\n\n            var anyDataItem = dataItem;\n            anyDataItem[fieldName] = children;\n          } else {\n            // data is converted to numbers/dates in each dataItem\n            dataItem[fieldName] = value;\n          }\n        }\n      });\n      $object.each(this.propertyFields, function (key, fieldValue) {\n        var f = key;\n        var value = dataContext[fieldValue];\n\n        if ($type.hasValue(value)) {\n          hasSomeValues_1 = true;\n          dataItem.setProperty(f, value);\n        }\n      }); // @todo we might need some flag which would tell whether we should create empty data items or not.\n\n      if (!this._addAllDataItems && !hasSomeValues_1) {\n        this.mainDataSet.remove(dataItem);\n      }\n    }\n  };\n  /**\r\n   *\r\n   * When validating raw data, instead of processing data item, we update it\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param item\r\n   */\n\n\n  Component.prototype.updateDataItem = function (dataItem) {\n    var _this = this;\n\n    if (dataItem) {\n      var dataContext_1 = dataItem.dataContext;\n      $object.each(this.dataFields, function (key, fieldValue) {\n        var fieldName = key;\n        var value = dataContext_1[fieldValue]; // Apply adapters to a retrieved value\n\n        if (_this._adapterO) {\n          value = _this._adapterO.apply(\"dataContextValue\", {\n            field: fieldName,\n            value: value,\n            dataItem: dataItem\n          }).value;\n        }\n\n        if ($type.hasValue(value)) {\n          if (dataItem.hasChildren[fieldName]) {\n            var anyDataItem = dataItem;\n            var children = anyDataItem[fieldName];\n            children.each(function (child) {\n              _this.updateDataItem(child);\n            });\n          } else {\n            // data is converted to numbers/dates in each dataItem\t\t\t\t\t\n            dataItem[fieldName] = value;\n          }\n        }\n      });\n      $object.each(this.propertyFields, function (key, fieldValue) {\n        var f = key;\n        var value = dataContext_1[fieldValue];\n\n        if ($type.hasValue(value)) {\n          dataItem.setProperty(f, value);\n        }\n      });\n    }\n  };\n  /**\r\n   * [validateDataElements description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n\n\n  Component.prototype.validateDataElements = function () {\n    var count = this.endIndex;\n\n    for (var i = this.startIndex; i < count; i++) {\n      var dataItem = this.dataItems.getIndex(i); // TODO is this correct\n\n      if (dataItem) {\n        this.validateDataElement(dataItem);\n      }\n    }\n  };\n  /**\r\n   * Validates this element and its related elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.validate = function () {\n    this.validateDataElements();\n\n    _super.prototype.validate.call(this);\n  };\n  /**\r\n   * [validateDataElement description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem [description]\r\n   */\n\n\n  Component.prototype.validateDataElement = function (dataItem) {};\n  /**\r\n   * Adds one or several (array) of data items to the existing data.\r\n   *\r\n   * @param rawDataItem One or many raw data item objects\r\n   */\n\n\n  Component.prototype.addData = function (rawDataItem, removeCount, skipRaw) {\n    var _this = this; // need to check if data is invalid, as addData might be called multiple times\n\n\n    if (!this.dataInvalid && this.inited) {\n      this._parseDataFrom = this.data.length; // save length of parsed data\n    }\n\n    if (!skipRaw) {\n      if (rawDataItem instanceof Array) {\n        // can't use concat because new array is returned\n        $array.each(rawDataItem, function (dataItem) {\n          _this.data.push(dataItem);\n        });\n      } else {\n        this.data.push(rawDataItem); // add to raw data array\n      }\n    }\n\n    if (this.inited) {\n      this.removeData(removeCount, skipRaw);\n    } else {\n      if ($type.isNumber(removeCount)) {\n        while (removeCount > 0) {\n          this.data.shift();\n          removeCount--;\n        }\n      }\n    }\n\n    this.invalidateData();\n  };\n  /**\r\n   * Removes elements from the beginning of data\r\n   *\r\n   * @param count number of elements to remove\r\n   */\n\n\n  Component.prototype.removeData = function (count, skipRaw) {\n    if ($type.isNumber(count) && count > 0) {\n      while (count > 0) {\n        var dataItem = this.mainDataSet.getIndex(0);\n\n        if (dataItem) {\n          this.mainDataSet.remove(dataItem);\n        }\n\n        this.dataUsers.each(function (dataUser) {\n          if (!dataUser.data || dataUser.data.length == 0) {\n            var dataItem_1 = dataUser.mainDataSet.getIndex(0);\n\n            if (dataItem_1) {\n              dataUser.mainDataSet.remove(dataItem_1);\n            }\n          }\n        });\n\n        if (!skipRaw) {\n          this.data.shift();\n        }\n\n        if (this._parseDataFrom > 0) {\n          this._parseDataFrom--;\n        }\n\n        count--;\n      } // changed from invalidateData since 4.7.19 to solve #51551\n\n\n      this.invalidateDataItems();\n    }\n  };\n  /**\r\n   * Triggers a data (re)parsing.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.invalidateData = function () {\n    if (this.disabled || this.isTemplate) {\n      return;\n    } //if(!this.dataInvalid){\n\n\n    registry.addToInvalidComponents(this);\n    system.requestFrame();\n    this.dataInvalid = true;\n    $iter.each(this.dataUsers.iterator(), function (x) {\n      x.invalidateDataItems();\n    }); //}\n  };\n  /**\r\n   * [invalidateDataUsers description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n\n\n  Component.prototype.invalidateDataUsers = function () {\n    $iter.each(this.dataUsers.iterator(), function (x) {\n      x.invalidate();\n    });\n  };\n  /**\r\n   * Invalidates data values. When data array is not changed, but values within\r\n   * it changes, we invalidate data so that component would process changes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.invalidateDataItems = function () {\n    if (this.disabled || this.isTemplate) {\n      return;\n    } //if(!this.dataItemsInvalid){\n\n\n    $array.move(registry.invalidDataItems, this);\n    system.requestFrame();\n    this.dataItemsInvalid = true;\n    $iter.each(this.dataUsers.iterator(), function (x) {\n      x.invalidateDataItems();\n    }); //}\n  };\n  /**\r\n   * Invalidates data range. This is done when data which must be shown\r\n   * changes (chart is zoomed for example).\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.invalidateDataRange = function () {\n    if (this.disabled || this.isTemplate) {\n      return;\n    } //if(!this.dataRangeInvalid){\n\n\n    this.dataRangeInvalid = true;\n    $array.move(registry.invalidDataRange, this);\n    system.requestFrame(); //}\n  };\n  /**\r\n   * Processes data range.\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.validateDataRange = function () {\n    $array.remove(registry.invalidDataRange, this);\n    this.dataRangeInvalid = false;\n\n    if (this.startIndex != this._prevStartIndex || this.endIndex != this._prevEndIndex) {\n      this.rangeChangeUpdate();\n      this.appendDataItems();\n      this.invalidate();\n      this.dispatchImmediately(\"datarangechanged\");\n    }\n  };\n  /**\r\n   * [sliceData description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.sliceData = function () {\n    this._workingStartIndex = this.startIndex;\n    this._workingEndIndex = this.endIndex;\n  };\n  /**\r\n   * [rangeChangeUpdate description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.rangeChangeUpdate = function () {\n    this.sliceData();\n    this._prevStartIndex = this.startIndex;\n    this._prevEndIndex = this.endIndex;\n  };\n  /**\r\n   * [appendDataItems description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.appendDataItems = function () {\n    // TODO use an iterator instead\n    var count = this.endIndex;\n\n    for (var i = this.startIndex; i < count; i++) {\n      // data item\n      var dataItem = this.dataItems.getIndex(i);\n\n      if (dataItem) {\n        dataItem.__disabled = false;\n      }\n    }\n\n    for (var i = 0; i < this.startIndex; i++) {\n      var dataItem = this.dataItems.getIndex(i);\n\n      if (dataItem) {\n        dataItem.__disabled = true;\n      }\n    }\n\n    for (var i = this.endIndex; i < this.dataItems.length; i++) {\n      var dataItem = this.dataItems.getIndex(i);\n\n      if (dataItem) {\n        dataItem.__disabled = true;\n      }\n    }\n  };\n  /**\r\n   * If you want to have a smooth transition from one data values to another, you change your raw data and then you must call this method.\r\n   * then instead of redrawing everything, the chart will check raw data and smoothly transit from previous to new data\r\n   */\n\n\n  Component.prototype.invalidateRawData = function () {\n    if (this.disabled || this.isTemplate) {\n      return;\n    } //if(!this.rawDataInvalid){\n\n\n    $array.move(registry.invalidRawDatas, this);\n    system.requestFrame();\n    this.rawDataInvalid = true;\n    $iter.each(this.dataUsers.iterator(), function (x) {\n      x.invalidateRawData();\n    }); //}\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  Component.prototype.validateRawData = function () {\n    var _this = this;\n\n    $array.remove(registry.invalidRawDatas, this);\n    $iter.each(this.mainDataSet.iterator(), function (dataItem) {\n      if (dataItem) {\n        _this.updateDataItem(dataItem);\n      }\n    });\n  };\n  /**\r\n   * Destroys this object and all related data.\r\n   */\n\n\n  Component.prototype.dispose = function () {\n    var _this = this;\n\n    this.mainDataSet.template.clones.clear();\n    $object.each(this._dataSources, function (key, source) {\n      _this.removeDispose(source);\n    });\n\n    _super.prototype.dispose.call(this);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  Component.prototype.disposeData = function () {\n    this.mainDataSet.template.clones.clear();\n    $array.each(this._dataDisposers, function (x) {\n      x.dispose();\n    }); // and for all components\n\n    $iter.each(this.dataUsers.iterator(), function (dataUser) {\n      dataUser.disposeData();\n    });\n    this._dataDisposers.length = 0;\n    this._startIndex = undefined;\n    this._endIndex = undefined; // dispose old\n\n    this.mainDataSet.clear();\n    this.mainDataSet.template.clones.clear();\n\n    if (this._dataSets) {\n      this._dataSets.clear();\n    }\n  };\n\n  Component.prototype.getDataItem = function (dataContext) {\n    return this.mainDataSet.create();\n  };\n  /**\r\n   * Validates (processes) data.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.validateData = function () {\n    this.dispatchImmediately(\"beforedatavalidated\");\n    this.dataInvalid = false;\n    registry.removeFromInvalidComponents(this);\n\n    if (this.__disabled) {\n      return;\n    }\n\n    this.dataValidationProgress = 0; // need this to slice new data\n\n    this._prevStartIndex = undefined;\n    this._prevEndIndex = undefined; // todo: this needs some overthinking, maybe some extra settings like zoomOotonDataupdate like in v3 or so. some charts like pie chart probably should act like this always\n\n    this._startIndex = undefined;\n    this._endIndex = undefined;\n\n    if (this.dataFields.data && this.dataItem) {\n      var dataContext = this.dataItem.dataContext;\n      this._data = dataContext[this.dataFields.data];\n    } // data items array is reset only if all data is validated, if _parseDataFrom is not 0, we append new data only\n    // check heatmap demo if uncommented\n    // fixed both issues by adding && this.data.length > 0\n    // check adding series example if changed\n\n\n    if (this._parseDataFrom === 0 && this.data.length > 0) {\n      this.disposeData();\n    }\n\n    if (this.data.length > 0) {\n      var preloader = this.preloader; // and for all components\n\n      $iter.each(this.dataUsers.iterator(), function (dataUser) {\n        // todo: this needs some overthinking, maybe some extra settings like zoomOUtonDataupdate like in v3 or so. some charts like pie chart probably should act like this always\n        dataUser._startIndex = undefined;\n        dataUser._endIndex = undefined;\n      });\n      var counter = 0;\n      var startTime = Date.now(); // parse data\n\n      var i = this._parseDataFrom;\n      var n = this.data.length;\n\n      var _loop_1 = function () {\n        var rawDataItem = this_1.data[i];\n\n        if (this_1._usesData) {\n          var dataItem = this_1.getDataItem(rawDataItem);\n          this_1.processDataItem(dataItem, rawDataItem);\n        }\n\n        this_1.dataUsers.each(function (dataUser) {\n          if (dataUser.data.length == 0) {\n            // checking if data is not set directly\n            var dataUserDataItem = dataUser.getDataItem(rawDataItem);\n            dataUser.processDataItem(dataUserDataItem, rawDataItem);\n          }\n        });\n        counter++; // show preloader if this takes too many time\n\n        if (counter == 100) {\n          // no need to check it on each data item\n          counter = 0;\n          var elapsed = Date.now() - startTime;\n\n          if (elapsed > this_1.parsingStepDuration) {\n            if (i < this_1.data.length - 10) {\n              this_1._parseDataFrom = i + 1; // update preloader\n\n              if (preloader) {\n                if (i / this_1.data.length > 0.5 && !preloader.visible) {// do not start showing\n                } else {\n                  preloader.progress = i / this_1.data.length;\n                }\n              }\n\n              this_1.dataValidationProgress = i / this_1.data.length;\n              i = this_1.data.length; // stops cycle\n\n              this_1.invalidateData();\n              return {\n                value: void 0\n              };\n            }\n          }\n        }\n      };\n\n      var this_1 = this;\n\n      for (i; i < n; i++) {\n        var state_1 = _loop_1();\n\n        if (typeof state_1 === \"object\") return state_1.value;\n      }\n\n      if (preloader) {\n        preloader.progress = 1;\n      }\n\n      this.dataUsers.each(function (dataUser) {\n        if (dataUser.hidden) {\n          dataUser.hide(0);\n        }\n      });\n    }\n\n    this.dataValidationProgress = 1;\n    this._parseDataFrom = 0; // reset this index, it is set to dataItems.length if addData() method was used.\n\n    this.invalidateDataItems();\n\n    if (!this._internalDefaultsApplied) {\n      this.applyInternalDefaults();\n    }\n\n    this.dispatch(\"datavalidated\"); // can't zoom chart if dispatched immediately\n  };\n  /**\r\n   * Validates (processes) data items.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.validateDataItems = function () {\n    $array.remove(registry.invalidDataItems, this);\n    this.dataItemsInvalid = false;\n    this.invalidateDataRange();\n    this.invalidate();\n    this.dispatch(\"dataitemsvalidated\");\n  };\n\n  Object.defineProperty(Component.prototype, \"data\", {\n    /**\r\n     * Returns element's source (raw) data.\r\n     *\r\n     * @return Data\r\n     */\n    get: function () {\n      if (!this._data) {\n        this._data = [];\n      }\n\n      if (!this._adapterO) {\n        return this._data;\n      } else {\n        return this._adapterO.apply(\"data\", this._data);\n      }\n    },\n\n    /**\r\n     * Sets source (raw) data for the element. The \"data\" is always an `Array`\r\n     * of objects.\r\n     *\r\n     * IMPORTANT: The order of data items in `data` array is important as it\r\n     * might affect chart look and behavior. [More details](https://www.amcharts.com/docs/v4/concepts/data/#Order_of_data_items).\r\n     *\r\n     * @param value Data\r\n     */\n    set: function (value) {\n      this.setData(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Component.prototype.setData = function (value) {\n    // array might be the same, but there might be items added\n    // todo: check if array changed, toString maybe?\n    //if (this._data != value) {\n    this._parseDataFrom = 0;\n    this.disposeData();\n    this._data = value;\n\n    if (value && value.length > 0) {\n      this.invalidateData();\n    } else {\n      this.dispatchImmediately(\"beforedatavalidated\");\n      this.dispatch(\"datavalidated\");\n    } //}\n\n  };\n  /**\r\n   * Returns (creates if necessary) a [[DataSource]] bound to any specific\r\n   * property.\r\n   *\r\n   * For example if I want to bind `data` to an external JSON file, I'd create\r\n   * a DataSource for it.\r\n   *\r\n   * @param property  Property to bind external data to\r\n   * @return A DataSource for property\r\n   */\n\n\n  Component.prototype.getDataSource = function (property) {\n    var _this = this;\n\n    if (!$type.hasValue(this._dataSources[property])) {\n      this._dataSources[property] = new DataSource();\n      this._dataSources[property].component = this;\n      this.setDataSourceEvents(this._dataSources[property], property);\n\n      this._dataSources[property].adapter.add(\"dateFields\", function (val) {\n        return _this.dataSourceDateFields(val);\n      });\n\n      this._dataSources[property].adapter.add(\"numberFields\", function (val) {\n        return _this.dataSourceNumberFields(val);\n      });\n\n      this.events.on(\"inited\", function () {\n        _this.loadData(property);\n      }, this, false);\n    }\n\n    return this._dataSources[property];\n  };\n\n  Object.defineProperty(Component.prototype, \"dataSource\", {\n    /**\r\n     * @return Data source\r\n     */\n    get: function () {\n      if (!this._dataSources[\"data\"]) {\n        this.getDataSource(\"data\");\n      }\n\n      return this._dataSources[\"data\"];\n    },\n\n    /**\r\n     *A [[DataSource]] to be used for loading Component's data.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/loading-external-data/} for more on loading external data\r\n     * @param value  Data source\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      if (this._dataSources[\"data\"]) {\n        this.removeDispose(this._dataSources[\"data\"]);\n      }\n\n      this._dataSources[\"data\"] = value;\n      this._dataSources[\"data\"].component = this;\n      this.events.on(\"inited\", function () {\n        _this.loadData(\"data\");\n      }, this, false);\n      this.setDataSourceEvents(value, \"data\");\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Initiates loading of the external data via [[DataSource]].\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Component.prototype.loadData = function (property) {\n    this._dataSources[property].load();\n  };\n  /**\r\n   * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n   * so that particular chart types can popuplate this setting with their\r\n   * own type-specific data fields so they are parsed properly.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value  Array of date fields\r\n   * @return Array of date fields populated with chart's date fields\r\n   */\n\n\n  Component.prototype.dataSourceDateFields = function (value) {\n    return value;\n  };\n  /**\r\n   * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n   * so that particular chart types can popuplate this setting with their\r\n   * own type-specific data fields so they are parsed properly.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value  Array of number fields\r\n   * @return Array of number fields populated with chart's number fields\r\n   */\n\n\n  Component.prototype.dataSourceNumberFields = function (value) {\n    return value;\n  };\n  /**\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param list        [description]\r\n   * @param dataFields  [description]\r\n   * @param targetList  [description]\r\n   * @return [description]\r\n   */\n\n\n  Component.prototype.populateDataSourceFields = function (list, dataFields, targetList) {\n    $array.each(targetList, function (value) {\n      if (dataFields[value] && $array.indexOf(list, dataFields[value]) === -1) {\n        list.push(dataFields[value]);\n      }\n    });\n    return list;\n  };\n  /**\r\n   * Sets events on a [[DataSource]].\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.setDataSourceEvents = function (ds, property) {\n    var _this = this;\n\n    ds.events.on(\"started\", function (ev) {\n      var preloader = _this.preloader;\n\n      if (preloader) {\n        preloader.progress = 0; //preloader.label.text = this.language.translate(\"Loading\");\n      }\n    }, undefined, false);\n    ds.events.on(\"loadstarted\", function (ev) {\n      var preloader = _this.preloader;\n\n      if (preloader) {\n        preloader.progress = 0.25;\n      }\n    }, undefined, false);\n    ds.events.on(\"loadended\", function (ev) {\n      var preloader = _this.preloader;\n\n      if (preloader) {\n        preloader.progress = 0.5;\n      }\n    }, undefined, false);\n    ds.events.on(\"parseended\", function (ev) {\n      var preloader = _this.preloader;\n\n      if (preloader) {\n        preloader.progress = 0.75;\n      }\n    }, undefined, false);\n    ds.events.on(\"ended\", function (ev) {\n      var preloader = _this.preloader;\n\n      if (preloader) {\n        preloader.progress = 1;\n      }\n    }, undefined, false);\n    ds.events.on(\"error\", function (ev) {\n      var preloader = _this.preloader;\n\n      if (preloader) {\n        preloader.progress = 1;\n      }\n\n      _this.openModal(ev.message);\n    }, undefined, false);\n\n    if (property) {\n      ds.events.on(\"done\", function (ev) {\n        var preloader = _this.preloader;\n\n        if (preloader) {\n          preloader.progress = 1;\n        }\n\n        if (property == \"data\" && !$type.isArray(ev.data)) {\n          ev.data = [ev.data];\n        }\n\n        if (ds.incremental && property == \"data\" && _this.data.length) {\n          _this.addData(ev.data, ds.keepCount ? ev.data.length : 0);\n        } else if (ds.updateCurrentData && property == \"data\" && _this.data.length) {\n          // cycle through existing data items\n          $array.each(_this.data, function (item, index) {\n            if ($type.hasValue(ev.data[index])) {\n              $object.each(item, function (key, val) {\n                if ($type.hasValue(ev.data[index][key])) {\n                  item[key] = ev.data[index][key];\n                }\n              });\n            }\n          });\n\n          _this.invalidateRawData();\n        } else {\n          _this[property] = ev.data;\n        }\n      });\n    }\n  };\n\n  Object.defineProperty(Component.prototype, \"responsive\", {\n    /**\r\n     * @return Responsive rules handler\r\n     */\n    get: function () {\n      if (!this._responsive) {\n        this._responsive = new Responsive();\n        this._responsive.component = this;\n      }\n\n      return this._responsive;\n    },\n\n    /**\r\n     * A [[Responsive]] instance to be used when applying conditional\r\n     * property values.\r\n     *\r\n     * NOTE: Responsive features are currently in development and may not work\r\n     * as expected, if at all.\r\n     *\r\n     * @param value  Responsive rules handler\r\n     */\n    set: function (value) {\n      this._responsive = value;\n      this._responsive.component = this;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets current zoom.\r\n   *\r\n   * The range uses relative values from 0 to 1, with 0 marking beginning and 1\r\n   * marking end of the available data range.\r\n   *\r\n   * This method will not have any effect when called on a chart object.\r\n   * Since the chart can have a number of axes and series, each with its own\r\n   * data, the meaning of \"range\" is very ambiguous.\r\n   *\r\n   * To zoom the chart use `zoom*` methods on its respective axes.\r\n   *\r\n   * @param range          Range\r\n   * @param skipRangeEvent Should rangechanged event not be triggered?\r\n   * @param instantly      Do not animate?\r\n   * @return Actual modidied range (taking `maxZoomFactor` into account)\r\n   */\n\n  Component.prototype.zoom = function (range, skipRangeEvent, instantly, declination) {\n    var _this = this;\n\n    if (skipRangeEvent === void 0) {\n      skipRangeEvent = false;\n    }\n\n    if (instantly === void 0) {\n      instantly = false;\n    }\n\n    var start = range.start;\n    var end = range.end;\n    var priority = range.priority;\n\n    if (range.start == range.end) {\n      range.start = range.start - 0.5 / this.maxZoomFactor;\n      range.end = range.end + 0.5 / this.maxZoomFactor;\n    }\n\n    if (priority == \"end\" && end == 1 && start != 0) {\n      if (start < this.start) {\n        priority = \"start\";\n      }\n    }\n\n    if (priority == \"start\" && start == 0) {\n      if (end > this.end) {\n        priority = \"end\";\n      }\n    }\n\n    if (!$type.isNumber(declination)) {\n      declination = this.maxZoomDeclination;\n    }\n\n    if (!$type.isNumber(start) || !$type.isNumber(end)) {\n      return {\n        start: this.start,\n        end: this.end\n      };\n    }\n\n    if (this._finalStart != start || this._finalEnd != end) {\n      var maxZoomFactor = this.maxZoomFactor / this.minZoomCount;\n      var minZoomFactor = this.maxZoomFactor / this.maxZoomCount; // most likely we are dragging left scrollbar grip here, so we tend to modify end\n\n      if (priority == \"start\") {\n        if (this.maxZoomCount > 0) {\n          // add to the end\n          if (1 / (end - start) < minZoomFactor) {\n            end = start + 1 / minZoomFactor;\n          }\n        } // add to the end\n\n\n        if (1 / (end - start) > maxZoomFactor) {\n          end = start + 1 / maxZoomFactor;\n        } //unless end is > 0\n\n\n        if (end > 1 && end - start < 1 / maxZoomFactor) {\n          //end = 1;\n          start = end - 1 / maxZoomFactor;\n        }\n      } // most likely we are dragging right, so we modify left\n      else {\n          if (this.maxZoomCount > 0) {\n            // add to the end\n            if (1 / (end - start) < minZoomFactor) {\n              start = end - 1 / minZoomFactor;\n            }\n          } // remove from start\n\n\n          if (1 / (end - start) > maxZoomFactor) {\n            start = end - 1 / maxZoomFactor;\n          }\n\n          if (start < 0 && end - start < 1 / maxZoomFactor) {\n            //start = 0;\n            end = start + 1 / maxZoomFactor;\n          }\n        }\n\n      if (start < -declination) {\n        start = -declination;\n      }\n\n      if (1 / (end - start) > maxZoomFactor) {\n        end = start + 1 / maxZoomFactor;\n      }\n\n      if (end > 1 + declination) {\n        end = 1 + declination;\n      }\n\n      if (1 / (end - start) > maxZoomFactor) {\n        start = end - 1 / maxZoomFactor;\n      }\n\n      this._finalEnd = end;\n      this._finalStart = start;\n      this.skipRangeEvent = skipRangeEvent;\n      this.dispatchImmediately(\"rangechangestarted\");\n\n      if (this.rangeChangeDuration > 0 && !instantly) {\n        // todo: maybe move this to Animation\n        var rangeChangeAnimation = this.rangeChangeAnimation;\n\n        if (rangeChangeAnimation && rangeChangeAnimation.progress < 1) {\n          var options = rangeChangeAnimation.animationOptions;\n\n          if (options.length > 1) {\n            if (options[0].to == start && options[1].to == end) {\n              return {\n                start: start,\n                end: end\n              };\n            } else {\n              if (!rangeChangeAnimation.isDisposed()) {\n                rangeChangeAnimation.stop();\n              }\n            }\n          }\n        }\n\n        if (this.rangeChangeAnimation) {\n          this.rangeChangeAnimation.kill();\n        }\n\n        rangeChangeAnimation = this.animate([{\n          property: \"start\",\n          to: start\n        }, {\n          property: \"end\",\n          to: end\n        }], this.rangeChangeDuration, this.rangeChangeEasing);\n        this.rangeChangeAnimation = rangeChangeAnimation;\n\n        if (rangeChangeAnimation && !rangeChangeAnimation.isFinished()) {\n          rangeChangeAnimation.events.on(\"animationended\", function () {\n            _this.dispatchImmediately(\"rangechangeended\");\n          });\n        } else {\n          this.dispatchImmediately(\"rangechangeended\");\n        }\n      } else {\n        this.start = start;\n        this.end = end;\n        this.dispatch(\"rangechangeended\");\n      }\n    }\n\n    return {\n      start: start,\n      end: end\n    };\n  };\n  /**\r\n   * Zooms to specific data items using their index in data.\r\n   *\r\n   * This method will not have any effect when called on a chart object.\r\n   * Since the chart can have a number of axes and series, each with its own\r\n   * data, the meaning of \"index\" is very ambiguous.\r\n   *\r\n   * To zoom the chart use `zoom*` methods on its respective axes.\r\n   *\r\n   * @param startIndex     Index of the starting data item\r\n   * @param endIndex       Index of the ending data item\r\n   * @param skipRangeEvent Should rangechanged event not be triggered?\r\n   * @param instantly      Do not animate?\r\n   */\n\n\n  Component.prototype.zoomToIndexes = function (startIndex, endIndex, skipRangeEvent, instantly) {\n    if (!$type.isNumber(startIndex) || !$type.isNumber(endIndex)) {\n      return;\n    }\n\n    var start = startIndex / this.dataItems.length;\n    var end = endIndex / this.dataItems.length;\n    this.zoom({\n      start: start,\n      end: end\n    }, skipRangeEvent, instantly);\n  };\n\n  Object.defineProperty(Component.prototype, \"zoomFactor\", {\n    /**\r\n     * A current zoom factor (0-1). 1 meaning fully zoomed out. (showing all of\r\n     * the available data)\r\n     *\r\n     * @return Zoom factor\r\n     */\n    get: function () {\n      return $math.fitToRange(1 / (this.end - this.start), 1, this.maxZoomFactor);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"maxZoomFactor\", {\n    /**\r\n     * @return Maximum zoomFactor\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxZoomFactor\");\n    },\n\n    /**\r\n     * Max available `zoomFactor`.\r\n     *\r\n     * The element will not allow zoom to occur beyond this factor.\r\n     *\r\n     * [[DateAxis]] and [[CategoryAxis]] calculate this atutomatically so that\r\n     * category axis could be zoomed to one category and date axis allows to be\r\n     * zoomed up to one base interval.\r\n     *\r\n     * In case you want to restrict category or date axis to be zoomed to more\r\n     * than one category or more than one base interval, use `minZoomCount`\r\n     * property (set it to `> 1`).\r\n     *\r\n     * Default value of [[ValueAxis]]'s `maxZoomFactor` is `1000`.\r\n     *\r\n     * Feel free to modify it to allow bigger zoom or to restrict zooming.\r\n     *\r\n     * @param value  Maximum zoomFactor\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"maxZoomFactor\", value)) {\n        if (value == 1) {\n          this.maxZoomDeclination = 0;\n        }\n\n        this.invalidateDataRange();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"maxZoomDeclination\", {\n    /**\r\n     * @ignore\r\n     * @return Maximum zoom declination\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxZoomDeclination\");\n    },\n\n    /**\r\n     * Max zoom declination.\r\n     *\r\n     * @ignore\r\n     * @default 1\r\n     * @param value  Maximum zoom declination\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"maxZoomDeclination\", value)) {\n        this.invalidateDataRange();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"startIndex\", {\n    /**\r\n     * Current starting index.\r\n     *\r\n     * @return Start index\r\n     */\n    get: function () {\n      if (!$type.isNumber(this._startIndex)) {\n        this._startIndex = 0;\n      }\n\n      return this._startIndex;\n    },\n\n    /**\r\n     * Sets current starting index.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Start index\r\n     */\n    set: function (value) {\n      this._startIndex = $math.fitToRange(Math.round(value), 0, this.dataItems.length); //this._workingStartIndex = this._startIndex; // not good, breaks adjusted working start index of line series\n\n      this.start = this.indexToPosition(this._startIndex);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   * @todo:review description\r\n   * returns item's relative position by the index of the item\r\n   * @param index\r\n   */\n\n  Component.prototype.indexToPosition = function (index) {\n    return index / this.dataItems.length;\n  };\n\n  Object.defineProperty(Component.prototype, \"endIndex\", {\n    /**\r\n     * Current ending index.\r\n     *\r\n     * @return End index\r\n     */\n    get: function () {\n      var count = this.dataItems.length;\n\n      if (!$type.isNumber(this._endIndex) || this._endIndex > count) {\n        this._endIndex = count;\n      }\n\n      return this._endIndex;\n    },\n\n    /**\r\n     * Sets current ending index.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value End index\r\n     */\n    set: function (value) {\n      this._endIndex = $math.fitToRange(Math.round(value), 0, this.dataItems.length); //this._workingEndIndex = this._endIndex; // not good, breaks adjusted workingend index of line series\n\n      this.end = this.indexToPosition(this._endIndex);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"start\", {\n    /**\r\n     * @return Start (0-1)\r\n     */\n    get: function () {\n      if (!this._adapterO) {\n        return this._start;\n      } else {\n        return this._adapterO.apply(\"start\", this._start);\n      }\n    },\n\n    /**\r\n     * Start of the current data range (zoom).\r\n     *\r\n     * These are relative values from 0 (beginning) to 1 (end).\r\n     *\r\n     * @param value Start (0-1)\r\n     */\n    set: function (value) {\n      // value = $math.round(value, 10); not good\n      //if (1 / (this.end - value) > this.maxZoomFactor) {\n      //\tvalue = this.end - 1 / this.maxZoomFactor;\n      //}\n      if (this._start != value) {\n        this._start = value;\n        var startIndex = Math.max(0, Math.floor(this.dataItems.length * value) || 0);\n        this._startIndex = Math.min(startIndex, this.dataItems.length);\n        this.invalidateDataRange();\n        this.invalidate();\n        this.dispatchImmediately(\"startchanged\");\n        this.dispatch(\"startendchanged\");\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"end\", {\n    /**\r\n     * @return End (0-1)\r\n     */\n    get: function () {\n      if (!this._adapterO) {\n        return this._end;\n      } else {\n        return this._adapterO.apply(\"end\", this._end);\n      }\n    },\n\n    /**\r\n     * End of the current data range (zoom).\r\n     *\r\n     * These are relative values from 0 (beginning) to 1 (end).\r\n     *\r\n     * @param value End (0-1)\r\n     */\n    set: function (value) {\n      // value = $math.round(value, 10); // not good\n      //if (1 / (value - this.start) > this.maxZoomFactor) {\n      //\tvalue = 1 / this.maxZoomFactor + this.start;\n      //}\n      if (this._end != value) {\n        this._end = value;\n        this._endIndex = Math.min(this.dataItems.length, Math.ceil(this.dataItems.length * value) || 0);\n        this.invalidateDataRange();\n        this.invalidate();\n        this.dispatchImmediately(\"endchanged\");\n        this.dispatch(\"startendchanged\");\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * [removeFromInvalids description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n\n  Component.prototype.removeFromInvalids = function () {\n    _super.prototype.removeFromInvalids.call(this);\n\n    registry.removeFromInvalidComponents(this);\n    $array.remove(registry.invalidDataItems, this);\n    $array.remove(registry.invalidDataRange, this);\n    $array.remove(registry.invalidRawDatas, this);\n  };\n\n  Object.defineProperty(Component.prototype, \"dataItems\", {\n    /**\r\n     * Returns a list of source [[DataItem]] objects currently used in the chart.\r\n     *\r\n     * @return List of data items\r\n     */\n    get: function () {\n      if (this._currentDataSetId != \"\") {\n        var dataItems = this.dataSets.getKey(this._currentDataSetId);\n\n        if (dataItems) {\n          return dataItems;\n        }\n      }\n\n      return this._dataItems;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"dataSets\", {\n    /**\r\n     * Holds data items for data sets (usually aggregated data).\r\n     *\r\n     * @ignore\r\n     * @since 4.7.0\r\n     * @return  Data sets\r\n     */\n    get: function () {\n      if (!this._dataSets) {\n        this._dataSets = new Dictionary();\n      }\n\n      return this._dataSets;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Makes the chart use particular data set.\r\n   *\r\n   * If `id` is not provided or there is no such data set, main data will be\r\n   * used.\r\n   *\r\n   * @ignore\r\n   * @since 4.7.0\r\n   * @param  id  Data set id\r\n   */\n\n  Component.prototype.setDataSet = function (id) {\n    if (this._currentDataSetId != id) {\n      var dataSet = this.dataSets.getKey(id);\n\n      if (!dataSet) {\n        if (this._currentDataSetId != \"\") {\n          this.dataItems.each(function (dataItem) {\n            dataItem.__disabled = true;\n          });\n          this._currentDataSetId = \"\";\n          this.invalidateDataRange();\n          this._prevStartIndex = undefined;\n          this.dataItems.each(function (dataItem) {\n            dataItem.__disabled = false;\n          });\n          return true;\n        }\n      } else {\n        this.dataItems.each(function (dataItem) {\n          dataItem.__disabled = true;\n        });\n        this._currentDataSetId = id;\n        this.invalidateDataRange();\n        this._prevStartIndex = undefined;\n        this.dataItems.each(function (dataItem) {\n          dataItem.__disabled = false;\n        });\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  Object.defineProperty(Component.prototype, \"currentDataSetId\", {\n    /**\r\n     * Returns id of the currently used data set, or `undefined` if main data set\r\n     * is in use.\r\n     *\r\n     * @since 4.7.0\r\n     * @return Current data set id\r\n     */\n    get: function () {\n      return this._currentDataSetId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"mainDataSet\", {\n    /**\r\n     * Returns reference to \"main\" data set (unaggregated data as it was supplied\r\n     * in `data`).\r\n     *\r\n     * @since 4.7.0\r\n     * @return Main data set\r\n     */\n    get: function () {\n      return this._dataItems;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates the indexes for the dataItems\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Component.prototype._updateDataItemIndexes = function (startIndex) {\n    var dataItems = this.mainDataSet.values;\n    var length = dataItems.length;\n\n    for (var i = startIndex; i < length; ++i) {\n      dataItems[i]._index = i;\n    }\n  };\n  /**\r\n   * Processes newly added [[DataItem]] as well as triggers data re-validation.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event [description]\r\n   */\n\n\n  Component.prototype.handleDataItemAdded = function (event) {\n    event.newValue.component = this;\n\n    this._updateDataItemIndexes(event.index);\n\n    if (!this.dataItemsInvalid) {\n      this.invalidateDataItems();\n    }\n  };\n  /**\r\n   * removes [[DataItem]] as well as triggers data re-validation.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event [description]\r\n   */\n\n\n  Component.prototype.handleDataItemRemoved = function (event) {\n    //\t\tevent.oldValue.component = undefined; // not good, as some items might be not removed from component lists\n    this._updateDataItemIndexes(event.index);\n\n    if (!this.dataItemsInvalid) {\n      this.invalidateDataItems();\n    }\n  };\n  /**\r\n   * Binds a data element's field to a specific field in raw data.\r\n   * For example, for the very basic column chart you'd want to bind a `value`\r\n   * field to a field in data, such as `price`.\r\n   *\r\n   * Some more advanced Components, like [[CandlestickSeries]] need several\r\n   * data fields bound to data, such as ones for open, high, low and close\r\n   * values.\r\n   *\r\n   * @todo Example\r\n   * @param field  Field name\r\n   * @param value  Field name in data\r\n   */\n\n\n  Component.prototype.bindDataField = function (field, value) {\n    this.dataFields[field] = value;\n    this.invalidateDataRange();\n  };\n  /**\r\n   * Invalidates processed data.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.invalidateProcessedData = function () {\n    this.resetProcessedRange();\n    this.invalidateDataRange();\n  };\n  /**\r\n   * [resetProcessedRange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n\n\n  Component.prototype.resetProcessedRange = function () {\n    this._prevEndIndex = null;\n    this._prevStartIndex = null;\n  };\n\n  Object.defineProperty(Component.prototype, \"dataUsers\", {\n    /**\r\n     * Returns all other [[Component]] objects that are using this element's\r\n     * data.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @return [description]\r\n     */\n    get: function () {\n      var _this = this;\n\n      if (!this._dataUsers) {\n        this._dataUsers = new List(); //this._disposers.push(new ListDisposer(this._dataUsers));\n        // TODO better way of handling this? e.g. move into another module ?\n\n        this._disposers.push(new Disposer(function () {\n          // TODO clear the list ?\n          $iter.each(_this._dataUsers.iterator(), function (x) {\n            x.dispose();\n          });\n        }));\n      }\n\n      return this._dataUsers;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a clone of this element.\r\n   *\r\n   * @return Clone\r\n   */\n\n  Component.prototype.clone = function () {\n    var component = _super.prototype.clone.call(this);\n\n    component.dataFields = $utils.copyProperties(this.dataFields, {});\n    return component;\n  };\n  /**\r\n   * Copies all parameters from another [[Component]].\r\n   *\r\n   * @param source Source Component\r\n   */\n\n\n  Component.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.data = source.data;\n    this.sequencedInterpolation = source.sequencedInterpolation;\n    this.sequencedInterpolationDelay = source.sequencedInterpolationDelay;\n    this.interpolationDuration = source.interpolationDuration;\n    this.interpolationEasing = source.interpolationEasing;\n  };\n  /**\r\n   * Invalidates the whole element, including all its children, causing\r\n   * complete re-parsing of data and redraw.\r\n   *\r\n   * Use sparingly!\r\n   */\n\n\n  Component.prototype.reinit = function () {\n    this._inited = false;\n    this.deepInvalidate();\n  };\n  /**\r\n   * Add an adapter for data.\r\n   *\r\n   * @return Exporting\r\n   */\n\n\n  Component.prototype.getExporting = function () {\n    var _export = _super.prototype.getExporting.call(this);\n\n    if (!_export.adapter.has(\"data\", this._exportData, -1, this)) {\n      _export.adapter.add(\"data\", this._exportData, -1, this);\n\n      this.events.on(\"datavalidated\", function (ev) {\n        _export.handleDataUpdated();\n      });\n    }\n\n    return _export;\n  };\n\n  Component.prototype._exportData = function (arg) {\n    arg.data = this.data;\n    return arg;\n  };\n\n  Component.prototype.setDisabled = function (value) {\n    var changed = _super.prototype.setDisabled.call(this, value);\n\n    if (changed) {\n      this.invalidateData();\n    }\n\n    return changed;\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  Component.prototype.setShowOnInit = function (value) {\n    if (value != this.getPropertyValue(\"showOnInit\")) {\n      if (value && !this.inited && !this.hidden) {\n        this._showOnInitDisposer2 = this.events.once(\"dataitemsvalidated\", this.hideInitially, this, false);\n\n        this._disposers.push(this._showOnInitDisposer2);\n      } else {\n        if (this._showOnInitDisposer2) {\n          this.removeDispose(this._showOnInitDisposer2);\n        }\n      }\n    } // important order here\n\n\n    _super.prototype.setShowOnInit.call(this, value);\n  };\n\n  Component.prototype.setBaseId = function (value) {\n    if (value != this._baseId) {\n      if (this.dataInvalid) {\n        this.dataInvalid = false;\n        registry.removeFromInvalidComponents(this);\n        this._baseId = value;\n        this.invalidateData();\n      }\n    }\n\n    _super.prototype.setBaseId.call(this, value);\n  };\n\n  Object.defineProperty(Component.prototype, \"minZoomCount\", {\n    /**\r\n     * @return Min zoom count\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minZoomCount\");\n    },\n\n    /**\r\n     * Use this for [[CategoryAxis]] or [[DateAxis]].\r\n     *\r\n     * Allows restricting zoom in beyond certain number of categories or base\r\n     * intervals.\r\n     *\r\n     * @default 1\r\n     * @param value  Min zoom count\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"minZoomCount\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"maxZoomCount\", {\n    /**\r\n     * @return Max zoom count\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxZoomCount\");\n    },\n\n    /**\r\n     * Use this for [[CategoryAxis]] or [[DateAxis]].\r\n     *\r\n     * Limits how many categories or base intervals can be shown at the same\r\n     * time.\r\n     *\r\n     * If there are more items in the chart, the chart will auto-zoom.\r\n     *\r\n     * @default 0 (no limit)\r\n     * @since 4.6.2\r\n     * @param value  Max zoom count\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"maxZoomCount\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Called during the System.update method\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Component.prototype._systemCheckIfValidate = function () {\n    if (this.dataInvalid || this.dataProvider && this.dataProvider.dataInvalid) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n  /**\r\n   * Adds easing functions to \"function\" fields.\r\n   *\r\n   * @param field  Field name\r\n   * @return Assign as function?\r\n   */\n\n\n  Component.prototype.asFunction = function (field) {\n    return field == \"interpolationEasing\" || field == \"rangeChangeEasing\" || _super.prototype.asIs.call(this, field);\n  };\n\n  return Component;\n}(Container);\n\nexport { Component };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Component\"] = Component;","map":{"version":3,"sources":["../../../../src/.internal/core/Component.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"./Container\";\r\nimport { List, IListEvents, ListDisposer } from \"./utils/List\";\r\nimport { OrderedListTemplate, ISortedListEvents } from \"./utils/SortedList\";\r\nimport { Animation } from \"./utils/Animation\";\r\nimport { Dictionary } from \"./utils/Dictionary\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"./utils/Disposer\";\r\nimport { Export, IExportAdapters } from \"./export/Export\";\r\nimport { DataSource } from \"./data/DataSource\";\r\nimport { Responsive } from \"./utils/Responsive\";\r\nimport { system } from \"./System\";\r\n\r\nimport { DataItem } from \"./DataItem\";\r\nimport { registry } from \"./Registry\";\r\nimport { Preloader } from \"./elements/Preloader\";\r\nimport { IRange } from \"./defs/IRange\";\r\n\r\nimport * as $math from \"./utils/Math\";\r\nimport * as $array from \"./utils/Array\";\r\nimport * as $ease from \"./utils/Ease\";\r\nimport * as $utils from \"./utils/Utils\";\r\nimport * as $iter from \"./utils/Iterator\";\r\nimport * as $object from \"./utils/Object\";\r\nimport * as $type from \"./utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A list of available types for calculated values.\r\n */\r\nexport type CalculatedValue =\r\n\t\"value\" |\r\n\t\"percent\" |\r\n\t\"change\" |\r\n\t\"changePercent\" |\r\n\t\"startChangePercent\" |\r\n\t\"startChange\" |\r\n\t\"previousChangePercent\" |\r\n\t\"previousChange\" |\r\n\t\"sum\" |\r\n\t\"absoluteSum\" |\r\n\t\"average\" |\r\n\t\"open\" |\r\n\t\"close\" |\r\n\t\"low\" |\r\n\t\"high\" |\r\n\t\"count\" |\r\n\t\"total\" |\r\n\t\"totalPercent\" |\r\n\t\"stack\";\r\n\r\n/**\r\n * Defines properties for [[Component]].\r\n */\r\nexport interface IComponentProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Maximum zoom factor of a component.\r\n\t */\r\n\tmaxZoomFactor?: number;\r\n\r\n\t/**\r\n\t * Maximum zoom declination (how much out of 0-1 range it will allow to step out)\r\n\t *\r\n\t * @ignore\r\n\t * @default 0.5\r\n\t */\r\n\tmaxZoomDeclination?: number;\r\n\r\n\t/**\r\n\t * Use this for [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * Allows restricting zoom in beyond certain number of categories or base\r\n\t * intervals.\r\n\t *\r\n\t * The chart will not zoom in beyond this number of items.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tminZoomCount?: number;\r\n\r\n\t/**\r\n\t * Use this for [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * Limits how many categories or base intervals can be shown at the same\r\n\t * time.\r\n\t *\r\n\t * If there are more items in the chart, the chart will auto-zoom.\r\n\t *\r\n\t * @default 0 (no limit)\r\n\t */\r\n\tmaxZoomCount?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines data fields for [[Component]].\r\n */\r\nexport interface IComponentDataFields {\r\n\r\n\t/**\r\n\t * Data.\r\n\t */\r\n\tdata?: string;\r\n\r\n\t/**\r\n\t * ID.\r\n\t */\r\n\tid?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Component]].\r\n */\r\nexport interface IComponentEvents extends IContainerEvents {\r\n\r\n\t/**\r\n\t * Invoked when range of the currently selected data is validated.\r\n\t *\r\n\t * @todo: change to datarangevalidated?\r\n\t */\r\n\tdatarangechanged: {};\r\n\r\n\t/**\r\n\t * Invoked when the raw data for the component changes.\r\n\t */\r\n\tdatavalidated: {};\r\n\r\n\t/**\r\n\t * Invoked when value(s) of the element's data items are validated.\r\n\t */\r\n\tdataitemsvalidated: {};\r\n\r\n\t/**\r\n\t * Invoked just before element is validated (after changes).\r\n\t */\r\n\tbeforedatavalidated: {};\r\n\r\n\t/**\r\n\t * Invoked when range change animation starts\r\n\t */\r\n\trangechangestarted: {};\r\n\r\n\t/**\r\n\t * Invoked when range change animation ends\r\n\t */\r\n\trangechangeended: {};\r\n\r\n\t/**\r\n\t * Invoked when start position changes.\r\n\t *\r\n\t * Please note that `startchanged` event is dispatched immediately after\r\n\t * zoom occurs, so some related properties (e.g. `minZoomed` on [[ValueAxis]])\r\n\t * might not be yet updated.\r\n\t *\r\n\t * Use `startendchanged` event instead if you need to rely on updated\r\n\t * zoom-related values.\r\n\t */\r\n\tstartchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when end position changes\r\n\t *\r\n\t * Please note that `endhanged` event is dispatched immediately after\r\n\t * zoom occurs, so some related properties (e.g. `maxZoomed` on [[ValueAxis]])\r\n\t * might not be yet updated.\r\n\t *\r\n\t * Use `startendchanged` event instead if you need to rely on updated\r\n\t * zoom-related values.\r\n\t */\r\n\tendchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when start or end position changes, unlike startchanged/endchanged\r\n\t * this event is fired not immediately but at the end of a cycle.\r\n\t */\r\n\tstartendchanged: {};\r\n}\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface IComponentAdapters extends IContainerAdapters, IComponentProperties {\r\n\r\n\t/**\r\n\t * Applied after [[Component]] retrieves data value from data context\r\n\t * (raw data), but before it is provided to [[DataItem]].\r\n\t */\r\n\tdataContextValue: {\r\n\t\tvalue: any,\r\n\t\tfield: string,\r\n\t\tdataItem: DataItem\r\n\t};\r\n\r\n\t/**\r\n\t * Applied to chart's data before it is retrieved for use.\r\n\t */\r\n\tdata: any[];\r\n\r\n\tstart: number;\r\n\r\n\tend: number;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A Component represents an independent functional element or control, that\r\n * can have it's own behavior, children, data, etc.\r\n *\r\n * A few examples of a Component: [[Legend]], [[Series]], [[Scrollbar]].\r\n *\r\n * @see {@link IComponentEvents} for a list of available events\r\n * @see {@link IComponentAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class Component extends Container {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields!: IComponentDataFields;\r\n\r\n\t/**\r\n\t * Holds data field names.\r\n\t *\r\n\t * Data fields define connection beween [[DataItem]] and actual properties\r\n\t * in raw data.\r\n\t */\r\n\tpublic dataFields: this[\"_dataFields\"] = {};\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IComponentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IComponentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IComponentEvents;\r\n\r\n\t/**\r\n\t * Holds the data for the component.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _data: $type.Optional<any[]>;\r\n\r\n\t/**\r\n\t * A [[Component]] which provides data to this component (like Chart provides\r\n\t * data for Series).\r\n\t */\r\n\tpublic dataProvider: $type.Optional<Component>;\r\n\r\n\t/**\r\n\t * A list of [[DataSource]] definitions of external data source.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _dataSources: { [index: string]: DataSource } = {};\r\n\r\n\t/**\r\n\t * An instance of [[Responsive]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _responsive: $type.Optional<Responsive>;\r\n\r\n\t/**\r\n\t * This is used when only new data is invalidated (if added using `addData`\r\n\t * method).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _parseDataFrom: number = 0;\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected _dataUsers: $type.Optional<List<Component>>;\r\n\r\n\t/**\r\n\t * Holds the disposers for the dataItems and dataUsers\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _dataDisposers: Array<IDisposer> = [];\r\n\r\n\r\n\t/**\r\n\t * Identifies the type of the [[DataItem]] used in this element.\r\n\t */\r\n\tpublic _dataItem!: DataItem;\r\n\r\n\t/**\r\n\t * List of element's source data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _dataItems: $type.Optional<OrderedListTemplate<this[\"_dataItem\"]>>;\r\n\r\n\t/**\r\n\t * Holds aggregated data items.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic _dataSets: Dictionary<string, OrderedListTemplate<this[\"_dataItem\"]>>;\r\n\r\n\t/**\r\n\t * Currently selected \"data set\".\r\n\t *\r\n\t * If it's set to `\"\"`, main data set (unaggregated data) is used.\r\n\t */\r\n\tprotected _currentDataSetId: string = \"\";\r\n\r\n\t/**\r\n\t * [_startIndex description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _startIndex: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * [_endIndex description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _endIndex: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * [_start description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _start: number = 0;\r\n\r\n\t/**\r\n\t * [_end description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _end: number = 1;\r\n\r\n\t/**\r\n\t * [_finalStart description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _finalStart: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * [_finalEnd description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _finalEnd: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * If set to `true`, changing data range in element will not trigger\r\n\t * `daterangechanged` event.\r\n\t */\r\n\tpublic skipRangeEvent: boolean = false;\r\n\r\n\t/**\r\n\t * Whenever selected scope changes (chart is zoomed or panned), for example\r\n\t * by interaction from a Scrollbar, or API, a chart needs to reposition\r\n\t * its contents.\r\n\t *\r\n\t * `rangeChangeDuration` influences how this is performed.\r\n\t *\r\n\t * If set to zero (0), the change will happen instantenously.\r\n\t *\r\n\t * If set to non-zero value, the chart will gradually animate into new\r\n\t * position for the set amount of milliseconds.\r\n\t *\r\n\t * @default 0\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n\t */\r\n\tpublic rangeChangeDuration: number = 0;\r\n\r\n\t/**\r\n\t * An easing function to use for range change animation.\r\n\t *\r\n\t * @see {@link Ease}\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n\t */\r\n\tpublic rangeChangeEasing: (value: number) => number = $ease.cubicOut;\r\n\r\n\t/**\r\n\t * A reference to a currently playing range change [[Animation]] object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rangeChangeAnimation: $type.Optional<Animation>;\r\n\r\n\t/**\r\n\t * A duration (ms) of each data parsing step. A Component parses its data in\r\n\t * chunks in order to avoid completely freezing the machine when large data\r\n\t * sets are used. This setting will control how many milliseconds should pass\r\n\t * when parsing data until parser stops for a brief moment to let other\r\n\t * processes catch up.\r\n\t */\r\n\tpublic parsingStepDuration: number = 50;\r\n\r\n\t/**\r\n\t * [dataInvalid description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataInvalid: boolean = false;\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rawDataInvalid: boolean = false;\r\n\r\n\t/**\r\n\t * [dataRangeInvalid description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataRangeInvalid: boolean = false;\r\n\r\n\t/**\r\n\t * [dataItemsInvalid description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataItemsInvalid: boolean = false;\r\n\r\n\t/**\r\n\t * If set to a non-zero number the element will \"animate\" data values of its\r\n\t * children.\r\n\t *\r\n\t * This will happen on first load and whenever data values change.\r\n\t *\r\n\t * Enabling interpolation will mean that elements will transit smoothly into\r\n\t * new values rather than updating instantly.\r\n\t *\r\n\t * @default 0\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n\t */\r\n\tpublic interpolationDuration: number = 0;\r\n\r\n\t/**\r\n\t * An easing function to use for interpolating values when transiting from\r\n\t * one source value to another.\r\n\t *\r\n\t * @default cubicOut\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n\t * @see {@link Ease}\r\n\t */\r\n\tpublic interpolationEasing: (value: number) => number = $ease.cubicOut;\r\n\r\n\t/**\r\n\t * Indicates whether transition between data item's values should start and\r\n\t * play out all at once, or with a small delay (as defined by\r\n\t * `sequencedInterpolationDelay`) for each subsequent data item.\r\n\t *\r\n\t * @default true\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n\t */\r\n\tpublic sequencedInterpolation: boolean = true;\r\n\r\n\t/**\r\n\t * A delay (ms) to wait between animating each subsequent data item's\r\n\t * interpolation animation.\r\n\t *\r\n\t * Relative only if `sequencedInterpolation = true`.\r\n\t *\r\n\t * @default 0\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n\t */\r\n\tpublic sequencedInterpolationDelay: number = 0;\r\n\r\n\t/**\r\n\t * A progress (0-1) for the data validation process.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic dataValidationProgress: number = 0;\r\n\r\n\t/**\r\n\t * [_prevStartIndex description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected _prevStartIndex: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * [_prevEndIndex description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected _prevEndIndex: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * Sometimes we need to process more dataItems then actually is\r\n\t * selected (for example, not to cut lines at the end/beginning).\r\n\t * However when calculating averages, min, max, etc we need not to include\r\n\t * them. So we store `workingStartIndex` and `workingEndIndex` to know which\r\n\t * dataItems should be included and which should not.\r\n\t */\r\n\r\n\t/**\r\n\t * [_workingStartIndex description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected _workingStartIndex: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * [_workingEndIndex description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected _workingEndIndex: $type.Optional<number>;\r\n\r\n\tprotected _addAllDataItems: boolean = true;\r\n\r\n\tprotected _showOnInitDisposer2: IDisposer;\r\n\r\n\tprotected _usesData: boolean = true;\r\n\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Component\";\r\n\r\n\t\tthis.minZoomCount = 1;\r\n\t\tthis.maxZoomCount = 0;\r\n\r\n\t\tthis._dataItems = new OrderedListTemplate<DataItem>(this.createDataItem());\r\n\t\tthis._dataItems.events.on(\"inserted\", this.handleDataItemAdded, this, false);\r\n\t\tthis._dataItems.events.on(\"removed\", this.handleDataItemRemoved, this, false);\r\n\t\tthis._disposers.push(new ListDisposer(this._dataItems));\r\n\t\tthis._disposers.push(this._dataItems.template);\r\n\r\n\t\tthis.invalidateData();\r\n\r\n\t\t// TODO what about remove ?\r\n\t\tthis.dataUsers.events.on(\"inserted\", this.handleDataUserAdded, this, false);\r\n\r\n\t\t// Set up disposers\r\n\t\tthis._disposers.push(new MultiDisposer(this._dataDisposers));\r\n\r\n\t\tthis._start = 0;\r\n\t\tthis._end = 1;\r\n\r\n\t\tthis.maxZoomDeclination = 1;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new DataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataUserAdded description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param event Event object\r\n\t */\r\n\tprotected handleDataUserAdded(event: IListEvents<Component>[\"inserted\"]) {\r\n\t\tlet dataUser = event.newValue;\r\n\t\tdataUser.dataProvider = this;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic handleDataItemValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (!this.dataItemsInvalid) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingLocationChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingLocationChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemCalculatedValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemCalculatedValueChange(dataItem?: this[\"_dataItem\"], name?: string) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemPropertyChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemPropertyChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Populates a [[DataItem]] width data from data source.\r\n\t *\r\n\t * Loops through all the fields and if such a field is found in raw data\r\n\t * object, a corresponding value on passed in `dataItem` is set.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\tif (dataItem) {\r\n\t\t\tif (!dataContext) {\r\n\t\t\t\tdataContext = {};\r\n\t\t\t}\r\n\r\n\t\t\t// store reference to original data item\r\n\t\t\tdataItem.dataContext = dataContext;\r\n\r\n\t\t\tlet hasSomeValues = false;\r\n\r\n\t\t\t$object.each(this.dataFields, (key, fieldValue) => {\r\n\t\t\t\tconst fieldName: string = <string>key;\r\n\r\n\t\t\t\tlet value: any = (<any>dataContext)[fieldValue];\r\n\t\t\t\t// Apply adapters to a retrieved value\r\n\t\t\t\tif (this._adapterO) {\r\n\t\t\t\t\tif (this._adapterO.isEnabled(\"dataContextValue\")) {\r\n\t\t\t\t\t\tvalue = this._adapterO.apply(\"dataContextValue\", {\r\n\t\t\t\t\t\t\tfield: fieldName,\r\n\t\t\t\t\t\t\tvalue: value,\r\n\t\t\t\t\t\t\tdataItem: dataItem\r\n\t\t\t\t\t\t}).value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\t\thasSomeValues = true;\r\n\r\n\t\t\t\t\tif (dataItem.hasChildren[fieldName]) {\r\n\t\t\t\t\t\tlet template = this.createDataItem();\r\n\t\t\t\t\t\ttemplate.copyFrom(this.mainDataSet.template);\r\n\t\t\t\t\t\tlet children = new OrderedListTemplate<DataItem>(template);\r\n\t\t\t\t\t\tchildren.events.on(\"inserted\", this.handleDataItemAdded, this, false);\r\n\t\t\t\t\t\tchildren.events.on(\"removed\", this.handleDataItemRemoved, this, false);\r\n\t\t\t\t\t\tthis._dataDisposers.push(new ListDisposer(children));\r\n\t\t\t\t\t\tlet count = value.length;\r\n\t\t\t\t\t\tfor (let i = 0; i < count; i++) {\r\n\t\t\t\t\t\t\tlet rawDataItem = value[i];\r\n\t\t\t\t\t\t\tlet childDataItem: this[\"_dataItem\"] = children.create();\r\n\t\t\t\t\t\t\tchildDataItem.parent = dataItem;\r\n\t\t\t\t\t\t\tthis.processDataItem(childDataItem, rawDataItem);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlet anyDataItem = <any>dataItem;\r\n\t\t\t\t\t\tanyDataItem[fieldName] = <any>children;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t// data is converted to numbers/dates in each dataItem\r\n\t\t\t\t\t\t(<any>dataItem)[fieldName] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t$object.each(this.propertyFields, (key, fieldValue) => {\r\n\t\t\t\tconst f: string = <string>key;\r\n\t\t\t\tlet value: any = (<any>dataContext)[fieldValue];\r\n\r\n\t\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\t\thasSomeValues = true;\r\n\t\t\t\t\tdataItem.setProperty(f, value);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// @todo we might need some flag which would tell whether we should create empty data items or not.\r\n\t\t\tif (!this._addAllDataItems && !hasSomeValues) {\r\n\t\t\t\tthis.mainDataSet.remove(dataItem);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * When validating raw data, instead of processing data item, we update it\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param item\r\n\t */\r\n\tprotected updateDataItem(dataItem: this[\"_dataItem\"]): void {\r\n\t\tif (dataItem) {\r\n\r\n\t\t\tlet dataContext = dataItem.dataContext;\r\n\r\n\t\t\t$object.each(this.dataFields, (key, fieldValue) => {\r\n\t\t\t\tconst fieldName: string = <string>key;\r\n\r\n\t\t\t\tlet value: any = (<any>dataContext)[fieldValue];\r\n\t\t\t\t// Apply adapters to a retrieved value\r\n\t\t\t\tif (this._adapterO) {\r\n\t\t\t\t\tvalue = this._adapterO.apply(\"dataContextValue\", {\r\n\t\t\t\t\t\tfield: fieldName,\r\n\t\t\t\t\t\tvalue: value,\r\n\t\t\t\t\t\tdataItem: dataItem\r\n\t\t\t\t\t}).value;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\t\tif (dataItem.hasChildren[fieldName]) {\r\n\t\t\t\t\t\tlet anyDataItem = <any>dataItem;\r\n\t\t\t\t\t\tlet children = <OrderedListTemplate<this[\"_dataItem\"]>><any>(anyDataItem[fieldName]);\r\n\t\t\t\t\t\tchildren.each((child) => {\r\n\t\t\t\t\t\t\tthis.updateDataItem(child);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t// data is converted to numbers/dates in each dataItem\t\t\t\t\t\r\n\t\t\t\t\t\t(<any>dataItem)[fieldName] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t$object.each(this.propertyFields, (key, fieldValue) => {\r\n\t\t\t\tconst f: string = <string>key;\r\n\t\t\t\tlet value: any = (<any>dataContext)[fieldValue];\r\n\t\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\t\tdataItem.setProperty(f, value);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected validateDataElements() {\r\n\t\tlet count = this.endIndex;\r\n\r\n\t\tfor (let i = this.startIndex; i < count; i++) {\r\n\t\t\tconst dataItem = this.dataItems.getIndex(i);\r\n\r\n\t\t\t// TODO is this correct\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates this element and its related elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tthis.validateDataElements();\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElement description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem [description]\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds one or several (array) of data items to the existing data.\r\n\t *\r\n\t * @param rawDataItem One or many raw data item objects\r\n\t */\r\n\tpublic addData(rawDataItem: Object | Object[], removeCount?: number, skipRaw?:boolean): void {\r\n\r\n\t\t// need to check if data is invalid, as addData might be called multiple times\r\n\t\tif (!this.dataInvalid && this.inited) {\r\n\t\t\tthis._parseDataFrom = this.data.length; // save length of parsed data\r\n\t\t}\r\n\r\n\t\tif(!skipRaw){\r\n\t\t\tif (rawDataItem instanceof Array) {\r\n\t\t\t\t// can't use concat because new array is returned\r\n\t\t\t\t$array.each(rawDataItem, (dataItem) => {\r\n\t\t\t\t\tthis.data.push(dataItem);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.data.push(rawDataItem); // add to raw data array\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.inited) {\r\n\t\t\tthis.removeData(removeCount, skipRaw);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif ($type.isNumber(removeCount)) {\r\n\t\t\t\twhile (removeCount > 0) {\r\n\t\t\t\t\tthis.data.shift();\r\n\t\t\t\t\tremoveCount--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.invalidateData();\r\n\t}\r\n\r\n\t/**\r\n\t * Removes elements from the beginning of data\r\n\t *\r\n\t * @param count number of elements to remove\r\n\t */\r\n\tpublic removeData(count: $type.Optional<number>, skipRaw?:boolean) {\r\n\t\tif ($type.isNumber(count) && count > 0) {\r\n\t\t\twhile (count > 0) {\r\n\t\t\t\tlet dataItem = this.mainDataSet.getIndex(0);\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tthis.mainDataSet.remove(dataItem);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.dataUsers.each((dataUser) => {\r\n\t\t\t\t\tif (!dataUser.data || dataUser.data.length == 0) {\r\n\t\t\t\t\t\tlet dataItem = dataUser.mainDataSet.getIndex(0);\r\n\t\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\t\tdataUser.mainDataSet.remove(dataItem);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tif(!skipRaw){\r\n\t\t\t\t\tthis.data.shift();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this._parseDataFrom > 0) {\r\n\t\t\t\t\tthis._parseDataFrom--;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcount--;\r\n\t\t\t}\r\n\t\t\t// changed from invalidateData since 4.7.19 to solve #51551\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a data (re)parsing.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateData(): void {\r\n\t\tif (this.disabled || this.isTemplate) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//if(!this.dataInvalid){\r\n\t\tregistry.addToInvalidComponents(this);\r\n\t\tsystem.requestFrame();\r\n\t\tthis.dataInvalid = true;\r\n\r\n\t\t$iter.each(this.dataUsers.iterator(), (x) => {\r\n\t\t\tx.invalidateDataItems();\r\n\t\t});\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * [invalidateDataUsers description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic invalidateDataUsers(): void {\r\n\t\t$iter.each(this.dataUsers.iterator(), (x) => {\r\n\t\t\tx.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates data values. When data array is not changed, but values within\r\n\t * it changes, we invalidate data so that component would process changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateDataItems(): void {\r\n\t\tif (this.disabled || this.isTemplate) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//if(!this.dataItemsInvalid){\r\n\t\t$array.move(registry.invalidDataItems, this);\r\n\t\tsystem.requestFrame();\r\n\r\n\t\tthis.dataItemsInvalid = true;\r\n\r\n\t\t$iter.each(this.dataUsers.iterator(), (x) => {\r\n\t\t\tx.invalidateDataItems();\r\n\t\t});\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates data range. This is done when data which must be shown\r\n\t * changes (chart is zoomed for example).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateDataRange(): void {\r\n\t\tif (this.disabled || this.isTemplate) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//if(!this.dataRangeInvalid){\r\n\t\tthis.dataRangeInvalid = true;\r\n\t\t$array.move(registry.invalidDataRange, this);\r\n\t\tsystem.requestFrame();\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data range.\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataRange(): void {\r\n\t\t$array.remove(registry.invalidDataRange, this);\r\n\t\tthis.dataRangeInvalid = false;\r\n\r\n\t\tif (this.startIndex != this._prevStartIndex || this.endIndex != this._prevEndIndex) {\r\n\t\t\tthis.rangeChangeUpdate();\r\n\t\t\tthis.appendDataItems();\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.dispatchImmediately(\"datarangechanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [sliceData description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected sliceData() {\r\n\t\tthis._workingStartIndex = this.startIndex;\r\n\t\tthis._workingEndIndex = this.endIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * [rangeChangeUpdate description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected rangeChangeUpdate() {\r\n\t\tthis.sliceData();\r\n\t\tthis._prevStartIndex = this.startIndex;\r\n\t\tthis._prevEndIndex = this.endIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * [appendDataItems description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected appendDataItems() {\r\n\t\t// TODO use an iterator instead\r\n\t\tlet count = this.endIndex;\r\n\t\tfor (let i: number = this.startIndex; i < count; i++) {\r\n\r\n\t\t\t// data item\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < this.startIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif(dataItem){\r\n\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (let i = this.endIndex; i < this.dataItems.length; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif(dataItem){\r\n\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * If you want to have a smooth transition from one data values to another, you change your raw data and then you must call this method.\r\n\t * then instead of redrawing everything, the chart will check raw data and smoothly transit from previous to new data\r\n\t */\r\n\tpublic invalidateRawData(): void {\r\n\t\tif (this.disabled || this.isTemplate) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//if(!this.rawDataInvalid){\r\n\t\t$array.move(registry.invalidRawDatas, this);\r\n\t\tsystem.requestFrame();\r\n\r\n\t\tthis.rawDataInvalid = true;\r\n\r\n\t\t$iter.each(this.dataUsers.iterator(), (x) => {\r\n\t\t\tx.invalidateRawData();\r\n\t\t});\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic validateRawData() {\r\n\t\t$array.remove(registry.invalidRawDatas, this);\r\n\t\t$iter.each(this.mainDataSet.iterator(), (dataItem) => {\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tthis.updateDataItem(dataItem);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose() {\r\n\t\tthis.mainDataSet.template.clones.clear();\r\n\t\t$object.each(this._dataSources, (key, source) => {\r\n\t\t\tthis.removeDispose(source);\r\n\t\t});\r\n\t\tsuper.dispose();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tthis.mainDataSet.template.clones.clear();\r\n\r\n\t\t$array.each(this._dataDisposers, (x) => {\r\n\t\t\tx.dispose();\r\n\t\t});\r\n\r\n\t\t// and for all components\r\n\t\t$iter.each(this.dataUsers.iterator(), (dataUser) => {\r\n\t\t\tdataUser.disposeData();\r\n\t\t});\r\n\r\n\t\tthis._dataDisposers.length = 0;\r\n\r\n\t\tthis._startIndex = undefined;\r\n\t\tthis._endIndex = undefined;\r\n\r\n\t\t// dispose old\r\n\t\tthis.mainDataSet.clear();\r\n\r\n\t\tthis.mainDataSet.template.clones.clear();\r\n\r\n\t\tif (this._dataSets) {\r\n\t\t\tthis._dataSets.clear();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected getDataItem(dataContext?: any): this[\"_dataItem\"] {\r\n\t\treturn this.mainDataSet.create();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis.dispatchImmediately(\"beforedatavalidated\");\r\n\r\n\t\tthis.dataInvalid = false;\r\n\r\n\t\tregistry.removeFromInvalidComponents(this);\r\n\r\n\t\tif (this.__disabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.dataValidationProgress = 0;\r\n\t\t// need this to slice new data\r\n\t\tthis._prevStartIndex = undefined;\r\n\t\tthis._prevEndIndex = undefined;\r\n\r\n\t\t// todo: this needs some overthinking, maybe some extra settings like zoomOotonDataupdate like in v3 or so. some charts like pie chart probably should act like this always\r\n\t\tthis._startIndex = undefined;\r\n\t\tthis._endIndex = undefined;\r\n\r\n\t\tif (this.dataFields.data && this.dataItem) {\r\n\t\t\tlet dataContext = <any>this.dataItem.dataContext;\r\n\t\t\tthis._data = dataContext[this.dataFields.data];\r\n\t\t}\r\n\r\n\t\t// data items array is reset only if all data is validated, if _parseDataFrom is not 0, we append new data only\r\n\t\t// check heatmap demo if uncommented\r\n\t\t// fixed both issues by adding && this.data.length > 0\r\n\t\t// check adding series example if changed\r\n\t\tif (this._parseDataFrom === 0 && this.data.length > 0) {\r\n\t\t\tthis.disposeData();\r\n\t\t}\r\n\r\n\t\tif (this.data.length > 0) {\r\n\t\t\tlet preloader: $type.Optional<Preloader> = this.preloader;\r\n\r\n\t\t\t// and for all components\r\n\t\t\t$iter.each(this.dataUsers.iterator(), (dataUser) => {\r\n\t\t\t\t// todo: this needs some overthinking, maybe some extra settings like zoomOUtonDataupdate like in v3 or so. some charts like pie chart probably should act like this always\r\n\t\t\t\tdataUser._startIndex = undefined;\r\n\t\t\t\tdataUser._endIndex = undefined;\r\n\t\t\t});\r\n\r\n\t\t\tlet counter: number = 0;\r\n\t\t\tlet startTime: number = Date.now();\r\n\t\t\t// parse data\r\n\t\t\tlet i = this._parseDataFrom;\r\n\t\t\tlet n = this.data.length;\r\n\r\n\t\t\tfor (i; i < n; i++) {\r\n\t\t\t\tlet rawDataItem = this.data[i];\r\n\t\t\t\tif (this._usesData) {\r\n\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.getDataItem(rawDataItem);\r\n\t\t\t\t\tthis.processDataItem(dataItem, rawDataItem);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.dataUsers.each((dataUser) => {\r\n\t\t\t\t\tif (dataUser.data.length == 0) { // checking if data is not set directly\r\n\t\t\t\t\t\tlet dataUserDataItem: DataItem = dataUser.getDataItem(rawDataItem);\r\n\t\t\t\t\t\tdataUser.processDataItem(dataUserDataItem, rawDataItem);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tcounter++;\r\n\r\n\t\t\t\t// show preloader if this takes too many time\r\n\t\t\t\tif (counter == 100) { // no need to check it on each data item\r\n\t\t\t\t\tcounter = 0;\r\n\t\t\t\t\tlet elapsed: number = Date.now() - startTime;\r\n\r\n\t\t\t\t\tif (elapsed > this.parsingStepDuration) {\r\n\t\t\t\t\t\tif (i < this.data.length - 10) {\r\n\t\t\t\t\t\t\tthis._parseDataFrom = i + 1;\r\n\r\n\t\t\t\t\t\t\t// update preloader\r\n\t\t\t\t\t\t\tif (preloader) {\r\n\t\t\t\t\t\t\t\tif (i / this.data.length > 0.5 && !preloader.visible) {\r\n\t\t\t\t\t\t\t\t\t// do not start showing\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tpreloader.progress = i / this.data.length;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tthis.dataValidationProgress = i / this.data.length;\r\n\r\n\t\t\t\t\t\t\ti = this.data.length; // stops cycle\r\n\t\t\t\t\t\t\tthis.invalidateData();\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (preloader) {\r\n\t\t\t\tpreloader.progress = 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataUsers.each((dataUser) => {\r\n\t\t\t\tif (dataUser.hidden) {\r\n\t\t\t\t\tdataUser.hide(0);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis.dataValidationProgress = 1;\r\n\t\tthis._parseDataFrom = 0; // reset this index, it is set to dataItems.length if addData() method was used.\r\n\r\n\t\tthis.invalidateDataItems();\r\n\r\n\t\tif (!this._internalDefaultsApplied) {\r\n\t\t\tthis.applyInternalDefaults();\r\n\t\t}\r\n\r\n\t\tthis.dispatch(\"datavalidated\"); // can't zoom chart if dispatched immediately\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\t\t$array.remove(registry.invalidDataItems, this);\r\n\r\n\t\tthis.dataItemsInvalid = false;\r\n\r\n\t\tthis.invalidateDataRange();\r\n\t\tthis.invalidate();\r\n\t\tthis.dispatch(\"dataitemsvalidated\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets source (raw) data for the element. The \"data\" is always an `Array`\r\n\t * of objects.\r\n\t *\r\n\t * IMPORTANT: The order of data items in `data` array is important as it\r\n\t * might affect chart look and behavior. [More details](https://www.amcharts.com/docs/v4/concepts/data/#Order_of_data_items).\r\n\t *\r\n\t * @param value Data\r\n\t */\r\n\tpublic set data(value: any[]) {\r\n\t\tthis.setData(value);\r\n\t}\r\n\r\n\tprotected setData(value: any[]) {\r\n\t\t// array might be the same, but there might be items added\r\n\t\t// todo: check if array changed, toString maybe?\r\n\t\t//if (this._data != value) {\r\n\t\tthis._parseDataFrom = 0;\r\n\t\tthis.disposeData();\r\n\t\tthis._data = value;\r\n\t\tif (value && value.length > 0) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.dispatchImmediately(\"beforedatavalidated\");\r\n\t\t\tthis.dispatch(\"datavalidated\");\r\n\t\t}\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns element's source (raw) data.\r\n\t *\r\n\t * @return Data\r\n\t */\r\n\tpublic get data(): any[] {\r\n\t\tif (!this._data) {\r\n\t\t\tthis._data = [];\r\n\t\t}\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn this._data;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"data\", this._data);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns (creates if necessary) a [[DataSource]] bound to any specific\r\n\t * property.\r\n\t *\r\n\t * For example if I want to bind `data` to an external JSON file, I'd create\r\n\t * a DataSource for it.\r\n\t *\r\n\t * @param property  Property to bind external data to\r\n\t * @return A DataSource for property\r\n\t */\r\n\tpublic getDataSource(property: string): DataSource {\r\n\t\tif (!$type.hasValue(this._dataSources[property])) {\r\n\t\t\tthis._dataSources[property] = new DataSource();\r\n\t\t\tthis._dataSources[property].component = this;\r\n\t\t\tthis.setDataSourceEvents(this._dataSources[property], property);\r\n\t\t\tthis._dataSources[property].adapter.add(\"dateFields\", (val) => {\r\n\t\t\t\treturn this.dataSourceDateFields(val);\r\n\t\t\t});\r\n\t\t\tthis._dataSources[property].adapter.add(\"numberFields\", (val) => {\r\n\t\t\t\treturn this.dataSourceNumberFields(val);\r\n\t\t\t});\r\n\t\t\tthis.events.on(\"inited\", () => {\r\n\t\t\t\tthis.loadData(property);\r\n\t\t\t}, this, false);\r\n\t\t}\r\n\t\treturn this._dataSources[property];\r\n\t}\r\n\r\n\t/**\r\n\t *A [[DataSource]] to be used for loading Component's data.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/loading-external-data/} for more on loading external data\r\n\t * @param value  Data source\r\n\t */\r\n\tpublic set dataSource(value: DataSource) {\r\n\t\tif (this._dataSources[\"data\"]) {\r\n\t\t\tthis.removeDispose(this._dataSources[\"data\"]);\r\n\t\t}\r\n\t\tthis._dataSources[\"data\"] = value;\r\n\t\tthis._dataSources[\"data\"].component = this;\r\n\t\tthis.events.on(\"inited\", () => {\r\n\t\t\tthis.loadData(\"data\")\r\n\t\t}, this, false);\r\n\t\tthis.setDataSourceEvents(value, \"data\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Data source\r\n\t */\r\n\tpublic get dataSource(): DataSource {\r\n\t\tif (!this._dataSources[\"data\"]) {\r\n\t\t\tthis.getDataSource(\"data\");\r\n\t\t}\r\n\t\treturn this._dataSources[\"data\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Initiates loading of the external data via [[DataSource]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected loadData(property: string): void {\r\n\t\tthis._dataSources[property].load();\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Array of date fields\r\n\t * @return Array of date fields populated with chart's date fields\r\n\t */\r\n\tprotected dataSourceDateFields(value: string[]): string[] {\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Array of number fields\r\n\t * @return Array of number fields populated with chart's number fields\r\n\t */\r\n\tprotected dataSourceNumberFields(value: string[]): string[] {\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param list        [description]\r\n\t * @param dataFields  [description]\r\n\t * @param targetList  [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected populateDataSourceFields(list: string[], dataFields: { [index: string]: string }, targetList: string[]): string[] {\r\n\t\t$array.each(targetList, (value: string) => {\r\n\t\t\tif (dataFields[value] && $array.indexOf(list, dataFields[value]) === -1) {\r\n\t\t\t\tlist.push(dataFields[value]);\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn list;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets events on a [[DataSource]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected setDataSourceEvents(ds: DataSource, property?: string): void {\r\n\t\tds.events.on(\"started\", (ev) => {\r\n\t\t\tconst preloader = this.preloader;\r\n\t\t\tif (preloader) {\r\n\t\t\t\tpreloader.progress = 0;\r\n\t\t\t\t//preloader.label.text = this.language.translate(\"Loading\");\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\t\tds.events.on(\"loadstarted\", (ev) => {\r\n\t\t\tconst preloader = this.preloader;\r\n\t\t\tif (preloader) {\r\n\t\t\t\tpreloader.progress = 0.25;\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\t\tds.events.on(\"loadended\", (ev) => {\r\n\t\t\tconst preloader = this.preloader;\r\n\t\t\tif (preloader) {\r\n\t\t\t\tpreloader.progress = 0.5;\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\t\tds.events.on(\"parseended\", (ev) => {\r\n\t\t\tconst preloader = this.preloader;\r\n\t\t\tif (preloader) {\r\n\t\t\t\tpreloader.progress = 0.75;\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\t\tds.events.on(\"ended\", (ev) => {\r\n\t\t\tconst preloader = this.preloader;\r\n\t\t\tif (preloader) {\r\n\t\t\t\tpreloader.progress = 1;\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\t\tds.events.on(\"error\", (ev) => {\r\n\t\t\tconst preloader = this.preloader;\r\n\t\t\tif (preloader) {\r\n\t\t\t\tpreloader.progress = 1;\r\n\t\t\t}\r\n\t\t\tthis.openModal(ev.message);\r\n\t\t}, undefined, false);\r\n\r\n\t\tif (property) {\r\n\t\t\tds.events.on(\"done\", (ev) => {\r\n\t\t\t\tconst preloader = this.preloader;\r\n\t\t\t\tif (preloader) {\r\n\t\t\t\t\tpreloader.progress = 1;\r\n\t\t\t\t}\r\n\t\t\t\tif (property == \"data\" && !$type.isArray(ev.data)) {\r\n\t\t\t\t\tev.data = [ev.data];\r\n\t\t\t\t}\r\n\t\t\t\tif (ds.incremental && property == \"data\" && this.data.length) {\r\n\t\t\t\t\tthis.addData(ev.data, ds.keepCount ? ev.data.length : 0);\r\n\t\t\t\t}\r\n\t\t\t\telse if (ds.updateCurrentData && property == \"data\" && this.data.length) {\r\n\t\t\t\t\t// cycle through existing data items\r\n\t\t\t\t\t$array.each(this.data, (item, index) => {\r\n\t\t\t\t\t\tif ($type.hasValue(ev.data[index])) {\r\n\t\t\t\t\t\t\t$object.each(item, (key, val) => {\r\n\t\t\t\t\t\t\t\tif ($type.hasValue(ev.data[index][key])) {\r\n\t\t\t\t\t\t\t\t\titem[key] = ev.data[index][key];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tthis.invalidateRawData();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t(<any>this)[property] = ev.data;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Responsive]] instance to be used when applying conditional\r\n\t * property values.\r\n\t *\r\n\t * NOTE: Responsive features are currently in development and may not work\r\n\t * as expected, if at all.\r\n\t *\r\n\t * @param value  Responsive rules handler\r\n\t */\r\n\tpublic set responsive(value: Responsive) {\r\n\t\tthis._responsive = value;\r\n\t\tthis._responsive.component = this;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Responsive rules handler\r\n\t */\r\n\tpublic get responsive(): Responsive {\r\n\t\tif (!this._responsive) {\r\n\t\t\tthis._responsive = new Responsive();\r\n\t\t\tthis._responsive.component = this;\r\n\t\t}\r\n\t\treturn this._responsive;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets current zoom.\r\n\t *\r\n\t * The range uses relative values from 0 to 1, with 0 marking beginning and 1\r\n\t * marking end of the available data range.\r\n\t *\r\n\t * This method will not have any effect when called on a chart object.\r\n\t * Since the chart can have a number of axes and series, each with its own\r\n\t * data, the meaning of \"range\" is very ambiguous.\r\n\t *\r\n\t * To zoom the chart use `zoom*` methods on its respective axes.\r\n\t *\r\n\t * @param range          Range\r\n\t * @param skipRangeEvent Should rangechanged event not be triggered?\r\n\t * @param instantly      Do not animate?\r\n\t * @return Actual modidied range (taking `maxZoomFactor` into account)\r\n\t */\r\n\tpublic zoom(range: IRange, skipRangeEvent: boolean = false, instantly: boolean = false, declination?: number): IRange {\r\n\t\tlet start: $type.Optional<number> = range.start;\r\n\t\tlet end = range.end;\r\n\t\tlet priority = range.priority;\r\n\r\n\t\tif (range.start == range.end) {\r\n\t\t\trange.start = range.start - 0.5 / this.maxZoomFactor;\r\n\t\t\trange.end = range.end + 0.5 / this.maxZoomFactor;\r\n\t\t}\r\n\r\n\t\tif (priority == \"end\" && end == 1 && start != 0) {\r\n\t\t\tif (start < this.start) {\r\n\t\t\t\tpriority = \"start\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (priority == \"start\" && start == 0) {\r\n\t\t\tif (end > this.end) {\r\n\t\t\t\tpriority = \"end\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(declination)) {\r\n\t\t\tdeclination = this.maxZoomDeclination;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(start) || !$type.isNumber(end)) {\r\n\t\t\treturn { start: this.start, end: this.end };\r\n\t\t}\r\n\r\n\t\tif (this._finalStart != start || this._finalEnd != end) {\r\n\r\n\t\t\tlet maxZoomFactor: number = this.maxZoomFactor / this.minZoomCount;\r\n\t\t\tlet minZoomFactor: number = this.maxZoomFactor / this.maxZoomCount;\r\n\r\n\t\t\t// most likely we are dragging left scrollbar grip here, so we tend to modify end\r\n\r\n\t\t\tif (priority == \"start\") {\r\n\r\n\t\t\t\tif (this.maxZoomCount > 0) {\r\n\t\t\t\t\t// add to the end\r\n\t\t\t\t\tif (1 / (end - start) < minZoomFactor) {\r\n\t\t\t\t\t\tend = start + 1 / minZoomFactor;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// add to the end\r\n\t\t\t\tif (1 / (end - start) > maxZoomFactor) {\r\n\t\t\t\t\tend = start + 1 / maxZoomFactor;\r\n\t\t\t\t}\r\n\t\t\t\t//unless end is > 0\r\n\t\t\t\tif (end > 1 && end - start < 1 / maxZoomFactor) {\r\n\t\t\t\t\t//end = 1;\r\n\t\t\t\t\tstart = end - 1 / maxZoomFactor;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// most likely we are dragging right, so we modify left\r\n\t\t\telse {\r\n\r\n\t\t\t\tif (this.maxZoomCount > 0) {\r\n\t\t\t\t\t// add to the end\r\n\t\t\t\t\tif (1 / (end - start) < minZoomFactor) {\r\n\t\t\t\t\t\tstart = end - 1 / minZoomFactor;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// remove from start\r\n\t\t\t\tif (1 / (end - start) > maxZoomFactor) {\r\n\t\t\t\t\tstart = end - 1 / maxZoomFactor;\r\n\t\t\t\t}\r\n\t\t\t\tif (start < 0 && end - start < 1 / maxZoomFactor) {\r\n\t\t\t\t\t//start = 0;\r\n\t\t\t\t\tend = start + 1 / maxZoomFactor;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (start < - declination) {\r\n\t\t\t\tstart = - declination;\r\n\t\t\t}\r\n\r\n\t\t\tif (1 / (end - start) > maxZoomFactor) {\r\n\t\t\t\tend = start + 1 / maxZoomFactor;\r\n\t\t\t}\r\n\r\n\t\t\tif (end > 1 + declination) {\r\n\t\t\t\tend = 1 + declination;\r\n\t\t\t}\r\n\r\n\t\t\tif (1 / (end - start) > maxZoomFactor) {\r\n\t\t\t\tstart = end - 1 / maxZoomFactor;\r\n\t\t\t}\r\n\r\n\t\t\tthis._finalEnd = end;\r\n\t\t\tthis._finalStart = start;\r\n\r\n\t\t\tthis.skipRangeEvent = skipRangeEvent;\r\n\r\n\t\t\tthis.dispatchImmediately(\"rangechangestarted\");\r\n\r\n\t\t\tif (this.rangeChangeDuration > 0 && !instantly) {\r\n\r\n\t\t\t\t// todo: maybe move this to Animation\r\n\t\t\t\tlet rangeChangeAnimation: $type.Optional<Animation> = this.rangeChangeAnimation;\r\n\t\t\t\tif (rangeChangeAnimation && rangeChangeAnimation.progress < 1) {\r\n\t\t\t\t\tlet options = rangeChangeAnimation.animationOptions;\r\n\t\t\t\t\tif (options.length > 1) {\r\n\t\t\t\t\t\tif (options[0].to == start && options[1].to == end) {\r\n\t\t\t\t\t\t\treturn { start: start, end: end };\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (!rangeChangeAnimation.isDisposed()) {\r\n\t\t\t\t\t\t\t\trangeChangeAnimation.stop();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.rangeChangeAnimation) {\r\n\t\t\t\t\tthis.rangeChangeAnimation.kill();\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeChangeAnimation = this.animate([{ property: \"start\", to: start }, { property: \"end\", to: end }], this.rangeChangeDuration, this.rangeChangeEasing);\r\n\t\t\t\tthis.rangeChangeAnimation = rangeChangeAnimation;\r\n\r\n\t\t\t\tif (rangeChangeAnimation && !rangeChangeAnimation.isFinished()) {\r\n\t\t\t\t\trangeChangeAnimation.events.on(\"animationended\", () => {\r\n\t\t\t\t\t\tthis.dispatchImmediately(\"rangechangeended\");\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.dispatchImmediately(\"rangechangeended\");\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.start = start;\r\n\t\t\t\tthis.end = end;\r\n\t\t\t\tthis.dispatch(\"rangechangeended\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn { start: start, end: end };\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to specific data items using their index in data.\r\n\t *\r\n\t * This method will not have any effect when called on a chart object.\r\n\t * Since the chart can have a number of axes and series, each with its own\r\n\t * data, the meaning of \"index\" is very ambiguous.\r\n\t *\r\n\t * To zoom the chart use `zoom*` methods on its respective axes.\r\n\t *\r\n\t * @param startIndex     Index of the starting data item\r\n\t * @param endIndex       Index of the ending data item\r\n\t * @param skipRangeEvent Should rangechanged event not be triggered?\r\n\t * @param instantly      Do not animate?\r\n\t */\r\n\tpublic zoomToIndexes(startIndex: number, endIndex: number, skipRangeEvent?: boolean, instantly?: boolean) {\r\n\t\tif (!$type.isNumber(startIndex) || !$type.isNumber(endIndex)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet start: number = startIndex / this.dataItems.length;\r\n\t\tlet end: number = endIndex / this.dataItems.length;\r\n\r\n\t\tthis.zoom({ start: start, end: end }, skipRangeEvent, instantly);\r\n\t}\r\n\r\n\t/**\r\n\t * A current zoom factor (0-1). 1 meaning fully zoomed out. (showing all of\r\n\t * the available data)\r\n\t *\r\n\t * @return Zoom factor\r\n\t */\r\n\tpublic get zoomFactor(): number {\r\n\t\treturn $math.fitToRange(1 / (this.end - this.start), 1, this.maxZoomFactor);\r\n\t}\r\n\r\n\t/**\r\n\t * Max available `zoomFactor`.\r\n\t *\r\n\t * The element will not allow zoom to occur beyond this factor.\r\n\t *\r\n\t * [[DateAxis]] and [[CategoryAxis]] calculate this atutomatically so that\r\n\t * category axis could be zoomed to one category and date axis allows to be\r\n\t * zoomed up to one base interval.\r\n\t *\r\n\t * In case you want to restrict category or date axis to be zoomed to more\r\n\t * than one category or more than one base interval, use `minZoomCount`\r\n\t * property (set it to `> 1`).\r\n\t *\r\n\t * Default value of [[ValueAxis]]'s `maxZoomFactor` is `1000`.\r\n\t *\r\n\t * Feel free to modify it to allow bigger zoom or to restrict zooming.\r\n\t *\r\n\t * @param value  Maximum zoomFactor\r\n\t */\r\n\tpublic set maxZoomFactor(value: number) {\r\n\t\tif (this.setPropertyValue(\"maxZoomFactor\", value)) {\r\n\t\t\tif (value == 1) {\r\n\t\t\t\tthis.maxZoomDeclination = 0;\r\n\t\t\t}\r\n\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Maximum zoomFactor\r\n\t */\r\n\tpublic get maxZoomFactor(): number {\r\n\t\treturn this.getPropertyValue(\"maxZoomFactor\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Max zoom declination.\r\n\t *\r\n\t * @ignore\r\n\t * @default 1\r\n\t * @param value  Maximum zoom declination\r\n\t */\r\n\tpublic set maxZoomDeclination(value: number) {\r\n\t\tif (this.setPropertyValue(\"maxZoomDeclination\", value)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @return Maximum zoom declination\r\n\t */\r\n\tpublic get maxZoomDeclination(): number {\r\n\t\treturn this.getPropertyValue(\"maxZoomDeclination\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets current starting index.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Start index\r\n\t */\r\n\tpublic set startIndex(value: number) {\r\n\t\tthis._startIndex = $math.fitToRange(Math.round(value), 0, this.dataItems.length);\r\n\t\t//this._workingStartIndex = this._startIndex; // not good, breaks adjusted working start index of line series\r\n\t\tthis.start = this.indexToPosition(this._startIndex);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @todo:review description\r\n\t * returns item's relative position by the index of the item\r\n\t * @param index\r\n\t */\r\n\tpublic indexToPosition(index: number) {\r\n\t\treturn index / this.dataItems.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Current starting index.\r\n\t *\r\n\t * @return Start index\r\n\t */\r\n\tpublic get startIndex(): number {\r\n\t\tif (!$type.isNumber(this._startIndex)) {\r\n\t\t\tthis._startIndex = 0;\r\n\t\t}\r\n\r\n\t\treturn this._startIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets current ending index.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value End index\r\n\t */\r\n\tpublic set endIndex(value: number) {\r\n\t\tthis._endIndex = $math.fitToRange(Math.round(value), 0, this.dataItems.length);\r\n\t\t//this._workingEndIndex = this._endIndex; // not good, breaks adjusted workingend index of line series\r\n\t\tthis.end = this.indexToPosition(this._endIndex);\r\n\t}\r\n\r\n\t/**\r\n\t * Current ending index.\r\n\t *\r\n\t * @return End index\r\n\t */\r\n\tpublic get endIndex(): number {\r\n\t\tlet count = this.dataItems.length;\r\n\t\tif (!$type.isNumber(this._endIndex) || this._endIndex > count) {\r\n\t\t\tthis._endIndex = count;\r\n\t\t}\r\n\t\treturn this._endIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * Start of the current data range (zoom).\r\n\t *\r\n\t * These are relative values from 0 (beginning) to 1 (end).\r\n\t *\r\n\t * @param value Start (0-1)\r\n\t */\r\n\tpublic set start(value: number) {\r\n\t\t// value = $math.round(value, 10); not good\r\n\r\n\t\t//if (1 / (this.end - value) > this.maxZoomFactor) {\r\n\t\t//\tvalue = this.end - 1 / this.maxZoomFactor;\r\n\t\t//}\r\n\t\tif (this._start != value) {\r\n\t\t\tthis._start = value;\r\n\t\t\tlet startIndex = Math.max(0, Math.floor(this.dataItems.length * value) || 0);\r\n\t\t\tthis._startIndex = Math.min(startIndex, this.dataItems.length);\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.dispatchImmediately(\"startchanged\");\r\n\t\t\tthis.dispatch(\"startendchanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start (0-1)\r\n\t */\r\n\tpublic get start(): number {\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn this._start;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"start\", this._start);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * End of the current data range (zoom).\r\n\t *\r\n\t * These are relative values from 0 (beginning) to 1 (end).\r\n\t *\r\n\t * @param value End (0-1)\r\n\t */\r\n\tpublic set end(value: number) {\r\n\t\t// value = $math.round(value, 10); // not good\r\n\r\n\t\t//if (1 / (value - this.start) > this.maxZoomFactor) {\r\n\t\t//\tvalue = 1 / this.maxZoomFactor + this.start;\r\n\t\t//}\r\n\r\n\t\tif (this._end != value) {\r\n\t\t\tthis._end = value;\r\n\t\t\tthis._endIndex = Math.min(this.dataItems.length, Math.ceil(this.dataItems.length * value) || 0);\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.dispatchImmediately(\"endchanged\");\r\n\t\t\tthis.dispatch(\"startendchanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End (0-1)\r\n\t */\r\n\tpublic get end(): number {\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn this._end;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"end\", this._end);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [removeFromInvalids description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected removeFromInvalids(): void {\r\n\t\tsuper.removeFromInvalids();\r\n\t\tregistry.removeFromInvalidComponents(this);\r\n\t\t$array.remove(registry.invalidDataItems, this);\r\n\t\t$array.remove(registry.invalidDataRange, this);\r\n\t\t$array.remove(registry.invalidRawDatas, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a list of source [[DataItem]] objects currently used in the chart.\r\n\t *\r\n\t * @return List of data items\r\n\t */\r\n\tpublic get dataItems(): OrderedListTemplate<this[\"_dataItem\"]> {\r\n\t\tif (this._currentDataSetId != \"\") {\r\n\t\t\tlet dataItems = this.dataSets.getKey(this._currentDataSetId);\r\n\t\t\tif (dataItems) {\r\n\t\t\t\treturn dataItems;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._dataItems;\r\n\t}\r\n\r\n\t/**\r\n\t * Holds data items for data sets (usually aggregated data).\r\n\t *\r\n\t * @ignore\r\n\t * @since 4.7.0\r\n\t * @return  Data sets\r\n\t */\r\n\tpublic get dataSets(): Dictionary<string, OrderedListTemplate<this[\"_dataItem\"]>> {\r\n\t\tif (!this._dataSets) {\r\n\t\t\tthis._dataSets = new Dictionary();\r\n\t\t}\r\n\t\treturn this._dataSets;\r\n\t}\r\n\r\n\t/**\r\n\t * Makes the chart use particular data set.\r\n\t *\r\n\t * If `id` is not provided or there is no such data set, main data will be\r\n\t * used.\r\n\t *\r\n\t * @ignore\r\n\t * @since 4.7.0\r\n\t * @param  id  Data set id\r\n\t */\r\n\tpublic setDataSet(id: string): boolean {\r\n\r\n\t\tif (this._currentDataSetId != id) {\r\n\t\t\tlet dataSet = this.dataSets.getKey(id);\r\n\t\t\tif (!dataSet) {\r\n\t\t\t\tif (this._currentDataSetId != \"\") {\r\n\t\t\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\tthis._currentDataSetId = \"\";\r\n\r\n\t\t\t\t\tthis.invalidateDataRange();\r\n\r\n\t\t\t\t\tthis._prevStartIndex = undefined;\r\n\r\n\t\t\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t\t})\r\n\r\n\t\t\t\tthis._currentDataSetId = id;\r\n\r\n\t\t\t\tthis.invalidateDataRange();\r\n\r\n\t\t\t\tthis._prevStartIndex = undefined;\r\n\r\n\t\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t})\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false\r\n\t}\r\n\r\n\t/**\r\n\t * Returns id of the currently used data set, or `undefined` if main data set\r\n\t * is in use.\r\n\t *\r\n\t * @since 4.7.0\r\n\t * @return Current data set id\r\n\t */\r\n\tpublic get currentDataSetId(): string {\r\n\t\treturn this._currentDataSetId;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns reference to \"main\" data set (unaggregated data as it was supplied\r\n\t * in `data`).\r\n\t *\r\n\t * @since 4.7.0\r\n\t * @return Main data set\r\n\t */\r\n\tpublic get mainDataSet(): OrderedListTemplate<this[\"_dataItem\"]> {\r\n\t\treturn this._dataItems;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the indexes for the dataItems\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _updateDataItemIndexes(startIndex: number): void {\r\n\t\tconst dataItems = this.mainDataSet.values;\r\n\t\tconst length = dataItems.length;\r\n\r\n\t\tfor (let i = startIndex; i < length; ++i) {\r\n\t\t\tdataItems[i]._index = i;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes newly added [[DataItem]] as well as triggers data re-validation.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event [description]\r\n\t */\r\n\tprotected handleDataItemAdded(event: ISortedListEvents<DataItem>[\"inserted\"]) {\r\n\t\tevent.newValue.component = this;\r\n\r\n\t\tthis._updateDataItemIndexes(event.index);\r\n\r\n\t\tif (!this.dataItemsInvalid) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * removes [[DataItem]] as well as triggers data re-validation.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event [description]\r\n\t */\r\n\tprotected handleDataItemRemoved(event: ISortedListEvents<DataItem>[\"removed\"]) {\r\n\t\t//\t\tevent.oldValue.component = undefined; // not good, as some items might be not removed from component lists\r\n\r\n\t\tthis._updateDataItemIndexes(event.index);\r\n\r\n\t\tif (!this.dataItemsInvalid) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Binds a data element's field to a specific field in raw data.\r\n\t * For example, for the very basic column chart you'd want to bind a `value`\r\n\t * field to a field in data, such as `price`.\r\n\t *\r\n\t * Some more advanced Components, like [[CandlestickSeries]] need several\r\n\t * data fields bound to data, such as ones for open, high, low and close\r\n\t * values.\r\n\t *\r\n\t * @todo Example\r\n\t * @param field  Field name\r\n\t * @param value  Field name in data\r\n\t */\r\n\tpublic bindDataField<Key extends keyof this[\"_dataFields\"]>(field: Key, value: this[\"_dataFields\"][Key]) {\r\n\t\tthis.dataFields[field] = value;\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates processed data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateProcessedData(): void {\r\n\t\tthis.resetProcessedRange();\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * [resetProcessedRange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic resetProcessedRange(): void {\r\n\t\tthis._prevEndIndex = null;\r\n\t\tthis._prevStartIndex = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns all other [[Component]] objects that are using this element's\r\n\t * data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @return [description]\r\n\t */\r\n\tpublic get dataUsers(): List<Component> {\r\n\t\tif (!this._dataUsers) {\r\n\t\t\tthis._dataUsers = new List<Component>();\r\n\r\n\t\t\t//this._disposers.push(new ListDisposer(this._dataUsers));\r\n\r\n\t\t\t// TODO better way of handling this? e.g. move into another module ?\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t// TODO clear the list ?\r\n\t\t\t\t$iter.each(this._dataUsers.iterator(), (x) => {\r\n\t\t\t\t\tx.dispose();\r\n\t\t\t\t});\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\treturn this._dataUsers;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a clone of this element.\r\n\t *\r\n\t * @return Clone\r\n\t */\r\n\tpublic clone(): this {\r\n\t\tlet component: this = super.clone();\r\n\t\tcomponent.dataFields = $utils.copyProperties(this.dataFields, {});\r\n\t\treturn component;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Component]].\r\n\t *\r\n\t * @param source Source Component\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.data = source.data;\r\n\t\tthis.sequencedInterpolation = source.sequencedInterpolation;\r\n\t\tthis.sequencedInterpolationDelay = source.sequencedInterpolationDelay;\r\n\t\tthis.interpolationDuration = source.interpolationDuration;\r\n\t\tthis.interpolationEasing = source.interpolationEasing;\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates the whole element, including all its children, causing\r\n\t * complete re-parsing of data and redraw.\r\n\t *\r\n\t * Use sparingly!\r\n\t */\r\n\tpublic reinit(): void {\r\n\t\tthis._inited = false;\r\n\t\tthis.deepInvalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * Add an adapter for data.\r\n\t *\r\n\t * @return Exporting\r\n\t */\r\n\tprotected getExporting(): Export {\r\n\t\tconst _export = super.getExporting();\r\n\t\tif (!_export.adapter.has(\"data\", this._exportData, -1, this)) {\r\n\t\t\t_export.adapter.add(\"data\", this._exportData, -1, this);\r\n\t\t\tthis.events.on(\"datavalidated\", (ev) => {\r\n\t\t\t\t_export.handleDataUpdated();\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn _export;\r\n\t}\r\n\r\n\tprivate _exportData(arg: IExportAdapters[\"data\"]): IExportAdapters[\"data\"] {\r\n\t\targ.data = this.data;\r\n\t\treturn arg;\r\n\t}\r\n\r\n\tprotected setDisabled(value: boolean): boolean {\r\n\t\tlet changed = super.setDisabled(value);\r\n\t\tif (changed) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setShowOnInit(value: boolean) {\r\n\t\tif (value != this.getPropertyValue(\"showOnInit\")) {\r\n\t\t\tif (value && !this.inited && !this.hidden) {\r\n\t\t\t\tthis._showOnInitDisposer2 = this.events.once(\"dataitemsvalidated\", this.hideInitially, this, false);\r\n\t\t\t\tthis._disposers.push(this._showOnInitDisposer2);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._showOnInitDisposer2) {\r\n\t\t\t\t\tthis.removeDispose(this._showOnInitDisposer2);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// important order here\r\n\t\tsuper.setShowOnInit(value);\r\n\t}\r\n\r\n\tprotected setBaseId(value: string) {\r\n\t\tif (value != this._baseId) {\r\n\t\t\tif (this.dataInvalid) {\r\n\t\t\t\tthis.dataInvalid = false;\r\n\t\t\t\tregistry.removeFromInvalidComponents(this);\r\n\t\t\t\tthis._baseId = value;\r\n\t\t\t\tthis.invalidateData();\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.setBaseId(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Use this for [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * Allows restricting zoom in beyond certain number of categories or base\r\n\t * intervals.\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Min zoom count\r\n\t */\r\n\tpublic set minZoomCount(value: number) {\r\n\t\tthis.setPropertyValue(\"minZoomCount\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Min zoom count\r\n\t */\r\n\tpublic get minZoomCount(): number {\r\n\t\treturn this.getPropertyValue(\"minZoomCount\");\r\n\t}\r\n\r\n\t/**\r\n\t * Use this for [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * Limits how many categories or base intervals can be shown at the same\r\n\t * time.\r\n\t *\r\n\t * If there are more items in the chart, the chart will auto-zoom.\r\n\t *\r\n\t * @default 0 (no limit)\r\n\t * @since 4.6.2\r\n\t * @param value  Max zoom count\r\n\t */\r\n\tpublic set maxZoomCount(value: number) {\r\n\t\tthis.setPropertyValue(\"maxZoomCount\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Max zoom count\r\n\t */\r\n\tpublic get maxZoomCount(): number {\r\n\t\treturn this.getPropertyValue(\"maxZoomCount\");\r\n\t}\r\n\r\n\t/**\r\n\t * Called during the System.update method\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _systemCheckIfValidate(): boolean {\r\n\t\tif (this.dataInvalid || (this.dataProvider && this.dataProvider.dataInvalid)) {\r\n\t\t\treturn false;\r\n\r\n\t\t} else {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds easing functions to \"function\" fields.\r\n\t *\r\n\t * @param field  Field name\r\n\t * @return Assign as function?\r\n\t */\r\n\tprotected asFunction(field: string): boolean {\r\n\t\treturn field == \"interpolationEasing\" || field == \"rangeChangeEasing\" || super.asIs(field);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Component\"] = Component;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}