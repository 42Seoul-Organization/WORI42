{"ast":null,"code":"/**\r\n * Column series module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { XYSeries, XYSeriesDataItem } from \"./XYSeries\";\nimport { visualProperties } from \"../../core/Sprite\";\nimport { Container } from \"../../core/Container\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { Dictionary } from \"../../core/utils/Dictionary\";\nimport { ValueAxis } from \"../axes/ValueAxis\";\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\nimport { registry } from \"../../core/Registry\";\nimport { Column } from \"../elements/Column\";\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\nimport { percent, Percent } from \"../../core/utils/Percent\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $object from \"../../core/utils/Object\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $type from \"../../core/utils/Type\";\nimport { Disposer } from \"../../core/utils/Disposer\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[ColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar ColumnSeriesDataItem =\n/** @class */\nfunction (_super) {\n  __extends(ColumnSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ColumnSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"ColumnSeriesDataItem\";\n    _this.locations[\"dateX\"] = 0.5;\n    _this.locations[\"dateY\"] = 0.5;\n    _this.locations[\"categoryX\"] = 0.5;\n    _this.locations[\"categoryY\"] = 0.5;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(ColumnSeriesDataItem.prototype, \"column\", {\n    /**\r\n     * @return Column\r\n     */\n    get: function get() {\n      return this._column;\n    },\n\n    /**\r\n     * A column used to draw a column for this data item.\r\n     *\r\n     * @param column\r\n     */\n    set: function set(column) {\n      this.setColumn(column);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ColumnSeriesDataItem.prototype.setColumn = function (column) {\n    var _this = this;\n\n    if (this._column && column != this._column) {\n      $array.remove(this.sprites, this._column);\n    }\n\n    this._column = column;\n\n    if (column) {\n      var prevDataItem = column.dataItem;\n\n      if (prevDataItem && prevDataItem != this) {\n        prevDataItem.column = undefined;\n      }\n\n      this.addSprite(column);\n\n      this._disposers.push(new Disposer(function () {\n        // TODO investigate why component is undefined\n        // https://codepen.io/team/amcharts/pen/dac4be245d658233a6d7e5597df2208b?editors=0010\n        if (_this.component) {\n          _this.component.columns.removeValue(column);\n        }\n      }));\n    }\n  };\n\n  Object.defineProperty(ColumnSeriesDataItem.prototype, \"width\", {\n    get: function get() {\n      var width = this.properties.width;\n\n      if (this._adapterO) {\n        width = this._adapterO.apply(\"width\", width);\n      }\n\n      return width;\n    },\n    set: function set(value) {\n      if (this.properties.width != value) {\n        this.properties.width = value;\n\n        if (this.component) {\n          this.component.validateDataElement(this);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColumnSeriesDataItem.prototype, \"rangesColumns\", {\n    /**\r\n     * A dictionary storing axes ranges columns by axis uid\r\n     */\n    get: function get() {\n      if (!this._rangesColumns) {\n        this._rangesColumns = new Dictionary();\n      }\n\n      return this._rangesColumns;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ColumnSeriesDataItem;\n}(XYSeriesDataItem);\n\nexport { ColumnSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines [[Series]] for a column graph.\r\n *\r\n * @see {@link IColumnSeriesEvents} for a list of available Events\r\n * @see {@link IColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\n\nvar ColumnSeries =\n/** @class */\nfunction (_super) {\n  __extends(ColumnSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ColumnSeries() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Start location within cell for columns.\r\n     */\n\n\n    _this._startLocation = 0;\n    /**\r\n     * End location within cell for columns.\r\n     */\n\n    _this._endLocation = 1;\n    _this.className = \"ColumnSeries\";\n    _this.width = percent(100);\n    _this.height = percent(100);\n    _this.strokeOpacity = 0;\n    _this.fillOpacity = 1;\n    _this.clustered = true;\n\n    var columnsContainer = _this.mainContainer.createChild(Container);\n\n    columnsContainer.shouldClone = false;\n    columnsContainer.isMeasured = false;\n    columnsContainer.layout = \"none\";\n    _this._columnsContainer = columnsContainer;\n    _this.columns.template.pixelPerfect = false;\n    _this.tooltipColorSource = _this.columns.template;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(ColumnSeries.prototype, \"columnsContainer\", {\n    /**\r\n     * A container that columns are created in.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    get: function get() {\n      return this._columnsContainer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n  ColumnSeries.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Column Series\");\n    }\n  };\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  ColumnSeries.prototype.createDataItem = function () {\n    return new ColumnSeriesDataItem();\n  };\n  /**\r\n   * (Re)validates the whole series, effectively causing it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ColumnSeries.prototype.validate = function () {\n    //@todo Check if we can do better than use `instanceof`\n    // find start/end locations based on clustered/stacked settings\n    // go through chart series instead of base axis series, because axis series doesn't maintain order\n    var _this = this;\n\n    this.group.node.removeAttribute(\"fill\");\n\n    if (this.chart && this.xAxis && this.yAxis) {\n      var baseAxisSeries = this.chart.series;\n      var clusterCount_1 = 0;\n      var index_1 = 0;\n      var sortedByAxis_1 = [];\n      $iter.each(baseAxisSeries.iterator(), function (series) {\n        if (series instanceof ColumnSeries) {\n          if (_this.baseAxis == series.baseAxis) {\n            var index_2;\n\n            if (_this.baseAxis == _this.xAxis) {\n              index_2 = _this.chart.yAxes.indexOf(series.yAxis);\n            } else {\n              index_2 = _this.chart.xAxes.indexOf(series.xAxis);\n            }\n\n            sortedByAxis_1.push({\n              series: series,\n              axis: index_2\n            });\n          }\n        }\n      });\n      sortedByAxis_1.sort(function (a, b) {\n        return a.axis - b.axis;\n      });\n      var prevAxisIndex_1;\n      $array.each(sortedByAxis_1, function (sortedItem) {\n        var series = sortedItem.series;\n\n        if (series instanceof ColumnSeries) {\n          if (!series.stacked && series.clustered || prevAxisIndex_1 != sortedItem.axis && series.clustered) {\n            clusterCount_1++;\n          }\n\n          if (series == _this) {\n            index_1 = clusterCount_1 - 1;\n          }\n        }\n\n        prevAxisIndex_1 = sortedItem.axis;\n      });\n\n      if (!this.clustered) {\n        index_1 = 0;\n        clusterCount_1 = 1;\n      }\n\n      var renderer = this.baseAxis.renderer;\n      var cellStartLocation = renderer.cellStartLocation;\n      var cellEndLocation = renderer.cellEndLocation;\n      this._startLocation = cellStartLocation + index_1 / clusterCount_1 * (cellEndLocation - cellStartLocation);\n      this._endLocation = cellStartLocation + (index_1 + 1) / clusterCount_1 * (cellEndLocation - cellStartLocation);\n      var xAxis = this.xAxis;\n      var yAxis = this.yAxis;\n\n      if (xAxis instanceof CategoryAxis && yAxis instanceof ValueAxis) {\n        if (xAxis.sortBySeries == this) {\n          this.sortCategoryAxis(xAxis, \"valueY\");\n        }\n      }\n\n      if (yAxis instanceof CategoryAxis && xAxis instanceof ValueAxis) {\n        if (yAxis.sortBySeries == this) {\n          this.sortCategoryAxis(yAxis, \"valueX\");\n        }\n      }\n    }\n\n    _super.prototype.validate.call(this);\n\n    for (var i = 0; i < this.startIndex; i++) {\n      var dataItem = this.dataItems.getIndex(i);\n      this.disableUnusedColumns(dataItem);\n    }\n\n    for (var i = this.dataItems.length - 1; i > this.endIndex; i--) {\n      var dataItem = this.dataItems.getIndex(i);\n      this.disableUnusedColumns(dataItem);\n    }\n\n    this._propertiesChanged = false;\n  };\n\n  ColumnSeries.prototype.sortCategoryAxis = function (axis, key) {\n    var _this = this;\n\n    this.dataItems.values.sort(function (x, y) {\n      return y.values[key].workingValue - x.values[key].workingValue;\n    });\n    var i = 0;\n    this.dataItems.each(function (dataItem) {\n      dataItem._index = i;\n      i++;\n    });\n    axis.dataItems.each(function (dataItem) {\n      var axis = dataItem.component;\n      var currentPosition = axis.categoryToPosition(dataItem.category) - dataItem.deltaPosition;\n      var seriesDataItem = axis.getSeriesDataItemByCategory(dataItem.category, _this);\n\n      if (seriesDataItem) {\n        var index = _this.dataItems.indexOf(seriesDataItem);\n\n        dataItem._index = index;\n        var deltaPosition = $math.round((index + 0.5) / _this.dataItems.length - currentPosition, 3);\n\n        if (dataItem.deltaAnimation && !dataItem.deltaAnimation.isDisposed() && dataItem.deltaAnimation.animationOptions[0].to == deltaPosition) {// void\n        } else if (deltaPosition != $math.round(dataItem.deltaPosition, 3)) {\n          if (dataItem.deltaAnimation) {\n            dataItem.deltaAnimation.stop();\n          }\n\n          dataItem.deltaAnimation = dataItem.animate({\n            property: \"deltaPosition\",\n            from: -deltaPosition,\n            to: 0\n          }, axis.interpolationDuration, axis.interpolationEasing);\n\n          _this._disposers.push(dataItem.deltaAnimation);\n        }\n      }\n    });\n    axis.dataItems.values.sort(function (x, y) {\n      return x.index - y.index;\n    });\n  };\n  /**\r\n   * Validates data item's element, effectively redrawing it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n\n  ColumnSeries.prototype.validateDataElement = function (dataItem) {\n    // important oder here, first real, then super. we need this to know size\n    if (this.chart && this.xAxis && this.yAxis) {\n      this.validateDataElementReal(dataItem);\n\n      _super.prototype.validateDataElement.call(this, dataItem);\n    }\n  };\n  /**\r\n   * Returns relative start location for the data item.\r\n   *\r\n   * @param dataItem  Data item\r\n   * @return Location (0-1)\r\n   */\n\n\n  ColumnSeries.prototype.getStartLocation = function (dataItem) {\n    var startLocation = this._startLocation;\n\n    if (this.baseAxis == this.xAxis) {\n      startLocation += dataItem.locations[this.xOpenField] - 0.5;\n    } else {\n      startLocation += dataItem.locations[this.yOpenField] - 0.5;\n    }\n\n    return startLocation;\n  };\n  /**\r\n   * [handleDataItemWorkingValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  /*\r\n  public handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n     if (this.simplifiedProcessing) {\r\n         this.validateDataElement(dataItem);\r\n     }\r\n     else {\r\n         super.handleDataItemWorkingValueChange(dataItem, name);\r\n     }\r\n  }*/\n\n  /**\r\n   * Returns relative end location for the data item.\r\n   *\r\n   * @param dataItem  Data item\r\n   * @return Location (0-1)\r\n   */\n\n\n  ColumnSeries.prototype.getEndLocation = function (dataItem) {\n    var endLocation = this._endLocation;\n\n    if (this.baseAxis == this.xAxis) {\n      endLocation += dataItem.locations[this.xField] - 0.5;\n    } else {\n      endLocation += dataItem.locations[this.yField] - 0.5;\n    }\n\n    return endLocation;\n  };\n  /**\r\n   * Validates data item's elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n\n  ColumnSeries.prototype.validateDataElementReal = function (dataItem) {\n    var _this = this; //\tif (dataItem.hasValue([this.xField, this.yField])) { // todo: this doesn't work with categories, think of a better way\n\n\n    var l;\n    var r;\n    var t;\n    var b;\n    var startLocation = this.getStartLocation(dataItem);\n    var endLocation = this.getEndLocation(dataItem);\n    var xField = this.xField;\n    var xOpenField = this.xOpenField;\n    var yField = this.yField;\n    var yOpenField = this.yOpenField;\n    var template = this.columns.template;\n    var percentWidth = template.percentWidth;\n    var percentHeight = template.percentHeight;\n    var pixelWidth = template.pixelWidth;\n    var pixelHeight = template.pixelHeight;\n    var maxWidth = template.maxWidth;\n    var maxHeight = template.maxHeight;\n    var paddingLeft = template.pixelPaddingLeft;\n    var paddingRight = template.pixelPaddingRight;\n    var paddingTop = template.pixelPaddingTop;\n    var paddingBottom = template.pixelPaddingBottom;\n    var outOfBounds = false;\n    var diw = dataItem.width;\n\n    if ($type.hasValue(diw)) {\n      if ($type.isNumber(diw)) {\n        pixelWidth = diw;\n      }\n\n      if (diw instanceof Percent) {\n        percentWidth = diw.value * 100;\n      }\n    } // two category axes\n\n\n    if (this.xAxis instanceof CategoryAxis && this.yAxis instanceof CategoryAxis) {\n      if (!dataItem.hasValue(this._xValueFields) || !dataItem.hasValue(this._yValueFields)) {\n        return;\n      }\n\n      startLocation = 0;\n      endLocation = 1;\n\n      if (!$type.isNaN(percentWidth)) {\n        var offset = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\n        startLocation += offset;\n        endLocation -= offset;\n      }\n\n      l = this.xAxis.getX(dataItem, xOpenField, startLocation);\n      r = this.xAxis.getX(dataItem, xField, endLocation); // in case width is set in pixels\n\n      if ($type.isNaN(percentWidth)) {\n        var offset = (r - l - pixelWidth) / 2;\n        l += offset;\n        r -= offset;\n      } // in case max width is set in pixels\n\n\n      if (!$type.isNaN(maxWidth) && maxWidth < Math.abs(r - l)) {\n        var offset = (r - l - maxWidth) / 2;\n        l += offset;\n        r -= offset;\n      }\n\n      startLocation = 0;\n      endLocation = 1;\n\n      if (!$type.isNaN(percentHeight)) {\n        var offset = $math.round((1 - percentHeight / 100) / 2, 5);\n        startLocation += offset;\n        endLocation -= offset;\n      }\n\n      t = this.yAxis.getY(dataItem, yOpenField, startLocation);\n      b = this.yAxis.getY(dataItem, yField, endLocation); // in case width is set in pixels\n\n      if ($type.isNaN(percentHeight)) {\n        var offset = (b - t - pixelHeight) / 2;\n        b += offset;\n        t -= offset;\n      } // in case max width is set in pixels\n\n\n      if (!$type.isNaN(maxHeight) && maxHeight < Math.abs(b - t)) {\n        var offset = (b - t - maxHeight) / 2;\n        b += offset;\n        t -= offset;\n      }\n\n      r = this.fixHorizontalCoordinate(r);\n      l = this.fixHorizontalCoordinate(l);\n      t = this.fixVerticalCoordinate(t);\n      b = this.fixVerticalCoordinate(b);\n    } else if (this.baseAxis == this.xAxis) {\n      if (!dataItem.hasValue(this._yValueFields)) {\n        return;\n      } // in case width is set in percent\n\n\n      if (!$type.isNaN(percentWidth)) {\n        var offset = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\n        startLocation += offset;\n        endLocation -= offset;\n      }\n\n      l = this.xAxis.getX(dataItem, xOpenField, startLocation);\n      r = this.xAxis.getX(dataItem, xField, endLocation); // in case width is set in pixels\n\n      if ($type.isNaN(percentWidth)) {\n        var offset = (r - l - pixelWidth) / 2;\n        l += offset;\n        r -= offset;\n      } // in case width is set in pixels\n\n\n      if (!$type.isNaN(maxWidth) && maxWidth < Math.abs(r - l)) {\n        var offset = (r - l - maxWidth) / 2;\n        l += offset;\n        r -= offset;\n      }\n\n      var bottomLocation = dataItem.locations[yOpenField];\n      var topLocation = dataItem.locations[yField]; // otherwise gantt chart will start items in the middle of a cell\n\n      if (this.yAxis instanceof ValueAxis) {\n        if (this.dataFields[this.yField] != this.dataFields[this.yOpenField]) {\n          bottomLocation = 0;\n          topLocation = 0;\n        }\n      }\n\n      b = this.yAxis.getY(dataItem, yOpenField, bottomLocation);\n      t = this.yAxis.getY(dataItem, yField, topLocation); // used to save location for bullets, but it's not a good approach\n      // dataItem.locations[xField] = startLocation + (endLocation - startLocation) / 2;\n\n      var axisLenght = Math.ceil(this.yAxis.axisLength);\n\n      if (t < 0 && b < 0 || t > axisLenght && b > axisLenght) {\n        outOfBounds = true;\n      }\n\n      t = this.fixVerticalCoordinate(t);\n      b = this.fixVerticalCoordinate(b);\n\n      if (Math.abs(r - l) - paddingLeft - paddingRight == 0) {\n        outOfBounds = true;\n      }\n    } // horizontal bars\n    else {\n        if (!dataItem.hasValue(this._xValueFields)) {\n          return;\n        }\n\n        if (!$type.isNaN(percentHeight)) {\n          var offset = $math.round((endLocation - startLocation) * (1 - percentHeight / 100) / 2, 5);\n          startLocation += offset;\n          endLocation -= offset;\n        }\n\n        t = this.yAxis.getY(dataItem, yOpenField, startLocation);\n        b = this.yAxis.getY(dataItem, yField, endLocation); // in case height is set in pixels\n\n        if ($type.isNaN(percentHeight)) {\n          var offset = (b - t - pixelHeight) / 2;\n          b -= offset;\n          t += offset;\n        } // in case height is set in pixels\n\n\n        if (!$type.isNaN(maxHeight) && maxHeight < Math.abs(b - t)) {\n          var offset = (b - t - maxHeight) / 2;\n          b -= offset;\n          t += offset;\n        }\n\n        var rightLocation = dataItem.locations[xField];\n        var leftLocation = dataItem.locations[xOpenField]; // otherwise gantt chart will start items in the middle of a cell\n\n        if (this.xAxis instanceof ValueAxis) {\n          if (this.dataFields[this.xField] != this.dataFields[this.xOpenField]) {\n            rightLocation = 0;\n            leftLocation = 0;\n          }\n        }\n\n        r = this.xAxis.getX(dataItem, xField, rightLocation);\n        l = this.xAxis.getX(dataItem, xOpenField, leftLocation); // used to save location for bullets, but it's not a good approach\n        // dataItem.locations[yField] = startLocation + (endLocation - startLocation) / 2;\n\n        var axisLenght = Math.ceil(this.xAxis.axisLength);\n\n        if (r < 0 && l < 0 || r > axisLenght && l > axisLenght) {\n          outOfBounds = true;\n        }\n\n        r = this.fixHorizontalCoordinate(r);\n        l = this.fixHorizontalCoordinate(l);\n\n        if (Math.abs(t - b) - paddingTop - paddingBottom == 0) {\n          outOfBounds = true;\n        }\n      }\n\n    var w = Math.abs(r - l);\n    var h = Math.abs(b - t);\n    var x = Math.min(l, r);\n    var y = Math.min(t, b);\n\n    if (!outOfBounds) {\n      var column_1;\n\n      if (!dataItem.column) {\n        column_1 = this.columns.create(); //$object.forceCopyProperties(this.columns.template, column, visualProperties);\n\n        $object.copyProperties(this, column_1, visualProperties); // need this because 3d columns are not in the same container\n\n        $object.copyProperties(this.columns.template, column_1, visualProperties); // second time, no force, so that columns.template would override series properties\n\n        dataItem.addSprite(column_1);\n        dataItem.column = column_1;\n        column_1.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\n        // accessibility\n\n        if (this.itemsFocusable()) {\n          this.role = \"menu\";\n          column_1.role = \"menuitem\";\n          column_1.focusable = true;\n        } else {\n          this.role = \"list\";\n          column_1.role = \"listitem\";\n          column_1.focusable = false;\n        }\n\n        if (column_1.focusable) {\n          column_1.events.on(\"focus\", function (ev) {\n            column_1.readerTitle = _this.populateString(_this.itemReaderText, dataItem);\n          }, undefined, false);\n          column_1.events.on(\"blur\", function (ev) {\n            column_1.readerTitle = \"\";\n          }, undefined, false);\n        }\n\n        if (column_1.hoverable) {\n          column_1.events.on(\"over\", function (ev) {\n            column_1.readerTitle = _this.populateString(_this.itemReaderText, dataItem);\n          }, undefined, false);\n          column_1.events.on(\"out\", function (ev) {\n            column_1.readerTitle = \"\";\n          }, undefined, false);\n        }\n\n        column_1.parent = this.columnsContainer;\n        column_1.virtualParent = this;\n      } else {\n        column_1 = dataItem.column;\n\n        if (this._propertiesChanged) {\n          $object.copyProperties(this, column_1, visualProperties);\n          $object.copyProperties(this.columns.template, column_1, visualProperties);\n          $array.each(visualProperties, function (property) {\n            column_1[property] = column_1[property];\n          });\n        }\n      }\n\n      column_1.width = w;\n      column_1.height = h;\n      column_1.x = x;\n      column_1.y = y;\n      column_1.realX = l;\n      column_1.realY = t;\n      column_1.realWidth = r - l;\n      column_1.realHeight = b - t;\n      this.setColumnStates(column_1);\n\n      if (column_1.invalid) {\n        column_1.validate(); // validate as if it was used previously, it will flicker with previous dimensions\n      }\n\n      column_1.__disabled = false; //column.returnAfterTemp();\n\n      $iter.each(this.axisRanges.iterator(), function (axisRange) {\n        var rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\n\n        if (!rangeColumn) {\n          rangeColumn = _this.columns.create(); //$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\n\n          $object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\n\n          dataItem.addSprite(rangeColumn);\n          dataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\n          rangeColumn.paper = _this.paper; // sometimes pattern is not drawn if is set with adapter without this.\n        }\n\n        rangeColumn.parent = axisRange.contents;\n        rangeColumn.width = w;\n        rangeColumn.height = h;\n        rangeColumn.x = x;\n        rangeColumn.y = y;\n\n        _this.setColumnStates(rangeColumn);\n\n        if (rangeColumn.invalid) {\n          rangeColumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\n        }\n\n        rangeColumn.__disabled = false; //rangeColumn.returnAfterTemp();\n      });\n    } else {\n      this.disableUnusedColumns(dataItem);\n    }\n\n    dataItem.itemWidth = w;\n    dataItem.itemHeight = h;\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  ColumnSeries.prototype.disableUnusedColumns = function (dataItem) {\n    if (dataItem) {\n      if (dataItem.column) {\n        // otherwise might flicker when enabling\n        dataItem.column.width = 0;\n        dataItem.column.height = 0;\n        dataItem.column.__disabled = true;\n      }\n\n      $iter.each(this.axisRanges.iterator(), function (axisRange) {\n        var rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\n\n        if (rangeColumn) {\n          // otherwise might flicker when enabling\n          rangeColumn.width = 0;\n          rangeColumn.height = 0;\n          rangeColumn.__disabled = true;\n        }\n      });\n    }\n  };\n  /**\r\n   * Apply different state/coloring to columns based on the change value.\r\n   *\r\n   * @param sprite  Sprite to apply state to\r\n   * @todo Do not apply accessibility to wicks of the candlesticks\r\n   */\n\n\n  ColumnSeries.prototype.setColumnStates = function (sprite) {\n    if (this._dropFromOpenState || this._dropFromPreviousState || this._riseFromOpenState || this._riseFromPreviousState) {\n      var dataItem = sprite.dataItem;\n\n      if (this.xAxis instanceof ValueAxis || this.yAxis instanceof ValueAxis) {\n        var open_1;\n        var value = void 0;\n        var change = void 0;\n\n        if (this.baseAxis == this.yAxis) {\n          if (this.xOpenField && this.xField && this.xAxis instanceof ValueAxis) {\n            open_1 = dataItem.getValue(this.xOpenField);\n            value = dataItem.getValue(this.xField);\n          }\n\n          change = dataItem.getValue(this.xAxis.axisFieldName + \"X\", \"previousChange\");\n        } else {\n          if (this.yOpenField && this.yField && this.yAxis instanceof ValueAxis) {\n            open_1 = dataItem.getValue(this.yOpenField);\n            value = dataItem.getValue(this.yField);\n          }\n\n          change = dataItem.getValue(this.yAxis.axisFieldName + \"Y\", \"previousChange\");\n        }\n\n        if (value < open_1) {\n          dataItem.droppedFromOpen = true;\n          sprite.defaultState.copyFrom(this._dropFromOpenState);\n          sprite.setState(this._dropFromOpenState, 0);\n        } else {\n          dataItem.droppedFromOpen = false;\n          sprite.defaultState.copyFrom(this._riseFromOpenState);\n          sprite.setState(this._riseFromOpenState, 0);\n        }\n\n        if (change < 0) {\n          dataItem.droppedFromPrevious = true;\n          sprite.defaultState.copyFrom(this._dropFromPreviousState);\n          sprite.setState(this._dropFromPreviousState, 0);\n        } else {\n          dataItem.droppedFromPrevious = false;\n          sprite.defaultState.copyFrom(this._riseFromPreviousState);\n          sprite.setState(this._riseFromPreviousState, 0);\n        }\n      }\n    }\n  };\n\n  Object.defineProperty(ColumnSeries.prototype, \"columns\", {\n    /**\r\n     * A list of column elements in the series.\r\n     *\r\n     * @return Columns\r\n     */\n    get: function get() {\n      if (!this._columns) {\n        this._columns = new ListTemplate(this.createColumnTemplate());\n\n        this._disposers.push(new ListDisposer(this._columns));\n\n        this._disposers.push(this._columns.template);\n      }\n\n      return this._columns;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates and returns a column element to use as a template.\r\n   *\r\n   * @return Column template\r\n   */\n\n  ColumnSeries.prototype.createColumnTemplate = function () {\n    return new Column();\n  };\n\n  Object.defineProperty(ColumnSeries.prototype, \"clustered\", {\n    /**\r\n     * @return Clustered?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"clustered\");\n    },\n\n    /**\r\n     * Cluster this series columns?\r\n     *\r\n     * Setting to `false` will make columns overlap with other series.\r\n     *\r\n     * @default true\r\n     * @param value  Clustered?\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"clustered\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColumnSeries.prototype, \"dropFromOpenState\", {\n    /**\r\n     * @return State\r\n     */\n    get: function get() {\n      if (!this._dropFromOpenState) {\n        this._dropFromOpenState = this.states.create(\"dropFromOpenState\");\n      }\n\n      return this._dropFromOpenState;\n    },\n\n    /**\r\n     * A state to apply to a column when close value is lower than open value.\r\n     *\r\n     * Can be used to differentiate appearance based on value relations.\r\n     *\r\n     * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n     *\r\n     * @readonly You can modify state object, but can't overwrite it\r\n     * @param  value  State\r\n     */\n    set: function set(value) {\n      this._dropFromOpenState = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColumnSeries.prototype, \"dropFromPreviousState\", {\n    /**\r\n     * @return State\r\n     */\n    get: function get() {\n      if (!this._dropFromPreviousState) {\n        this._dropFromPreviousState = this.states.create(\"dropFromPreviousState\");\n      }\n\n      return this._dropFromPreviousState;\n    },\n\n    /**\r\n     * A state to apply to a column when its value is lower value of a previous\r\n     * column.\r\n     *\r\n     * Can be used to differentiate appearance based on value relations.\r\n     *\r\n     * @readonly You can modify state object, but can't overwrite it\r\n     * @param  value  State\r\n     */\n    set: function set(value) {\n      this._dropFromPreviousState = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColumnSeries.prototype, \"riseFromOpenState\", {\n    /**\r\n     * @return State\r\n     */\n    get: function get() {\n      if (!this._riseFromOpenState) {\n        this._riseFromOpenState = this.states.create(\"riseFromOpenState\");\n      }\n\n      return this._riseFromOpenState;\n    },\n\n    /**\r\n     * A state to apply to a column when close value is same or higher than open\r\n     * value.\r\n     *\r\n     * Can be used to differentiate appearance based on value relations.\r\n     *\r\n     * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n     *\r\n     * @readonly You can modify state object, but can't overwrite it\r\n     * @param  value  State\r\n     */\n    set: function set(value) {\n      this._riseFromOpenState = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColumnSeries.prototype, \"riseFromPreviousState\", {\n    /**\r\n     * @return State\r\n     */\n    get: function get() {\n      if (!this._riseFromPreviousState) {\n        this._riseFromPreviousState = this.states.create(\"riseFromPreviousState\");\n      }\n\n      return this._riseFromPreviousState;\n    },\n\n    /**\r\n     * A state to apply to a column when its value is same or higher than value\r\n     * of a previous column.\r\n     *\r\n     * Can be used to differentiate appearance based on value relations.\r\n     *\r\n     * @readonly You can modify state object, but can't overwrite it\r\n     * @param  value  State\r\n     */\n    set: function set(value) {\n      this._riseFromPreviousState = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates value of the related legend item.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n  ColumnSeries.prototype.updateLegendValue = function (dataItem, notRange) {\n    var _this = this;\n\n    _super.prototype.updateLegendValue.call(this, dataItem, notRange);\n\n    if (this.legendDataItem) {\n      var marker = this.legendDataItem.marker;\n      var fromOpenState_1;\n      var fromPreviousState_1;\n\n      if (dataItem) {\n        if (dataItem.droppedFromOpen) {\n          fromOpenState_1 = this._dropFromOpenState;\n        } else {\n          fromOpenState_1 = this._riseFromOpenState;\n        }\n\n        if (dataItem.droppedFromPrevious) {\n          fromPreviousState_1 = this._dropFromPreviousState;\n        } else {\n          fromPreviousState_1 = this._riseFromPreviousState;\n        }\n      }\n\n      $iter.each(marker.children.iterator(), function (child) {\n        if (dataItem) {\n          child.setState(fromPreviousState_1);\n          child.setState(fromOpenState_1);\n        } else {\n          // todo: think what to do here, maybe apply above states based on totals?\n          child.setState(_this._riseFromPreviousState);\n          child.setState(_this._riseFromOpenState);\n        }\n      });\n    }\n  };\n  /**\r\n   * Creates elements in related legend container, that mimics the look of this\r\n   * Series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param marker  Legend item container\r\n   */\n\n\n  ColumnSeries.prototype.createLegendMarker = function (marker) {\n    var w = marker.pixelWidth;\n    var h = marker.pixelHeight;\n    marker.removeChildren();\n    var column = marker.createChild(RoundedRectangle);\n    column.shouldClone = false;\n    $object.copyProperties(this, column, visualProperties);\n    column.copyFrom(this.columns.template);\n    column.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\n\n    column.width = w;\n    column.height = h;\n    var legendDataItem = marker.dataItem;\n    legendDataItem.color = this.fill;\n    legendDataItem.colorOrig = this.fill;\n  };\n  /**\r\n   * Copies all properties from another instance of [[ColumnSeries]].\r\n   *\r\n   * @param source  Source series\r\n   */\n\n\n  ColumnSeries.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.columns.template.copyFrom(source.columns.template);\n  };\n  /**\r\n  * returns bullet x location\r\n  * @ignore\r\n  */\n\n\n  ColumnSeries.prototype.getBulletLocationX = function (bullet, field) {\n    if (this.baseAxis == this.xAxis) {\n      var bulletLocationX = bullet.locationX;\n\n      if (!$type.isNumber(bulletLocationX)) {\n        bulletLocationX = 0.5;\n      }\n\n      var endLocation = this.getEndLocation(bullet.dataItem);\n      var startLocation = this.getStartLocation(bullet.dataItem);\n      return endLocation - (endLocation - startLocation) * bulletLocationX;\n    } else {\n      return _super.prototype.getBulletLocationX.call(this, bullet, field);\n    }\n  };\n  /**\r\n  * returns bullet y location\r\n  * @ignore\r\n  */\n\n\n  ColumnSeries.prototype.getBulletLocationY = function (bullet, field) {\n    if (this.baseAxis == this.yAxis) {\n      var bulletLocationY = bullet.locationY;\n\n      if (!$type.isNumber(bulletLocationY)) {\n        bulletLocationY = 0.5;\n      }\n\n      var endLocation = this.getEndLocation(bullet.dataItem);\n      var startLocation = this.getStartLocation(bullet.dataItem);\n      return endLocation - (endLocation - startLocation) * bulletLocationY;\n    } else {\n      return _super.prototype.getBulletLocationY.call(this, bullet, field);\n    }\n  };\n\n  ColumnSeries.prototype.getAdjustedXLocation = function (dataItem, field, bulletLocationX) {\n    //if (this.baseAxis == this.xAxis) {\n    if (!$type.isNumber(bulletLocationX)) {\n      if (dataItem) {\n        bulletLocationX = dataItem.locations[field];\n      } else {\n        bulletLocationX = 0.5;\n      }\n    }\n\n    return this._endLocation - (this._endLocation - this._startLocation) * (1 - bulletLocationX); //}\n    //else {\n    //\treturn super.getAdjustedXLocation(dataItem, field);\n    //}\n  };\n\n  ColumnSeries.prototype.getAdjustedYLocation = function (dataItem, field, bulletLocationY) {\n    //if (this.baseAxis == this.yAxis) {\n    if (!$type.isNumber(bulletLocationY)) {\n      if (dataItem) {\n        bulletLocationY = dataItem.locations[field];\n      } else {\n        bulletLocationY = 0.5;\n      }\n    }\n\n    return this._endLocation - (this._endLocation - this._startLocation) * bulletLocationY; //}\n    //else {\n    //\treturn super.getAdjustedYLocation(dataItem, field);\n    //}\n  };\n  /**\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ColumnSeries.prototype.fixVerticalCoordinate = function (coordinate) {\n    var paddingBottom = this.columns.template.pixelPaddingBottom;\n    var paddingTop = this.columns.template.pixelPaddingTop;\n    var minY = -paddingTop;\n    var maxY = this.yAxis.axisLength + paddingBottom;\n    return $math.fitToRange(coordinate, minY, maxY);\n  };\n  /**\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ColumnSeries.prototype.fixHorizontalCoordinate = function (coordinate) {\n    var paddingLeft = this.columns.template.pixelPaddingLeft;\n    var paddingRight = this.columns.template.pixelPaddingRight;\n    var minX = -paddingLeft;\n    var maxX = this.xAxis.axisLength + paddingRight;\n    return $math.fitToRange(coordinate, minX, maxX);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  ColumnSeries.prototype.disposeData = function () {\n    _super.prototype.disposeData.call(this);\n\n    this.columns.clear();\n  };\n\n  return ColumnSeries;\n}(XYSeries);\n\nexport { ColumnSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"ColumnSeries\"] = ColumnSeries;\nregistry.registeredClasses[\"ColumnSeriesDataItem\"] = ColumnSeriesDataItem;","map":{"version":3,"sources":["../../../../../src/.internal/charts/series/ColumnSeries.ts"],"names":[],"mappings":"AAAA;;;;AAIA;;;;;;;AAMA,SAAS,QAAT,EAAwC,gBAAxC,QAAyH,YAAzH;AACA,SAAiB,gBAAjB,QAAyC,mBAAzC;AAEA,SAAS,SAAT,QAA0B,sBAA1B;AACA,SAAS,YAAT,EAAuB,YAAvB,QAA2C,uBAA3C;AACA,SAAS,UAAT,QAA2B,6BAA3B;AACA,SAAS,SAAT,QAA0B,mBAA1B;AACA,SAAS,YAAT,QAA6B,sBAA7B;AACA,SAAS,QAAT,QAAyB,qBAAzB;AAEA,SAAS,MAAT,QAAuB,oBAAvB;AACA,SAAS,gBAAT,QAAiC,sCAAjC;AACA,SAAS,OAAT,EAAkB,OAAlB,QAAiC,0BAAjC;AACA,OAAO,KAAK,KAAZ,MAAuB,uBAAvB;AACA,OAAO,KAAK,OAAZ,MAAyB,yBAAzB;AACA,OAAO,KAAK,KAAZ,MAAuB,2BAAvB;AACA,OAAO,KAAK,MAAZ,MAAwB,wBAAxB;AACA,OAAO,KAAK,KAAZ,MAAuB,uBAAvB;AACA,SAAS,QAAT,QAAyB,2BAAzB;AAcA;;;;;;;AAOA;;;;;;AAKA,IAAA,oBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA0C,EAAA,SAAA,CAAA,oBAAA,EAAA,MAAA,CAAA;AAkCzC;;;;;AAGA,WAAA,oBAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADR;;AAEC,IAAA,KAAI,CAAC,SAAL,GAAiB,sBAAjB;AAEA,IAAA,KAAI,CAAC,SAAL,CAAe,OAAf,IAA0B,GAA1B;AACA,IAAA,KAAI,CAAC,SAAL,CAAe,OAAf,IAA0B,GAA1B;AAEA,IAAA,KAAI,CAAC,SAAL,CAAe,WAAf,IAA8B,GAA9B;AACA,IAAA,KAAI,CAAC,SAAL,CAAe,WAAf,IAA8B,GAA9B;;AAEA,IAAA,KAAI,CAAC,UAAL;;;AACA;;AAOD,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,QAAX,EAAiB;AAIjB;;;SAGA,eAAA;AACC,aAAO,KAAK,OAAZ;AACA,KATgB;;AALjB;;;;;SAKA,aAAkB,MAAlB,EAAyC;AACxC,WAAK,SAAL,CAAe,MAAf;AACA,KAFgB;oBAAA;;AAAA,GAAjB;;AAWU,EAAA,oBAAA,CAAA,SAAA,CAAA,SAAA,GAAV,UAAoB,MAApB,EAA2C;AAA3C,QAAA,KAAA,GAAA,IAAA;;AACC,QAAI,KAAK,OAAL,IAAgB,MAAM,IAAI,KAAK,OAAnC,EAA4C;AAC3C,MAAA,MAAM,CAAC,MAAP,CAAc,KAAK,OAAnB,EAA4B,KAAK,OAAjC;AACA;;AACD,SAAK,OAAL,GAAe,MAAf;;AAEA,QAAI,MAAJ,EAAY;AACX,UAAI,YAAY,GAA8B,MAAM,CAAC,QAArD;;AACA,UAAI,YAAY,IAAI,YAAY,IAAI,IAApC,EAA0C;AACzC,QAAA,YAAY,CAAC,MAAb,GAAsB,SAAtB;AACA;;AACD,WAAK,SAAL,CAAe,MAAf;;AAEA,WAAK,UAAL,CAAgB,IAAhB,CAAqB,IAAI,QAAJ,CAAa,YAAA;AACjC;AACA;AACA,YAAI,KAAI,CAAC,SAAT,EAAoB;AACnB,UAAA,KAAI,CAAC,SAAL,CAAe,OAAf,CAAuB,WAAvB,CAAmC,MAAnC;AACA;AACD,OANoB,CAArB;AAOA;AACD,GArBS;;AAuBV,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,OAAX,EAAgB;SAShB,eAAA;AACC,UAAI,KAAK,GAAG,KAAK,UAAL,CAAgB,KAA5B;;AACA,UAAI,KAAK,SAAT,EAAoB;AACnB,QAAA,KAAK,GAAG,KAAK,SAAL,CAAe,KAAf,CAAqB,OAArB,EAA8B,KAA9B,CAAR;AACA;;AACD,aAAO,KAAP;AACA,KAfe;SAAhB,aAAiB,KAAjB,EAAwC;AACvC,UAAI,KAAK,UAAL,CAAgB,KAAhB,IAAyB,KAA7B,EAAoC;AACnC,aAAK,UAAL,CAAgB,KAAhB,GAAwB,KAAxB;;AACA,YAAI,KAAK,SAAT,EAAoB;AACnB,eAAK,SAAL,CAAe,mBAAf,CAAmC,IAAnC;AACA;AACD;AACD,KAPe;oBAAA;;AAAA,GAAhB;AAqBA,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,eAAX,EAAwB;AAHxB;;;SAGA,eAAA;AACC,UAAI,CAAC,KAAK,cAAV,EAA0B;AACzB,aAAK,cAAL,GAAsB,IAAI,UAAJ,EAAtB;AACA;;AACD,aAAO,KAAK,cAAZ;AACA,KALuB;oBAAA;;AAAA,GAAxB;AAOD,SAAA,oBAAA;AAAC,CArHD,CAA0C,gBAA1C,CAAA;;;AAmKA;;;;;;;AAOA;;;;;;;;;AAQA,IAAA,YAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAkC,EAAA,SAAA,CAAA,YAAA,EAAA,MAAA,CAAA;AA4EjC;;;;;AAGA,WAAA,YAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADR;AArCA;;;;;AAGU,IAAA,KAAA,CAAA,cAAA,GAAyB,CAAzB;AAEV;;;;AAGU,IAAA,KAAA,CAAA,YAAA,GAAuB,CAAvB;AA+BT,IAAA,KAAI,CAAC,SAAL,GAAiB,cAAjB;AAEA,IAAA,KAAI,CAAC,KAAL,GAAa,OAAO,CAAC,GAAD,CAApB;AACA,IAAA,KAAI,CAAC,MAAL,GAAc,OAAO,CAAC,GAAD,CAArB;AAEA,IAAA,KAAI,CAAC,aAAL,GAAqB,CAArB;AACA,IAAA,KAAI,CAAC,WAAL,GAAmB,CAAnB;AAEA,IAAA,KAAI,CAAC,SAAL,GAAiB,IAAjB;;AAEA,QAAI,gBAAgB,GAAG,KAAI,CAAC,aAAL,CAAmB,WAAnB,CAA+B,SAA/B,CAAvB;;AACA,IAAA,gBAAgB,CAAC,WAAjB,GAA+B,KAA/B;AACA,IAAA,gBAAgB,CAAC,UAAjB,GAA8B,KAA9B;AACA,IAAA,gBAAgB,CAAC,MAAjB,GAA0B,MAA1B;AACA,IAAA,KAAI,CAAC,iBAAL,GAAyB,gBAAzB;AAEA,IAAA,KAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,YAAtB,GAAqC,KAArC;AAEA,IAAA,KAAI,CAAC,kBAAL,GAA0B,KAAI,CAAC,OAAL,CAAa,QAAvC;;AAEA,IAAA,KAAI,CAAC,UAAL;;;AACA;;AAOD,EAAA,MAAA,CAAA,cAAA,CAAW,YAAA,CAAA,SAAX,EAAW,kBAAX,EAA2B;AAL3B;;;;;SAKA,eAAA;AACC,aAAO,KAAK,iBAAZ;AACA,KAF0B;oBAAA;;AAAA,GAA3B;AAIA;;;;;AAIU,EAAA,YAAA,CAAA,SAAA,CAAA,qBAAA,GAAV,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,qBAAN,CAA2B,IAA3B,CAA2B,IAA3B;;AACA,QAAI,CAAC,KAAK,CAAC,QAAN,CAAe,KAAK,WAApB,CAAL,EAAuC;AACtC,WAAK,WAAL,GAAmB,KAAK,QAAL,CAAc,SAAd,CAAwB,eAAxB,CAAnB;AACA;AACD,GALS;AAOV;;;;;;;;AAMU,EAAA,YAAA,CAAA,SAAA,CAAA,cAAA,GAAV,YAAA;AACC,WAAO,IAAI,oBAAJ,EAAP;AACA,GAFS;AAIV;;;;;;;AAKO,EAAA,YAAA,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA;AACC;AACA;AACA;AAHD,QAAA,KAAA,GAAA,IAAA;;AAKC,SAAK,KAAL,CAAW,IAAX,CAAgB,eAAhB,CAAgC,MAAhC;;AAEA,QAAI,KAAK,KAAL,IAAc,KAAK,KAAnB,IAA4B,KAAK,KAArC,EAA4C;AAC3C,UAAI,cAAc,GAAG,KAAK,KAAL,CAAW,MAAhC;AACA,UAAI,cAAY,GAAW,CAA3B;AACA,UAAI,OAAK,GAAW,CAApB;AAEA,UAAI,cAAY,GAAyC,EAAzD;AACA,MAAA,KAAK,CAAC,IAAN,CAAW,cAAc,CAAC,QAAf,EAAX,EAAsC,UAAC,MAAD,EAAO;AAC5C,YAAI,MAAM,YAAY,YAAtB,EAAoC;AACnC,cAAI,KAAI,CAAC,QAAL,IAAiB,MAAM,CAAC,QAA5B,EAAsC;AACrC,gBAAI,OAAJ;;AACA,gBAAI,KAAI,CAAC,QAAL,IAAiB,KAAI,CAAC,KAA1B,EAAiC;AAChC,cAAA,OAAK,GAAG,KAAI,CAAC,KAAL,CAAW,KAAX,CAAiB,OAAjB,CAAyB,MAAM,CAAC,KAAhC,CAAR;AACA,aAFD,MAGK;AACJ,cAAA,OAAK,GAAG,KAAI,CAAC,KAAL,CAAW,KAAX,CAAiB,OAAjB,CAAyB,MAAM,CAAC,KAAhC,CAAR;AACA;;AAED,YAAA,cAAY,CAAC,IAAb,CAAkB;AAAE,cAAA,MAAM,EAAE,MAAV;AAAkB,cAAA,IAAI,EAAE;AAAxB,aAAlB;AACA;AACD;AACD,OAdD;AAiBA,MAAA,cAAY,CAAC,IAAb,CAAkB,UAAC,CAAD,EAAI,CAAJ,EAAK;AAAK,eAAA,CAAC,CAAC,IAAF,GAAS,CAAC,CAAV,IAAA;AAAe,OAA3C;AACA,UAAI,eAAJ;AAEA,MAAA,MAAM,CAAC,IAAP,CAAY,cAAZ,EAA0B,UAAC,UAAD,EAAW;AACpC,YAAI,MAAM,GAAG,UAAU,CAAC,MAAxB;;AACA,YAAI,MAAM,YAAY,YAAtB,EAAoC;AACnC,cAAK,CAAC,MAAM,CAAC,OAAR,IAAmB,MAAM,CAAC,SAA3B,IAA0C,eAAa,IAAI,UAAU,CAAC,IAA5B,IAAoC,MAAM,CAAC,SAAzF,EAAqG;AACpG,YAAA,cAAY;AACZ;;AAED,cAAI,MAAM,IAAI,KAAd,EAAoB;AACnB,YAAA,OAAK,GAAG,cAAY,GAAG,CAAvB;AACA;AACD;;AACD,QAAA,eAAa,GAAG,UAAU,CAAC,IAA3B;AACA,OAZD;;AAcA,UAAI,CAAC,KAAK,SAAV,EAAqB;AACpB,QAAA,OAAK,GAAG,CAAR;AACA,QAAA,cAAY,GAAG,CAAf;AACA;;AAED,UAAI,QAAQ,GAAG,KAAK,QAAL,CAAc,QAA7B;AAEA,UAAI,iBAAiB,GAAW,QAAQ,CAAC,iBAAzC;AACA,UAAI,eAAe,GAAW,QAAQ,CAAC,eAAvC;AAEA,WAAK,cAAL,GAAsB,iBAAiB,GAAI,OAAK,GAAG,cAAT,IAA0B,eAAe,GAAG,iBAA5C,CAA1C;AACA,WAAK,YAAL,GAAoB,iBAAiB,GAAG,CAAC,OAAK,GAAG,CAAT,IAAc,cAAd,IAA8B,eAAe,GAAG,iBAAhD,CAAxC;AAEA,UAAI,KAAK,GAAG,KAAK,KAAjB;AACA,UAAI,KAAK,GAAG,KAAK,KAAjB;;AAEA,UAAI,KAAK,YAAY,YAAjB,IAAiC,KAAK,YAAY,SAAtD,EAAiE;AAChE,YAAI,KAAK,CAAC,YAAN,IAAsB,IAA1B,EAAgC;AAC/B,eAAK,gBAAL,CAAsB,KAAtB,EAA6B,QAA7B;AACA;AACD;;AAED,UAAI,KAAK,YAAY,YAAjB,IAAiC,KAAK,YAAY,SAAtD,EAAiE;AAChE,YAAI,KAAK,CAAC,YAAN,IAAsB,IAA1B,EAAgC;AAC/B,eAAK,gBAAL,CAAsB,KAAtB,EAA6B,QAA7B;AACA;AACD;AAED;;AAED,IAAA,MAAA,CAAA,SAAA,CAAM,QAAN,CAAc,IAAd,CAAc,IAAd;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,UAAzB,EAAqC,CAAC,EAAtC,EAA0C;AACzC,UAAI,QAAQ,GAAG,KAAK,SAAL,CAAe,QAAf,CAAwB,CAAxB,CAAf;AACA,WAAK,oBAAL,CAA0B,QAA1B;AACA;;AAED,SAAK,IAAI,CAAC,GAAG,KAAK,SAAL,CAAe,MAAf,GAAwB,CAArC,EAAwC,CAAC,GAAG,KAAK,QAAjD,EAA2D,CAAC,EAA5D,EAAgE;AAC/D,UAAI,QAAQ,GAAG,KAAK,SAAL,CAAe,QAAf,CAAwB,CAAxB,CAAf;AACA,WAAK,oBAAL,CAA0B,QAA1B;AACA;;AAED,SAAK,kBAAL,GAA0B,KAA1B;AACA,GA1FM;;AA4FG,EAAA,YAAA,CAAA,SAAA,CAAA,gBAAA,GAAV,UAA2B,IAA3B,EAA+C,GAA/C,EAA0D;AAA1D,QAAA,KAAA,GAAA,IAAA;;AACC,SAAK,SAAL,CAAe,MAAf,CAAsB,IAAtB,CAA2B,UAAC,CAAD,EAAI,CAAJ,EAAK;AAC/B,aAAa,CAAE,CAAC,MAAH,CAAU,GAAV,EAAe,YAAf,GAAoC,CAAE,CAAC,MAAH,CAAU,GAAV,EAAe,YAAhE;AACA,KAFD;AAGA,QAAI,CAAC,GAAG,CAAR;AACA,SAAK,SAAL,CAAe,IAAf,CAAoB,UAAC,QAAD,EAAS;AAC5B,MAAA,QAAQ,CAAC,MAAT,GAAkB,CAAlB;AACA,MAAA,CAAC;AACD,KAHD;AAKA,IAAA,IAAI,CAAC,SAAL,CAAe,IAAf,CAAoB,UAAC,QAAD,EAAS;AAC5B,UAAI,IAAI,GAAG,QAAQ,CAAC,SAApB;AACA,UAAI,eAAe,GAAG,IAAI,CAAC,kBAAL,CAAwB,QAAQ,CAAC,QAAjC,IAA6C,QAAQ,CAAC,aAA5E;AAEA,UAAI,cAAc,GAAG,IAAI,CAAC,2BAAL,CAAiC,QAAQ,CAAC,QAA1C,EAAoD,KAApD,CAArB;;AAEA,UAAI,cAAJ,EAAoB;AACnB,YAAI,KAAK,GAAG,KAAI,CAAC,SAAL,CAAe,OAAf,CAA6C,cAA7C,CAAZ;;AAEA,QAAA,QAAQ,CAAC,MAAT,GAAkB,KAAlB;AAEA,YAAI,aAAa,GAAG,KAAK,CAAC,KAAN,CAAY,CAAC,KAAK,GAAG,GAAT,IAAgB,KAAI,CAAC,SAAL,CAAe,MAA/B,GAAwC,eAApD,EAAqE,CAArE,CAApB;;AAEA,YAAI,QAAQ,CAAC,cAAT,IAA2B,CAAC,QAAQ,CAAC,cAAT,CAAwB,UAAxB,EAA5B,IAAoE,QAAQ,CAAC,cAAT,CAAwB,gBAAxB,CAAyC,CAAzC,EAA4C,EAA5C,IAAkD,aAA1H,EAAyI,CACxI;AACA,SAFD,MAGK,IAAI,aAAa,IAAI,KAAK,CAAC,KAAN,CAAY,QAAQ,CAAC,aAArB,EAAoC,CAApC,CAArB,EAA6D;AACjE,cAAI,QAAQ,CAAC,cAAb,EAA6B;AAC5B,YAAA,QAAQ,CAAC,cAAT,CAAwB,IAAxB;AACA;;AACD,UAAA,QAAQ,CAAC,cAAT,GAA0B,QAAQ,CAAC,OAAT,CAAiB;AAAE,YAAA,QAAQ,EAAE,eAAZ;AAA6B,YAAA,IAAI,EAAE,CAAC,aAApC;AAAmD,YAAA,EAAE,EAAE;AAAvD,WAAjB,EAA6E,IAAI,CAAC,qBAAlF,EAAyG,IAAI,CAAC,mBAA9G,CAA1B;;AACA,UAAA,KAAI,CAAC,UAAL,CAAgB,IAAhB,CAAqB,QAAQ,CAAC,cAA9B;AACA;AACD;AACD,KAxBD;AA0BA,IAAA,IAAI,CAAC,SAAL,CAAe,MAAf,CAAsB,IAAtB,CAA2B,UAAC,CAAD,EAAI,CAAJ,EAAK;AAC/B,aAAO,CAAC,CAAC,KAAF,GAAU,CAAC,CAAC,KAAnB;AACA,KAFD;AAGA,GAvCS;AA0CV;;;;;;;;AAMO,EAAA,YAAA,CAAA,SAAA,CAAA,mBAAA,GAAP,UAA2B,QAA3B,EAAsD;AACrD;AACA,QAAI,KAAK,KAAL,IAAc,KAAK,KAAnB,IAA4B,KAAK,KAArC,EAA4C;AAC3C,WAAK,uBAAL,CAA6B,QAA7B;;AACA,MAAA,MAAA,CAAA,SAAA,CAAM,mBAAN,CAAyB,IAAzB,CAAyB,IAAzB,EAA0B,QAA1B;AACA;AACD,GANM;AAQP;;;;;;;;AAMU,EAAA,YAAA,CAAA,SAAA,CAAA,gBAAA,GAAV,UAA2B,QAA3B,EAAsD;AACrD,QAAI,aAAa,GAAG,KAAK,cAAzB;;AAEA,QAAI,KAAK,QAAL,IAAiB,KAAK,KAA1B,EAAiC;AAChC,MAAA,aAAa,IAAI,QAAQ,CAAC,SAAT,CAAmB,KAAK,UAAxB,IAAsC,GAAvD;AACA,KAFD,MAGK;AACJ,MAAA,aAAa,IAAI,QAAQ,CAAC,SAAT,CAAmB,KAAK,UAAxB,IAAsC,GAAvD;AACA;;AACD,WAAO,aAAP;AACA,GAVS;AAYV;;;;;;AAKA;;;;;;;;;;AAUA;;;;;;;;AAMU,EAAA,YAAA,CAAA,SAAA,CAAA,cAAA,GAAV,UAAyB,QAAzB,EAAoD;AACnD,QAAI,WAAW,GAAG,KAAK,YAAvB;;AAEA,QAAI,KAAK,QAAL,IAAiB,KAAK,KAA1B,EAAiC;AAChC,MAAA,WAAW,IAAI,QAAQ,CAAC,SAAT,CAAmB,KAAK,MAAxB,IAAkC,GAAjD;AACA,KAFD,MAGK;AACJ,MAAA,WAAW,IAAI,QAAQ,CAAC,SAAT,CAAmB,KAAK,MAAxB,IAAkC,GAAjD;AACA;;AACD,WAAO,WAAP;AACA,GAVS;AAYV;;;;;;;;AAMO,EAAA,YAAA,CAAA,SAAA,CAAA,uBAAA,GAAP,UAA+B,QAA/B,EAA0D;AAA1D,QAAA,KAAA,GAAA,IAAA,CAA0D,CACzD;;;AACA,QAAI,CAAJ;AACA,QAAI,CAAJ;AACA,QAAI,CAAJ;AACA,QAAI,CAAJ;AAEA,QAAI,aAAa,GAAG,KAAK,gBAAL,CAAsB,QAAtB,CAApB;AACA,QAAI,WAAW,GAAG,KAAK,cAAL,CAAoB,QAApB,CAAlB;AAEA,QAAI,MAAM,GAAG,KAAK,MAAlB;AACA,QAAI,UAAU,GAAG,KAAK,UAAtB;AACA,QAAI,MAAM,GAAG,KAAK,MAAlB;AACA,QAAI,UAAU,GAAG,KAAK,UAAtB;AAEA,QAAI,QAAQ,GAAW,KAAK,OAAL,CAAa,QAApC;AAEA,QAAI,YAAY,GAAW,QAAQ,CAAC,YAApC;AACA,QAAI,aAAa,GAAW,QAAQ,CAAC,aAArC;AAEA,QAAI,UAAU,GAAW,QAAQ,CAAC,UAAlC;AACA,QAAI,WAAW,GAAW,QAAQ,CAAC,WAAnC;AAEA,QAAI,QAAQ,GAAW,QAAQ,CAAC,QAAhC;AACA,QAAI,SAAS,GAAW,QAAQ,CAAC,SAAjC;AAEA,QAAI,WAAW,GAAW,QAAQ,CAAC,gBAAnC;AACA,QAAI,YAAY,GAAW,QAAQ,CAAC,iBAApC;AACA,QAAI,UAAU,GAAW,QAAQ,CAAC,eAAlC;AACA,QAAI,aAAa,GAAW,QAAQ,CAAC,kBAArC;AAEA,QAAI,WAAW,GAAY,KAA3B;AAEA,QAAI,GAAG,GAAG,QAAQ,CAAC,KAAnB;;AACA,QAAI,KAAK,CAAC,QAAN,CAAe,GAAf,CAAJ,EAAyB;AACxB,UAAI,KAAK,CAAC,QAAN,CAAe,GAAf,CAAJ,EAAyB;AACxB,QAAA,UAAU,GAAG,GAAb;AACA;;AACD,UAAI,GAAG,YAAY,OAAnB,EAA4B;AAC3B,QAAA,YAAY,GAAG,GAAG,CAAC,KAAJ,GAAY,GAA3B;AACA;AACD,KAzCwD,CA2CzD;;;AACA,QAAK,KAAK,KAAL,YAAsB,YAAvB,IAAyC,KAAK,KAAL,YAAsB,YAAnE,EAAkF;AAEjF,UAAI,CAAC,QAAQ,CAAC,QAAT,CAAkB,KAAK,aAAvB,CAAD,IAA0C,CAAC,QAAQ,CAAC,QAAT,CAAkB,KAAK,aAAvB,CAA/C,EAAsF;AACrF;AACA;;AAED,MAAA,aAAa,GAAG,CAAhB;AACA,MAAA,WAAW,GAAG,CAAd;;AACA,UAAI,CAAC,KAAK,CAAC,KAAN,CAAY,YAAZ,CAAL,EAAgC;AAC/B,YAAI,MAAM,GAAW,KAAK,CAAC,KAAN,CAAY,CAAC,WAAW,GAAG,aAAf,KAAiC,IAAI,YAAY,GAAG,GAApD,IAA2D,CAAvE,EAA0E,CAA1E,CAArB;AACA,QAAA,aAAa,IAAI,MAAjB;AACA,QAAA,WAAW,IAAI,MAAf;AACA;;AAED,MAAA,CAAC,GAAG,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,EAA0B,UAA1B,EAAsC,aAAtC,CAAJ;AACA,MAAA,CAAC,GAAG,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,EAA0B,MAA1B,EAAkC,WAAlC,CAAJ,CAfiF,CAiBjF;;AACA,UAAI,KAAK,CAAC,KAAN,CAAY,YAAZ,CAAJ,EAA+B;AAC9B,YAAI,MAAM,GAAW,CAAE,CAAC,GAAG,CAAL,GAAU,UAAX,IAAyB,CAA9C;AACA,QAAA,CAAC,IAAI,MAAL;AACA,QAAA,CAAC,IAAI,MAAL;AACA,OAtBgF,CAwBjF;;;AACA,UAAI,CAAC,KAAK,CAAC,KAAN,CAAY,QAAZ,CAAD,IAA0B,QAAQ,GAAG,IAAI,CAAC,GAAL,CAAS,CAAC,GAAG,CAAb,CAAzC,EAA0D;AACzD,YAAI,MAAM,GAAW,CAAE,CAAC,GAAG,CAAL,GAAU,QAAX,IAAuB,CAA5C;AACA,QAAA,CAAC,IAAI,MAAL;AACA,QAAA,CAAC,IAAI,MAAL;AACA;;AAED,MAAA,aAAa,GAAG,CAAhB;AACA,MAAA,WAAW,GAAG,CAAd;;AAEA,UAAI,CAAC,KAAK,CAAC,KAAN,CAAY,aAAZ,CAAL,EAAiC;AAChC,YAAI,MAAM,GAAW,KAAK,CAAC,KAAN,CAAY,CAAC,IAAI,aAAa,GAAG,GAArB,IAA4B,CAAxC,EAA2C,CAA3C,CAArB;AACA,QAAA,aAAa,IAAI,MAAjB;AACA,QAAA,WAAW,IAAI,MAAf;AACA;;AAED,MAAA,CAAC,GAAG,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,EAA0B,UAA1B,EAAsC,aAAtC,CAAJ;AACA,MAAA,CAAC,GAAG,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,EAA0B,MAA1B,EAAkC,WAAlC,CAAJ,CAzCiF,CA2CjF;;AACA,UAAI,KAAK,CAAC,KAAN,CAAY,aAAZ,CAAJ,EAAgC;AAC/B,YAAI,MAAM,GAAW,CAAE,CAAC,GAAG,CAAL,GAAU,WAAX,IAA0B,CAA/C;AACA,QAAA,CAAC,IAAI,MAAL;AACA,QAAA,CAAC,IAAI,MAAL;AACA,OAhDgF,CAkDjF;;;AACA,UAAI,CAAC,KAAK,CAAC,KAAN,CAAY,SAAZ,CAAD,IAA2B,SAAS,GAAG,IAAI,CAAC,GAAL,CAAS,CAAC,GAAG,CAAb,CAA3C,EAA4D;AAC3D,YAAI,MAAM,GAAW,CAAE,CAAC,GAAG,CAAL,GAAU,SAAX,IAAwB,CAA7C;AACA,QAAA,CAAC,IAAI,MAAL;AACA,QAAA,CAAC,IAAI,MAAL;AACA;;AAED,MAAA,CAAC,GAAG,KAAK,uBAAL,CAA6B,CAA7B,CAAJ;AACA,MAAA,CAAC,GAAG,KAAK,uBAAL,CAA6B,CAA7B,CAAJ;AACA,MAAA,CAAC,GAAG,KAAK,qBAAL,CAA2B,CAA3B,CAAJ;AACA,MAAA,CAAC,GAAG,KAAK,qBAAL,CAA2B,CAA3B,CAAJ;AACA,KA7DD,MA8DK,IAAI,KAAK,QAAL,IAAiB,KAAK,KAA1B,EAAiC;AAErC,UAAI,CAAC,QAAQ,CAAC,QAAT,CAAkB,KAAK,aAAvB,CAAL,EAA4C;AAC3C;AACA,OAJoC,CAMrC;;;AACA,UAAI,CAAC,KAAK,CAAC,KAAN,CAAY,YAAZ,CAAL,EAAgC;AAC/B,YAAI,MAAM,GAAW,KAAK,CAAC,KAAN,CAAY,CAAC,WAAW,GAAG,aAAf,KAAiC,IAAI,YAAY,GAAG,GAApD,IAA2D,CAAvE,EAA0E,CAA1E,CAArB;AACA,QAAA,aAAa,IAAI,MAAjB;AACA,QAAA,WAAW,IAAI,MAAf;AACA;;AAED,MAAA,CAAC,GAAG,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,EAA0B,UAA1B,EAAsC,aAAtC,CAAJ;AACA,MAAA,CAAC,GAAG,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,EAA0B,MAA1B,EAAkC,WAAlC,CAAJ,CAdqC,CAgBrC;;AACA,UAAI,KAAK,CAAC,KAAN,CAAY,YAAZ,CAAJ,EAA+B;AAC9B,YAAI,MAAM,GAAW,CAAE,CAAC,GAAG,CAAL,GAAU,UAAX,IAAyB,CAA9C;AACA,QAAA,CAAC,IAAI,MAAL;AACA,QAAA,CAAC,IAAI,MAAL;AACA,OArBoC,CAuBrC;;;AACA,UAAI,CAAC,KAAK,CAAC,KAAN,CAAY,QAAZ,CAAD,IAA0B,QAAQ,GAAG,IAAI,CAAC,GAAL,CAAS,CAAC,GAAG,CAAb,CAAzC,EAA0D;AACzD,YAAI,MAAM,GAAW,CAAE,CAAC,GAAG,CAAL,GAAU,QAAX,IAAuB,CAA5C;AACA,QAAA,CAAC,IAAI,MAAL;AACA,QAAA,CAAC,IAAI,MAAL;AACA;;AAED,UAAI,cAAc,GAAG,QAAQ,CAAC,SAAT,CAAmB,UAAnB,CAArB;AACA,UAAI,WAAW,GAAG,QAAQ,CAAC,SAAT,CAAmB,MAAnB,CAAlB,CA/BqC,CAgCrC;;AACA,UAAI,KAAK,KAAL,YAAsB,SAA1B,EAAqC;AACpC,YAAU,KAAK,UAAL,CAAiB,KAAK,MAAtB,KAAuC,KAAK,UAAL,CAAiB,KAAK,UAAtB,CAAjD,EAAoF;AACnF,UAAA,cAAc,GAAG,CAAjB;AACA,UAAA,WAAW,GAAG,CAAd;AACA;AACD;;AAED,MAAA,CAAC,GAAG,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,EAA0B,UAA1B,EAAsC,cAAtC,CAAJ;AACA,MAAA,CAAC,GAAG,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,EAA0B,MAA1B,EAAkC,WAAlC,CAAJ,CAzCqC,CA2CrC;AACA;;AAEA,UAAI,UAAU,GAAG,IAAI,CAAC,IAAL,CAAU,KAAK,KAAL,CAAW,UAArB,CAAjB;;AAEA,UAAK,CAAC,GAAG,CAAJ,IAAS,CAAC,GAAG,CAAd,IAAqB,CAAC,GAAG,UAAJ,IAAkB,CAAC,GAAG,UAA/C,EAA4D;AAC3D,QAAA,WAAW,GAAG,IAAd;AACA;;AAED,MAAA,CAAC,GAAG,KAAK,qBAAL,CAA2B,CAA3B,CAAJ;AACA,MAAA,CAAC,GAAG,KAAK,qBAAL,CAA2B,CAA3B,CAAJ;;AAEA,UAAI,IAAI,CAAC,GAAL,CAAS,CAAC,GAAG,CAAb,IAAkB,WAAlB,GAAgC,YAAhC,IAAgD,CAApD,EAAuD;AACtD,QAAA,WAAW,GAAG,IAAd;AACA;AACD,KA1DI,CA2DL;AA3DK,SA4DA;AACJ,YAAI,CAAC,QAAQ,CAAC,QAAT,CAAkB,KAAK,aAAvB,CAAL,EAA4C;AAC3C;AACA;;AAED,YAAI,CAAC,KAAK,CAAC,KAAN,CAAY,aAAZ,CAAL,EAAiC;AAChC,cAAI,MAAM,GAAW,KAAK,CAAC,KAAN,CAAY,CAAC,WAAW,GAAG,aAAf,KAAiC,IAAI,aAAa,GAAG,GAArD,IAA4D,CAAxE,EAA2E,CAA3E,CAArB;AACA,UAAA,aAAa,IAAI,MAAjB;AACA,UAAA,WAAW,IAAI,MAAf;AACA;;AAED,QAAA,CAAC,GAAG,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,EAA0B,UAA1B,EAAsC,aAAtC,CAAJ;AACA,QAAA,CAAC,GAAG,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,EAA0B,MAA1B,EAAkC,WAAlC,CAAJ,CAZI,CAcJ;;AACA,YAAI,KAAK,CAAC,KAAN,CAAY,aAAZ,CAAJ,EAAgC;AAC/B,cAAI,MAAM,GAAW,CAAE,CAAC,GAAG,CAAL,GAAU,WAAX,IAA0B,CAA/C;AACA,UAAA,CAAC,IAAI,MAAL;AACA,UAAA,CAAC,IAAI,MAAL;AACA,SAnBG,CAqBJ;;;AACA,YAAI,CAAC,KAAK,CAAC,KAAN,CAAY,SAAZ,CAAD,IAA2B,SAAS,GAAG,IAAI,CAAC,GAAL,CAAS,CAAC,GAAG,CAAb,CAA3C,EAA4D;AAC3D,cAAI,MAAM,GAAW,CAAE,CAAC,GAAG,CAAL,GAAU,SAAX,IAAwB,CAA7C;AACA,UAAA,CAAC,IAAI,MAAL;AACA,UAAA,CAAC,IAAI,MAAL;AACA;;AAED,YAAI,aAAa,GAAG,QAAQ,CAAC,SAAT,CAAmB,MAAnB,CAApB;AACA,YAAI,YAAY,GAAG,QAAQ,CAAC,SAAT,CAAmB,UAAnB,CAAnB,CA7BI,CA+BJ;;AACA,YAAI,KAAK,KAAL,YAAsB,SAA1B,EAAqC;AACpC,cAAU,KAAK,UAAL,CAAiB,KAAK,MAAtB,KAAuC,KAAK,UAAL,CAAiB,KAAK,UAAtB,CAAjD,EAAoF;AACnF,YAAA,aAAa,GAAG,CAAhB;AACA,YAAA,YAAY,GAAG,CAAf;AACA;AACD;;AAED,QAAA,CAAC,GAAG,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,EAA0B,MAA1B,EAAkC,aAAlC,CAAJ;AACA,QAAA,CAAC,GAAG,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,EAA0B,UAA1B,EAAsC,YAAtC,CAAJ,CAxCI,CAyCJ;AACA;;AAEA,YAAI,UAAU,GAAG,IAAI,CAAC,IAAL,CAAU,KAAK,KAAL,CAAW,UAArB,CAAjB;;AAEA,YAAK,CAAC,GAAG,CAAJ,IAAS,CAAC,GAAG,CAAd,IAAqB,CAAC,GAAG,UAAJ,IAAkB,CAAC,GAAG,UAA/C,EAA4D;AAC3D,UAAA,WAAW,GAAG,IAAd;AACA;;AAED,QAAA,CAAC,GAAG,KAAK,uBAAL,CAA6B,CAA7B,CAAJ;AACA,QAAA,CAAC,GAAG,KAAK,uBAAL,CAA6B,CAA7B,CAAJ;;AAEA,YAAI,IAAI,CAAC,GAAL,CAAS,CAAC,GAAG,CAAb,IAAkB,UAAlB,GAA+B,aAA/B,IAAgD,CAApD,EAAuD;AACtD,UAAA,WAAW,GAAG,IAAd;AACA;AACD;;AAED,QAAI,CAAC,GAAW,IAAI,CAAC,GAAL,CAAS,CAAC,GAAG,CAAb,CAAhB;AACA,QAAI,CAAC,GAAW,IAAI,CAAC,GAAL,CAAS,CAAC,GAAG,CAAb,CAAhB;AAEA,QAAI,CAAC,GAAW,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,CAAZ,CAAhB;AACA,QAAI,CAAC,GAAW,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,CAAZ,CAAhB;;AAEA,QAAI,CAAC,WAAL,EAAkB;AACjB,UAAI,QAAJ;;AACA,UAAI,CAAC,QAAQ,CAAC,MAAd,EAAsB;AACrB,QAAA,QAAM,GAAG,KAAK,OAAL,CAAa,MAAb,EAAT,CADqB,CAErB;;AACA,QAAA,OAAO,CAAC,cAAR,CAAuB,IAAvB,EAA6B,QAA7B,EAAqC,gBAArC,EAHqB,CAGmC;;AACxD,QAAA,OAAO,CAAC,cAAR,CAAuB,KAAK,OAAL,CAAa,QAApC,EAA8C,QAA9C,EAAsD,gBAAtD,EAJqB,CAIoD;;AACzE,QAAA,QAAQ,CAAC,SAAT,CAAmB,QAAnB;AAEA,QAAA,QAAQ,CAAC,MAAT,GAAkB,QAAlB;AACA,QAAA,QAAM,CAAC,KAAP,GAAe,KAAK,KAApB,CARqB,CAQM;AAE3B;;AACA,YAAI,KAAK,cAAL,EAAJ,EAA2B;AAC1B,eAAK,IAAL,GAAY,MAAZ;AACA,UAAA,QAAM,CAAC,IAAP,GAAc,UAAd;AACA,UAAA,QAAM,CAAC,SAAP,GAAmB,IAAnB;AACA,SAJD,MAKK;AACJ,eAAK,IAAL,GAAY,MAAZ;AACA,UAAA,QAAM,CAAC,IAAP,GAAc,UAAd;AACA,UAAA,QAAM,CAAC,SAAP,GAAmB,KAAnB;AACA;;AAED,YAAI,QAAM,CAAC,SAAX,EAAsB;AACrB,UAAA,QAAM,CAAC,MAAP,CAAc,EAAd,CAAiB,OAAjB,EAA0B,UAAC,EAAD,EAAG;AAC5B,YAAA,QAAM,CAAC,WAAP,GAAqB,KAAI,CAAC,cAAL,CAAoB,KAAI,CAAC,cAAzB,EAAyC,QAAzC,CAArB;AACA,WAFD,EAEG,SAFH,EAEc,KAFd;AAGA,UAAA,QAAM,CAAC,MAAP,CAAc,EAAd,CAAiB,MAAjB,EAAyB,UAAC,EAAD,EAAG;AAC3B,YAAA,QAAM,CAAC,WAAP,GAAqB,EAArB;AACA,WAFD,EAEG,SAFH,EAEc,KAFd;AAGA;;AACD,YAAI,QAAM,CAAC,SAAX,EAAsB;AACrB,UAAA,QAAM,CAAC,MAAP,CAAc,EAAd,CAAiB,MAAjB,EAAyB,UAAC,EAAD,EAAG;AAC3B,YAAA,QAAM,CAAC,WAAP,GAAqB,KAAI,CAAC,cAAL,CAAoB,KAAI,CAAC,cAAzB,EAAyC,QAAzC,CAArB;AACA,WAFD,EAEG,SAFH,EAEc,KAFd;AAGA,UAAA,QAAM,CAAC,MAAP,CAAc,EAAd,CAAiB,KAAjB,EAAwB,UAAC,EAAD,EAAG;AAC1B,YAAA,QAAM,CAAC,WAAP,GAAqB,EAArB;AACA,WAFD,EAEG,SAFH,EAEc,KAFd;AAGA;;AACD,QAAA,QAAM,CAAC,MAAP,GAAgB,KAAK,gBAArB;AACA,QAAA,QAAM,CAAC,aAAP,GAAuB,IAAvB;AACA,OAxCD,MAyCK;AACJ,QAAA,QAAM,GAAG,QAAQ,CAAC,MAAlB;;AACA,YAAI,KAAK,kBAAT,EAA6B;AAC5B,UAAA,OAAO,CAAC,cAAR,CAAuB,IAAvB,EAA6B,QAA7B,EAAqC,gBAArC;AACA,UAAA,OAAO,CAAC,cAAR,CAAuB,KAAK,OAAL,CAAa,QAApC,EAA8C,QAA9C,EAAsD,gBAAtD;AACA,UAAA,MAAM,CAAC,IAAP,CAAY,gBAAZ,EAA8B,UAAC,QAAD,EAAS;AAChC,YAAA,QAAO,CAAC,QAAD,CAAP,GAAoB,QAAM,CAAC,QAAD,CAA1B;AACN,WAFD;AAGA;AACD;;AAED,MAAA,QAAM,CAAC,KAAP,GAAe,CAAf;AACA,MAAA,QAAM,CAAC,MAAP,GAAgB,CAAhB;AAEA,MAAA,QAAM,CAAC,CAAP,GAAW,CAAX;AACA,MAAA,QAAM,CAAC,CAAP,GAAW,CAAX;AAEA,MAAA,QAAM,CAAC,KAAP,GAAe,CAAf;AACA,MAAA,QAAM,CAAC,KAAP,GAAe,CAAf;AAEA,MAAA,QAAM,CAAC,SAAP,GAAmB,CAAC,GAAG,CAAvB;AACA,MAAA,QAAM,CAAC,UAAP,GAAoB,CAAC,GAAG,CAAxB;AAEA,WAAK,eAAL,CAAqB,QAArB;;AAEA,UAAI,QAAM,CAAC,OAAX,EAAoB;AACnB,QAAA,QAAM,CAAC,QAAP,GADmB,CACA;AACnB;;AAED,MAAA,QAAM,CAAC,UAAP,GAAoB,KAApB,CAxEiB,CAyEjB;;AAEA,MAAA,KAAK,CAAC,IAAN,CAAW,KAAK,UAAL,CAAgB,QAAhB,EAAX,EAAuC,UAAC,SAAD,EAAU;AAChD,YAAI,WAAW,GAAoB,QAAQ,CAAC,aAAT,CAAuB,MAAvB,CAA8B,SAAS,CAAC,GAAxC,CAAnC;;AACA,YAAI,CAAC,WAAL,EAAkB;AACjB,UAAA,WAAW,GAAG,KAAI,CAAC,OAAL,CAAa,MAAb,EAAd,CADiB,CAGjB;;AACA,UAAA,OAAO,CAAC,cAAR,CAAuB,SAAS,CAAC,QAAjC,EAA2C,WAA3C,EAAwD,gBAAxD,EAJiB,CAI0D;;AAE3E,UAAA,QAAQ,CAAC,SAAT,CAAmB,WAAnB;AACA,UAAA,QAAQ,CAAC,aAAT,CAAuB,MAAvB,CAA8B,SAAS,CAAC,GAAxC,EAAqD,WAArD;AACA,UAAA,WAAW,CAAC,KAAZ,GAAoB,KAAI,CAAC,KAAzB,CARiB,CAQe;AAChC;;AAED,QAAA,WAAW,CAAC,MAAZ,GAAqB,SAAS,CAAC,QAA/B;AAEA,QAAA,WAAW,CAAC,KAAZ,GAAoB,CAApB;AACA,QAAA,WAAW,CAAC,MAAZ,GAAqB,CAArB;AACA,QAAA,WAAW,CAAC,CAAZ,GAAgB,CAAhB;AACA,QAAA,WAAW,CAAC,CAAZ,GAAgB,CAAhB;;AAEA,QAAA,KAAI,CAAC,eAAL,CAAqB,WAArB;;AAEA,YAAI,WAAW,CAAC,OAAhB,EAAyB;AACxB,UAAA,WAAW,CAAC,QAAZ,GADwB,CACA;AACxB;;AAED,QAAA,WAAW,CAAC,UAAZ,GAAyB,KAAzB,CA1BgD,CA2BhD;AACA,OA5BD;AA6BA,KAxGD,MAyGK;AACJ,WAAK,oBAAL,CAA0B,QAA1B;AACA;;AAED,IAAA,QAAQ,CAAC,SAAT,GAAqB,CAArB;AACA,IAAA,QAAQ,CAAC,UAAT,GAAsB,CAAtB;AACA,GArVM;AAwVP;;;;;AAGU,EAAA,YAAA,CAAA,SAAA,CAAA,oBAAA,GAAV,UAA+B,QAA/B,EAA6D;AAC5D,QAAI,QAAJ,EAAc;AACb,UAAI,QAAQ,CAAC,MAAb,EAAqB;AACpB;AACA,QAAA,QAAQ,CAAC,MAAT,CAAgB,KAAhB,GAAwB,CAAxB;AACA,QAAA,QAAQ,CAAC,MAAT,CAAgB,MAAhB,GAAyB,CAAzB;AACA,QAAA,QAAQ,CAAC,MAAT,CAAgB,UAAhB,GAA6B,IAA7B;AACA;;AAED,MAAA,KAAK,CAAC,IAAN,CAAW,KAAK,UAAL,CAAgB,QAAhB,EAAX,EAAuC,UAAC,SAAD,EAAU;AAChD,YAAI,WAAW,GAAW,QAAQ,CAAC,aAAT,CAAuB,MAAvB,CAA8B,SAAS,CAAC,GAAxC,CAA1B;;AACA,YAAI,WAAJ,EAAiB;AAChB;AACA,UAAA,WAAW,CAAC,KAAZ,GAAoB,CAApB;AACA,UAAA,WAAW,CAAC,MAAZ,GAAqB,CAArB;AACA,UAAA,WAAW,CAAC,UAAZ,GAAyB,IAAzB;AACA;AACD,OARD;AASA;AACD,GAnBS;AAsBV;;;;;;;;AAMU,EAAA,YAAA,CAAA,SAAA,CAAA,eAAA,GAAV,UAA0B,MAA1B,EAAwC;AACvC,QAAI,KAAK,kBAAL,IAA2B,KAAK,sBAAhC,IAA0D,KAAK,kBAA/D,IAAqF,KAAK,sBAA9F,EAAsH;AAErH,UAAI,QAAQ,GAAyC,MAAM,CAAC,QAA5D;;AAEA,UAAI,KAAK,KAAL,YAAsB,SAAtB,IAAmC,KAAK,KAAL,YAAsB,SAA7D,EAAwE;AACvE,YAAI,MAAJ;AACA,YAAI,KAAK,GAAA,KAAA,CAAT;AACA,YAAI,MAAM,GAAA,KAAA,CAAV;;AAEA,YAAI,KAAK,QAAL,IAAiB,KAAK,KAA1B,EAAiC;AAChC,cAAI,KAAK,UAAL,IAAmB,KAAK,MAAxB,IAAkC,KAAK,KAAL,YAAsB,SAA5D,EAAuE;AACtE,YAAA,MAAI,GAAG,QAAQ,CAAC,QAAT,CAAkB,KAAK,UAAvB,CAAP;AACA,YAAA,KAAK,GAAG,QAAQ,CAAC,QAAT,CAAkB,KAAK,MAAvB,CAAR;AACA;;AACD,UAAA,MAAM,GAAG,QAAQ,CAAC,QAAT,CAAkB,KAAK,KAAL,CAAW,aAAX,GAA2B,GAA7C,EAAkD,gBAAlD,CAAT;AACA,SAND,MAOK;AACJ,cAAI,KAAK,UAAL,IAAmB,KAAK,MAAxB,IAAkC,KAAK,KAAL,YAAsB,SAA5D,EAAuE;AACtE,YAAA,MAAI,GAAG,QAAQ,CAAC,QAAT,CAAkB,KAAK,UAAvB,CAAP;AACA,YAAA,KAAK,GAAG,QAAQ,CAAC,QAAT,CAAkB,KAAK,MAAvB,CAAR;AACA;;AACD,UAAA,MAAM,GAAG,QAAQ,CAAC,QAAT,CAAkB,KAAK,KAAL,CAAW,aAAX,GAA2B,GAA7C,EAAkD,gBAAlD,CAAT;AACA;;AAED,YAAI,KAAK,GAAG,MAAZ,EAAkB;AACjB,UAAA,QAAQ,CAAC,eAAT,GAA2B,IAA3B;AACA,UAAA,MAAM,CAAC,YAAP,CAAoB,QAApB,CAA6B,KAAK,kBAAlC;AACA,UAAA,MAAM,CAAC,QAAP,CAAgB,KAAK,kBAArB,EAAyC,CAAzC;AACA,SAJD,MAKK;AACJ,UAAA,QAAQ,CAAC,eAAT,GAA2B,KAA3B;AACA,UAAA,MAAM,CAAC,YAAP,CAAoB,QAApB,CAA6B,KAAK,kBAAlC;AACA,UAAA,MAAM,CAAC,QAAP,CAAgB,KAAK,kBAArB,EAAyC,CAAzC;AACA;;AAED,YAAI,MAAM,GAAG,CAAb,EAAgB;AACf,UAAA,QAAQ,CAAC,mBAAT,GAA+B,IAA/B;AACA,UAAA,MAAM,CAAC,YAAP,CAAoB,QAApB,CAA6B,KAAK,sBAAlC;AACA,UAAA,MAAM,CAAC,QAAP,CAAiB,KAAK,sBAAtB,EAA+C,CAA/C;AACA,SAJD,MAKK;AACJ,UAAA,QAAQ,CAAC,mBAAT,GAA+B,KAA/B;AACA,UAAA,MAAM,CAAC,YAAP,CAAoB,QAApB,CAA6B,KAAK,sBAAlC;AACA,UAAA,MAAM,CAAC,QAAP,CAAiB,KAAK,sBAAtB,EAA+C,CAA/C;AACA;AACD;AACD;AACD,GAhDS;;AAuDV,EAAA,MAAA,CAAA,cAAA,CAAW,YAAA,CAAA,SAAX,EAAW,SAAX,EAAkB;AALlB;;;;;SAKA,eAAA;AACC,UAAI,CAAC,KAAK,QAAV,EAAoB;AACnB,aAAK,QAAL,GAAgB,IAAI,YAAJ,CAAkC,KAAK,oBAAL,EAAlC,CAAhB;;AACA,aAAK,UAAL,CAAgB,IAAhB,CAAqB,IAAI,YAAJ,CAAiB,KAAK,QAAtB,CAArB;;AACA,aAAK,UAAL,CAAgB,IAAhB,CAAqB,KAAK,QAAL,CAAc,QAAnC;AACA;;AACD,aAAO,KAAK,QAAZ;AACA,KAPiB;oBAAA;;AAAA,GAAlB;AASA;;;;;;AAKU,EAAA,YAAA,CAAA,SAAA,CAAA,oBAAA,GAAV,YAAA;AACC,WAAO,IAAI,MAAJ,EAAP;AACA,GAFS;;AAYV,EAAA,MAAA,CAAA,cAAA,CAAW,YAAA,CAAA,SAAX,EAAW,WAAX,EAAoB;AAIpB;;;SAGA,eAAA;AACC,aAAO,KAAK,gBAAL,CAAsB,WAAtB,CAAP;AACA,KATmB;;AARpB;;;;;;;;SAQA,aAAqB,KAArB,EAAmC;AAClC,WAAK,gBAAL,CAAsB,WAAtB,EAAmC,KAAnC,EAA0C,IAA1C;AACA,KAFmB;oBAAA;;AAAA,GAApB;AAqBA,EAAA,MAAA,CAAA,cAAA,CAAW,YAAA,CAAA,SAAX,EAAW,mBAAX,EAA4B;AAI5B;;;SAGA,eAAA;AACC,UAAI,CAAC,KAAK,kBAAV,EAA8B;AAC7B,aAAK,kBAAL,GAA0B,KAAK,MAAL,CAAY,MAAZ,CAAmB,mBAAnB,CAA1B;AACA;;AACD,aAAO,KAAK,kBAAZ;AACA,KAZ2B;;AAV5B;;;;;;;;;;SAUA,aAA6B,KAA7B,EAAsF;AACrF,WAAK,kBAAL,GAA0B,KAA1B;AACA,KAF2B;oBAAA;;AAAA,GAA5B;AAuBA,EAAA,MAAA,CAAA,cAAA,CAAW,YAAA,CAAA,SAAX,EAAW,uBAAX,EAAgC;AAIhC;;;SAGA,eAAA;AACC,UAAI,CAAC,KAAK,sBAAV,EAAkC;AACjC,aAAK,sBAAL,GAA8B,KAAK,MAAL,CAAY,MAAZ,CAAmB,uBAAnB,CAA9B;AACA;;AACD,aAAO,KAAK,sBAAZ;AACA,KAZ+B;;AAThC;;;;;;;;;SASA,aAAiC,KAAjC,EAA0F;AACzF,WAAK,sBAAL,GAA8B,KAA9B;AACA,KAF+B;oBAAA;;AAAA,GAAhC;AAyBA,EAAA,MAAA,CAAA,cAAA,CAAW,YAAA,CAAA,SAAX,EAAW,mBAAX,EAA4B;AAI5B;;;SAGA,eAAA;AACC,UAAI,CAAC,KAAK,kBAAV,EAA8B;AAC7B,aAAK,kBAAL,GAA0B,KAAK,MAAL,CAAY,MAAZ,CAAmB,mBAAnB,CAA1B;AACA;;AACD,aAAO,KAAK,kBAAZ;AACA,KAZ2B;;AAX5B;;;;;;;;;;;SAWA,aAA6B,KAA7B,EAAsF;AACrF,WAAK,kBAAL,GAA0B,KAA1B;AACA,KAF2B;oBAAA;;AAAA,GAA5B;AAuBA,EAAA,MAAA,CAAA,cAAA,CAAW,YAAA,CAAA,SAAX,EAAW,uBAAX,EAAgC;AAIhC;;;SAGA,eAAA;AACC,UAAI,CAAC,KAAK,sBAAV,EAAkC;AACjC,aAAK,sBAAL,GAA8B,KAAK,MAAL,CAAY,MAAZ,CAAmB,uBAAnB,CAA9B;AACA;;AACD,aAAO,KAAK,sBAAZ;AACA,KAZ+B;;AAThC;;;;;;;;;SASA,aAAiC,KAAjC,EAA0F;AACzF,WAAK,sBAAL,GAA8B,KAA9B;AACA,KAF+B;oBAAA;;AAAA,GAAhC;AAcA;;;;;;;AAMO,EAAA,YAAA,CAAA,SAAA,CAAA,iBAAA,GAAP,UAAyB,QAAzB,EAAuD,QAAvD,EAAyE;AAAzE,QAAA,KAAA,GAAA,IAAA;;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,iBAAN,CAAuB,IAAvB,CAAuB,IAAvB,EAAwB,QAAxB,EAAkC,QAAlC;;AAEA,QAAI,KAAK,cAAT,EAAyB;AACxB,UAAI,MAAM,GAAc,KAAK,cAAL,CAAoB,MAA5C;AACA,UAAI,eAAJ;AACA,UAAI,mBAAJ;;AAEA,UAAI,QAAJ,EAAc;AACb,YAAI,QAAQ,CAAC,eAAb,EAA8B;AAC7B,UAAA,eAAa,GAAG,KAAK,kBAArB;AACA,SAFD,MAGK;AACJ,UAAA,eAAa,GAAG,KAAK,kBAArB;AACA;;AAED,YAAI,QAAQ,CAAC,mBAAb,EAAkC;AACjC,UAAA,mBAAiB,GAAG,KAAK,sBAAzB;AACA,SAFD,MAGK;AACJ,UAAA,mBAAiB,GAAG,KAAK,sBAAzB;AACA;AACD;;AAED,MAAA,KAAK,CAAC,IAAN,CAAW,MAAM,CAAC,QAAP,CAAgB,QAAhB,EAAX,EAAuC,UAAC,KAAD,EAAM;AAC5C,YAAI,QAAJ,EAAc;AACb,UAAA,KAAK,CAAC,QAAN,CAAe,mBAAf;AACA,UAAA,KAAK,CAAC,QAAN,CAAe,eAAf;AACA,SAHD,MAIK;AACJ;AACA,UAAA,KAAK,CAAC,QAAN,CAAe,KAAI,CAAC,sBAApB;AACA,UAAA,KAAK,CAAC,QAAN,CAAe,KAAI,CAAC,kBAApB;AACA;AACD,OAVD;AAWA;AACD,GApCM;AAsCP;;;;;;;;;AAOO,EAAA,YAAA,CAAA,SAAA,CAAA,kBAAA,GAAP,UAA0B,MAA1B,EAA2C;AAC1C,QAAI,CAAC,GAAW,MAAM,CAAC,UAAvB;AACA,QAAI,CAAC,GAAW,MAAM,CAAC,WAAvB;AAEA,IAAA,MAAM,CAAC,cAAP;AAEA,QAAI,MAAM,GAAqB,MAAM,CAAC,WAAP,CAAmB,gBAAnB,CAA/B;AACA,IAAA,MAAM,CAAC,WAAP,GAAqB,KAArB;AACA,IAAA,OAAO,CAAC,cAAR,CAAuB,IAAvB,EAA6B,MAA7B,EAAqC,gBAArC;AAEA,IAAA,MAAM,CAAC,QAAP,CAAqB,KAAK,OAAL,CAAa,QAAlC;AACA,IAAA,MAAM,CAAC,OAAP,CAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAX0C,CAWd;;AAC5B,IAAA,MAAM,CAAC,KAAP,GAAe,CAAf;AACA,IAAA,MAAM,CAAC,MAAP,GAAgB,CAAhB;AAEA,QAAI,cAAc,GAAmB,MAAM,CAAC,QAA5C;AACA,IAAA,cAAc,CAAC,KAAf,GAAuB,KAAK,IAA5B;AACA,IAAA,cAAc,CAAC,SAAf,GAA2B,KAAK,IAAhC;AACA,GAlBM;AAoBP;;;;;;;AAKO,EAAA,YAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,MAAhB,EAA4B;AAC3B,IAAA,MAAA,CAAA,SAAA,CAAM,QAAN,CAAc,IAAd,CAAc,IAAd,EAAe,MAAf;;AACA,SAAK,OAAL,CAAa,QAAb,CAAsB,QAAtB,CAA+B,MAAM,CAAC,OAAP,CAAe,QAA9C;AACA,GAHM;AAKP;;;;;;AAKU,EAAA,YAAA,CAAA,SAAA,CAAA,kBAAA,GAAV,UAA6B,MAA7B,EAA6C,KAA7C,EAA0D;AACzD,QAAI,KAAK,QAAL,IAAiB,KAAK,KAA1B,EAAiC;AAChC,UAAI,eAAe,GAAG,MAAM,CAAC,SAA7B;;AACA,UAAI,CAAC,KAAK,CAAC,QAAN,CAAe,eAAf,CAAL,EAAsC;AACrC,QAAA,eAAe,GAAG,GAAlB;AACA;;AAED,UAAI,WAAW,GAAG,KAAK,cAAL,CAA0C,MAAM,CAAC,QAAjD,CAAlB;AACA,UAAI,aAAa,GAAG,KAAK,gBAAL,CAA4C,MAAM,CAAC,QAAnD,CAApB;AAEA,aAAO,WAAW,GAAG,CAAC,WAAW,GAAG,aAAf,IAAgC,eAArD;AACA,KAVD,MAWK;AACJ,aAAO,MAAA,CAAA,SAAA,CAAM,kBAAN,CAAwB,IAAxB,CAAwB,IAAxB,EAAyB,MAAzB,EAAiC,KAAjC,CAAP;AACA;AACD,GAfS;AAkBV;;;;;;AAIU,EAAA,YAAA,CAAA,SAAA,CAAA,kBAAA,GAAV,UAA6B,MAA7B,EAA6C,KAA7C,EAA0D;AACzD,QAAI,KAAK,QAAL,IAAiB,KAAK,KAA1B,EAAiC;AAChC,UAAI,eAAe,GAAG,MAAM,CAAC,SAA7B;;AACA,UAAI,CAAC,KAAK,CAAC,QAAN,CAAe,eAAf,CAAL,EAAsC;AACrC,QAAA,eAAe,GAAG,GAAlB;AACA;;AAED,UAAI,WAAW,GAAG,KAAK,cAAL,CAA0C,MAAM,CAAC,QAAjD,CAAlB;AACA,UAAI,aAAa,GAAG,KAAK,gBAAL,CAA4C,MAAM,CAAC,QAAnD,CAApB;AAEA,aAAO,WAAW,GAAG,CAAC,WAAW,GAAG,aAAf,IAAgC,eAArD;AACA,KAVD,MAWK;AACJ,aAAO,MAAA,CAAA,SAAA,CAAM,kBAAN,CAAwB,IAAxB,CAAwB,IAAxB,EAAyB,MAAzB,EAAiC,KAAjC,CAAP;AACA;AACD,GAfS;;AAiBA,EAAA,YAAA,CAAA,SAAA,CAAA,oBAAA,GAAV,UAA+B,QAA/B,EAA4D,KAA5D,EAA2E,eAA3E,EAAmG;AAClG;AACC,QAAI,CAAC,KAAK,CAAC,QAAN,CAAe,eAAf,CAAL,EAAsC;AACrC,UAAI,QAAJ,EAAc;AACb,QAAA,eAAe,GAAG,QAAQ,CAAC,SAAT,CAAmB,KAAnB,CAAlB;AACA,OAFD,MAGK;AACJ,QAAA,eAAe,GAAG,GAAlB;AACA;AACD;;AACD,WAAO,KAAK,YAAL,GAAoB,CAAC,KAAK,YAAL,GAAoB,KAAK,cAA1B,KAA6C,IAAI,eAAjD,CAA3B,CAViG,CAWlG;AACA;AACA;AACA;AACA,GAfS;;AAiBA,EAAA,YAAA,CAAA,SAAA,CAAA,oBAAA,GAAV,UAA+B,QAA/B,EAA4D,KAA5D,EAA2E,eAA3E,EAAmG;AAClG;AACC,QAAI,CAAC,KAAK,CAAC,QAAN,CAAe,eAAf,CAAL,EAAsC;AACrC,UAAI,QAAJ,EAAc;AACb,QAAA,eAAe,GAAG,QAAQ,CAAC,SAAT,CAAmB,KAAnB,CAAlB;AACA,OAFD,MAGK;AACJ,QAAA,eAAe,GAAG,GAAlB;AACA;AACD;;AACD,WAAO,KAAK,YAAL,GAAoB,CAAC,KAAK,YAAL,GAAoB,KAAK,cAA1B,IAA4C,eAAvE,CAViG,CAWlG;AACA;AACA;AACA;AACA,GAfS;AAkBV;;;;;AAGU,EAAA,YAAA,CAAA,SAAA,CAAA,qBAAA,GAAV,UAAgC,UAAhC,EAAkD;AACjD,QAAI,aAAa,GAAG,KAAK,OAAL,CAAa,QAAb,CAAsB,kBAA1C;AACA,QAAI,UAAU,GAAG,KAAK,OAAL,CAAa,QAAb,CAAsB,eAAvC;AAEA,QAAI,IAAI,GAAW,CAAC,UAApB;AACA,QAAI,IAAI,GAAW,KAAK,KAAL,CAAW,UAAX,GAAwB,aAA3C;AAEA,WAAO,KAAK,CAAC,UAAN,CAAiB,UAAjB,EAA6B,IAA7B,EAAmC,IAAnC,CAAP;AACA,GARS;AAUV;;;;;AAGU,EAAA,YAAA,CAAA,SAAA,CAAA,uBAAA,GAAV,UAAkC,UAAlC,EAAoD;AACnD,QAAI,WAAW,GAAG,KAAK,OAAL,CAAa,QAAb,CAAsB,gBAAxC;AACA,QAAI,YAAY,GAAG,KAAK,OAAL,CAAa,QAAb,CAAsB,iBAAzC;AAEA,QAAI,IAAI,GAAW,CAAC,WAApB;AACA,QAAI,IAAI,GAAW,KAAK,KAAL,CAAW,UAAX,GAAwB,YAA3C;AAEA,WAAO,KAAK,CAAC,UAAN,CAAiB,UAAjB,EAA6B,IAA7B,EAAmC,IAAnC,CAAP;AACA,GARS;AAUV;;;;;AAGO,EAAA,YAAA,CAAA,SAAA,CAAA,WAAA,GAAP,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,WAAN,CAAiB,IAAjB,CAAiB,IAAjB;;AACA,SAAK,OAAL,CAAa,KAAb;AACA,GAHM;;AAIR,SAAA,YAAA;AAAC,CA3kCD,CAAkC,QAAlC,CAAA;;;AA6kCA;;;;;;;AAMA,QAAQ,CAAC,iBAAT,CAA2B,cAA3B,IAA6C,YAA7C;AACA,QAAQ,CAAC,iBAAT,CAA2B,sBAA3B,IAAqD,oBAArD","sourcesContent":["/**\r\n * Column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, IXYSeriesDataFields, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { SpriteState } from \"../../core/SpriteState\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Column } from \"../elements/Column\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\nimport { IDataItemAdapters } from \"../../core/DataItem\";\r\n\r\n/**\r\n * Defines adapters for [[DataItem]]\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeriesDataItemAdapters extends IDataItemAdapters {\r\n\twidth: number | Percent;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ColumnSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnSeriesDataItemAdapters;\r\n\r\n\t/**\r\n\t * A Column Element\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Indicates if this data items close value is lower than its open value.\r\n\t */\r\n\tpublic droppedFromOpen: boolean;\r\n\r\n\t/**\r\n\t * Indicates if this items value is lower than previous data item's value.\r\n\t */\r\n\tpublic droppedFromPrevious: boolean;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: ColumnSeries;\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _rangesColumns: Dictionary<string, this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\r\n\t\tthis.locations[\"dateX\"] = 0.5;\r\n\t\tthis.locations[\"dateY\"] = 0.5;\r\n\r\n\t\tthis.locations[\"categoryX\"] = 0.5;\r\n\t\tthis.locations[\"categoryY\"] = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A column used to draw a column for this data item.\r\n\t *\r\n\t * @param column\r\n\t */\r\n\tpublic set column(column: this[\"_column\"]) {\r\n\t\tthis.setColumn(column);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Column\r\n\t */\r\n\tpublic get column(): this[\"_column\"] {\r\n\t\treturn this._column;\r\n\t}\r\n\r\n\tprotected setColumn(column: this[\"_column\"]) {\r\n\t\tif (this._column && column != this._column) {\r\n\t\t\t$array.remove(this.sprites, this._column);\r\n\t\t}\r\n\t\tthis._column = column;\r\n\r\n\t\tif (column) {\r\n\t\t\tlet prevDataItem: ColumnSeriesDataItem = <any>column.dataItem;\r\n\t\t\tif (prevDataItem && prevDataItem != this) {\r\n\t\t\t\tprevDataItem.column = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(column);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t// TODO investigate why component is undefined\r\n\t\t\t\t// https://codepen.io/team/amcharts/pen/dac4be245d658233a6d7e5597df2208b?editors=0010\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.columns.removeValue(column);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t}\r\n\r\n\tpublic set width(value: number | Percent) {\r\n\t\tif (this.properties.width != value) {\r\n\t\t\tthis.properties.width = value;\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.validateDataElement(this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get width(): number | Percent {\r\n\t\tlet width = this.properties.width;\r\n\t\tif (this._adapterO) {\r\n\t\t\twidth = this._adapterO.apply(\"width\", width);\r\n\t\t}\r\n\t\treturn width;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t */\r\n\tpublic get rangesColumns(): Dictionary<string, this[\"_column\"]> {\r\n\t\tif (!this._rangesColumns) {\r\n\t\t\tthis._rangesColumns = new Dictionary<string, this[\"_column\"]>();\r\n\t\t}\r\n\t\treturn this._rangesColumns;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYSeries]].\r\n */\r\nexport interface IColumnSeriesDataFields extends IXYSeriesDataFields {\r\n\twidth?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with other series.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tclustered?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeriesAdapters extends IXYSeriesAdapters, IColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a column graph.\r\n *\r\n * @see {@link IColumnSeriesEvents} for a list of available Events\r\n * @see {@link IColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries extends XYSeries {\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: ColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of column elements.\r\n\t */\r\n\tprotected _columns: ListTemplate<this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Container to put column elements in.\r\n\t */\r\n\tprotected _columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Start location within cell for columns.\r\n\t */\r\n\tprotected _startLocation: number = 0;\r\n\r\n\t/**\r\n\t * End location within cell for columns.\r\n\t */\r\n\tprotected _endLocation: number = 1;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t */\r\n\tprotected _dropFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t */\r\n\tprotected _dropFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t */\r\n\tprotected _riseFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t */\r\n\tprotected _riseFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\t\tthis.fillOpacity = 1;\r\n\r\n\t\tthis.clustered = true;\r\n\r\n\t\tlet columnsContainer = this.mainContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis._columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\r\n\t\tthis.tooltipColorSource = this.columns.template;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A container that columns are created in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get columnsContainer() {\r\n\t\treturn this._columnsContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Column Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ColumnSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\t//@todo Check if we can do better than use `instanceof`\r\n\t\t// find start/end locations based on clustered/stacked settings\r\n\t\t// go through chart series instead of base axis series, because axis series doesn't maintain order\r\n\r\n\t\tthis.group.node.removeAttribute(\"fill\");\r\n\r\n\t\tif (this.chart && this.xAxis && this.yAxis) {\r\n\t\t\tlet baseAxisSeries = this.chart.series;\r\n\t\t\tlet clusterCount: number = 0;\r\n\t\t\tlet index: number = 0;\r\n\r\n\t\t\tlet sortedByAxis: { series: XYSeries, axis: number }[] = [];\r\n\t\t\t$iter.each(baseAxisSeries.iterator(), (series) => {\r\n\t\t\t\tif (series instanceof ColumnSeries) {\r\n\t\t\t\t\tif (this.baseAxis == series.baseAxis) {\r\n\t\t\t\t\t\tlet index: number;\r\n\t\t\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\t\t\tindex = this.chart.yAxes.indexOf(series.yAxis);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tindex = this.chart.xAxes.indexOf(series.xAxis);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tsortedByAxis.push({ series: series, axis: index })\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\r\n\t\t\tsortedByAxis.sort((a, b) => a.axis - b.axis);\r\n\t\t\tlet prevAxisIndex: number;\r\n\r\n\t\t\t$array.each(sortedByAxis, (sortedItem) => {\r\n\t\t\t\tlet series = sortedItem.series;\r\n\t\t\t\tif (series instanceof ColumnSeries) {\r\n\t\t\t\t\tif ((!series.stacked && series.clustered) || (prevAxisIndex != sortedItem.axis && series.clustered)) {\r\n\t\t\t\t\t\tclusterCount++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (series == this) {\r\n\t\t\t\t\t\tindex = clusterCount - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tprevAxisIndex = sortedItem.axis;\r\n\t\t\t});\r\n\r\n\t\t\tif (!this.clustered) {\r\n\t\t\t\tindex = 0;\r\n\t\t\t\tclusterCount = 1;\r\n\t\t\t}\r\n\r\n\t\t\tlet renderer = this.baseAxis.renderer;\r\n\r\n\t\t\tlet cellStartLocation: number = renderer.cellStartLocation;\r\n\t\t\tlet cellEndLocation: number = renderer.cellEndLocation;\r\n\r\n\t\t\tthis._startLocation = cellStartLocation + (index / clusterCount) * (cellEndLocation - cellStartLocation);\r\n\t\t\tthis._endLocation = cellStartLocation + (index + 1) / clusterCount * (cellEndLocation - cellStartLocation);\r\n\r\n\t\t\tlet xAxis = this.xAxis;\r\n\t\t\tlet yAxis = this.yAxis;\r\n\r\n\t\t\tif (xAxis instanceof CategoryAxis && yAxis instanceof ValueAxis) {\r\n\t\t\t\tif (xAxis.sortBySeries == this) {\r\n\t\t\t\t\tthis.sortCategoryAxis(xAxis, \"valueY\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (yAxis instanceof CategoryAxis && xAxis instanceof ValueAxis) {\r\n\t\t\t\tif (yAxis.sortBySeries == this) {\r\n\t\t\t\t\tthis.sortCategoryAxis(yAxis, \"valueX\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tfor (let i = 0; i < this.startIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tfor (let i = this.dataItems.length - 1; i > this.endIndex; i--) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tthis._propertiesChanged = false;\r\n\t}\r\n\r\n\tprotected sortCategoryAxis(axis: CategoryAxis, key: string) {\r\n\t\tthis.dataItems.values.sort((x, y) => {\r\n\t\t\treturn (<any>y).values[key].workingValue - (<any>x).values[key].workingValue;\r\n\t\t})\r\n\t\tlet i = 0;\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tdataItem._index = i;\r\n\t\t\ti++;\r\n\t\t})\r\n\r\n\t\taxis.dataItems.each((dataItem) => {\r\n\t\t\tlet axis = dataItem.component;\r\n\t\t\tlet currentPosition = axis.categoryToPosition(dataItem.category) - dataItem.deltaPosition;\r\n\r\n\t\t\tlet seriesDataItem = axis.getSeriesDataItemByCategory(dataItem.category, this);\r\n\r\n\t\t\tif (seriesDataItem) {\r\n\t\t\t\tlet index = this.dataItems.indexOf(<ColumnSeriesDataItem>seriesDataItem);\r\n\r\n\t\t\t\tdataItem._index = index;\r\n\r\n\t\t\t\tlet deltaPosition = $math.round((index + 0.5) / this.dataItems.length - currentPosition, 3);\r\n\r\n\t\t\t\tif (dataItem.deltaAnimation && !dataItem.deltaAnimation.isDisposed() && dataItem.deltaAnimation.animationOptions[0].to == deltaPosition) {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse if (deltaPosition != $math.round(dataItem.deltaPosition, 3)) {\r\n\t\t\t\t\tif (dataItem.deltaAnimation) {\r\n\t\t\t\t\t\tdataItem.deltaAnimation.stop();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdataItem.deltaAnimation = dataItem.animate({ property: \"deltaPosition\", from: -deltaPosition, to: 0 }, axis.interpolationDuration, axis.interpolationEasing);\r\n\t\t\t\t\tthis._disposers.push(dataItem.deltaAnimation);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\taxis.dataItems.values.sort((x, y) => {\r\n\t\t\treturn x.index - y.index;\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// important oder here, first real, then super. we need this to know size\r\n\t\tif (this.chart && this.xAxis && this.yAxis) {\r\n\t\t\tthis.validateDataElementReal(dataItem);\r\n\t\t\tsuper.validateDataElement(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative start location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getStartLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet startLocation = this._startLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tstartLocation += dataItem.locations[this.xOpenField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstartLocation += dataItem.locations[this.yOpenField] - 0.5;\r\n\t\t}\r\n\t\treturn startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\t/*\r\n   public handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t   if (this.simplifiedProcessing) {\r\n\t\t   this.validateDataElement(dataItem);\r\n\t   }\r\n\t   else {\r\n\t\t   super.handleDataItemWorkingValueChange(dataItem, name);\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * Returns relative end location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getEndLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet endLocation = this._endLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tendLocation += dataItem.locations[this.xField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tendLocation += dataItem.locations[this.yField] - 0.5;\r\n\t\t}\r\n\t\treturn endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//\tif (dataItem.hasValue([this.xField, this.yField])) { // todo: this doesn't work with categories, think of a better way\r\n\t\tlet l: number;\r\n\t\tlet r: number;\r\n\t\tlet t: number;\r\n\t\tlet b: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet xField = this.xField;\r\n\t\tlet xOpenField = this.xOpenField;\r\n\t\tlet yField = this.yField;\r\n\t\tlet yOpenField = this.yOpenField;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\t\tlet percentHeight: number = template.percentHeight;\r\n\r\n\t\tlet pixelWidth: number = template.pixelWidth;\r\n\t\tlet pixelHeight: number = template.pixelHeight;\r\n\r\n\t\tlet maxWidth: number = template.maxWidth;\r\n\t\tlet maxHeight: number = template.maxHeight;\r\n\r\n\t\tlet paddingLeft: number = template.pixelPaddingLeft;\r\n\t\tlet paddingRight: number = template.pixelPaddingRight;\r\n\t\tlet paddingTop: number = template.pixelPaddingTop;\r\n\t\tlet paddingBottom: number = template.pixelPaddingBottom;\r\n\r\n\t\tlet outOfBounds: boolean = false;\r\n\r\n\t\tlet diw = dataItem.width;\r\n\t\tif ($type.hasValue(diw)) {\r\n\t\t\tif ($type.isNumber(diw)) {\r\n\t\t\t\tpixelWidth = diw;\r\n\t\t\t}\r\n\t\t\tif (diw instanceof Percent) {\r\n\t\t\t\tpercentWidth = diw.value * 100;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// two category axes\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\r\n\t\t\tif (!dataItem.hasValue(this._xValueFields) || !dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth) && maxWidth < Math.abs(r - l)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight) && maxHeight < Math.abs(b - t)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\telse if (this.baseAxis == this.xAxis) {\r\n\r\n\t\t\tif (!dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in percent\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth) && maxWidth < Math.abs(r - l)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomLocation = dataItem.locations[yOpenField];\r\n\t\t\tlet topLocation = dataItem.locations[yField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tif ((<any>this.dataFields)[this.yField] != (<any>this.dataFields)[this.yOpenField]) {\r\n\t\t\t\t\tbottomLocation = 0;\r\n\t\t\t\t\ttopLocation = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tb = this.yAxis.getY(dataItem, yOpenField, bottomLocation);\r\n\t\t\tt = this.yAxis.getY(dataItem, yField, topLocation);\r\n\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[xField] = startLocation + (endLocation - startLocation) / 2;\r\n\r\n\t\t\tlet axisLenght = Math.ceil(this.yAxis.axisLength);\r\n\r\n\t\t\tif ((t < 0 && b < 0) || (t > axisLenght && b > axisLenght)) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\r\n\t\t\tif (Math.abs(r - l) - paddingLeft - paddingRight == 0) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// horizontal bars\r\n\t\telse {\r\n\t\t\tif (!dataItem.hasValue(this._xValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight) && maxHeight < Math.abs(b - t)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet rightLocation = dataItem.locations[xField];\r\n\t\t\tlet leftLocation = dataItem.locations[xOpenField];\r\n\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.xAxis instanceof ValueAxis) {\r\n\t\t\t\tif ((<any>this.dataFields)[this.xField] != (<any>this.dataFields)[this.xOpenField]) {\r\n\t\t\t\t\trightLocation = 0;\r\n\t\t\t\t\tleftLocation = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, rightLocation);\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, leftLocation);\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[yField] = startLocation + (endLocation - startLocation) / 2;\r\n\r\n\t\t\tlet axisLenght = Math.ceil(this.xAxis.axisLength);\r\n\r\n\t\t\tif ((r < 0 && l < 0) || (r > axisLenght && l > axisLenght)) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\r\n\t\t\tif (Math.abs(t - b) - paddingTop - paddingBottom == 0) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet w: number = Math.abs(r - l);\r\n\t\tlet h: number = Math.abs(b - t);\r\n\r\n\t\tlet x: number = Math.min(l, r);\r\n\t\tlet y: number = Math.min(t, b);\r\n\r\n\t\tif (!outOfBounds) {\r\n\t\t\tlet column: this[\"_column\"];\r\n\t\t\tif (!dataItem.column) {\r\n\t\t\t\tcolumn = this.columns.create();\r\n\t\t\t\t//$object.forceCopyProperties(this.columns.template, column, visualProperties);\r\n\t\t\t\t$object.copyProperties(this, column, visualProperties); // need this because 3d columns are not in the same container\r\n\t\t\t\t$object.copyProperties(this.columns.template, column, visualProperties); // second time, no force, so that columns.template would override series properties\r\n\t\t\t\tdataItem.addSprite(column);\r\n\r\n\t\t\t\tdataItem.column = column;\r\n\t\t\t\tcolumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\r\n\r\n\t\t\t\t// accessibility\r\n\t\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\t\tthis.role = \"menu\";\r\n\t\t\t\t\tcolumn.role = \"menuitem\";\r\n\t\t\t\t\tcolumn.focusable = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.role = \"list\";\r\n\t\t\t\t\tcolumn.role = \"listitem\";\r\n\t\t\t\t\tcolumn.focusable = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (column.focusable) {\r\n\t\t\t\t\tcolumn.events.on(\"focus\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\tcolumn.events.on(\"blur\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = \"\";\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t}\r\n\t\t\t\tif (column.hoverable) {\r\n\t\t\t\t\tcolumn.events.on(\"over\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\tcolumn.events.on(\"out\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = \"\";\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t}\r\n\t\t\t\tcolumn.parent = this.columnsContainer;\r\n\t\t\t\tcolumn.virtualParent = this;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn = dataItem.column;\r\n\t\t\t\tif (this._propertiesChanged) {\r\n\t\t\t\t\t$object.copyProperties(this, column, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\t\t\t\t\t$array.each(visualProperties, (property) => {\r\n\t\t\t\t\t\t(<any>column)[property] = column[property];\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.width = w;\r\n\t\t\tcolumn.height = h;\r\n\r\n\t\t\tcolumn.x = x;\r\n\t\t\tcolumn.y = y;\r\n\r\n\t\t\tcolumn.realX = l;\r\n\t\t\tcolumn.realY = t;\r\n\r\n\t\t\tcolumn.realWidth = r - l;\r\n\t\t\tcolumn.realHeight = b - t;\r\n\r\n\t\t\tthis.setColumnStates(column);\r\n\r\n\t\t\tif (column.invalid) {\r\n\t\t\t\tcolumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.__disabled = false;\r\n\t\t\t//column.returnAfterTemp();\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: this[\"_column\"] = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t//$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, <Column>rangeColumn);\r\n\t\t\t\t\trangeColumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\r\n\t\t\t\trangeColumn.width = w;\r\n\t\t\t\trangeColumn.height = h;\r\n\t\t\t\trangeColumn.x = x;\r\n\t\t\t\trangeColumn.y = y;\r\n\r\n\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\r\n\t\t\t\tif (rangeColumn.invalid) {\r\n\t\t\t\t\trangeColumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\t//rangeColumn.returnAfterTemp();\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tdataItem.itemWidth = w;\r\n\t\tdataItem.itemHeight = h;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected disableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tif (dataItem) {\r\n\t\t\tif (dataItem.column) {\r\n\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\tdataItem.column.width = 0;\r\n\t\t\t\tdataItem.column.height = 0;\r\n\t\t\t\tdataItem.column.__disabled = true;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: Sprite = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\t\trangeColumn.width = 0;\r\n\t\t\t\t\trangeColumn.height = 0;\r\n\t\t\t\t\trangeColumn.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Apply different state/coloring to columns based on the change value.\r\n\t *\r\n\t * @param sprite  Sprite to apply state to\r\n\t * @todo Do not apply accessibility to wicks of the candlesticks\r\n\t */\r\n\tprotected setColumnStates(sprite: Sprite): void {\r\n\t\tif (this._dropFromOpenState || this._dropFromPreviousState || this._riseFromOpenState || this._riseFromPreviousState) {\r\n\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>sprite.dataItem;\r\n\r\n\t\t\tif (this.xAxis instanceof ValueAxis || this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tlet open: number;\r\n\t\t\t\tlet value: number;\r\n\t\t\t\tlet change: number;\r\n\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (this.xOpenField && this.xField && this.xAxis instanceof ValueAxis) {\r\n\t\t\t\t\t\topen = dataItem.getValue(this.xOpenField);\r\n\t\t\t\t\t\tvalue = dataItem.getValue(this.xField);\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchange = dataItem.getValue(this.xAxis.axisFieldName + \"X\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (this.yOpenField && this.yField && this.yAxis instanceof ValueAxis) {\r\n\t\t\t\t\t\topen = dataItem.getValue(this.yOpenField);\r\n\t\t\t\t\t\tvalue = dataItem.getValue(this.yField);\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchange = dataItem.getValue(this.yAxis.axisFieldName + \"Y\", \"previousChange\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (value < open) {\r\n\t\t\t\t\tdataItem.droppedFromOpen = true;\r\n\t\t\t\t\tsprite.defaultState.copyFrom(this._dropFromOpenState)\r\n\t\t\t\t\tsprite.setState(this._dropFromOpenState, 0);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tdataItem.droppedFromOpen = false;\r\n\t\t\t\t\tsprite.defaultState.copyFrom(this._riseFromOpenState)\r\n\t\t\t\t\tsprite.setState(this._riseFromOpenState, 0);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (change < 0) {\r\n\t\t\t\t\tdataItem.droppedFromPrevious = true;\r\n\t\t\t\t\tsprite.defaultState.copyFrom(this._dropFromPreviousState)\r\n\t\t\t\t\tsprite.setState((this._dropFromPreviousState), 0);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tdataItem.droppedFromPrevious = false;\r\n\t\t\t\t\tsprite.defaultState.copyFrom(this._riseFromPreviousState)\r\n\t\t\t\t\tsprite.setState((this._riseFromPreviousState), 0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of column elements in the series.\r\n\t *\r\n\t * @return Columns\r\n\t */\r\n\tpublic get columns(): ListTemplate<this[\"_column\"]> {\r\n\t\tif (!this._columns) {\r\n\t\t\tthis._columns = new ListTemplate<this[\"_column\"]>(this.createColumnTemplate());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._columns));\r\n\t\t\tthis._disposers.push(this._columns.template);\r\n\t\t}\r\n\t\treturn this._columns;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a column element to use as a template.\r\n\t *\r\n\t * @return Column template\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column();\r\n\t}\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with other series.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Clustered?\r\n\t */\r\n\tpublic set clustered(value: boolean) {\r\n\t\tthis.setPropertyValue(\"clustered\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Clustered?\r\n\t */\r\n\tpublic get clustered(): boolean {\r\n\t\treturn this.getPropertyValue(\"clustered\");\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @param  value  State\r\n\t */\r\n\tpublic set dropFromOpenState(value: SpriteState<this[\"_properties\"], this[\"_adapter\"]>) {\r\n\t\tthis._dropFromOpenState = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return State\r\n\t */\r\n\tpublic get dropFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromOpenState) {\r\n\t\t\tthis._dropFromOpenState = this.states.create(\"dropFromOpenState\");\r\n\t\t}\r\n\t\treturn this._dropFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @param  value  State\r\n\t */\r\n\tpublic set dropFromPreviousState(value: SpriteState<this[\"_properties\"], this[\"_adapter\"]>) {\r\n\t\tthis._dropFromPreviousState = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return State\r\n\t */\r\n\tpublic get dropFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromPreviousState) {\r\n\t\t\tthis._dropFromPreviousState = this.states.create(\"dropFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._dropFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @param  value  State\r\n\t */\r\n\tpublic set riseFromOpenState(value: SpriteState<this[\"_properties\"], this[\"_adapter\"]>) {\r\n\t\tthis._riseFromOpenState = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return State\r\n\t */\r\n\tpublic get riseFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromOpenState) {\r\n\t\t\tthis._riseFromOpenState = this.states.create(\"riseFromOpenState\");\r\n\t\t}\r\n\t\treturn this._riseFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @param  value  State\r\n\t */\r\n\tpublic set riseFromPreviousState(value: SpriteState<this[\"_properties\"], this[\"_adapter\"]>) {\r\n\t\tthis._riseFromPreviousState = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return State\r\n\t */\r\n\tpublic get riseFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromPreviousState) {\r\n\t\t\tthis._riseFromPreviousState = this.states.create(\"riseFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._riseFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates value of the related legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"], notRange?: boolean) {\r\n\t\tsuper.updateLegendValue(dataItem, notRange);\r\n\r\n\t\tif (this.legendDataItem) {\r\n\t\t\tlet marker: Container = this.legendDataItem.marker;\r\n\t\t\tlet fromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\t\t\tlet fromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tif (dataItem.droppedFromOpen) {\r\n\t\t\t\t\tfromOpenState = this._dropFromOpenState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromOpenState = this._riseFromOpenState;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dataItem.droppedFromPrevious) {\r\n\t\t\t\t\tfromPreviousState = this._dropFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromPreviousState = this._riseFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchild.setState(fromPreviousState);\r\n\t\t\t\t\tchild.setState(fromOpenState);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// todo: think what to do here, maybe apply above states based on totals?\r\n\t\t\t\t\tchild.setState(this._riseFromPreviousState);\r\n\t\t\t\t\tchild.setState(this._riseFromOpenState);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = this.fill;\r\n\t\tlegendDataItem.colorOrig = this.fill;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[ColumnSeries]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.columns.template.copyFrom(source.columns.template);\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tlet bulletLocationX = bullet.locationX;\r\n\t\t\tif (!$type.isNumber(bulletLocationX)) {\r\n\t\t\t\tbulletLocationX = 0.5;\r\n\t\t\t}\r\n\r\n\t\t\tlet endLocation = this.getEndLocation(<ColumnSeriesDataItem>bullet.dataItem);\r\n\t\t\tlet startLocation = this.getStartLocation(<ColumnSeriesDataItem>bullet.dataItem);\r\n\r\n\t\t\treturn endLocation - (endLocation - startLocation) * bulletLocationX;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationX(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet y location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tlet bulletLocationY = bullet.locationY;\r\n\t\t\tif (!$type.isNumber(bulletLocationY)) {\r\n\t\t\t\tbulletLocationY = 0.5;\r\n\t\t\t}\r\n\r\n\t\t\tlet endLocation = this.getEndLocation(<ColumnSeriesDataItem>bullet.dataItem);\r\n\t\t\tlet startLocation = this.getStartLocation(<ColumnSeriesDataItem>bullet.dataItem);\r\n\r\n\t\t\treturn endLocation - (endLocation - startLocation) * bulletLocationY;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationY(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getAdjustedXLocation(dataItem: this[\"_dataItem\"], field: string, bulletLocationX?: number) {\r\n\t\t//if (this.baseAxis == this.xAxis) {\r\n\t\t\tif (!$type.isNumber(bulletLocationX)) {\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tbulletLocationX = dataItem.locations[field];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tbulletLocationX = 0.5;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this._endLocation - (this._endLocation - this._startLocation) * (1 - bulletLocationX);\r\n\t\t//}\r\n\t\t//else {\r\n\t\t//\treturn super.getAdjustedXLocation(dataItem, field);\r\n\t\t//}\r\n\t}\r\n\r\n\tprotected getAdjustedYLocation(dataItem: this[\"_dataItem\"], field: string, bulletLocationY?: number) {\r\n\t\t//if (this.baseAxis == this.yAxis) {\r\n\t\t\tif (!$type.isNumber(bulletLocationY)) {\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tbulletLocationY = dataItem.locations[field];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tbulletLocationY = 0.5;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this._endLocation - (this._endLocation - this._startLocation) * bulletLocationY;\r\n\t\t//}\r\n\t\t//else {\r\n\t\t//\treturn super.getAdjustedYLocation(dataItem, field);\r\n\t\t//}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixVerticalCoordinate(coordinate: number): number {\r\n\t\tlet paddingBottom = this.columns.template.pixelPaddingBottom;\r\n\t\tlet paddingTop = this.columns.template.pixelPaddingTop;\r\n\r\n\t\tlet minY: number = -paddingTop;\r\n\t\tlet maxY: number = this.yAxis.axisLength + paddingBottom;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minY, maxY);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixHorizontalCoordinate(coordinate: number): number {\r\n\t\tlet paddingLeft = this.columns.template.pixelPaddingLeft;\r\n\t\tlet paddingRight = this.columns.template.pixelPaddingRight;\r\n\r\n\t\tlet minX: number = -paddingLeft;\r\n\t\tlet maxX: number = this.xAxis.axisLength + paddingRight;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minX, maxX);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis.columns.clear();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries\"] = ColumnSeries;\r\nregistry.registeredClasses[\"ColumnSeriesDataItem\"] = ColumnSeriesDataItem;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}