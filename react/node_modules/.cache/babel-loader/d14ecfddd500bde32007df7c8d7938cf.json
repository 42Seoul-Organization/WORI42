{"ast":null,"code":"import * as $array from \"./Array\";\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport function fromArray(array) {\n  return function (push) {\n    var length = array.length;\n\n    for (var i = 0; i < length; ++i) {\n      if (!push(array[i])) {\n        break;\n      }\n    }\n  };\n}\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport function length(iter) {\n  var sum = 0;\n  iter(function (_) {\n    ++sum;\n    return true;\n  });\n  return sum;\n}\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport function toArray(iter) {\n  var output = [];\n  iter(function (value) {\n    output.push(value);\n    return true;\n  });\n  return output;\n}\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport function eachContinue(iter, fn) {\n  iter(fn);\n}\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport function each(iter, fn) {\n  iter(function (value) {\n    fn(value);\n    return true;\n  });\n}\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport function sort(iter, fn) {\n  return fromArray(toArray(iter).sort(fn));\n}\n/**\r\n * [A description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport function map(iter, fn) {\n  return function (push) {\n    return iter(function (value) {\n      return push(fn(value));\n    });\n  };\n}\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport function filter(iter, fn) {\n  return function (push) {\n    return iter(function (value) {\n      if (fn(value)) {\n        return push(value);\n      } else {\n        return true;\n      }\n    });\n  };\n}\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport function concat() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return function (push) {\n    var go = true;\n\n    var push2 = function push2(value) {\n      return go = push(value);\n    };\n\n    var length = args.length;\n\n    for (var i = 0; i < length; ++i) {\n      args[i](push2);\n\n      if (!go) {\n        break;\n      }\n    }\n  };\n}\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport function flatten(iter) {\n  return function (push) {\n    var go = true;\n\n    var push2 = function push2(value) {\n      return go = push(value);\n    };\n\n    iter(function (value) {\n      value(push2);\n      return go;\n    });\n  };\n}\n/**\r\n * [number description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport function indexed(iter) {\n  return function (push) {\n    var index = 0;\n    iter(function (value) {\n      return push([index++, value]);\n    });\n  };\n}\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport function findIndex(iter, matches) {\n  var found = false;\n  var i = 0;\n  iter(function (value) {\n    if (matches(value)) {\n      found = true;\n      return false;\n    } else {\n      ++i;\n      return true;\n    }\n  });\n  return found ? i : -1;\n}\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport function find(iter, matches) {\n  var output;\n  iter(function (value) {\n    if (matches(value)) {\n      output = value;\n      return false;\n    } else {\n      return true;\n    }\n  });\n  return output;\n}\n/**\r\n * [A description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport function findMap(iter, matches) {\n  var output;\n  iter(function (value) {\n    var v = matches(value);\n\n    if (v !== null) {\n      output = v;\n      return false;\n    } else {\n      return true;\n    }\n  });\n  return output;\n}\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport function contains(iter, matches) {\n  var output = false;\n  iter(function (value) {\n    if (matches(value)) {\n      output = true;\n      return false;\n    } else {\n      return true;\n    }\n  });\n  return output;\n}\n/**\r\n * [A description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport function foldl(iter, init, fn) {\n  iter(function (value) {\n    init = fn(init, value);\n    return true;\n  });\n  return init;\n}\n/**\r\n * [min2 description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param left [description]\r\n * @param right [description]\r\n * @return [description]\r\n */\n\nfunction min2(left, right) {\n  if (left == null || right < left) {\n    return right;\n  } else {\n    return left;\n  }\n}\n/**\r\n * [min description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Verify that this works correctly\r\n * @todo Description\r\n * @param a [description]\r\n * @return [description]\r\n */\n\n\nexport function min(a) {\n  return foldl(a, null, min2);\n}\n/**\r\n * [max2 description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param left [description]\r\n * @param right [description]\r\n * @return [description]\r\n */\n\nfunction max2(left, right) {\n  if (left == null || right > left) {\n    return right;\n  } else {\n    return left;\n  }\n}\n/**\r\n * [max description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Verify that this works correctly\r\n * @todo Description\r\n * @param a [description]\r\n * @return [description]\r\n */\n\n\nexport function max(a) {\n  return foldl(a, null, max2);\n}\n/**\r\n * [join description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param iter [description]\r\n * @param separator [description]\r\n * @return [description]\r\n */\n\nexport function join(iter, separator) {\n  if (separator === void 0) {\n    separator = \"\";\n  }\n\n  var first = true;\n  var init = \"\";\n  iter(function (value) {\n    if (first) {\n      first = false;\n    } else {\n      init += separator;\n    }\n\n    init += value;\n    return true;\n  });\n  return init;\n}\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nvar ListIterator =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor\r\n   *\r\n   * @param list [description]\r\n   * @param create [description]\r\n   */\n  function ListIterator(list, create) {\n    // flag specifies if iterator should create new list item if it is reqested for a nextItem but there is no more left in the list\n    this.createNewItems = false;\n    this.list = list;\n    this._create = create;\n    this.reset();\n  }\n\n  ListIterator.prototype.reset = function () {\n    this._listCopy = toArray(this.list.iterator());\n  };\n\n  ListIterator.prototype.clear = function () {\n    this._listCopy.length = 0;\n  };\n\n  ListIterator.prototype.getFirst = function () {\n    return this.returnItem(0);\n  };\n\n  ListIterator.prototype.getLast = function () {\n    return this.returnItem(this._listCopy.length - 1);\n  };\n\n  ListIterator.prototype.find = function (fn) {\n    var index = $array.findIndex(this._listCopy, fn);\n\n    if (index !== -1) {\n      var item = this._listCopy[index]; // TODO use removeIndex instead ?\n\n      $array.remove(this._listCopy, item);\n      return item;\n    } else {\n      return this.getLast();\n    }\n  };\n\n  ListIterator.prototype.removeItem = function (item) {\n    return $array.remove(this._listCopy, item);\n  };\n\n  ListIterator.prototype.returnItem = function (index) {\n    if (index >= 0 && index < this._listCopy.length) {\n      var item = this._listCopy[index]; // TODO use removeIndex instead ?\n\n      $array.remove(this._listCopy, item);\n      return item;\n    } else if (this.createNewItems) {\n      return this._create();\n    }\n  };\n\n  ListIterator.prototype.iterator = function () {\n    return fromArray(this._listCopy);\n  };\n\n  return ListIterator;\n}();\n\nexport { ListIterator };","map":{"version":3,"sources":["../../../../../src/.internal/core/utils/Iterator.ts"],"names":[],"mappings":"AAQA,OAAO,KAAK,MAAZ,MAAwB,SAAxB;AA2BA;;;;;AAIA,OAAM,SAAU,SAAV,CAAuB,KAAvB,EAAsC;AAC3C,SAAO,UAAC,IAAD,EAAK;AACX,QAAM,MAAM,GAAG,KAAK,CAAC,MAArB;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,EAAE,CAA9B,EAAiC;AAChC,UAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAD,CAAN,CAAT,EAAqB;AACpB;AACA;AACD;AACD,GARD;AASA;AAED;;;;;AAIA,OAAM,SAAU,MAAV,CAAoB,IAApB,EAAqC;AAC1C,MAAI,GAAG,GAAG,CAAV;AAEA,EAAA,IAAI,CAAC,UAAC,CAAD,EAAE;AACN,MAAE,GAAF;AACA,WAAO,IAAP;AACA,GAHG,CAAJ;AAKA,SAAO,GAAP;AACA;AAED;;;;;AAIA,OAAM,SAAU,OAAV,CAAqB,IAArB,EAAsC;AAC3C,MAAM,MAAM,GAAa,EAAzB;AAEA,EAAA,IAAI,CAAC,UAAC,KAAD,EAAM;AACV,IAAA,MAAM,CAAC,IAAP,CAAY,KAAZ;AACA,WAAO,IAAP;AACA,GAHG,CAAJ;AAKA,SAAO,MAAP;AACA;AAED;;;;;;;AAMA,OAAM,SAAU,YAAV,CAA0B,IAA1B,EAA6C,EAA7C,EAAsE;AAC3E,EAAA,IAAI,CAAC,EAAD,CAAJ;AACA;AAED;;;;;;;AAMA,OAAM,SAAU,IAAV,CAAkB,IAAlB,EAAqC,EAArC,EAA2D;AAChE,EAAA,IAAI,CAAC,UAAC,KAAD,EAAM;AACV,IAAA,EAAE,CAAC,KAAD,CAAF;AACA,WAAO,IAAP;AACA,GAHG,CAAJ;AAIA;AAED;;;;;;;AAMA,OAAM,SAAU,IAAV,CAAkB,IAAlB,EAAqC,EAArC,EAAwE;AAC7E,SAAO,SAAS,CAAC,OAAO,CAAC,IAAD,CAAP,CAAc,IAAd,CAAmB,EAAnB,CAAD,CAAhB;AACA;AAED;;;;;;;AAMA,OAAM,SAAU,GAAV,CAAoB,IAApB,EAAuC,EAAvC,EAA0D;AAC/D,SAAO,UAAC,IAAD,EAAK;AAAK,WAAA,IAAI,CAAC,UAAC,KAAD,EAAM;AAAK,aAAA,IAAI,CAAC,EAAE,CAAP,KAAO,CAAH,CAAJ;AAAhB,KAAI,CAAJ;AAAgC,GAAjD;AACA;AAED;;;;;;;AAMA,OAAM,SAAU,MAAV,CAAoB,IAApB,EAAuC,EAAvC,EAAgE;AACrE,SAAO,UAAC,IAAD,EAAK;AAAK,WAAA,IAAI,CAAC,UAAC,KAAD,EAAM;AAC3B,UAAI,EAAE,CAAC,KAAD,CAAN,EAAe;AACd,eAAO,IAAI,CAAC,KAAD,CAAX;AAEA,OAHD,MAGO;AACN,eAAO,IAAP;AACA;AANe,KAAI,CAAJ;AAOf,GAPF;AAQA;AAED;;;;;AAIA,OAAM,SAAU,MAAV,GAAgB;AAAI,MAAA,IAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAA2B;AAA3B,IAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACzB,SAAO,UAAC,IAAD,EAAK;AACX,QAAI,EAAE,GAAG,IAAT;;AAEA,QAAM,KAAK,GAAG,SAAR,KAAQ,CAAC,KAAD,EAAS;AAAK,aAAC,EAAE,GAAG,IAAI,CAAV,KAAU,CAAV;AAAkB,KAA9C;;AAEA,QAAM,MAAM,GAAG,IAAI,CAAC,MAApB;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,EAAE,CAA9B,EAAiC;AAChC,MAAA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR;;AAEA,UAAI,CAAC,EAAL,EAAS;AACR;AACA;AACD;AACD,GAdD;AAeA;AAED;;;;;AAIA,OAAM,SAAU,OAAV,CAAqB,IAArB,EAAgD;AACrD,SAAO,UAAC,IAAD,EAAK;AACX,QAAI,EAAE,GAAG,IAAT;;AAEA,QAAM,KAAK,GAAG,SAAR,KAAQ,CAAC,KAAD,EAAS;AAAK,aAAC,EAAE,GAAG,IAAI,CAAV,KAAU,CAAV;AAAkB,KAA9C;;AAEA,IAAA,IAAI,CAAC,UAAC,KAAD,EAAM;AACV,MAAA,KAAK,CAAC,KAAD,CAAL;AACA,aAAO,EAAP;AACA,KAHG,CAAJ;AAIA,GATD;AAUA;AAED;;;;;;;AAMA,OAAM,SAAU,OAAV,CAAqB,IAArB,EAAsC;AAC3C,SAAO,UAAC,IAAD,EAAK;AACX,QAAI,KAAK,GAAG,CAAZ;AAEA,IAAA,IAAI,CAAC,UAAC,KAAD,EAAM;AAAK,aAAA,IAAI,CAAC,CAAC,KAAK,EAAN,EAAL,KAAK,CAAD,CAAJ;AAAsB,KAAlC,CAAJ;AACA,GAJD;AAKA;AAED;;;;;;;AAMA,OAAM,SAAU,SAAV,CAAuB,IAAvB,EAA0C,OAA1C,EAAwE;AAC7E,MAAI,KAAK,GAAG,KAAZ;AACA,MAAI,CAAC,GAAG,CAAR;AAEA,EAAA,IAAI,CAAC,UAAC,KAAD,EAAM;AACV,QAAI,OAAO,CAAC,KAAD,CAAX,EAAoB;AACnB,MAAA,KAAK,GAAG,IAAR;AACA,aAAO,KAAP;AAEA,KAJD,MAIO;AACN,QAAE,CAAF;AACA,aAAO,IAAP;AACA;AACD,GATG,CAAJ;AAWA,SAAQ,KAAK,GAAG,CAAH,GAAO,CAAC,CAArB;AACA;AAED;;;;;;;AAMA,OAAM,SAAU,IAAV,CAAkB,IAAlB,EAAqC,OAArC,EAAmE;AACxE,MAAI,MAAJ;AAEA,EAAA,IAAI,CAAC,UAAC,KAAD,EAAM;AACV,QAAI,OAAO,CAAC,KAAD,CAAX,EAAoB;AACnB,MAAA,MAAM,GAAG,KAAT;AACA,aAAO,KAAP;AAEA,KAJD,MAIO;AACN,aAAO,IAAP;AACA;AACD,GARG,CAAJ;AAUA,SAAO,MAAP;AACA;AAED;;;;;;;AAMA,OAAM,SAAU,OAAV,CAAwB,IAAxB,EAA2C,OAA3C,EAA0E;AAC/E,MAAI,MAAJ;AAEA,EAAA,IAAI,CAAC,UAAC,KAAD,EAAM;AACV,QAAM,CAAC,GAAG,OAAO,CAAC,KAAD,CAAjB;;AAEA,QAAI,CAAC,KAAK,IAAV,EAAgB;AACf,MAAA,MAAM,GAAG,CAAT;AACA,aAAO,KAAP;AAEA,KAJD,MAIO;AACN,aAAO,IAAP;AACA;AACD,GAVG,CAAJ;AAYA,SAAO,MAAP;AACA;AAED;;;;;;;AAMA,OAAM,SAAU,QAAV,CAAsB,IAAtB,EAAyC,OAAzC,EAAuE;AAC5E,MAAI,MAAM,GAAG,KAAb;AAEA,EAAA,IAAI,CAAC,UAAC,KAAD,EAAM;AACV,QAAI,OAAO,CAAC,KAAD,CAAX,EAAoB;AACnB,MAAA,MAAM,GAAG,IAAT;AACA,aAAO,KAAP;AAEA,KAJD,MAIO;AACN,aAAO,IAAP;AACA;AACD,GARG,CAAJ;AAUA,SAAO,MAAP;AACA;AAED;;;;;;;AAMA,OAAM,SAAU,KAAV,CAAsB,IAAtB,EAAyC,IAAzC,EAAkD,EAAlD,EAA+E;AACpF,EAAA,IAAI,CAAC,UAAC,KAAD,EAAM;AACV,IAAA,IAAI,GAAG,EAAE,CAAC,IAAD,EAAO,KAAP,CAAT;AACA,WAAO,IAAP;AACA,GAHG,CAAJ;AAKA,SAAO,IAAP;AACA;AAED;;;;;;;;;;AASA,SAAS,IAAT,CAAc,IAAd,EAAmC,KAAnC,EAAgD;AAC/C,MAAI,IAAI,IAAI,IAAR,IAAgB,KAAK,GAAG,IAA5B,EAAkC;AACjC,WAAO,KAAP;AAEA,GAHD,MAGO;AACN,WAAO,IAAP;AACA;AACD;AAED;;;;;;;;;;;AASA,OAAM,SAAU,GAAV,CAAc,CAAd,EAAiC;AACtC,SAAO,KAAK,CAAC,CAAD,EAAI,IAAJ,EAAU,IAAV,CAAZ;AACA;AAED;;;;;;;;;;AASA,SAAS,IAAT,CAAc,IAAd,EAAmC,KAAnC,EAAgD;AAC/C,MAAI,IAAI,IAAI,IAAR,IAAgB,KAAK,GAAG,IAA5B,EAAkC;AACjC,WAAO,KAAP;AAEA,GAHD,MAGO;AACN,WAAO,IAAP;AACA;AACD;AAED;;;;;;;;;;;AASA,OAAM,SAAU,GAAV,CAAc,CAAd,EAAiC;AACtC,SAAO,KAAK,CAAC,CAAD,EAAI,IAAJ,EAAU,IAAV,CAAZ;AACA;AAGD;;;;;;;;;;AASA,OAAM,SAAU,IAAV,CAAe,IAAf,EAAuC,SAAvC,EAA6D;AAAtB,MAAA,SAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAA,EAAA;AAAsB;;AAClE,MAAI,KAAK,GAAG,IAAZ;AACA,MAAI,IAAI,GAAG,EAAX;AAEA,EAAA,IAAI,CAAC,UAAC,KAAD,EAAM;AACV,QAAI,KAAJ,EAAW;AACV,MAAA,KAAK,GAAG,KAAR;AAEA,KAHD,MAGO;AACN,MAAA,IAAI,IAAI,SAAR;AACA;;AAED,IAAA,IAAI,IAAI,KAAR;AAEA,WAAO,IAAP;AACA,GAXG,CAAJ;AAaA,SAAO,IAAP;AACA;AAED;;;;;AAIA,IAAA,YAAA;AAAA;AAAA,YAAA;AASC;;;;;;AAMA,WAAA,YAAA,CAAY,IAAZ,EAA+B,MAA/B,EAA8C;AAT9C;AACO,SAAA,cAAA,GAA0B,KAA1B;AASN,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,OAAL,GAAe,MAAf;AACA,SAAK,KAAL;AACA;;AAED,EAAA,YAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACC,SAAK,SAAL,GAAiB,OAAO,CAAC,KAAK,IAAL,CAAU,QAAV,EAAD,CAAxB;AACA,GAFD;;AAIA,EAAA,YAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACC,SAAK,SAAL,CAAe,MAAf,GAAwB,CAAxB;AACA,GAFD;;AAIA,EAAA,YAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACC,WAAO,KAAK,UAAL,CAAgB,CAAhB,CAAP;AACA,GAFD;;AAIA,EAAA,YAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,WAAO,KAAK,UAAL,CAAgB,KAAK,SAAL,CAAe,MAAf,GAAwB,CAAxC,CAAP;AACA,GAFD;;AAIA,EAAA,YAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAK,EAAL,EAA8B;AAC7B,QAAI,KAAK,GAAW,MAAM,CAAC,SAAP,CAAiB,KAAK,SAAtB,EAAiC,EAAjC,CAApB;;AAEA,QAAI,KAAK,KAAK,CAAC,CAAf,EAAkB;AACjB,UAAI,IAAI,GAAG,KAAK,SAAL,CAAe,KAAf,CAAX,CADiB,CAEjB;;AACA,MAAA,MAAM,CAAC,MAAP,CAAc,KAAK,SAAnB,EAA8B,IAA9B;AACA,aAAO,IAAP;AAEA,KAND,MAMO;AACN,aAAO,KAAK,OAAL,EAAP;AACA;AACD,GAZD;;AAcA,EAAA,YAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAW,IAAX,EAAkB;AACjB,WAAO,MAAM,CAAC,MAAP,CAAc,KAAK,SAAnB,EAA8B,IAA9B,CAAP;AACA,GAFD;;AAIU,EAAA,YAAA,CAAA,SAAA,CAAA,UAAA,GAAV,UAAqB,KAArB,EAAkC;AACjC,QAAI,KAAK,IAAI,CAAT,IAAc,KAAK,GAAG,KAAK,SAAL,CAAe,MAAzC,EAAiD;AAChD,UAAI,IAAI,GAAG,KAAK,SAAL,CAAe,KAAf,CAAX,CADgD,CAEhD;;AACA,MAAA,MAAM,CAAC,MAAP,CAAc,KAAK,SAAnB,EAA8B,IAA9B;AACA,aAAO,IAAP;AAEA,KAND,MAMO,IAAI,KAAK,cAAT,EAAyB;AAC/B,aAAO,KAAK,OAAL,EAAP;AACA;AACD,GAVS;;AAYV,EAAA,YAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACC,WAAO,SAAS,CAAC,KAAK,SAAN,CAAhB;AACA,GAFD;;AAGD,SAAA,YAAA;AAAC,CAtED,EAAA","sourcesContent":["/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport { IClone } from \"./Clone\";\nimport { Ordering } from \"./Order\";\nimport * as $array from \"./Array\";\nimport * as $type from \"./Type\";\n\n\n/**\n * ============================================================================\n * UTILITY FUNCTIONS\n * ============================================================================\n * @hidden\n */\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport interface Iterator<A> {\n\t(push: (value: A) => boolean): void;\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport interface Iterable<A> {\n\titerator(): Iterator<A>;\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function fromArray<A>(array: Array<A>): Iterator<A> {\n\treturn (push) => {\n\t\tconst length = array.length;\n\n\t\tfor (let i = 0; i < length; ++i) {\n\t\t\tif (!push(array[i])) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function length<A>(iter: Iterator<A>): number {\n\tlet sum = 0;\n\n\titer((_) => {\n\t\t++sum;\n\t\treturn true;\n\t});\n\n\treturn sum;\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function toArray<A>(iter: Iterator<A>): Array<A> {\n\tconst output: Array<A> = [];\n\n\titer((value) => {\n\t\toutput.push(value);\n\t\treturn true;\n\t});\n\n\treturn output;\n}\n\n/**\n * [iter description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function eachContinue<A>(iter: Iterator<A>, fn: (value: A) => boolean): void {\n\titer(fn);\n}\n\n/**\n * [iter description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function each<A>(iter: Iterator<A>, fn: (value: A) => void): void {\n\titer((value) => {\n\t\tfn(value);\n\t\treturn true;\n\t});\n}\n\n/**\n * [iter description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function sort<A>(iter: Iterator<A>, fn: (left: A, right: A) => Ordering): Iterator<A> {\n\treturn fromArray(toArray(iter).sort(fn));\n}\n\n/**\n * [A description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function map<A, B>(iter: Iterator<A>, fn: (value: A) => B): Iterator<B> {\n\treturn (push) => iter((value) => push(fn(value)));\n}\n\n/**\n * [iter description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function filter<A>(iter: Iterator<A>, fn: (value: A) => boolean): Iterator<A> {\n\treturn (push) => iter((value) => {\n\t\tif (fn(value)) {\n\t\t\treturn push(value);\n\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t});\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function concat<A>(...args: Array<Iterator<A>>): Iterator<A> {\n\treturn (push) => {\n\t\tlet go = true;\n\n\t\tconst push2 = (value: A) => (go = push(value));\n\n\t\tconst length = args.length;\n\n\t\tfor (let i = 0; i < length; ++i) {\n\t\t\targs[i](push2);\n\n\t\t\tif (!go) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function flatten<A>(iter: Iterator<Iterator<A>>): Iterator<A> {\n\treturn (push) => {\n\t\tlet go = true;\n\n\t\tconst push2 = (value: A) => (go = push(value));\n\n\t\titer((value) => {\n\t\t\tvalue(push2);\n\t\t\treturn go;\n\t\t});\n\t};\n}\n\n/**\n * [number description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function indexed<A>(iter: Iterator<A>): Iterator<[number, A]> {\n\treturn (push) => {\n\t\tlet index = 0;\n\n\t\titer((value) => push([index++, value]));\n\t};\n}\n\n/**\n * [iter description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function findIndex<A>(iter: Iterator<A>, matches: (value: A) => boolean): number {\n\tlet found = false;\n\tlet i = 0;\n\n\titer((value) => {\n\t\tif (matches(value)) {\n\t\t\tfound = true;\n\t\t\treturn false;\n\n\t\t} else {\n\t\t\t++i;\n\t\t\treturn true;\n\t\t}\n\t});\n\n\treturn (found ? i : -1);\n}\n\n/**\n * [iter description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function find<A>(iter: Iterator<A>, matches: (value: A) => boolean): A | undefined {\n\tlet output;\n\n\titer((value) => {\n\t\tif (matches(value)) {\n\t\t\toutput = value;\n\t\t\treturn false;\n\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t});\n\n\treturn output;\n}\n\n/**\n * [A description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function findMap<A, B>(iter: Iterator<A>, matches: (value: A) => B | null): B | undefined {\n\tlet output;\n\n\titer((value) => {\n\t\tconst v = matches(value);\n\n\t\tif (v !== null) {\n\t\t\toutput = v;\n\t\t\treturn false;\n\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t});\n\n\treturn output;\n}\n\n/**\n * [iter description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function contains<A>(iter: Iterator<A>, matches: (value: A) => boolean): boolean {\n\tlet output = false;\n\n\titer((value) => {\n\t\tif (matches(value)) {\n\t\t\toutput = true;\n\t\t\treturn false;\n\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t});\n\n\treturn output;\n}\n\n/**\n * [A description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function foldl<A, B>(iter: Iterator<A>, init: B, fn: (state: B, value: A) => B): B {\n\titer((value) => {\n\t\tinit = fn(init, value);\n\t\treturn true;\n\t});\n\n\treturn init;\n}\n\n/**\n * [min2 description]\n *\n * @ignore Exclude from docs\n * @todo Description\n * @param left [description]\n * @param right [description]\n * @return [description]\n */\nfunction min2(left: number | null, right: number): number {\n\tif (left == null || right < left) {\n\t\treturn right;\n\n\t} else {\n\t\treturn left;\n\t}\n}\n\n/**\n * [min description]\n *\n * @ignore Exclude from docs\n * @todo Verify that this works correctly\n * @todo Description\n * @param a [description]\n * @return [description]\n */\nexport function min(a: Iterator<number>): number | null {\n\treturn foldl(a, null, min2);\n}\n\n/**\n * [max2 description]\n *\n * @ignore Exclude from docs\n * @todo Description\n * @param left [description]\n * @param right [description]\n * @return [description]\n */\nfunction max2(left: number | null, right: number): number {\n\tif (left == null || right > left) {\n\t\treturn right;\n\n\t} else {\n\t\treturn left;\n\t}\n}\n\n/**\n * [max description]\n *\n * @ignore Exclude from docs\n * @todo Verify that this works correctly\n * @todo Description\n * @param a [description]\n * @return [description]\n */\nexport function max(a: Iterator<number>): number | null {\n\treturn foldl(a, null, max2);\n}\n\n\n/**\n * [join description]\n *\n * @ignore Exclude from docs\n * @todo Description\n * @param iter [description]\n * @param separator [description]\n * @return [description]\n */\nexport function join(iter: Iterator<string>, separator: string = \"\"): string {\n\tlet first = true;\n\tlet init = \"\";\n\n\titer((value) => {\n\t\tif (first) {\n\t\t\tfirst = false;\n\n\t\t} else {\n\t\t\tinit += separator;\n\t\t}\n\n\t\tinit += value;\n\n\t\treturn true;\n\t});\n\n\treturn init;\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport class ListIterator<T extends IClone<T>> {\n\tprivate _listCopy!: Array<T>;\n\tprivate _create: () => T;\n\n\tpublic list: Iterable<T>;\n\n\t// flag specifies if iterator should create new list item if it is reqested for a nextItem but there is no more left in the list\n\tpublic createNewItems: boolean = false;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param list [description]\n\t * @param create [description]\n\t */\n\tconstructor(list: Iterable<T>, create: () => T) {\n\t\tthis.list = list;\n\t\tthis._create = create;\n\t\tthis.reset();\n\t}\n\n\treset() {\n\t\tthis._listCopy = toArray(this.list.iterator());\n\t}\n\n\tclear() {\n\t\tthis._listCopy.length = 0;\n\t}\n\n\tgetFirst(): $type.Optional<T> {\n\t\treturn this.returnItem(0);\n\t}\n\n\tgetLast(): $type.Optional<T> {\n\t\treturn this.returnItem(this._listCopy.length - 1);\n\t}\n\n\tfind(fn: (value: T) => boolean): $type.Optional<T> {\n\t\tlet index: number = $array.findIndex(this._listCopy, fn);\n\n\t\tif (index !== -1) {\n\t\t\tlet item = this._listCopy[index];\n\t\t\t// TODO use removeIndex instead ?\n\t\t\t$array.remove(this._listCopy, item);\n\t\t\treturn item;\n\n\t\t} else {\n\t\t\treturn this.getLast();\n\t\t}\n\t}\n\n\tremoveItem(item: T): boolean {\n\t\treturn $array.remove(this._listCopy, item);\n\t}\n\n\tprotected returnItem(index: number): $type.Optional<T> {\n\t\tif (index >= 0 && index < this._listCopy.length) {\n\t\t\tlet item = this._listCopy[index];\n\t\t\t// TODO use removeIndex instead ?\n\t\t\t$array.remove(this._listCopy, item);\n\t\t\treturn item;\n\n\t\t} else if (this.createNewItems) {\n\t\t\treturn this._create();\n\t\t}\n\t}\n\n\titerator() {\n\t\treturn fromArray(this._listCopy);\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}