{"ast":null,"code":"/**\r\n * ============================================================================\r\n * COMPARING FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Comparing function used for ordering.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Use localeCompare\r\n * @param a  Item 1\r\n * @param b  Item 2\r\n * @return Result\r\n */\nexport function order(a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n}\n/**\r\n * ============================================================================\r\n * OTHER FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Repeats a `string` number of times as set in `amount`.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Make this faster\r\n * @param string  Source string\r\n * @param amount  Number of times to repeat string\r\n * @return New string\r\n */\n\nexport function repeat(string, amount) {\n  return new Array(amount + 1).join(string);\n}\n/**\r\n * Generates a random string `characters` length.\r\n *\r\n * @param chars  Number of characters\r\n * @return Random string\r\n */\n\nexport function random(chars) {\n  var res = \"\";\n  var choice = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n  for (var i = 0; i < chars; i++) {\n    res += choice.charAt(Math.floor(Math.random() * choice.length));\n  }\n\n  return res;\n}","map":{"version":3,"sources":["../../../../../src/.internal/core/utils/String.ts"],"names":[],"mappings":"AASA;;;;;;;AAOA;;;;;;;;;AASA,OAAM,SAAU,KAAV,CAAgB,CAAhB,EAA2B,CAA3B,EAAoC;AACzC,MAAI,CAAC,KAAK,CAAV,EAAa;AACZ,WAAO,CAAP;AAEA,GAHD,MAGO,IAAI,CAAC,GAAG,CAAR,EAAW;AACjB,WAAO,CAAC,CAAR;AAEA,GAHM,MAGA;AACN,WAAO,CAAP;AACA;AACD;AAGD;;;;;;;AAOA;;;;;;;;;;AASA,OAAM,SAAU,MAAV,CAAiB,MAAjB,EAAiC,MAAjC,EAA+C;AACpD,SAAO,IAAI,KAAJ,CAAU,MAAM,GAAG,CAAnB,EAAsB,IAAtB,CAA2B,MAA3B,CAAP;AACA;AAED;;;;;;;AAMA,OAAM,SAAU,MAAV,CAAiB,KAAjB,EAA8B;AACnC,MAAI,GAAG,GAAG,EAAV;AACA,MAAI,MAAM,GAAG,gEAAb;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAApB,EAA2B,CAAC,EAA5B,EAAgC;AAC/B,IAAA,GAAG,IAAI,MAAM,CAAC,MAAP,CAAc,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,KAAgB,MAAM,CAAC,MAAlC,CAAd,CAAP;AACA;;AACD,SAAO,GAAP;AACA","sourcesContent":["/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport { Ordering } from \"./Order\";\n\n\n/**\n * ============================================================================\n * COMPARING FUNCTIONS\n * ============================================================================\n * @hidden\n */\n\n/**\n * Comparing function used for ordering.\n *\n * @ignore Exclude from docs\n * @todo Use localeCompare\n * @param a  Item 1\n * @param b  Item 2\n * @return Result\n */\nexport function order(a: string, b: string): Ordering {\n\tif (a === b) {\n\t\treturn 0;\n\n\t} else if (a < b) {\n\t\treturn -1;\n\n\t} else {\n\t\treturn 1;\n\t}\n}\n\n\n/**\n * ============================================================================\n * OTHER FUNCTIONS\n * ============================================================================\n * @hidden\n */\n\n/**\n * Repeats a `string` number of times as set in `amount`.\n *\n * @ignore Exclude from docs\n * @todo Make this faster\n * @param string  Source string\n * @param amount  Number of times to repeat string\n * @return New string\n */\nexport function repeat(string: string, amount: number): string {\n\treturn new Array(amount + 1).join(string);\n}\n\n/**\n * Generates a random string `characters` length.\n *\n * @param chars  Number of characters\n * @return Random string\n */\nexport function random(chars: number): string {\n\tlet res = \"\";\n\tlet choice = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\tfor (let i = 0; i < chars; i++) {\n\t\tres += choice.charAt(Math.floor(Math.random() * choice.length));\n\t}\n\treturn res;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}