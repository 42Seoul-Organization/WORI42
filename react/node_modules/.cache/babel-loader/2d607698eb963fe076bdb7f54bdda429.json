{"ast":null,"code":"/**\r\n * [[Chart]] class provides base functionality for all chart types to inherit.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { registry } from \"../core/Registry\";\nimport { Component } from \"../core/Component\";\nimport { MutableValueDisposer, Disposer } from \"../core/utils/Disposer\";\nimport { ListTemplate, ListDisposer } from \"../core/utils/List\";\nimport { Container } from \"../core/Container\";\nimport { Label } from \"../core/elements/Label\";\nimport { Grip } from \"../core/elements/Grip\";\nimport { DataItem } from \"../core/DataItem\";\nimport { percent } from \"../core/utils/Percent\";\nimport * as $iter from \"../core/utils/Iterator\";\nimport * as $type from \"../core/utils/Type\";\nimport { defaultRules, ResponsiveBreakpoints } from \"../core/utils/Responsive\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[Chart]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar ChartDataItem =\n/** @class */\nfunction (_super) {\n  __extends(ChartDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ChartDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"ChartDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return ChartDataItem;\n}(DataItem);\n\nexport { ChartDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A base class for all Charts.\r\n *\r\n * @see {@link IChartEvents} for a list of available Events\r\n * @see {@link IChartAdapters} for a list of available Adapters\r\n */\n\nvar Chart =\n/** @class */\nfunction (_super) {\n  __extends(Chart, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Chart() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * A reference to chart's [[Legend]].\r\n     * @ignore\r\n     */\n\n\n    _this._legend = new MutableValueDisposer();\n\n    if (_this.constructor === Chart) {\n      throw new Error(\"'Chart' cannot be instantiated directly. Please use a specific chart type.\");\n    }\n\n    _this.className = \"Chart\"; // Create a list of titles\n\n    var template = new Label();\n    _this.titles = new ListTemplate(template);\n\n    _this._disposers.push(new ListDisposer(_this.titles));\n\n    _this._disposers.push(template); // Chart component is also a container. it holds _chartAndLegendCont and titles\n\n\n    _this.width = percent(100);\n    _this.height = percent(100);\n    _this.layout = \"vertical\"; // Chart and legend\n\n    var chartAndLegendContainer = _this.createChild(Container);\n\n    chartAndLegendContainer.shouldClone = false;\n    chartAndLegendContainer.layout = \"vertical\";\n    chartAndLegendContainer.width = percent(100);\n    chartAndLegendContainer.height = percent(100);\n    _this.chartAndLegendContainer = chartAndLegendContainer; // Chart container holds all the elements of a chart, extept titles and legend\n\n    var chartContainer = chartAndLegendContainer.createChild(Container);\n    chartContainer.shouldClone = false;\n    chartContainer.width = percent(100);\n    chartContainer.height = percent(100);\n    _this.chartContainer = chartContainer;\n    _this.showOnInit = true;\n\n    _this._disposers.push(_this._legend); // Add title list events to apply certain formatting options and to make\n    // the chart reference them as accessible screen reader labels\n\n\n    _this.titles.events.on(\"inserted\", function (label) {\n      _this.processTitle(label);\n\n      _this.updateReaderTitleReferences();\n    }, _this, false);\n\n    _this.titles.events.on(\"removed\", function (label) {\n      _this.updateReaderTitleReferences();\n    }, _this, false); // Accessibility\n    // It seems we can't set focusable on the whole chart because it seems to\n    // mess up the whole focus event system - getting a focus on an inside\n    // object also trigger focus on parent\n    //this.focusable = true;\n\n\n    _this.role = \"region\";\n    _this.defaultState.transitionDuration = 1; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  Chart.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Chart\");\n    }\n  };\n  /**\r\n   * Initiates drawing of the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Chart.prototype.draw = function () {\n    this.fixLayout();\n\n    _super.prototype.draw.call(this);\n  };\n  /**\r\n   * Updates legend's hierarchy based on the position.\r\n   */\n\n\n  Chart.prototype.fixLayout = function () {\n    var legend = this.legend;\n\n    if (legend) {\n      var chartAndLegendContainer = this.chartAndLegendContainer;\n      var chartContainer = this.chartContainer;\n      chartContainer.x = undefined;\n      chartContainer.y = undefined;\n      legend.x = undefined;\n      legend.y = undefined;\n\n      switch (legend.position) {\n        case \"left\":\n          chartAndLegendContainer.layout = \"horizontal\";\n          legend.toBack();\n          break;\n\n        case \"right\":\n          chartAndLegendContainer.layout = \"horizontal\";\n          legend.toFront();\n          break;\n\n        case \"top\":\n          chartAndLegendContainer.layout = \"vertical\";\n          legend.toBack();\n          break;\n\n        case \"bottom\":\n          chartAndLegendContainer.layout = \"vertical\";\n          legend.toFront();\n      }\n    }\n  };\n  /**\r\n   * Setups the legend to use the chart's data.\r\n   */\n\n\n  Chart.prototype.feedLegend = function () {// Nothing here. This method is provided only as a \"placeholder\" for\n    // extending classes to override\n  };\n  /**\r\n   * Adds a new title to the chart when it is inserted into chart's titles\r\n   * list.\r\n   * @param event  An event object which is triggered when inserting into titles list\r\n   * @return Label object\r\n   */\n\n\n  Chart.prototype.processTitle = function (event) {\n    var title = event.newValue;\n    title.parent = this;\n    title.toBack();\n    title.shouldClone = false;\n    title.align = \"center\"; // Need to explicitly apply the `id` attribute so it can be referenced by\n    // `aria-labelledby`\n\n    title.uidAttr();\n    return title;\n  };\n  /**\r\n   * Checks if chart has any title elements. If it does, we will use them in an\r\n   * `aria-labelledby` attribute so that screen readers can use them to properly\r\n   * describe the chart when it is focused or hovered.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Chart.prototype.updateReaderTitleReferences = function () {\n    if (this.titles.length) {\n      var titleIds_1 = [];\n      $iter.each(this.titles.iterator(), function (title) {\n        titleIds_1.push(title.uid);\n      });\n      this.setSVGAttribute({\n        \"aria-labelledby\": titleIds_1.join(\" \")\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-labelledby\");\n    }\n  };\n\n  Object.defineProperty(Chart.prototype, \"legend\", {\n    /**\r\n     * @return Legend\r\n     */\n    get: function () {\n      return this._legend.get();\n    },\n\n    /**\r\n     * Holds the instance of chart's [[Leged]].\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/legend/} for more information about legends\r\n     * @param Legend\r\n     */\n    set: function (legend) {\n      this.setLegend(legend);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Prepares the legend instance for use in this chart.\r\n   *\r\n   * @param legend  Legend\r\n   */\n\n  Chart.prototype.setLegend = function (legend) {\n    var _this = this;\n\n    if (this._legend.get() !== legend) {\n      if (legend) {\n        // Set legend options\n        legend.parent = this.chartAndLegendContainer;\n\n        this._legend.set(legend, legend.events.on(\"propertychanged\", function (event) {\n          if (event.property == \"position\") {\n            _this.fixLayout();\n          }\n        }, undefined, false));\n\n        legend.addDisposer(new Disposer(function () {\n          _this.legend = undefined;\n        }));\n      } else {\n        this._legend.reset();\n      }\n\n      this.feedLegend();\n    }\n  };\n  /**\r\n   * Destroys this object and all related data.\r\n   */\n\n\n  Chart.prototype.dispose = function () {\n    // otherwise there might be some errors when disposing chart which was just inited\n    if (this.legend) {\n      this.legend.dispose();\n    }\n\n    _super.prototype.dispose.call(this);\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n\n  Chart.prototype.processConfig = function (config) {\n    if (config) {\n      // Set up legend\n      if ($type.hasValue(config.legend) && !$type.hasValue(config.legend.type)) {\n        config.legend.type = \"Legend\";\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n  /**\r\n   * Copies all properties from another instance of [[Series]].\r\n   *\r\n   * @param source  Source series\r\n   */\n\n\n  Chart.prototype.copyFrom = function (source) {\n    this.titles.copyFrom(source.titles);\n    this.chartContainer.copyFrom(source.chartContainer);\n\n    if (source.legend) {\n      this.legend = source.legend.clone();\n      this.legend.removeChildren();\n    }\n\n    _super.prototype.copyFrom.call(this, source);\n  };\n\n  Object.defineProperty(Chart.prototype, \"dragGrip\", {\n    /**\r\n     * @return Grip\r\n     */\n    get: function () {\n      var _this = this;\n\n      if (!this._dragGrip) {\n        var grip_1 = this.tooltipContainer.createChild(Grip);\n        grip_1.align = \"right\";\n        grip_1.valign = \"middle\";\n        grip_1.hide(0);\n        grip_1.events.on(\"down\", function (ev) {\n          if (ev.touch) {\n            _this.interactionsEnabled = false;\n          }\n        });\n        grip_1.events.on(\"up\", function (ev) {\n          _this.interactionsEnabled = true;\n        });\n        this.events.on(\"down\", function (ev) {\n          if (ev.touch) {\n            grip_1.show();\n          }\n        });\n        this._dragGrip = grip_1;\n      }\n\n      return this._dragGrip;\n    },\n\n    /**\r\n     * An instance of [[Grip]] which serves as a grip point which appears on\r\n     * touch and allows scrolling whole page even if chart is occupying the\r\n     * whole of the screen and would otherwise prevent scrolling.\r\n     *\r\n     * @since 4.4.0\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/touch/} For more information.\r\n     * @param  value  Grip\r\n     */\n    set: function (value) {\n      this._dragGrip = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Chart.prototype, \"focusable\", {\n    get: function () {\n      return this.parent.focusable;\n    },\n    set: function (value) {\n      this.parent.focusable = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Chart;\n}(Component);\n\nexport { Chart };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Chart\"] = Chart;\n/**\r\n * Add default responsive rules\r\n */\n\n/**\r\n * Reduce horizontal margins\r\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.widthXS,\n  state: function (target, stateId) {\n    if (target instanceof Chart) {\n      var state = target.states.create(stateId);\n\n      if (target.pixelPaddingLeft > 10) {\n        state.properties.paddingLeft = 10;\n      }\n\n      if (target.pixelPaddingRight > 10) {\n        state.properties.paddingRight = 10;\n      }\n\n      return state;\n    }\n\n    return null;\n  }\n});\n/**\r\n * Reduce vertical margins\r\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.heightXS,\n  state: function (target, stateId) {\n    if (target instanceof Chart) {\n      var state = target.states.create(stateId);\n\n      if (target.pixelPaddingTop > 10) {\n        state.properties.paddingTop = 10;\n      }\n\n      if (target.pixelPaddingBottom > 10) {\n        state.properties.paddingBottom = 10;\n      }\n\n      return state;\n    }\n\n    return null;\n  }\n});\n/**\r\n * Remove horizontal padding\r\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.widthXXS,\n  state: function (target, stateId) {\n    if (target instanceof Chart) {\n      var state = target.states.create(stateId);\n      state.properties.paddingLeft = 0;\n      state.properties.paddingRight = 0;\n      return state;\n    }\n\n    return null;\n  }\n});\n/**\r\n * Remove vertical padding\r\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.heightXXS,\n  state: function (target, stateId) {\n    if (target instanceof Chart) {\n      var state = target.states.create(stateId);\n      state.properties.paddingTop = 0;\n      state.properties.paddingBottom = 0;\n      return state;\n    }\n\n    return null;\n  }\n});","map":{"version":3,"sources":["../../../../src/.internal/charts/Chart.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * [[Chart]] class provides base functionality for all chart types to inherit.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { registry } from \"../core/Registry\";\r\nimport { Component, IComponentProperties, IComponentDataFields, IComponentEvents, IComponentAdapters } from \"../core/Component\";\r\nimport { MutableValueDisposer, Disposer } from \"../core/utils/Disposer\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../core/utils/List\";\r\nimport { Container } from \"../core/Container\";\r\nimport { Label } from \"../core/elements/Label\";\r\nimport { Grip } from \"../core/elements/Grip\";\r\nimport { Legend } from \"../charts/Legend\";\r\nimport { DataItem } from \"../core/DataItem\";\r\nimport { percent } from \"../core/utils/Percent\";\r\nimport * as $iter from \"../core/utils/Iterator\";\r\nimport * as $type from \"../core/utils/Type\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../core/utils/Responsive\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[Chart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ChartDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: Chart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[Chart]].\r\n */\r\nexport interface IChartDataFields extends IComponentDataFields { }\r\n\r\n/**\r\n * Defines properties for [[Chart]].\r\n */\r\nexport interface IChartProperties extends IComponentProperties { }\r\n\r\n/**\r\n * Defines events for [[Chart]].\r\n */\r\nexport interface IChartEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Chart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChartAdapters extends IComponentAdapters, IChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all Charts.\r\n *\r\n * @see {@link IChartEvents} for a list of available Events\r\n * @see {@link IChartAdapters} for a list of available Adapters\r\n */\r\nexport class Chart extends Component {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t */\r\n\tpublic _dataFields: IChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChartEvents;\r\n\r\n\t/**\r\n\t * A List of chart titles.\r\n\t */\r\n\tpublic titles: ListTemplate<Label>;\r\n\r\n\t/**\r\n\t * Container that holds the chart itself.\r\n\t */\r\n\tpublic chartContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to a container that holds both the chart and the legend.\r\n\t */\r\n\tpublic chartAndLegendContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to chart's [[Legend]].\r\n\t * @ignore\r\n\t */\r\n\tprotected _legend = new MutableValueDisposer<Legend>();\r\n\r\n\t/**\r\n\t * Instance of the grip element.\r\n\t */\r\n\tprotected _dragGrip: $type.Optional<Grip>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tif (this.constructor === Chart) {\r\n\t\t\tthrow new Error(\"'Chart' cannot be instantiated directly. Please use a specific chart type.\");\r\n\t\t}\r\n\t\tthis.className = \"Chart\";\r\n\r\n\t\t// Create a list of titles\r\n\t\tconst template = new Label();\r\n\t\tthis.titles = new ListTemplate<Label>(template);\r\n\t\tthis._disposers.push(new ListDisposer(this.titles));\r\n\t\tthis._disposers.push(template);\r\n\r\n\t\t// Chart component is also a container. it holds _chartAndLegendCont and titles\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.layout = \"vertical\";\r\n\r\n\t\t// Chart and legend\r\n\t\tlet chartAndLegendContainer: Container = this.createChild(Container);\r\n\t\tchartAndLegendContainer.shouldClone = false;\r\n\t\tchartAndLegendContainer.layout = \"vertical\";\r\n\t\tchartAndLegendContainer.width = percent(100);\r\n\t\tchartAndLegendContainer.height = percent(100);\r\n\t\tthis.chartAndLegendContainer = chartAndLegendContainer;\r\n\r\n\t\t// Chart container holds all the elements of a chart, extept titles and legend\r\n\t\tlet chartContainer = chartAndLegendContainer.createChild(Container);\r\n\t\tchartContainer.shouldClone = false;\r\n\t\tchartContainer.width = percent(100);\r\n\t\tchartContainer.height = percent(100);\r\n\t\tthis.chartContainer = chartContainer;\r\n\r\n\t\tthis.showOnInit = true;\r\n\r\n\t\tthis._disposers.push(this._legend);\r\n\r\n\t\t// Add title list events to apply certain formatting options and to make\r\n\t\t// the chart reference them as accessible screen reader labels\r\n\t\tthis.titles.events.on(\"inserted\", (label) => {\r\n\t\t\tthis.processTitle(label);\r\n\t\t\tthis.updateReaderTitleReferences();\r\n\t\t}, this, false);\r\n\t\tthis.titles.events.on(\"removed\", (label) => {\r\n\t\t\tthis.updateReaderTitleReferences();\r\n\t\t}, this, false);\r\n\r\n\t\t// Accessibility\r\n\t\t// It seems we can't set focusable on the whole chart because it seems to\r\n\t\t// mess up the whole focus event system - getting a focus on an inside\r\n\t\t// object also trigger focus on parent\r\n\t\t//this.focusable = true;\r\n\t\tthis.role = \"region\";\r\n\r\n\t\tthis.defaultState.transitionDuration = 1;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Initiates drawing of the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tthis.fixLayout();\r\n\t\tsuper.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates legend's hierarchy based on the position.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet chartAndLegendContainer = this.chartAndLegendContainer;\r\n\t\t\tlet chartContainer = this.chartContainer;\r\n\t\t\tchartContainer.x = undefined;\r\n\t\t\tchartContainer.y = undefined;\r\n\t\t\tlegend.x = undefined;\r\n\t\t\tlegend.y = undefined;\r\n\t\t\tswitch (legend.position) {\r\n\t\t\t\tcase \"left\":\r\n\t\t\t\t\tchartAndLegendContainer.layout = \"horizontal\";\r\n\t\t\t\t\tlegend.toBack();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"right\":\r\n\t\t\t\t\tchartAndLegendContainer.layout = \"horizontal\";\r\n\t\t\t\t\tlegend.toFront();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"top\":\r\n\t\t\t\t\tchartAndLegendContainer.layout = \"vertical\";\r\n\t\t\t\t\tlegend.toBack();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"bottom\":\r\n\t\t\t\t\tchartAndLegendContainer.layout = \"vertical\";\r\n\t\t\t\t\tlegend.toFront();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t */\r\n\tprotected feedLegend(): void {\r\n\r\n\t\t// Nothing here. This method is provided only as a \"placeholder\" for\r\n\t\t// extending classes to override\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a new title to the chart when it is inserted into chart's titles\r\n\t * list.\r\n\t * @param event  An event object which is triggered when inserting into titles list\r\n\t * @return Label object\r\n\t */\r\n\tprotected processTitle(event: IListEvents<Label>[\"inserted\"]): Label {\r\n\t\tlet title: Label = event.newValue;\r\n\t\ttitle.parent = this;\r\n\t\ttitle.toBack();\r\n\t\ttitle.shouldClone = false;\r\n\t\ttitle.align = \"center\";\r\n\r\n\t\t// Need to explicitly apply the `id` attribute so it can be referenced by\r\n\t\t// `aria-labelledby`\r\n\t\ttitle.uidAttr();\r\n\t\treturn title;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if chart has any title elements. If it does, we will use them in an\r\n\t * `aria-labelledby` attribute so that screen readers can use them to properly\r\n\t * describe the chart when it is focused or hovered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateReaderTitleReferences(): void {\r\n\t\tif (this.titles.length) {\r\n\t\t\tlet titleIds: Array<string> = [];\r\n\t\t\t$iter.each(this.titles.iterator(), (title) => {\r\n\t\t\t\ttitleIds.push(title.uid);\r\n\t\t\t});\r\n\t\t\tthis.setSVGAttribute({ \"aria-labelledby\": titleIds.join(\" \") });\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.removeSVGAttribute(\"aria-labelledby\");\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Holds the instance of chart's [[Leged]].\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/legend/} for more information about legends\r\n\t * @param Legend\r\n\t */\r\n\tpublic set legend(legend: Legend) {\r\n\t\tthis.setLegend(legend);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Legend\r\n\t */\r\n\tpublic get legend(): Legend {\r\n\t\treturn this._legend.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Prepares the legend instance for use in this chart.\r\n\t *\r\n\t * @param legend  Legend\r\n\t */\r\n\tprotected setLegend(legend: Legend) {\r\n\t\tif (this._legend.get() !== legend) {\r\n\t\t\tif (legend) {\r\n\t\t\t\t// Set legend options\r\n\t\t\t\tlegend.parent = this.chartAndLegendContainer;\r\n\r\n\t\t\t\tthis._legend.set(legend, legend.events.on(\"propertychanged\", (event) => {\r\n\t\t\t\t\tif (event.property == \"position\") {\r\n\t\t\t\t\t\tthis.fixLayout();\r\n\t\t\t\t\t}\r\n\t\t\t\t}, undefined, false));\r\n\r\n\t\t\t\tlegend.addDisposer(new Disposer(() => {\r\n\t\t\t\t\tthis.legend = undefined;\r\n\t\t\t\t}))\r\n\r\n\t\t\t} else {\r\n\t\t\t\tthis._legend.reset();\r\n\t\t\t}\r\n\r\n\t\t\tthis.feedLegend();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose() {\r\n\t\t// otherwise there might be some errors when disposing chart which was just inited\r\n\t\tif (this.legend) {\r\n\t\t\tthis.legend.dispose();\r\n\t\t}\r\n\t\tsuper.dispose();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up legend\r\n\t\t\tif ($type.hasValue(config.legend) && !$type.hasValue(config.legend.type)) {\r\n\t\t\t\tconfig.legend.type = \"Legend\";\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.titles.copyFrom(source.titles);\r\n\t\tthis.chartContainer.copyFrom(source.chartContainer);\r\n\t\tif (source.legend) {\r\n\t\t\tthis.legend = source.legend.clone();\r\n\t\t\tthis.legend.removeChildren();\r\n\t\t}\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n\t/**\r\n\t * An instance of [[Grip]] which serves as a grip point which appears on\r\n\t * touch and allows scrolling whole page even if chart is occupying the\r\n\t * whole of the screen and would otherwise prevent scrolling.\r\n\t *\r\n\t * @since 4.4.0\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/touch/} For more information.\r\n\t * @param  value  Grip\r\n\t */\r\n\tpublic set dragGrip(value: Grip) {\r\n\t\tthis._dragGrip = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Grip\r\n\t */\r\n\tpublic get dragGrip(): Grip {\r\n\t\tif (!this._dragGrip) {\r\n\t\t\tlet grip = this.tooltipContainer.createChild(Grip);\r\n\t\t\tgrip.align = \"right\";\r\n\t\t\tgrip.valign = \"middle\";\r\n\t\t\tgrip.hide(0);\r\n\r\n\t\t\tgrip.events.on(\"down\", (ev) => {\r\n\t\t\t\tif (ev.touch) {\r\n\t\t\t\t\tthis.interactionsEnabled = false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tgrip.events.on(\"up\", (ev) => {\r\n\t\t\t\tthis.interactionsEnabled = true;\r\n\t\t\t});\r\n\r\n\t\t\tthis.events.on(\"down\", (ev) => {\r\n\t\t\t\tif (ev.touch) {\r\n\t\t\t\t\tgrip.show();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis._dragGrip = grip;\r\n\t\t}\r\n\t\treturn this._dragGrip;\r\n\t}\r\n\r\n\tpublic set focusable(value: boolean) {\r\n\t\tthis.parent.focusable = value;\r\n\t}\r\n\r\n\tpublic get focusable(): boolean {\r\n\t\treturn this.parent.focusable;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Chart\"] = Chart;\r\n\r\n\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Reduce horizontal margins\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.widthXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Chart) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tif (target.pixelPaddingLeft > 10) {\r\n\t\t\t\tstate.properties.paddingLeft = 10;\r\n\t\t\t}\r\n\t\t\tif (target.pixelPaddingRight > 10) {\r\n\t\t\t\tstate.properties.paddingRight = 10;\r\n\t\t\t}\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Reduce vertical margins\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.heightXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Chart) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tif (target.pixelPaddingTop > 10) {\r\n\t\t\t\tstate.properties.paddingTop = 10;\r\n\t\t\t}\r\n\t\t\tif (target.pixelPaddingBottom > 10) {\r\n\t\t\t\tstate.properties.paddingBottom = 10;\r\n\t\t\t}\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Remove horizontal padding\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.widthXXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Chart) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.paddingLeft = 0;\r\n\t\t\tstate.properties.paddingRight = 0;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Remove vertical padding\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.heightXXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Chart) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.paddingTop = 0;\r\n\t\t\tstate.properties.paddingBottom = 0;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}