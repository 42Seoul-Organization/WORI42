{"ast":null,"code":"import { __extends, __generator } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport * as $array from \"./Array\";\nimport * as $iter from \"./Iterator\";\nimport * as $type from \"./Type\";\n/**\r\n * Ordered list contains values of any type in an indexed array.\r\n */\n\nvar OrderedList =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor\r\n   *\r\n   * @param initial  Inital list of values to add to list\r\n   */\n  function OrderedList(initial) {\n    /**\r\n     * Holds list values.\r\n     */\n    this._values = [];\n    /**\r\n     * Event dispatcher.\r\n     */\n\n    this.events = new EventDispatcher();\n\n    if (initial != null) {\n      this.setAll(initial);\n    }\n  }\n\n  Object.defineProperty(OrderedList.prototype, \"values\", {\n    /**\r\n     * All items of the list.\r\n     *\r\n     * Do not modify the list directly. Rather use `insert()` and `remove()`\r\n     * methods.\r\n     *\r\n     * @return List values\r\n     */\n    get: function get() {\n      return this._values;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Inserts a value into list item array.\r\n   *\r\n   * @param value  Value\r\n   */\n\n  OrderedList.prototype._insert = function (value) {\n    this._values.push(value);\n\n    return this._values.length - 1;\n  };\n\n  Object.defineProperty(OrderedList.prototype, \"length\", {\n    /**\r\n     * Number of items in the list.\r\n     *\r\n     * @readonly\r\n     * @return Length\r\n     */\n    get: function get() {\n      return this._values.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns the index of the specific `value`.\r\n   *\r\n   * -1 if not found.\r\n   *\r\n   * @param value  Value\r\n   * @return Index\r\n   */\n\n  OrderedList.prototype.indexOf = function (value) {\n    return $array.indexOf(this._values, value);\n  };\n  /**\r\n   * Checks if list contains the `value`.\r\n   *\r\n   * @param value  Value\r\n   * @return In the list?\r\n   */\n\n\n  OrderedList.prototype.contains = function (value) {\n    return this.indexOf(value) !== -1;\n  };\n  /**\r\n   * Returns an item at specific `index`.\r\n   *\r\n   * @param index  Index\r\n   * @return Item\r\n   */\n\n\n  OrderedList.prototype.getIndex = function (index) {\n    return this._values[index];\n  };\n\n  Object.defineProperty(OrderedList.prototype, \"first\", {\n    /**\r\n     * First item in the list.\r\n     *\r\n     * @return Item\r\n     */\n    get: function get() {\n      return this._values[0];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(OrderedList.prototype, \"last\", {\n    /**\r\n     * Last item in the list.\r\n     *\r\n     * @return Item\r\n     */\n    get: function get() {\n      return this._values[this._values.length - 1];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Inserts a value into list.\r\n   *\r\n   * @param value  Value\r\n   */\n\n  OrderedList.prototype.insert = function (value) {\n    var index = this._insert(value);\n\n    if (this.events.isEnabled(\"inserted\")) {\n      this.events.dispatchImmediately(\"inserted\", {\n        type: \"inserted\",\n        target: this,\n        index: index,\n        newValue: value\n      });\n    }\n  };\n  /**\r\n   * Removes an item with the `value` from the list.\r\n   *\r\n   * @param value  Value\r\n   */\n\n\n  OrderedList.prototype.remove = function (value) {\n    var index = this.indexOf(value);\n\n    if (index !== -1) {\n      var oldValue = this._values[index];\n      $array.removeIndex(this._values, index);\n\n      if (this.events.isEnabled(\"removed\")) {\n        this.events.dispatchImmediately(\"removed\", {\n          type: \"removed\",\n          target: this,\n          index: index,\n          oldValue: oldValue\n        });\n      }\n    }\n  };\n  /**\r\n   * Sets multiple items to the list.\r\n   *\r\n   * All current items are removed.\r\n   *\r\n   * @param newArray  New items\r\n   */\n\n\n  OrderedList.prototype.setAll = function (newArray) {\n    var _this = this;\n\n    $array.eachReverse(this._values, function (x, i) {\n      _this._values.pop();\n\n      if (_this.events.isEnabled(\"removed\")) {\n        _this.events.dispatchImmediately(\"removed\", {\n          type: \"removed\",\n          target: _this,\n          index: i,\n          oldValue: x\n        });\n      }\n    });\n    $array.each(newArray, function (value) {\n      _this.insert(value);\n    });\n  };\n  /**\r\n   * Removes all items from the list.\r\n   */\n\n\n  OrderedList.prototype.clear = function () {\n    this.setAll([]);\n  };\n  /**\r\n   * Returns part of the list between `start` and `end` indexes, as a new\r\n   * [[OrderedList]].\r\n   *\r\n   * @param start  Start index\r\n   * @param end    End index\r\n   * @return Items in range\r\n   */\n\n\n  OrderedList.prototype.slice = function (start, end) {\n    var out = new OrderedList();\n    out._values = this._values.slice(start, end);\n    return out;\n  };\n  /**\r\n   * Finds a closest available index to the `value` in specified direction.\r\n   *\r\n   * @ignore exclude from docs\r\n   * @param value      value to search for\r\n   * @param fn         A callback function that returns value of the item\r\n   * @param direction  Direciton\r\n   * @return Index\r\n   */\n\n\n  OrderedList.prototype.findClosestIndex = function (value, fn, direction) {\n    if (direction === void 0) {\n      direction = \"any\";\n    } // Init temporary values\n\n\n    var closestIndex = -1;\n    var closestValue;\n    var closestDifference;\n    var i = 0;\n    $iter.eachContinue(this.iterator(), function (element) {\n      var item = fn(element); // Calc difference\n\n      if (direction === \"any\") {\n        // Exact match?\n        if (item === value) {\n          // Found exact value - don't bother searching further\n          closestIndex = i;\n          return false;\n        }\n\n        var difference = Math.abs(value - item);\n\n        if (!$type.hasValue(closestDifference) || closestDifference > difference) {\n          closestIndex = i;\n          closestValue = item;\n          closestDifference = difference;\n        }\n      } else if (direction === \"left\" && item < value) {\n        if (!$type.hasValue(closestValue) || closestValue < item) {\n          closestIndex = i;\n          closestValue = item;\n        }\n      } else if (direction === \"right\" && item >= value) {\n        if (!$type.hasValue(closestValue) || closestValue >= item) {\n          closestIndex = i;\n          closestValue = item;\n        }\n      }\n\n      ++i;\n      return true;\n    }); // Found nothing?\n\n    if (closestIndex === -1) {\n      if (direction === \"left\") {\n        // Use First one\n        closestIndex = 0;\n      } else if (direction === \"right\") {\n        // Use last item\n        closestIndex = this.length - 1;\n      }\n    }\n\n    return closestIndex;\n  };\n  /**\r\n   * Returns a list iterator.\r\n   *\r\n   * @return Iterator\r\n   */\n\n\n  OrderedList.prototype.iterator = function () {\n    return $iter.fromArray(this._values);\n  };\n  /**\r\n   * Returns an ES6 iterator for the list.\r\n   */\n\n\n  OrderedList.prototype[Symbol.iterator] = function () {\n    var length, i;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          length = this._values.length;\n          i = 0;\n          _a.label = 1;\n\n        case 1:\n          if (!(i < length)) return [3\n          /*break*/\n          , 4];\n          return [4\n          /*yield*/\n          , this._values[i]];\n\n        case 2:\n          _a.sent();\n\n          _a.label = 3;\n\n        case 3:\n          ++i;\n          return [3\n          /*break*/\n          , 1];\n\n        case 4:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  };\n  /**\r\n   * Calls `f` for each element in the list.\r\n   */\n\n\n  OrderedList.prototype.each = function (f) {\n    $array.each(this._values, f);\n  };\n\n  return OrderedList;\n}();\n\nexport { OrderedList };\n/**\r\n * A list where all items are ordered according to specific ordering function,\r\n * which is passed in via constructor parameter, when creating an instance of\r\n * [[SortedList]].\r\n */\n\nvar SortedList =\n/** @class */\nfunction (_super) {\n  __extends(SortedList, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param sort  Ordering function\r\n   */\n\n\n  function SortedList(sort) {\n    var _this = _super.call(this) || this;\n\n    _this._ordering = sort;\n    return _this;\n  }\n  /**\r\n   * Inserts item into the list.\r\n   *\r\n   * @param value  Item\r\n   */\n\n\n  SortedList.prototype._insert = function (value) {\n    var index = $array.getSortedIndex(this._values, this._ordering, value).index;\n    $array.insertIndex(this._values, index, value);\n    return index;\n  };\n  /**\r\n   * Returns index of the item in list if found.\r\n   *\r\n   * -1 if item is not in the list.\r\n   *\r\n   * @param value  Item to search for\r\n   * @return Index\r\n   */\n\n\n  SortedList.prototype.indexOf = function (value) {\n    var _a = $array.getSortedIndex(this._values, this._ordering, value),\n        found = _a.found,\n        index = _a.index;\n\n    if (found) {\n      return index;\n    } else {\n      return -1;\n    }\n  };\n  /**\r\n   * [udpate description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param value [description]\r\n   */\n\n\n  SortedList.prototype.update = function (value) {\n    // @todo test this\n    var index = $array.indexOf(this._values, value); // @todo throw an error if it doesn't exist ?\n\n    if (index !== -1) {\n      var last = this._values.length - 1; // Check if the current ordering is correct\n\n      if (!((index === 0 || this._ordering(this._values[index - 1], value) < 0) && (index === last || this._ordering(value, this._values[index + 1]) < 0))) {\n        // TODO send remove/insert/move events\n        $array.removeIndex(this._values, index);\n\n        this._insert(value);\n      }\n    }\n  };\n\n  return SortedList;\n}(OrderedList);\n\nexport { SortedList };\n/**\r\n * A version of a [[OrderedList]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\n\nvar OrderedListTemplate =\n/** @class */\nfunction (_super) {\n  __extends(OrderedListTemplate, _super);\n  /**\r\n   * Constructor\r\n   *\r\n   * @param t Template object\r\n   */\n\n\n  function OrderedListTemplate(t) {\n    var _this = _super.call(this) || this;\n\n    _this.template = t;\n    return _this;\n  }\n\n  Object.defineProperty(OrderedListTemplate.prototype, \"template\", {\n    /**\r\n     * @return Template object\r\n     */\n    get: function get() {\n      return this._template;\n    },\n\n    /**\r\n     * A \"template\" object to copy all properties from when creating new list\r\n     * items.\r\n     *\r\n     * @param v  Template object\r\n     */\n    set: function set(v) {\n      v.isTemplate = true;\n      this._template = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all elements from other list.\r\n   *\r\n   * @param source  Source list\r\n   */\n\n  OrderedListTemplate.prototype.copyFrom = function (source) {\n    var _this = this;\n\n    $iter.each(source.iterator(), function (value) {\n      _this.insert(value.clone());\n    });\n  };\n  /**\r\n   * Returns part of the list, starting at `start` and ending at `end` indexes,\r\n   * as a new [[OrderedListTemplate]].\r\n   *\r\n   * @param start  Start index\r\n   * @param end    End index\r\n   * @return New list\r\n   */\n\n\n  OrderedListTemplate.prototype.slice = function (start, end) {\n    var out = new OrderedListTemplate(this.template);\n    out._values = this._values.slice(start, end);\n    return out;\n  };\n\n  OrderedListTemplate.prototype.create = function (make) {\n    var clone = make != null ? new make() : this.template.clone();\n    this.insert(clone);\n    return clone;\n  };\n\n  return OrderedListTemplate;\n}(OrderedList);\n\nexport { OrderedListTemplate };\n/**\r\n * A version of a [[SortedList]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\n\nvar SortedListTemplate =\n/** @class */\nfunction (_super) {\n  __extends(SortedListTemplate, _super);\n  /**\r\n   * Constructor\r\n   *\r\n   * @param t     Template object\r\n   * @param sort  Ordering function\r\n   */\n\n\n  function SortedListTemplate(t, sort) {\n    var _this = _super.call(this, sort) || this;\n\n    _this.template = t;\n    return _this;\n  }\n\n  Object.defineProperty(SortedListTemplate.prototype, \"template\", {\n    /**\r\n     * @return Template object\r\n     */\n    get: function get() {\n      return this._template;\n    },\n\n    /**\r\n     * A \"template\" object to copy all properties from when creating new list\r\n     * items.\r\n     *\r\n     * @param v  Template object\r\n     */\n    set: function set(v) {\n      v.isTemplate = true;\n      this._template = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all elements from other list.\r\n   *\r\n   * @param source  Source list\r\n   */\n\n  SortedListTemplate.prototype.copyFrom = function (source) {\n    var _this = this;\n\n    $iter.each(source.iterator(), function (value) {\n      _this.insert(value.clone());\n    });\n  };\n\n  SortedListTemplate.prototype.create = function (make) {\n    var clone = make != null ? new make() : this.template.clone();\n    this.insert(clone);\n    return clone;\n  };\n\n  return SortedListTemplate;\n}(SortedList);\n\nexport { SortedListTemplate };","map":{"version":3,"sources":["../../../../../src/.internal/core/utils/SortedList.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { EventDispatcher, AMEvent } from \"./EventDispatcher\";\r\nimport { Ordering } from \"./Order\";\r\nimport { IClone } from \"./Clone\";\r\nimport * as $array from \"./Array\";\r\nimport * as $iter from \"./Iterator\";\r\nimport * as $type from \"./Type\";\r\n\r\n/**\r\n * Defines evends for [[SortedList]].\r\n */\r\nexport interface ISortedListEvents<A> {\r\n\r\n\t/**\r\n\t * Invoked when new value is inserted into the list.\r\n\t */\r\n\tinserted: {\r\n\t\t/**\r\n\t\t * Index where the element was inserted.\r\n\t\t */\r\n\t\tindex: number;\r\n\r\n\t\t/**\r\n\t\t * Inserted value.\r\n\t\t */\r\n\t\tnewValue: A;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when a value is removed from the list.\r\n\t */\r\n\tremoved: {\r\n\t\t/**\r\n\t\t * Index of the element which was removed.\r\n\t\t */\r\n\t\tindex: number;\r\n\r\n\t\t/**\r\n\t\t * Removed value.\r\n\t\t */\r\n\t\toldValue: A;\r\n\t};\r\n\r\n}\r\n\r\n/**\r\n * Ordered list contains values of any type in an indexed array.\r\n */\r\nexport class OrderedList<T> {\r\n\r\n\t/**\r\n\t * Holds list values.\r\n\t */\r\n\tprotected _values: Array<T> = [];\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t */\r\n\tpublic events: EventDispatcher<AMEvent<OrderedList<T>, ISortedListEvents<T>>> = new EventDispatcher();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t *\r\n\t * @param initial  Inital list of values to add to list\r\n\t */\r\n\tconstructor(initial?: Array<T>) {\r\n\t\tif (initial != null) {\r\n\t\t\tthis.setAll(initial);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * All items of the list.\r\n\t *\r\n\t * Do not modify the list directly. Rather use `insert()` and `remove()`\r\n\t * methods.\r\n\t *\r\n\t * @return List values\r\n\t */\r\n\tpublic get values(): Array<T> {\r\n\t\treturn this._values;\r\n\t}\r\n\r\n\t/**\r\n\t * Inserts a value into list item array.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tprotected _insert(value: T): number {\r\n\t\tthis._values.push(value);\r\n\t\treturn this._values.length - 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Number of items in the list.\r\n\t *\r\n\t * @readonly\r\n\t * @return Length\r\n\t */\r\n\tpublic get length(): number {\r\n\t\treturn this._values.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the index of the specific `value`.\r\n\t *\r\n\t * -1 if not found.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Index\r\n\t */\r\n\tpublic indexOf(value: T): number {\r\n\t\treturn $array.indexOf(this._values, value);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if list contains the `value`.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return In the list?\r\n\t */\r\n\tpublic contains(value: T): boolean {\r\n\t\treturn this.indexOf(value) !== -1;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an item at specific `index`.\r\n\t *\r\n\t * @param index  Index\r\n\t * @return Item\r\n\t */\r\n\tpublic getIndex(index: number): T | undefined {\r\n\t\treturn this._values[index];\r\n\t}\r\n\r\n\t/**\r\n\t * First item in the list.\r\n\t *\r\n\t * @return Item\r\n\t */\r\n\tpublic get first(): T | undefined {\r\n\t\treturn this._values[0];\r\n\t}\r\n\r\n\t/**\r\n\t * Last item in the list.\r\n\t *\r\n\t * @return Item\r\n\t */\r\n\tpublic get last(): T | undefined {\r\n\t\treturn this._values[this._values.length - 1];\r\n\t}\r\n\r\n\t/**\r\n\t * Inserts a value into list.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic insert(value: T): void {\r\n\t\tconst index = this._insert(value);\r\n\r\n\t\tif (this.events.isEnabled(\"inserted\")) {\r\n\t\t\tthis.events.dispatchImmediately(\"inserted\", {\r\n\t\t\t\ttype: \"inserted\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tindex: index,\r\n\t\t\t\tnewValue: value\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes an item with the `value` from the list.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic remove(value: T): void {\r\n\t\tconst index = this.indexOf(value);\r\n\r\n\t\tif (index !== -1) {\r\n\t\t\tconst oldValue = this._values[index];\r\n\r\n\t\t\t$array.removeIndex(this._values, index);\r\n\r\n\t\t\tif (this.events.isEnabled(\"removed\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"removed\", {\r\n\t\t\t\t\ttype: \"removed\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tindex: index,\r\n\t\t\t\t\toldValue: oldValue,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets multiple items to the list.\r\n\t *\r\n\t * All current items are removed.\r\n\t *\r\n\t * @param newArray  New items\r\n\t */\r\n\tpublic setAll(newArray: Array<T>): void {\r\n\t\t$array.eachReverse(this._values, (x, i) => {\r\n\t\t\tthis._values.pop();\r\n\r\n\t\t\tif (this.events.isEnabled(\"removed\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"removed\", {\r\n\t\t\t\t\ttype: \"removed\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tindex: i,\r\n\t\t\t\t\toldValue: x\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t$array.each(newArray, (value) => {\r\n\t\t\tthis.insert(value);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Removes all items from the list.\r\n\t */\r\n\tpublic clear(): void {\r\n\t\tthis.setAll([]);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns part of the list between `start` and `end` indexes, as a new\r\n\t * [[OrderedList]].\r\n\t *\r\n\t * @param start  Start index\r\n\t * @param end    End index\r\n\t * @return Items in range\r\n\t */\r\n\tpublic slice(start: number, end: number): OrderedList<T> {\r\n\t\tconst out = new OrderedList<T>();\r\n\r\n\t\tout._values = this._values.slice(start, end);\r\n\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * Finds a closest available index to the `value` in specified direction.\r\n\t *\r\n\t * @ignore exclude from docs\r\n\t * @param value      value to search for\r\n\t * @param fn         A callback function that returns value of the item\r\n\t * @param direction  Direciton\r\n\t * @return Index\r\n\t */\r\n\tpublic findClosestIndex(value: number, fn: (value: T) => number, direction: \"left\" | \"right\" | \"any\" = \"any\"): number {\r\n\t\t// Init temporary values\r\n\t\tlet closestIndex: number = -1;\r\n\t\tlet closestValue: number;\r\n\t\tlet closestDifference: number;\r\n\r\n\t\tlet i = 0;\r\n\r\n\t\t$iter.eachContinue(this.iterator(), (element) => {\r\n\t\t\tconst item: number = fn(element);\r\n\r\n\t\t\t// Calc difference\r\n\t\t\tif (direction === \"any\") {\r\n\r\n\t\t\t\t// Exact match?\r\n\t\t\t\tif (item === value) {\r\n\t\t\t\t\t// Found exact value - don't bother searching further\r\n\t\t\t\t\tclosestIndex = i;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet difference = Math.abs(value - item);\r\n\t\t\t\tif (!$type.hasValue(closestDifference) || (closestDifference > difference)) {\r\n\t\t\t\t\tclosestIndex = i;\r\n\t\t\t\t\tclosestValue = item;\r\n\t\t\t\t\tclosestDifference = difference;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (direction === \"left\" && (item < value)) {\r\n\t\t\t\tif (!$type.hasValue(closestValue) || (closestValue < item)) {\r\n\t\t\t\t\tclosestIndex = i;\r\n\t\t\t\t\tclosestValue = item;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (direction === \"right\" && (item >= value)) {\r\n\t\t\t\tif (!$type.hasValue(closestValue) || (closestValue >= item)) {\r\n\t\t\t\t\tclosestIndex = i;\r\n\t\t\t\t\tclosestValue = item;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t++i;\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\t// Found nothing?\r\n\t\tif (closestIndex === -1) {\r\n\t\t\tif (direction === \"left\") {\r\n\t\t\t\t// Use First one\r\n\t\t\t\tclosestIndex = 0;\r\n\t\t\t}\r\n\t\t\telse if (direction === \"right\") {\r\n\t\t\t\t// Use last item\r\n\t\t\t\tclosestIndex = this.length - 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn closestIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a list iterator.\r\n\t *\r\n\t * @return Iterator\r\n\t */\r\n\tpublic iterator(): $iter.Iterator<T> {\r\n\t\treturn $iter.fromArray(this._values);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an ES6 iterator for the list.\r\n\t */\r\n\tpublic *[Symbol.iterator](): Iterator<T> {\r\n\t\tconst length = this._values.length;\r\n\r\n\t\tfor (let i = 0; i < length; ++i) {\r\n\t\t\tyield this._values[i];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Calls `f` for each element in the list.\r\n\t */\r\n\tpublic each(f: (value: T, index: number) => void): void {\r\n\t\t$array.each(this._values, f);\r\n\t}\r\n}\r\n\r\n/**\r\n * A list where all items are ordered according to specific ordering function,\r\n * which is passed in via constructor parameter, when creating an instance of\r\n * [[SortedList]].\r\n */\r\nexport class SortedList<T> extends OrderedList<T> {\r\n\r\n\t/**\r\n\t * A reference to the ordering function.\r\n\t */\r\n\tprivate _ordering: any;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param sort  Ordering function\r\n\t */\r\n\tconstructor(sort: (left: T, right: T) => Ordering) {\r\n\t\tsuper();\r\n\t\tthis._ordering = sort;\r\n\t}\r\n\r\n\t/**\r\n\t * Inserts item into the list.\r\n\t *\r\n\t * @param value  Item\r\n\t */\r\n\tprotected _insert(value: T): number {\r\n\t\tconst { index } = $array.getSortedIndex(this._values, this._ordering, value);\r\n\r\n\t\t$array.insertIndex(this._values, index, value);\r\n\r\n\t\treturn index;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns index of the item in list if found.\r\n\t *\r\n\t * -1 if item is not in the list.\r\n\t *\r\n\t * @param value  Item to search for\r\n\t * @return Index\r\n\t */\r\n\tpublic indexOf(value: T): number {\r\n\t\tconst { found, index } = $array.getSortedIndex(this._values, this._ordering, value);\r\n\r\n\t\tif (found) {\r\n\t\t\treturn index;\r\n\r\n\t\t} else {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [udpate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic update(value: T): void {\r\n\t\t// @todo test this\r\n\t\tconst index = $array.indexOf(this._values, value);\r\n\r\n\t\t// @todo throw an error if it doesn't exist ?\r\n\t\tif (index !== -1) {\r\n\t\t\tconst last = this._values.length - 1;\r\n\r\n\t\t\t// Check if the current ordering is correct\r\n\t\t\tif (!((index === 0 || this._ordering(this._values[index - 1], value) < 0) &&\r\n\t\t\t\t(index === last || this._ordering(value, this._values[index + 1]) < 0))) {\r\n\t\t\t\t// TODO send remove/insert/move events\r\n\t\t\t\t$array.removeIndex(this._values, index);\r\n\t\t\t\tthis._insert(value);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * A version of a [[OrderedList]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\r\nexport class OrderedListTemplate<T extends IClone<T> & { isTemplate: boolean }> extends OrderedList<T> {\r\n\r\n\t/**\r\n\t * A template object.\r\n\t *\r\n\t * @todo Make this private\r\n\t */\r\n\tpublic _template!: T;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t *\r\n\t * @param t Template object\r\n\t */\r\n\tpublic constructor(t: T) {\r\n\t\tsuper();\r\n\t\tthis.template = t;\r\n\t}\r\n\r\n\t/**\r\n\t * A \"template\" object to copy all properties from when creating new list\r\n\t * items.\r\n\t *\r\n\t * @param v  Template object\r\n\t */\r\n\tpublic set template(v: T) {\r\n\t\tv.isTemplate = true;\r\n\t\tthis._template = v;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Template object\r\n\t */\r\n\tpublic get template(): T {\r\n\t\treturn this._template;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all elements from other list.\r\n\t *\r\n\t * @param source  Source list\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\t$iter.each(source.iterator(), (value) => {\r\n\t\t\tthis.insert(value.clone());\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns part of the list, starting at `start` and ending at `end` indexes,\r\n\t * as a new [[OrderedListTemplate]].\r\n\t *\r\n\t * @param start  Start index\r\n\t * @param end    End index\r\n\t * @return New list\r\n\t */\r\n\tpublic slice(start: number, end: number): OrderedListTemplate<T> {\r\n\t\tconst out = new OrderedListTemplate<T>(this.template);\r\n\r\n\t\tout._values = this._values.slice(start, end);\r\n\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * Instantiates a new object of the specified type, adds it to the end of\r\n\t * the list, and returns it.\r\n\t *\r\n\t * @param make  Item type to use. Will use the default type for the list if not specified.\r\n\t * @return      Newly created item\r\n\t */\r\n\tpublic create<T>(make: { new(): T; }): T;\r\n\tpublic create(): T;\r\n\tpublic create(make?: { new(): T; }): T {\r\n\t\tconst clone =\r\n\t\t\t(make != null\r\n\t\t\t\t? new make()\r\n\t\t\t\t: this.template.clone());\r\n\r\n\t\tthis.insert(clone);\r\n\r\n\t\treturn clone;\r\n\t}\r\n}\r\n\r\n/**\r\n * A version of a [[SortedList]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\r\nexport class SortedListTemplate<T extends IClone<T> & { isTemplate: boolean }> extends SortedList<T> {\r\n\r\n\t// @todo code duplication\r\n\r\n\t/**\r\n\t * A template object.\r\n\t *\r\n\t * @todo Make this private\r\n\t */\r\n\tpublic _template!: T;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t *\r\n\t * @param t     Template object\r\n\t * @param sort  Ordering function\r\n\t */\r\n\tpublic constructor(t: T, sort: (left: T, right: T) => Ordering) {\r\n\t\tsuper(sort);\r\n\t\tthis.template = t;\r\n\t}\r\n\r\n\t/**\r\n\t * A \"template\" object to copy all properties from when creating new list\r\n\t * items.\r\n\t *\r\n\t * @param v  Template object\r\n\t */\r\n\tpublic set template(v: T) {\r\n\t\tv.isTemplate = true;\r\n\t\tthis._template = v;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Template object\r\n\t */\r\n\tpublic get template(): T {\r\n\t\treturn this._template;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all elements from other list.\r\n\t *\r\n\t * @param source  Source list\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\t$iter.each(source.iterator(), (value) => {\r\n\t\t\tthis.insert(value.clone());\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Instantiates a new object of the specified type, adds it to the end of\r\n\t * the list, and returns it.\r\n\t *\r\n\t * @param make  Item type to use. Will use the default type for the list if not specified.\r\n\t * @return      Newly created item\r\n\t */\r\n\tpublic create<T>(make: { new(): T; }): T;\r\n\tpublic create(): T;\r\n\tpublic create(make?: { new(): T; }): T {\r\n\t\tconst clone =\r\n\t\t\t(make != null\r\n\t\t\t\t? new make()\r\n\t\t\t\t: this.template.clone());\r\n\r\n\t\tthis.insert(clone);\r\n\r\n\t\treturn clone;\r\n\t}\r\n\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}