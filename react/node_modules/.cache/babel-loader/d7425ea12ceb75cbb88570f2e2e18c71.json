{"ast":null,"code":"/**\r\n * Pointed rectangle module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { PointedShape } from \"./PointedShape\";\nimport * as $math from \"../utils/Math\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Draws a rectangle with a pointer.\r\n *\r\n * @see {@link IPointedRectangleEvents} for a list of available events\r\n * @see {@link IPointedRectangleAdapters} for a list of available Adapters\r\n */\n\nvar PointedRectangle =\n/** @class */\nfunction (_super) {\n  __extends(PointedRectangle, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function PointedRectangle() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"PointedRectangle\";\n    _this.element = _this.paper.add(\"path\");\n    _this.cornerRadius = 6;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  PointedRectangle.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    var cr = this.cornerRadius;\n    var w = this.innerWidth;\n    var h = this.innerHeight;\n\n    if (w > 0 && h > 0) {\n      var x = this.pointerX;\n      var y = this.pointerY;\n      var bwh = this.pointerBaseWidth / 2;\n      var maxcr = $math.min(w / 2, h / 2);\n      var crtl = $math.fitToRange(cr, 0, maxcr);\n      var crtr = $math.fitToRange(cr, 0, maxcr);\n      var crbr = $math.fitToRange(cr, 0, maxcr);\n      var crbl = $math.fitToRange(cr, 0, maxcr); // corner coordinates\n      // top left\n\n      var xtl = 0;\n      var ytl = 0; // top right\n\n      var xtr = w;\n      var ytr = 0; // bottom right\n\n      var xbr = w;\n      var ybr = h; // bottom left\n\n      var xbl = 0;\n      var ybl = h;\n      var lineT = void 0;\n      var lineR = void 0;\n      var lineB = void 0;\n      var lineL = void 0; // find stem base side: http://$math.stackexchange.com/questions/274712/calculate-on-which-side-of-straign-line-is-dot-located\n      // d=(x−x1)(y2−y1)−(y−y1)(x2−x1)\n\n      var d1 = (x - xtl) * (ybr - ytl) - (y - ytl) * (xbr - xtl);\n      var d2 = (x - xbl) * (ytr - ybl) - (y - ybl) * (xtr - xbl); // top\n\n      if (d1 > 0 && d2 > 0) {\n        var stemX = $math.fitToRange(x, crtl + bwh, w - bwh - crtr);\n        y = $math.fitToRange(y, -Infinity, 0);\n        lineT = \"M\" + crtl + \",0 L\" + (stemX - bwh) + \",0 L\" + x + \",\" + y + \" L\" + (stemX + bwh) + \",0 L\" + (w - crtr) + \",0\";\n      } else {\n        lineT = \"M\" + crtl + \",0 L\" + (w - crtr) + \",0\";\n      } // bottom\n\n\n      if (d1 < 0 && d2 < 0) {\n        var stemX = $math.fitToRange(x, crbl + bwh, w - bwh - crbr);\n        y = $math.fitToRange(y, h, Infinity);\n        lineB = \" L\" + (w - crbr) + \",\" + h + \" L\" + (stemX + bwh) + \",\" + h + \" L\" + x + \",\" + y + \" L\" + (stemX - bwh) + \",\" + h + \" L\" + crbl + \",\" + h;\n      } else {\n        lineB = \" L\" + crbl + \",\" + h;\n      } // left\n\n\n      if (d1 < 0 && d2 > 0) {\n        var stemY = $math.fitToRange(y, crtl + bwh, h - crbl - bwh);\n        x = $math.fitToRange(x, -Infinity, 0);\n        lineL = \" L0,\" + (h - crbl) + \" L0,\" + (stemY + bwh) + \" L\" + x + \",\" + y + \" L0,\" + (stemY - bwh) + \" L0,\" + crtl;\n      } else {\n        lineL = \" L0,\" + crtl;\n      } // right\n\n\n      if (d1 > 0 && d2 < 0) {\n        var stemY = $math.fitToRange(y, crtr + bwh, h - bwh - crbr);\n        x = $math.fitToRange(x, w, Infinity);\n        lineR = \" L\" + w + \",\" + crtr + \" L\" + w + \",\" + (stemY - bwh) + \" L\" + x + \",\" + y + \" L\" + w + \",\" + (stemY + bwh) + \" L\" + w + \",\" + (h - crbr);\n      } else {\n        lineR = \" L\" + w + \",\" + (h - crbr);\n      }\n\n      var arcTR = \" a\" + crtr + \",\" + crtr + \" 0 0 1 \" + crtr + \",\" + crtr;\n      var arcBR = \" a\" + crbr + \",\" + crbr + \" 0 0 1 -\" + crbr + \",\" + crbr;\n      var arcBL = \" a\" + crbl + \",\" + crbl + \" 0 0 1 -\" + crbl + \",-\" + crbl;\n      var arcTL = \" a\" + crtl + \",\" + crtl + \" 0 0 1 \" + crtl + \",-\" + crtl;\n      this.path = lineT + arcTR + lineR + arcBR + lineB + arcBL + lineL + arcTL;\n    }\n  };\n\n  Object.defineProperty(PointedRectangle.prototype, \"cornerRadius\", {\n    /**\r\n     * @return Corner radius (px)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"cornerRadius\");\n    },\n\n    /**\r\n     * Radius of rectangle's border in pixels.\r\n     *\r\n     * @default 0\r\n     * @param value  Corner radius (px)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"cornerRadius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PointedRectangle;\n}(PointedShape);\n\nexport { PointedRectangle };","map":{"version":3,"sources":["../../../../../src/.internal/core/elements/PointedRectangle.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Pointed rectangle module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PointedShape, IPointedShapeProperties, IPointedShapeAdapters, IPointedShapeEvents } from \"./PointedShape\";\r\nimport * as $math from \"../utils/Math\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[PointedRectangle]].\r\n */\r\nexport interface IPointedRectangleProperties extends IPointedShapeProperties {\r\n\r\n\t/**\r\n\t * Radius of rectangle's border in pixels.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PointedRectangle]].\r\n */\r\nexport interface IPointedRectangleEvents extends IPointedShapeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PointedRectangle]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPointedRectangleAdapters extends IPointedShapeAdapters, IPointedRectangleProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a rectangle with a pointer.\r\n *\r\n * @see {@link IPointedRectangleEvents} for a list of available events\r\n * @see {@link IPointedRectangleAdapters} for a list of available Adapters\r\n */\r\nexport class PointedRectangle extends PointedShape {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPointedRectangleProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPointedRectangleAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPointedRectangleEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PointedRectangle\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.cornerRadius = 6;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tlet cr = this.cornerRadius;\r\n\t\tlet w = this.innerWidth;\r\n\t\tlet h = this.innerHeight;\r\n\t\tif (w > 0 && h > 0) {\r\n\t\t\tlet x = this.pointerX;\r\n\t\t\tlet y = this.pointerY;\r\n\t\t\tlet bwh = this.pointerBaseWidth / 2;\r\n\r\n\t\t\tlet maxcr: number = $math.min(w / 2, h / 2);\r\n\t\t\tlet crtl: number = $math.fitToRange(cr, 0, maxcr);\r\n\t\t\tlet crtr: number = $math.fitToRange(cr, 0, maxcr);\r\n\t\t\tlet crbr: number = $math.fitToRange(cr, 0, maxcr);\r\n\t\t\tlet crbl: number = $math.fitToRange(cr, 0, maxcr);\r\n\r\n\t\t\t// corner coordinates\r\n\t\t\t// top left\r\n\t\t\tlet xtl = 0;\r\n\t\t\tlet ytl = 0;\r\n\t\t\t// top right\r\n\t\t\tlet xtr = w;\r\n\t\t\tlet ytr = 0;\r\n\t\t\t// bottom right\r\n\t\t\tlet xbr = w;\r\n\t\t\tlet ybr = h;\r\n\t\t\t// bottom left\r\n\t\t\tlet xbl = 0;\r\n\t\t\tlet ybl = h;\r\n\r\n\t\t\tlet lineT;\r\n\t\t\tlet lineR;\r\n\t\t\tlet lineB;\r\n\t\t\tlet lineL;\r\n\r\n\t\t\t// find stem base side: http://$math.stackexchange.com/questions/274712/calculate-on-which-side-of-straign-line-is-dot-located\r\n\t\t\t// d=(x−x1)(y2−y1)−(y−y1)(x2−x1)\r\n\t\t\tlet d1 = (x - xtl) * (ybr - ytl) - (y - ytl) * (xbr - xtl);\r\n\t\t\tlet d2 = (x - xbl) * (ytr - ybl) - (y - ybl) * (xtr - xbl);\r\n\r\n\t\t\t// top\r\n\t\t\tif (d1 > 0 && d2 > 0) {\r\n\t\t\t\tlet stemX = $math.fitToRange(x, crtl + bwh, w - bwh - crtr);\r\n\t\t\t\ty = $math.fitToRange(y, -Infinity, 0);\r\n\t\t\t\tlineT = \"M\" + crtl + \",0 L\" + (stemX - bwh) + \",0 L\" + x + \",\" + y + \" L\" + (stemX + bwh) + \",0 L\" + (w - crtr) + \",0\";\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlineT = \"M\" + crtl + \",0 L\" + (w - crtr) + \",0\";\r\n\t\t\t}\r\n\t\t\t// bottom\r\n\t\t\tif (d1 < 0 && d2 < 0) {\r\n\t\t\t\tlet stemX = $math.fitToRange(x, crbl + bwh, w - bwh - crbr);\r\n\t\t\t\ty = $math.fitToRange(y, h, Infinity);\r\n\t\t\t\tlineB = \" L\" + (w - crbr) + \",\" + h + \" L\" + (stemX + bwh) + \",\" + h + \" L\" + x + \",\" + y + \" L\" + (stemX - bwh) + \",\" + h + \" L\" + crbl + \",\" + h;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlineB = \" L\" + crbl + \",\" + h;\r\n\t\t\t}\r\n\t\t\t// left\r\n\t\t\tif (d1 < 0 && d2 > 0) {\r\n\t\t\t\tlet stemY = $math.fitToRange(y, crtl + bwh, h - crbl - bwh);\r\n\t\t\t\tx = $math.fitToRange(x, -Infinity, 0);\r\n\t\t\t\tlineL = \" L0,\" + (h - crbl) + \" L0,\" + (stemY + bwh) + \" L\" + x + \",\" + y + \" L0,\" + (stemY - bwh) + \" L0,\" + crtl;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlineL = \" L0,\" + crtl;\r\n\t\t\t}\r\n\t\t\t// right\r\n\t\t\tif (d1 > 0 && d2 < 0) {\r\n\t\t\t\tlet stemY = $math.fitToRange(y, crtr + bwh, h - bwh - crbr);\r\n\t\t\t\tx = $math.fitToRange(x, w, Infinity);\r\n\t\t\t\tlineR = \" L\" + w + \",\" + crtr + \" L\" + w + \",\" + (stemY - bwh) + \" L\" + x + \",\" + y + \" L\" + w + \",\" + (stemY + bwh) + \" L\" + w + \",\" + (h - crbr);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlineR = \" L\" + w + \",\" + (h - crbr);\r\n\t\t\t}\r\n\r\n\t\t\tlet arcTR = \" a\" + crtr + \",\" + crtr + \" 0 0 1 \" + crtr + \",\" + crtr;\r\n\t\t\tlet arcBR = \" a\" + crbr + \",\" + crbr + \" 0 0 1 -\" + crbr + \",\" + crbr;\r\n\t\t\tlet arcBL = \" a\" + crbl + \",\" + crbl + \" 0 0 1 -\" + crbl + \",-\" + crbl;\r\n\t\t\tlet arcTL = \" a\" + crtl + \",\" + crtl + \" 0 0 1 \" + crtl + \",-\" + crtl;\r\n\r\n\t\t\tthis.path = lineT + arcTR + lineR + arcBR + lineB + arcBL + lineL + arcTL;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of rectangle's border in pixels.\r\n\t *\r\n\t * @default 0\r\n\t * @param value  Corner radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Corner radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}