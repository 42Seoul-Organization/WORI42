{"ast":null,"code":"/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { AxisRenderer } from \"./AxisRenderer\";\nimport { AxisFillCircular } from \"./AxisFillCircular\";\nimport { GridCircular } from \"./GridCircular\";\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\nimport { registry } from \"../../core/Registry\";\nimport { percent, Percent } from \"../../core/utils/Percent\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\nimport { AxisBullet } from \"./AxisBullet\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A renderer for circular axis.\r\n */\n\nvar AxisRendererCircular =\n/** @class */\nfunction (_super) {\n  __extends(AxisRendererCircular, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param axis Related axis\r\n   */\n\n\n  function AxisRendererCircular() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * @ignore\r\n     */\n\n\n    _this.pixelRadiusReal = 0; // axis.layout = \"none\"; // does not trigger redraw when size changes\n\n    _this.layout = \"none\";\n    _this.className = \"AxisRendererCircular\";\n    _this.isMeasured = false;\n    _this.startAngle = -90;\n    _this.endAngle = 270;\n    _this.useChartAngles = true;\n    _this.radius = percent(100);\n    _this.isMeasured = false;\n    _this.grid.template.location = 0;\n    _this.labels.template.location = 0;\n    _this.labels.template.radius = 15;\n    _this.ticks.template.location = 0;\n    _this.ticks.template.pixelPerfect = false;\n    _this.tooltipLocation = 0;\n    _this.line.strokeOpacity = 0;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n  * @ignore\r\n  */\n\n\n  AxisRendererCircular.prototype.setAxis = function (axis) {\n    var _this = this;\n\n    _super.prototype.setAxis.call(this, axis);\n\n    axis.isMeasured = false; // modify x and y so that tooltip would always be on circle\n\n    var tooltip = axis.tooltip;\n    tooltip.adapter.add(\"dx\", function (x, target) {\n      var point = $utils.svgPointToSprite({\n        x: target.pixelX,\n        y: target.pixelY\n      }, _this);\n      return _this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\n    });\n    tooltip.adapter.add(\"dy\", function (y, target) {\n      var point = $utils.svgPointToSprite({\n        x: target.pixelX,\n        y: target.pixelY\n      }, _this);\n      return _this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\n    });\n  };\n  /**\r\n   * Validates Axis renderer.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererCircular.prototype.validate = function () {\n    // so that radius would be updated\n    if (this.chart && this.chart.invalid) {\n      this.chart.validate();\n    }\n\n    _super.prototype.validate.call(this);\n  };\n\n  Object.defineProperty(AxisRendererCircular.prototype, \"axisLength\", {\n    /**\r\n     * Returns actual length of the Axis, in pixels.\r\n     *\r\n     * @return Length (px)\r\n     */\n    get: function get() {\n      return 2 * Math.PI * this.pixelRadius;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererCircular.prototype, \"radius\", {\n    /**\r\n     * @return Outer radius\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"radius\");\n    },\n\n    /**\r\n     * Outer radius of the axis.\r\n     *\r\n     * Can be absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Outer radius\r\n     */\n    set: function set(value) {\n      if (this.setPercentProperty(\"radius\", value, false, false, 10, false)) {\n        if (this.axis) {\n          this.axis.invalidate();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererCircular.prototype, \"pixelRadius\", {\n    /**\r\n     * Outer radius in pixels.\r\n     *\r\n     * @return Outer radius (px)\r\n     */\n    get: function get() {\n      return $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererCircular.prototype, \"innerRadius\", {\n    /**\r\n     * @return Inner radius\r\n     */\n    get: function get() {\n      var chart = this.chart;\n      var innerRadius = this.getPropertyValue(\"innerRadius\");\n\n      if (chart) {\n        if (!$type.hasValue(innerRadius)) {\n          innerRadius = chart.innerRadius;\n\n          if (innerRadius instanceof Percent && chart) {\n            innerRadius = percent(innerRadius.value * chart.innerRadiusModifyer * 100);\n          }\n        } else {\n          if (innerRadius instanceof Percent && chart) {\n            var mr = chart.mr;\n            var value = innerRadius.value;\n            value = Math.max(mr * value, mr - Math.min(chart.plotContainer.innerHeight, chart.plotContainer.innerWidth)) / mr;\n            innerRadius = percent(value * 100);\n          }\n        }\n\n        return innerRadius;\n      }\n    },\n\n    /**\r\n     * Inner radius of the axis.\r\n     *\r\n     * Can be absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Inner radius\r\n     */\n    set: function set(value) {\n      if (this.setPercentProperty(\"innerRadius\", value, false, false, 10, false)) {\n        if (this.axis) {\n          this.axis.invalidate();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererCircular.prototype, \"useChartAngles\", {\n    /**\r\n     * @return Use chart angles\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"useChartAngles\");\n    },\n\n    /**\r\n     * Specifies if axis should use its own `startAngle` and `endAngle` or\r\n     * inherit them from relative properties from chart.\r\n     *\r\n     * @default false\r\n     * @param value  Use chart's angles\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"useChartAngles\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererCircular.prototype, \"pixelInnerRadius\", {\n    /**\r\n     * Inner radius in pixels.\r\n     *\r\n     * @return Inner radius (px)\r\n     */\n    get: function get() {\n      return $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts relative position on axis to point coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @param position2  Position (0-1) Position on the second axis\r\n   * @return Point\r\n   */\n\n  AxisRendererCircular.prototype.positionToPoint = function (position, position2) {\n    if (!$type.isNumber(position2)) {\n      position2 = 1;\n    }\n\n    var coordinate = this.positionToCoordinate(position);\n    var angle = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\n    var radius = this.pixelRadius;\n    var innerRadius = this.pixelInnerRadius;\n\n    if (this.axisRendererY) {\n      var realRadius = $math.fitToRange(this.axisRendererY.positionToCoordinate(position2), 0, Infinity);\n      var point = {\n        x: realRadius * $math.cos(angle),\n        y: realRadius * $math.sin(angle)\n      };\n      return point;\n    }\n\n    return {\n      x: $math.cos(angle) * innerRadius + (radius - innerRadius) * $math.cos(angle) * position2,\n      y: $math.sin(angle) * innerRadius + (radius - innerRadius) * $math.sin(angle) * position2\n    };\n  };\n  /**\r\n   * Converts relative position (0-1) on axis to angle in degrees (0-360).\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @return Angle (0-360)\r\n   */\n\n\n  AxisRendererCircular.prototype.positionToAngle = function (position) {\n    var axis = this.axis;\n    var arc = (this.endAngle - this.startAngle) / (axis.end - axis.start);\n    var angle;\n\n    if (axis.renderer.inversed) {\n      angle = this.startAngle + (axis.end - position) * arc;\n    } else {\n      angle = this.startAngle + (position - axis.start) * arc;\n    }\n\n    return $math.round(angle, 3);\n  };\n  /**\r\n   * Converts angle on axis to relative position(0-1).\r\n   *\r\n   * @param angle Angle in degrees\r\n   * @return Position (0-1)\r\n   */\n\n\n  AxisRendererCircular.prototype.angleToPosition = function (angle) {\n    var axis = this.axis;\n    var arc = (this.endAngle - this.startAngle) / (axis.end - axis.start);\n    var position;\n\n    if (axis.renderer.inversed) {\n      position = axis.end - (angle - this.startAngle) / arc;\n    } else {\n      position = (angle - this.startAngle) / arc + axis.start;\n    }\n\n    return $math.round(position, 5);\n  };\n  /**\r\n   * Updates and positions the axis line element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererCircular.prototype.updateAxisLine = function () {\n    var radius = this.pixelRadius;\n    var startAngle = this.startAngle;\n    var endAngle = this.endAngle;\n    var arc = endAngle - startAngle;\n    this.line.path = $path.moveTo({\n      x: radius * $math.cos(startAngle),\n      y: radius * $math.sin(startAngle)\n    }) + $path.arcTo(startAngle, arc, radius, radius);\n  };\n  /**\r\n   * Updates and positions a grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param grid         Grid element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRendererCircular.prototype.updateGridElement = function (grid, position, endPosition) {\n    position = position + (endPosition - position) * grid.location;\n    var point = this.positionToPoint(position);\n\n    if ($type.isNumber(point.x) && $type.isNumber(point.y) && grid.element) {\n      var angle = $math.DEGREES * Math.atan2(point.y, point.x);\n      var radius = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\n      var gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\n      grid.zIndex = 0;\n      var innerRadius = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadiusReal, true);\n      grid.path = $path.moveTo({\n        x: innerRadius * $math.cos(angle),\n        y: innerRadius * $math.sin(angle)\n      }) + $path.lineTo({\n        x: radius * $math.cos(angle),\n        y: radius * $math.sin(angle)\n      });\n    }\n\n    this.toggleVisibility(grid, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions a tick element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param tick         Tick element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRendererCircular.prototype.updateTickElement = function (tick, position, endPosition) {\n    position = position + (endPosition - position) * tick.location;\n    var point = this.positionToPoint(position);\n\n    if (tick.element) {\n      var radius = this.pixelRadius;\n      var angle = $math.DEGREES * Math.atan2(point.y, point.x);\n      var tickLength = tick.length;\n\n      if (tick.inside) {\n        tickLength = -tickLength;\n      }\n\n      tick.zIndex = 1;\n      tick.path = $path.moveTo({\n        x: radius * $math.cos(angle),\n        y: radius * $math.sin(angle)\n      }) + $path.lineTo({\n        x: (radius + tickLength) * $math.cos(angle),\n        y: (radius + tickLength) * $math.sin(angle)\n      });\n    }\n\n    this.toggleVisibility(tick, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions axis bullet.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param bullet       AxisBullet element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRendererCircular.prototype.updateBullet = function (bullet, position, endPosition) {\n    var location = 0.5;\n\n    if (bullet instanceof AxisBullet) {\n      location = bullet.location;\n    }\n\n    position = position + (endPosition - position) * location;\n    var point = this.positionToPoint(position);\n    var radius = this.pixelRadius;\n    var angle = $math.DEGREES * Math.atan2(point.y, point.x);\n    point = {\n      x: radius * $math.cos(angle),\n      y: radius * $math.sin(angle)\n    };\n    this.positionItem(bullet, point);\n    this.toggleVisibility(bullet, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions a label element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param label        Label element\r\n   * @param position     Starting position\r\n   * @param endPosition  Ending position\r\n   */\n\n\n  AxisRendererCircular.prototype.updateLabelElement = function (label, position, endPosition, location) {\n    if (!$type.hasValue(location)) {\n      location = label.location;\n    }\n\n    position = position + (endPosition - position) * location;\n    label.fixPosition(this.positionToAngle(position), this.pixelRadius);\n    label.zIndex = 2;\n    this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\n  };\n  /**\r\n   * Checks if point is within bounds of a container.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param point Point coordinates\r\n   * @return Fits?\r\n   */\n\n\n  AxisRendererCircular.prototype.fitsToBounds = function (point) {\n    return true;\n  };\n\n  Object.defineProperty(AxisRendererCircular.prototype, \"startAngle\", {\n    /**\r\n     * @return Start angle\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"startAngle\");\n    },\n\n    /**\r\n     * Start angle of the axis in degrees (0-360).\r\n     *\r\n     * @param value  Start angle\r\n     */\n    set: function set(value) {\n      // do not normalize angel here!\n      if (this.setPropertyValue(\"startAngle\", value)) {\n        this.invalidateAxisItems();\n\n        if (this.axis) {\n          this.axis.invalidateSeries();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererCircular.prototype, \"endAngle\", {\n    /**\r\n     * @return End angle\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"endAngle\");\n    },\n\n    /**\r\n     * End angle of the axis in degrees (0-360).\r\n     *\r\n     * @param value  End angle\r\n     */\n    set: function set(value) {\n      // do not normalize angel here!\n      if (this.setPropertyValue(\"endAngle\", value)) {\n        this.invalidateAxisItems();\n\n        if (this.axis) {\n          this.axis.invalidateSeries();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * [getPositionRangePath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param startPosition  Starting position\r\n   * @param endPosition    End position\r\n   * @return SVG path\r\n   */\n\n  AxisRendererCircular.prototype.getPositionRangePath = function (startPosition, endPosition, radius, innerRadius, cornerRadius) {\n    var path = \"\";\n\n    if ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\n      if (!$type.hasValue(radius)) {\n        radius = this.radius;\n      }\n\n      startPosition = $math.max(startPosition, this.axis.start);\n      endPosition = $math.min(endPosition, this.axis.end);\n\n      if (endPosition < startPosition) {\n        endPosition = startPosition;\n      }\n\n      var pixelRadius = $utils.relativeRadiusToValue(radius, this.pixelRadius);\n      var pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\n      var startAngle = this.positionToAngle(startPosition);\n      var endAngle = this.positionToAngle(endPosition);\n      var arc = endAngle - startAngle;\n      path = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\n    }\n\n    return path;\n  };\n  /**\r\n   * Returns a new grid element, suitable for this Axis Renderer type.\r\n   *\r\n   * @return Grid element\r\n   */\n\n\n  AxisRendererCircular.prototype.createGrid = function () {\n    return new GridCircular();\n  };\n  /**\r\n   * Returns a new fill element, suitable for this Axis Renderer type.\r\n   *\r\n   * @return Fill element\r\n   */\n\n\n  AxisRendererCircular.prototype.createFill = function (axis) {\n    return new AxisFillCircular(axis);\n  };\n  /**\r\n   * Returns a new label element, suitable for this Axis Renderer type.\r\n   *\r\n   * @return Label element\r\n   */\n\n\n  AxisRendererCircular.prototype.createLabel = function () {\n    return new AxisLabelCircular();\n  };\n  /**\r\n   * Converts a point at specific coordinates to a relative position (0-1)\r\n   * on the axis.\r\n   *\r\n   * @param point  Point\r\n   * @return Position (0-1)\r\n   */\n\n\n  AxisRendererCircular.prototype.pointToPosition = function (point) {\n    var angle = $math.fitAngleToRange($math.getAngle(point), this.startAngle, this.endAngle);\n    return this.coordinateToPosition((angle - this.startAngle) / 360 * this.axisLength);\n  };\n\n  return AxisRendererCircular;\n}(AxisRenderer);\n\nexport { AxisRendererCircular };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;","map":{"version":3,"sources":["../../../../../src/.internal/charts/axes/AxisRendererCircular.ts"],"names":[],"mappings":"AAAA;;;;AAIA;;;;;;;AAMA,SAAS,YAAT,QAAkG,gBAAlG;AAGA,SAAS,gBAAT,QAAiC,oBAAjC;AAIA,SAAS,YAAT,QAA6B,gBAA7B;AACA,SAAS,iBAAT,QAAkC,qBAAlC;AACA,SAAS,QAAT,QAAyB,qBAAzB;AACA,SAAS,OAAT,EAAkB,OAAlB,QAAiC,0BAAjC;AACA,OAAO,KAAK,KAAZ,MAAuB,uBAAvB;AACA,OAAO,KAAK,KAAZ,MAAuB,2BAAvB;AACA,OAAO,KAAK,MAAZ,MAAwB,wBAAxB;AACA,OAAO,KAAK,KAAZ,MAAuB,uBAAvB;AAEA,SAAS,UAAT,QAA2B,cAA3B;AAyDA;;;;;;;AAOA;;;;AAGA,IAAA,oBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA0C,EAAA,SAAA,CAAA,oBAAA,EAAA,MAAA,CAAA;AA2CzC;;;;;;;AAKA,WAAA,oBAAA,GAAA;AAAA,QAAA,KAAA,GAEC;AACA,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IAHR;AAhBA;;;;;AAGO,IAAA,KAAA,CAAA,eAAA,GAA0B,CAA1B,CAaP,CAKC;;AACA,IAAA,KAAI,CAAC,MAAL,GAAc,MAAd;AAEA,IAAA,KAAI,CAAC,SAAL,GAAiB,sBAAjB;AACA,IAAA,KAAI,CAAC,UAAL,GAAkB,KAAlB;AACA,IAAA,KAAI,CAAC,UAAL,GAAkB,CAAC,EAAnB;AACA,IAAA,KAAI,CAAC,QAAL,GAAgB,GAAhB;AAEA,IAAA,KAAI,CAAC,cAAL,GAAsB,IAAtB;AACA,IAAA,KAAI,CAAC,MAAL,GAAc,OAAO,CAAC,GAAD,CAArB;AAEA,IAAA,KAAI,CAAC,UAAL,GAAkB,KAAlB;AAEA,IAAA,KAAI,CAAC,IAAL,CAAU,QAAV,CAAmB,QAAnB,GAA8B,CAA9B;AAEA,IAAA,KAAI,CAAC,MAAL,CAAY,QAAZ,CAAqB,QAArB,GAAgC,CAAhC;AACA,IAAA,KAAI,CAAC,MAAL,CAAY,QAAZ,CAAqB,MAArB,GAA8B,EAA9B;AAEA,IAAA,KAAI,CAAC,KAAL,CAAW,QAAX,CAAoB,QAApB,GAA+B,CAA/B;AACA,IAAA,KAAI,CAAC,KAAL,CAAW,QAAX,CAAoB,YAApB,GAAmC,KAAnC;AACA,IAAA,KAAI,CAAC,eAAL,GAAuB,CAAvB;AAEA,IAAA,KAAI,CAAC,IAAL,CAAU,aAAV,GAA0B,CAA1B;;AAEA,IAAA,KAAI,CAAC,UAAL;;;AACA;AAED;;;;;AAGO,EAAA,oBAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,IAAf,EAAyB;AAAzB,QAAA,KAAA,GAAA,IAAA;;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb,EAAc,IAAd;;AACA,IAAA,IAAI,CAAC,UAAL,GAAkB,KAAlB,CAFwB,CAIxB;;AACA,QAAI,OAAO,GAAG,IAAI,CAAC,OAAnB;AAEA,IAAA,OAAO,CAAC,OAAR,CAAgB,GAAhB,CAAoB,IAApB,EAA0B,UAAC,CAAD,EAAI,MAAJ,EAAU;AACnC,UAAI,KAAK,GAAW,MAAM,CAAC,gBAAP,CAAwB;AAAE,QAAA,CAAC,EAAE,MAAM,CAAC,MAAZ;AAAoB,QAAA,CAAC,EAAE,MAAM,CAAC;AAA9B,OAAxB,EAAgE,KAAhE,CAApB;AACA,aAAO,KAAI,CAAC,WAAL,GAAmB,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,KAAL,CAAW,KAAK,CAAC,CAAjB,EAAoB,KAAK,CAAC,CAA1B,CAAT,CAAnB,GAA4D,KAAK,CAAC,CAAzE;AACA,KAHD;AAKA,IAAA,OAAO,CAAC,OAAR,CAAgB,GAAhB,CAAoB,IAApB,EAA0B,UAAC,CAAD,EAAI,MAAJ,EAAU;AACnC,UAAI,KAAK,GAAW,MAAM,CAAC,gBAAP,CAAwB;AAAE,QAAA,CAAC,EAAE,MAAM,CAAC,MAAZ;AAAoB,QAAA,CAAC,EAAE,MAAM,CAAC;AAA9B,OAAxB,EAAgE,KAAhE,CAApB;AACA,aAAO,KAAI,CAAC,WAAL,GAAmB,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,KAAL,CAAW,KAAK,CAAC,CAAjB,EAAoB,KAAK,CAAC,CAA1B,CAAT,CAAnB,GAA4D,KAAK,CAAC,CAAzE;AACA,KAHD;AAIA,GAhBM;AAkBP;;;;;;;AAKO,EAAA,oBAAA,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA;AACC;AACA,QAAI,KAAK,KAAL,IAAc,KAAK,KAAL,CAAW,OAA7B,EAAsC;AACrC,WAAK,KAAL,CAAW,QAAX;AACA;;AAED,IAAA,MAAA,CAAA,SAAA,CAAM,QAAN,CAAc,IAAd,CAAc,IAAd;AACA,GAPM;;AAcP,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,YAAX,EAAqB;AALrB;;;;;SAKA,eAAA;AACC,aAAO,IAAI,IAAI,CAAC,EAAT,GAAc,KAAK,WAA1B;AACA,KAFoB;oBAAA;;AAAA,GAArB;AAWA,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,QAAX,EAAiB;AAQjB;;;SAGA,eAAA;AACC,aAAO,KAAK,gBAAL,CAAsB,QAAtB,CAAP;AACA,KAbgB;;AAPjB;;;;;;;SAOA,aAAkB,KAAlB,EAAyC;AACxC,UAAI,KAAK,kBAAL,CAAwB,QAAxB,EAAkC,KAAlC,EAAyC,KAAzC,EAAgD,KAAhD,EAAuD,EAAvD,EAA2D,KAA3D,CAAJ,EAAuE;AACtE,YAAI,KAAK,IAAT,EAAe;AACd,eAAK,IAAL,CAAU,UAAV;AACA;AACD;AACD,KANgB;oBAAA;;AAAA,GAAjB;AAoBA,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,aAAX,EAAsB;AALtB;;;;;SAKA,eAAA;AACC,aAAO,MAAM,CAAC,qBAAP,CAA6B,KAAK,MAAlC,EAA0C,KAAK,eAA/C,KAAmE,CAA1E;AACA,KAFqB;oBAAA;;AAAA,GAAtB;AAWA,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,aAAX,EAAsB;AAQtB;;;SAGA,eAAA;AACC,UAAI,KAAK,GAAe,KAAK,KAA7B;AACA,UAAI,WAAW,GAAG,KAAK,gBAAL,CAAsB,aAAtB,CAAlB;;AACA,UAAG,KAAH,EAAS;AACR,YAAI,CAAC,KAAK,CAAC,QAAN,CAAe,WAAf,CAAL,EAAkC;AACjC,UAAA,WAAW,GAAG,KAAK,CAAC,WAApB;;AAEA,cAAI,WAAW,YAAY,OAAvB,IAAkC,KAAtC,EAA6C;AAC5C,YAAA,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC,KAAZ,GAAoB,KAAK,CAAC,mBAA1B,GAAgD,GAAjD,CAArB;AACA;AAED,SAPD,MAQK;AACJ,cAAI,WAAW,YAAY,OAAvB,IAAkC,KAAtC,EAA6C;AAC5C,gBAAI,EAAE,GAAG,KAAK,CAAC,EAAf;AACA,gBAAI,KAAK,GAAG,WAAW,CAAC,KAAxB;AACA,YAAA,KAAK,GAAG,IAAI,CAAC,GAAL,CAAS,EAAE,GAAG,KAAd,EAAqB,EAAE,GAAG,IAAI,CAAC,GAAL,CAAS,KAAK,CAAC,aAAN,CAAoB,WAA7B,EAA0C,KAAK,CAAC,aAAN,CAAoB,UAA9D,CAA1B,IAAuG,EAA/G;AACA,YAAA,WAAW,GAAG,OAAO,CAAC,KAAK,GAAG,GAAT,CAArB;AACA;AACD;;AACD,eAAO,WAAP;AACA;AACD,KAjCqB;;AAPtB;;;;;;;SAOA,aAAuB,KAAvB,EAA8C;AAC7C,UAAI,KAAK,kBAAL,CAAwB,aAAxB,EAAuC,KAAvC,EAA8C,KAA9C,EAAqD,KAArD,EAA4D,EAA5D,EAAgE,KAAhE,CAAJ,EAA4E;AAC3E,YAAI,KAAK,IAAT,EAAe;AACd,eAAK,IAAL,CAAU,UAAV;AACA;AACD;AACD,KANqB;oBAAA;;AAAA,GAAtB;AA0CA,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,gBAAX,EAAyB;AAIzB;;;SAGA,eAAA;AACC,aAAO,KAAK,gBAAL,CAAsB,gBAAtB,CAAP;AACA,KATwB;;AAPzB;;;;;;;SAOA,aAA0B,KAA1B,EAAwC;AACvC,WAAK,gBAAL,CAAsB,gBAAtB,EAAwC,KAAxC;AACA,KAFwB;oBAAA;;AAAA,GAAzB;AAgBA,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,kBAAX,EAA2B;AAL3B;;;;;SAKA,eAAA;AACC,aAAO,MAAM,CAAC,qBAAP,CAA6B,KAAK,WAAlC,EAA+C,KAAK,eAApD,KAAwE,CAA/E;AACA,KAF0B;oBAAA;;AAAA,GAA3B;AAIA;;;;;;;;AAOO,EAAA,oBAAA,CAAA,SAAA,CAAA,eAAA,GAAP,UAAuB,QAAvB,EAAyC,SAAzC,EAA2D;AAE1D,QAAI,CAAC,KAAK,CAAC,QAAN,CAAe,SAAf,CAAL,EAAgC;AAC/B,MAAA,SAAS,GAAG,CAAZ;AACA;;AAED,QAAI,UAAU,GAAW,KAAK,oBAAL,CAA0B,QAA1B,CAAzB;AACA,QAAI,KAAK,GAAW,KAAK,UAAL,GAAkB,CAAC,KAAK,QAAL,GAAgB,KAAK,UAAtB,IAAoC,UAApC,GAAiD,KAAK,UAA5F;AACA,QAAI,MAAM,GAAG,KAAK,WAAlB;AACA,QAAI,WAAW,GAAG,KAAK,gBAAvB;;AAEA,QAAI,KAAK,aAAT,EAAwB;AACvB,UAAI,UAAU,GAAG,KAAK,CAAC,UAAN,CAAiB,KAAK,aAAL,CAAmB,oBAAnB,CAAwC,SAAxC,CAAjB,EAAqE,CAArE,EAAwE,QAAxE,CAAjB;AACA,UAAI,KAAK,GAAG;AAAE,QAAA,CAAC,EAAE,UAAU,GAAG,KAAK,CAAC,GAAN,CAAU,KAAV,CAAlB;AAAoC,QAAA,CAAC,EAAE,UAAU,GAAG,KAAK,CAAC,GAAN,CAAU,KAAV;AAApD,OAAZ;AACA,aAAO,KAAP;AACA;;AAED,WAAO;AAAE,MAAA,CAAC,EAAE,KAAK,CAAC,GAAN,CAAU,KAAV,IAAmB,WAAnB,GAAiC,CAAC,MAAM,GAAG,WAAV,IAAyB,KAAK,CAAC,GAAN,CAAU,KAAV,CAAzB,GAA4C,SAAlF;AAA6F,MAAA,CAAC,EAAE,KAAK,CAAC,GAAN,CAAU,KAAV,IAAmB,WAAnB,GAAiC,CAAC,MAAM,GAAG,WAAV,IAAyB,KAAK,CAAC,GAAN,CAAU,KAAV,CAAzB,GAA4C;AAA7K,KAAP;AACA,GAlBM;AAoBP;;;;;;;;AAMO,EAAA,oBAAA,CAAA,SAAA,CAAA,eAAA,GAAP,UAAuB,QAAvB,EAAuC;AACtC,QAAI,IAAI,GAAS,KAAK,IAAtB;AAEA,QAAI,GAAG,GAAW,CAAC,KAAK,QAAL,GAAgB,KAAK,UAAtB,KAAqC,IAAI,CAAC,GAAL,GAAW,IAAI,CAAC,KAArD,CAAlB;AAEA,QAAI,KAAJ;;AAEA,QAAI,IAAI,CAAC,QAAL,CAAc,QAAlB,EAA4B;AAC3B,MAAA,KAAK,GAAG,KAAK,UAAL,GAAkB,CAAC,IAAI,CAAC,GAAL,GAAW,QAAZ,IAAwB,GAAlD;AACA,KAFD,MAGK;AACJ,MAAA,KAAK,GAAG,KAAK,UAAL,GAAkB,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAjB,IAA0B,GAApD;AACA;;AAED,WAAO,KAAK,CAAC,KAAN,CAAY,KAAZ,EAAmB,CAAnB,CAAP;AACA,GAfM;AAiBP;;;;;;;;AAMO,EAAA,oBAAA,CAAA,SAAA,CAAA,eAAA,GAAP,UAAuB,KAAvB,EAAoC;AACnC,QAAI,IAAI,GAAS,KAAK,IAAtB;AAEA,QAAI,GAAG,GAAW,CAAC,KAAK,QAAL,GAAgB,KAAK,UAAtB,KAAqC,IAAI,CAAC,GAAL,GAAW,IAAI,CAAC,KAArD,CAAlB;AACA,QAAI,QAAJ;;AAEA,QAAI,IAAI,CAAC,QAAL,CAAc,QAAlB,EAA4B;AAC3B,MAAA,QAAQ,GAAG,IAAI,CAAC,GAAL,GAAW,CAAC,KAAK,GAAG,KAAK,UAAd,IAA4B,GAAlD;AACA,KAFD,MAGK;AACJ,MAAA,QAAQ,GAAG,CAAC,KAAK,GAAG,KAAK,UAAd,IAA4B,GAA5B,GAAkC,IAAI,CAAC,KAAlD;AACA;;AAED,WAAO,KAAK,CAAC,KAAN,CAAY,QAAZ,EAAsB,CAAtB,CAAP;AACA,GAdM;AAgBP;;;;;;;AAKO,EAAA,oBAAA,CAAA,SAAA,CAAA,cAAA,GAAP,YAAA;AACC,QAAI,MAAM,GAAW,KAAK,WAA1B;AACA,QAAI,UAAU,GAAW,KAAK,UAA9B;AACA,QAAI,QAAQ,GAAW,KAAK,QAA5B;AAEA,QAAI,GAAG,GAAW,QAAQ,GAAG,UAA7B;AACA,SAAK,IAAL,CAAU,IAAV,GAAiB,KAAK,CAAC,MAAN,CAAa;AAAE,MAAA,CAAC,EAAE,MAAM,GAAG,KAAK,CAAC,GAAN,CAAU,UAAV,CAAd;AAAqC,MAAA,CAAC,EAAE,MAAM,GAAG,KAAK,CAAC,GAAN,CAAU,UAAV;AAAjD,KAAb,IAAyF,KAAK,CAAC,KAAN,CAAY,UAAZ,EAAwB,GAAxB,EAA6B,MAA7B,EAAqC,MAArC,CAA1G;AACA,GAPM;AASP;;;;;;;;;;AAQO,EAAA,oBAAA,CAAA,SAAA,CAAA,iBAAA,GAAP,UAAyB,IAAzB,EAA6C,QAA7C,EAA+D,WAA/D,EAAkF;AACjF,IAAA,QAAQ,GAAG,QAAQ,GAAG,CAAC,WAAW,GAAG,QAAf,IAA2B,IAAI,CAAC,QAAtD;AAEA,QAAI,KAAK,GAAW,KAAK,eAAL,CAAqB,QAArB,CAApB;;AAEA,QAAI,KAAK,CAAC,QAAN,CAAe,KAAK,CAAC,CAArB,KAA2B,KAAK,CAAC,QAAN,CAAe,KAAK,CAAC,CAArB,CAA3B,IAAsD,IAAI,CAAC,OAA/D,EAAwE;AACvE,UAAI,KAAK,GAAW,KAAK,CAAC,OAAN,GAAgB,IAAI,CAAC,KAAL,CAAW,KAAK,CAAC,CAAjB,EAAoB,KAAK,CAAC,CAA1B,CAApC;AACA,UAAI,MAAM,GAAW,MAAM,CAAC,qBAAP,CAA6B,KAAK,CAAC,QAAN,CAAe,IAAI,CAAC,MAApB,IAA8B,IAAI,CAAC,MAAnC,GAA4C,OAAO,CAAC,GAAD,CAAhF,EAAuF,KAAK,WAA5F,CAArB;AAEA,UAAI,eAAe,GAAG,MAAM,CAAC,qBAAP,CAA6B,IAAI,CAAC,WAAlC,EAA+C,KAAK,WAApD,CAAtB;AACA,MAAA,IAAI,CAAC,MAAL,GAAc,CAAd;AAEA,UAAI,WAAW,GAAW,MAAM,CAAC,qBAAP,CAA6B,KAAK,CAAC,QAAN,CAAe,eAAf,IAAkC,eAAlC,GAAoD,KAAK,WAAtF,EAAmG,KAAK,eAAxG,EAAyH,IAAzH,CAA1B;AAEA,MAAA,IAAI,CAAC,IAAL,GAAY,KAAK,CAAC,MAAN,CAAa;AAAE,QAAA,CAAC,EAAE,WAAW,GAAG,KAAK,CAAC,GAAN,CAAU,KAAV,CAAnB;AAAqC,QAAA,CAAC,EAAE,WAAW,GAAG,KAAK,CAAC,GAAN,CAAU,KAAV;AAAtD,OAAb,IAAyF,KAAK,CAAC,MAAN,CAAa;AAAE,QAAA,CAAC,EAAE,MAAM,GAAG,KAAK,CAAC,GAAN,CAAU,KAAV,CAAd;AAAgC,QAAA,CAAC,EAAE,MAAM,GAAG,KAAK,CAAC,GAAN,CAAU,KAAV;AAA5C,OAAb,CAArG;AACA;;AACD,SAAK,gBAAL,CAAsB,IAAtB,EAA4B,QAA5B,EAAsC,CAAtC,EAAyC,CAAzC;AACA,GAjBM;AAmBP;;;;;;;;;;AAQO,EAAA,oBAAA,CAAA,SAAA,CAAA,iBAAA,GAAP,UAAyB,IAAzB,EAAyC,QAAzC,EAA2D,WAA3D,EAA8E;AAE7E,IAAA,QAAQ,GAAG,QAAQ,GAAG,CAAC,WAAW,GAAG,QAAf,IAA2B,IAAI,CAAC,QAAtD;AAEA,QAAI,KAAK,GAAW,KAAK,eAAL,CAAqB,QAArB,CAApB;;AAEA,QAAI,IAAI,CAAC,OAAT,EAAkB;AACjB,UAAI,MAAM,GAAW,KAAK,WAA1B;AACA,UAAI,KAAK,GAAW,KAAK,CAAC,OAAN,GAAgB,IAAI,CAAC,KAAL,CAAW,KAAK,CAAC,CAAjB,EAAoB,KAAK,CAAC,CAA1B,CAApC;AACA,UAAI,UAAU,GAAW,IAAI,CAAC,MAA9B;;AACA,UAAI,IAAI,CAAC,MAAT,EAAiB;AAChB,QAAA,UAAU,GAAG,CAAC,UAAd;AACA;;AACD,MAAA,IAAI,CAAC,MAAL,GAAc,CAAd;AACA,MAAA,IAAI,CAAC,IAAL,GAAY,KAAK,CAAC,MAAN,CAAa;AAAE,QAAA,CAAC,EAAE,MAAM,GAAG,KAAK,CAAC,GAAN,CAAU,KAAV,CAAd;AAAgC,QAAA,CAAC,EAAE,MAAM,GAAG,KAAK,CAAC,GAAN,CAAU,KAAV;AAA5C,OAAb,IAA+E,KAAK,CAAC,MAAN,CAAa;AAAE,QAAA,CAAC,EAAE,CAAC,MAAM,GAAG,UAAV,IAAwB,KAAK,CAAC,GAAN,CAAU,KAAV,CAA7B;AAA+C,QAAA,CAAC,EAAE,CAAC,MAAM,GAAG,UAAV,IAAwB,KAAK,CAAC,GAAN,CAAU,KAAV;AAA1E,OAAb,CAA3F;AACA;;AAED,SAAK,gBAAL,CAAsB,IAAtB,EAA4B,QAA5B,EAAsC,CAAtC,EAAyC,CAAzC;AACA,GAlBM;AAoBP;;;;;;;;;;AAQO,EAAA,oBAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,MAApB,EAAoC,QAApC,EAAsD,WAAtD,EAAyE;AACxE,QAAI,QAAQ,GAAG,GAAf;;AACA,QAAI,MAAM,YAAY,UAAtB,EAAkC;AACjC,MAAA,QAAQ,GAAG,MAAM,CAAC,QAAlB;AACA;;AAED,IAAA,QAAQ,GAAG,QAAQ,GAAG,CAAC,WAAW,GAAG,QAAf,IAA2B,QAAjD;AAEA,QAAI,KAAK,GAAW,KAAK,eAAL,CAAqB,QAArB,CAApB;AACA,QAAI,MAAM,GAAW,KAAK,WAA1B;AACA,QAAI,KAAK,GAAW,KAAK,CAAC,OAAN,GAAgB,IAAI,CAAC,KAAL,CAAW,KAAK,CAAC,CAAjB,EAAoB,KAAK,CAAC,CAA1B,CAApC;AAEA,IAAA,KAAK,GAAG;AAAE,MAAA,CAAC,EAAE,MAAM,GAAG,KAAK,CAAC,GAAN,CAAU,KAAV,CAAd;AAAgC,MAAA,CAAC,EAAE,MAAM,GAAG,KAAK,CAAC,GAAN,CAAU,KAAV;AAA5C,KAAR;AAEA,SAAK,YAAL,CAAkB,MAAlB,EAA0B,KAA1B;AAEA,SAAK,gBAAL,CAAsB,MAAtB,EAA8B,QAA9B,EAAwC,CAAxC,EAA2C,CAA3C;AACA,GAjBM;AAmBP;;;;;;;;;;AAQO,EAAA,oBAAA,CAAA,SAAA,CAAA,kBAAA,GAAP,UAA0B,KAA1B,EAAqD,QAArD,EAAuE,WAAvE,EAA4F,QAA5F,EAA6G;AAE5G,QAAI,CAAC,KAAK,CAAC,QAAN,CAAe,QAAf,CAAL,EAA+B;AAC9B,MAAA,QAAQ,GAAG,KAAK,CAAC,QAAjB;AACA;;AAED,IAAA,QAAQ,GAAG,QAAQ,GAAG,CAAC,WAAW,GAAG,QAAf,IAA2B,QAAjD;AAEA,IAAA,KAAK,CAAC,WAAN,CAAkB,KAAK,eAAL,CAAqB,QAArB,CAAlB,EAAkD,KAAK,WAAvD;AACA,IAAA,KAAK,CAAC,MAAN,GAAe,CAAf;AAEA,SAAK,gBAAL,CAAsB,KAAtB,EAA6B,QAA7B,EAAuC,KAAK,gBAA5C,EAA8D,KAAK,gBAAnE;AACA,GAZM;AAcP;;;;;;;;;AAOO,EAAA,oBAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,KAApB,EAAiC;AAChC,WAAO,IAAP;AACA,GAFM;;AASP,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,YAAX,EAAqB;AAUrB;;;SAGA,eAAA;AACC,aAAO,KAAK,gBAAL,CAAsB,YAAtB,CAAP;AACA,KAfoB;;AALrB;;;;;SAKA,aAAsB,KAAtB,EAAmC;AAClC;AACA,UAAI,KAAK,gBAAL,CAAsB,YAAtB,EAAoC,KAApC,CAAJ,EAAgD;AAC/C,aAAK,mBAAL;;AACA,YAAI,KAAK,IAAT,EAAe;AACd,eAAK,IAAL,CAAU,gBAAV;AACA;AACD;AACD,KARoB;oBAAA;;AAAA,GAArB;AAsBA,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,UAAX,EAAmB;AAUnB;;;SAGA,eAAA;AACC,aAAO,KAAK,gBAAL,CAAsB,UAAtB,CAAP;AACA,KAfkB;;AALnB;;;;;SAKA,aAAoB,KAApB,EAAiC;AAChC;AACA,UAAI,KAAK,gBAAL,CAAsB,UAAtB,EAAkC,KAAlC,CAAJ,EAA8C;AAC7C,aAAK,mBAAL;;AACA,YAAI,KAAK,IAAT,EAAe;AACd,eAAK,IAAL,CAAU,gBAAV;AACA;AACD;AACD,KARkB;oBAAA;;AAAA,GAAnB;AAkBA;;;;;;;;;;AASO,EAAA,oBAAA,CAAA,SAAA,CAAA,oBAAA,GAAP,UAA4B,aAA5B,EAAmD,WAAnD,EAAwE,MAAxE,EAAmG,WAAnG,EAAmI,YAAnI,EAAwJ;AACvJ,QAAI,IAAI,GAAW,EAAnB;;AACA,QAAI,KAAK,CAAC,QAAN,CAAe,aAAf,KAAiC,KAAK,CAAC,QAAN,CAAe,WAAf,CAArC,EAAkE;AAEjE,UAAI,CAAC,KAAK,CAAC,QAAN,CAAe,MAAf,CAAL,EAA6B;AAC5B,QAAA,MAAM,GAAG,KAAK,MAAd;AACA;;AAED,MAAA,aAAa,GAAG,KAAK,CAAC,GAAN,CAAU,aAAV,EAAyB,KAAK,IAAL,CAAU,KAAnC,CAAhB;AACA,MAAA,WAAW,GAAG,KAAK,CAAC,GAAN,CAAU,WAAV,EAAuB,KAAK,IAAL,CAAU,GAAjC,CAAd;;AAEA,UAAI,WAAW,GAAG,aAAlB,EAAiC;AAChC,QAAA,WAAW,GAAG,aAAd;AACA;;AAED,UAAI,WAAW,GAAW,MAAM,CAAC,qBAAP,CAA6B,MAA7B,EAAqC,KAAK,WAA1C,CAA1B;AACA,UAAI,gBAAgB,GAAW,MAAM,CAAC,qBAAP,CAA6B,WAA7B,EAA0C,KAAK,WAA/C,EAA4D,IAA5D,CAA/B;AAEA,UAAI,UAAU,GAAW,KAAK,eAAL,CAAqB,aAArB,CAAzB;AACA,UAAI,QAAQ,GAAW,KAAK,eAAL,CAAqB,WAArB,CAAvB;AAEA,UAAI,GAAG,GAAW,QAAQ,GAAG,UAA7B;AAEA,MAAA,IAAI,GAAG,KAAK,CAAC,GAAN,CAAU,UAAV,EAAsB,GAAtB,EAA2B,WAA3B,EAAwC,gBAAxC,EAA0D,WAA1D,EAAuE,YAAvE,CAAP;AACA;;AAED,WAAO,IAAP;AACA,GA3BM;AA6BP;;;;;;;AAKO,EAAA,oBAAA,CAAA,SAAA,CAAA,UAAA,GAAP,YAAA;AACC,WAAO,IAAI,YAAJ,EAAP;AACA,GAFM;AAIP;;;;;;;AAKO,EAAA,oBAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UAAkB,IAAlB,EAA4B;AAC3B,WAAO,IAAI,gBAAJ,CAAqB,IAArB,CAAP;AACA,GAFM;AAIP;;;;;;;AAKO,EAAA,oBAAA,CAAA,SAAA,CAAA,WAAA,GAAP,YAAA;AACC,WAAO,IAAI,iBAAJ,EAAP;AACA,GAFM;AAKP;;;;;;;;;AAOO,EAAA,oBAAA,CAAA,SAAA,CAAA,eAAA,GAAP,UAAuB,KAAvB,EAAoC;AACnC,QAAI,KAAK,GAAG,KAAK,CAAC,eAAN,CAAsB,KAAK,CAAC,QAAN,CAAe,KAAf,CAAtB,EAA6C,KAAK,UAAlD,EAA8D,KAAK,QAAnE,CAAZ;AACA,WAAO,KAAK,oBAAL,CAA0B,CAAC,KAAK,GAAG,KAAK,UAAd,IAA4B,GAA5B,GAAkC,KAAK,UAAjE,CAAP;AACA,GAHM;;AAIR,SAAA,oBAAA;AAAC,CAniBD,CAA0C,YAA1C,CAAA;;;AAqiBA;;;;;;;AAMA,QAAQ,CAAC,iBAAT,CAA2B,sBAA3B,IAAqD,oBAArD","sourcesContent":["/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { AxisRendererRadial } from \"./AxisRendererRadial\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { GridCircular } from \"./GridCircular\";\r\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularProperties extends IAxisRendererProperties {\r\n\r\n\t/**\r\n\t * Start angle of the circular axis in degrees (0-360).\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the circular axis in degrees (0-360).\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Outer radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Specifies if axis should use it's own start/end angles or the ones set on chart.\r\n\t */\r\n\tuseChartAngles?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererCircularAdapters extends IAxisRendererAdapters, IAxisRendererCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for circular axis.\r\n */\r\nexport class AxisRendererCircular extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererCircularEvents;\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t */\r\n\tpublic _gridType: GridCircular;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t */\r\n\tpublic _fillType: AxisFillCircular;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t */\r\n\tpublic _labelType: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\r\n\t/**\r\n\t * Y axis renderer\r\n\t */\r\n\tpublic axisRendererY: AxisRendererRadial;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\t// axis.layout = \"none\"; // does not trigger redraw when size changes\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.className = \"AxisRendererCircular\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.useChartAngles = true;\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.grid.template.location = 0;\r\n\r\n\t\tthis.labels.template.location = 0;\r\n\t\tthis.labels.template.radius = 15;\r\n\r\n\t\tthis.ticks.template.location = 0;\r\n\t\tthis.ticks.template.pixelPerfect = false;\r\n\t\tthis.tooltipLocation = 0;\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.isMeasured = false;\r\n\r\n\t\t// modify x and y so that tooltip would always be on circle\r\n\t\tlet tooltip = axis.tooltip;\r\n\r\n\t\ttooltip.adapter.add(\"dx\", (x, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\r\n\t\t});\r\n\r\n\t\ttooltip.adapter.add(\"dy\", (y, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn 2 * Math.PI * this.pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"radius\", value, false, false, 10, false)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"innerRadius\", value, false, false, 10, false)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\tlet chart = <RadarChart>this.chart;\t\t\r\n\t\tlet innerRadius = this.getPropertyValue(\"innerRadius\");\r\n\t\tif(chart){\r\n\t\t\tif (!$type.hasValue(innerRadius)) {\r\n\t\t\t\tinnerRadius = chart.innerRadius;\r\n\r\n\t\t\t\tif (innerRadius instanceof Percent && chart) {\r\n\t\t\t\t\tinnerRadius = percent(innerRadius.value * chart.innerRadiusModifyer * 100)\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (innerRadius instanceof Percent && chart) {\r\n\t\t\t\t\tlet mr = chart.mr;\r\n\t\t\t\t\tlet value = innerRadius.value;\r\n\t\t\t\t\tvalue = Math.max(mr * value, mr - Math.min(chart.plotContainer.innerHeight, chart.plotContainer.innerWidth)) / mr;\r\n\t\t\t\t\tinnerRadius = percent(value * 100);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn innerRadius;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if axis should use its own `startAngle` and `endAngle` or\r\n\t * inherit them from relative properties from chart.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Use chart's angles\r\n\t */\r\n\tpublic set useChartAngles(value: boolean) {\r\n\t\tthis.setPropertyValue(\"useChartAngles\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use chart angles\r\n\t */\r\n\tpublic get useChartAngles(): boolean {\r\n\t\treturn this.getPropertyValue(\"useChartAngles\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @param position2  Position (0-1) Position on the second axis\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number, position2?: number): IPoint {\r\n\r\n\t\tif (!$type.isNumber(position2)) {\r\n\t\t\tposition2 = 1;\r\n\t\t}\r\n\r\n\t\tlet coordinate: number = this.positionToCoordinate(position);\r\n\t\tlet angle: number = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\r\n\t\tlet radius = this.pixelRadius;\r\n\t\tlet innerRadius = this.pixelInnerRadius;\r\n\r\n\t\tif (this.axisRendererY) {\r\n\t\t\tlet realRadius = $math.fitToRange(this.axisRendererY.positionToCoordinate(position2), 0, Infinity)\r\n\t\t\tlet point = { x: realRadius * $math.cos(angle), y: realRadius * $math.sin(angle) };\r\n\t\t\treturn point;\r\n\t\t}\r\n\r\n\t\treturn { x: $math.cos(angle) * innerRadius + (radius - innerRadius) * $math.cos(angle) * position2, y: $math.sin(angle) * innerRadius + (radius - innerRadius) * $math.sin(angle) * position2 };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) on axis to angle in degrees (0-360).\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Angle (0-360)\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\r\n\t\tlet angle: number;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tangle = this.startAngle + (axis.end - position) * arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tangle = this.startAngle + (position - axis.start) * arc;\r\n\t\t}\r\n\r\n\t\treturn $math.round(angle, 3);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts angle on axis to relative position(0-1).\r\n\t *\r\n\t * @param angle Angle in degrees\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic angleToPosition(angle: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\t\tlet position: number\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tposition = axis.end - (angle - this.startAngle) / arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tposition = (angle - this.startAngle) / arc + axis.start;\r\n\t\t}\r\n\r\n\t\treturn $math.round(position, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\t\tthis.line.path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius, radius);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: GridCircular, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif ($type.isNumber(point.x) && $type.isNumber(point.y) && grid.element) {\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet radius: number = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\r\n\r\n\t\t\tlet gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\r\n\t\t\tgrid.zIndex = 0;\r\n\r\n\t\t\tlet innerRadius: number = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadiusReal, true);\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick         Tick element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet tickLength: number = tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength = -tickLength;\r\n\t\t\t}\r\n\t\t\ttick.zIndex = 1;\r\n\t\t\ttick.path = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) + $path.lineTo({ x: (radius + tickLength) * $math.cos(angle), y: (radius + tickLength) * $math.sin(angle) });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions axis bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\t\tlet location = 0.5;\r\n\t\tif (bullet instanceof AxisBullet) {\r\n\t\t\tlocation = bullet.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\r\n\t\tpoint = { x: radius * $math.cos(angle), y: radius * $math.sin(angle) }\r\n\r\n\t\tthis.positionItem(bullet, point);\r\n\r\n\t\tthis.toggleVisibility(bullet, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlabel.fixPosition(this.positionToAngle(position), this.pixelRadius);\r\n\t\tlabel.zIndex = 2;\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point Point coordinates\r\n\t * @return Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number, radius?: number | Percent, innerRadius?: number | Percent, cornerRadius?: number): string {\r\n\t\tlet path: string = \"\";\r\n\t\tif ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\r\n\r\n\t\t\tif (!$type.hasValue(radius)) {\r\n\t\t\t\tradius = this.radius;\r\n\t\t\t}\r\n\r\n\t\t\tstartPosition = $math.max(startPosition, this.axis.start);\r\n\t\t\tendPosition = $math.min(endPosition, this.axis.end);\r\n\r\n\t\t\tif (endPosition < startPosition) {\r\n\t\t\t\tendPosition = startPosition;\r\n\t\t\t}\r\n\r\n\t\t\tlet pixelRadius: number = $utils.relativeRadiusToValue(radius, this.pixelRadius);\r\n\t\t\tlet pixelInnerRadius: number = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\r\n\r\n\t\t\tlet startAngle: number = this.positionToAngle(startPosition);\r\n\t\t\tlet endAngle: number = this.positionToAngle(endPosition);\r\n\r\n\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\tpath = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new GridCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFillCircular(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\tlet angle = $math.fitAngleToRange($math.getAngle(point), this.startAngle, this.endAngle);\r\n\t\treturn this.coordinateToPosition((angle - this.startAngle) / 360 * this.axisLength);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}