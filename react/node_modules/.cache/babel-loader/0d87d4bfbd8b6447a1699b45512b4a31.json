{"ast":null,"code":"/**\r\n * [[AMElement]] represents any SVG element and related functionality.\r\n */\nimport * as $dom from \"../utils/DOM\";\nimport * as $object from \"../utils/Object\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A base class for all SVG elements. Provides low-level DOM functionality.\r\n *\r\n * All visual elements extend this class.\r\n */\n\nvar AMElement =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor creates a new element or uses the one that was passed in.\r\n   *\r\n   * @param element Element reference node type\r\n   */\n  function AMElement(element) {\n    /**\r\n     * Indicates if the element was already disposed.\r\n     */\n    this._isDisposed = false;\n    /**\r\n     * Current X coordinate.\r\n     */\n\n    this._x = 0;\n    /**\r\n     * Current Y coordinate.\r\n     */\n\n    this._y = 0;\n    /**\r\n     *\r\n     */\n\n    this._rotationY = 0;\n    /**\r\n     *\r\n     */\n\n    this._rotationX = 0;\n    /**\r\n     * Current rotation.\r\n     */\n\n    this._rotation = 0;\n    /**\r\n     * Current scale.\r\n     */\n\n    this._scale = 1;\n\n    if (typeof element === \"string\") {\n      this.node = document.createElementNS($dom.SVGNS, element);\n    } else {\n      this.node = element;\n    }\n  }\n  /**\r\n   * Removes element's node from DOM.\r\n   */\n\n\n  AMElement.prototype.removeNode = function () {\n    if (this.node) {\n      if (this.node.parentNode) {\n        this.node.parentNode.removeChild(this.node);\n      }\n    }\n  };\n\n  Object.defineProperty(AMElement.prototype, \"transformString\", {\n    /**\r\n     * Returns `transform` attribute of the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Transform attribute value\r\n     */\n    get: function get() {\n      if (this.node) {\n        return this._transformString;\n        /*\r\n        const value = this.node.getAttribute(\"transform\");\r\n              if (value !== null) {\r\n            return value;\r\n        }*/\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Appply position, rotation and scale properties via elemen's `transform`\r\n   * property\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  AMElement.prototype.transform = function () {\n    var transfromString = \"translate(\" + this._x + \",\" + this._y + \")\";\n\n    if (this._scale != 1) {\n      transfromString += (transfromString ? \" \" : \"\") + \"scale(\" + this._scale + \")\";\n    }\n\n    if (this._rotation != 0) {\n      var rotateString = \"rotate(\" + this._rotation + \")\";\n\n      if (this._rotationX && this._rotationY) {\n        rotateString = \"rotate(\" + this._rotation + \" \" + this._rotationX + \" \" + this._rotationY + \")\";\n      }\n\n      transfromString += (transfromString ? \" \" : \"\") + rotateString;\n    }\n\n    this._transformString = transfromString;\n    this.node.setAttribute(\"transform\", transfromString);\n  };\n  /**\r\n   * Returns bounding box of the element.\r\n   *\r\n   * ATTENTION: Bounding box calculations are extremely costly so should be\r\n   * used sparingly and cached whenever possible.\r\n   *\r\n   * @return Bounding rectangle\r\n   */\n\n\n  AMElement.prototype.getBBox = function () {\n    var bbox = {\n      width: 0,\n      height: 0,\n      x: 0,\n      y: 0\n    }; // FF would fail if getBBox() is called without node added to parent\n\n    if (this.node && this.node.parentNode) {\n      try {\n        // again for ff. TODO: check if this doesn't slow down\n        var svgbbox = this.node.getBBox();\n        bbox.x = svgbbox.x;\n        bbox.y = svgbbox.y;\n        bbox.width = svgbbox.width;\n        bbox.height = svgbbox.height;\n      } catch (err) {}\n    }\n\n    return bbox;\n  };\n  /**\r\n   * Moves the element to new coordinates.\r\n   *\r\n   * @param x  Target X\r\n   * @param y  Target Y\r\n   */\n\n\n  AMElement.prototype.moveTo = function (point) {\n    if (point) {\n      var x = point.x;\n      var y = point.y;\n\n      if (this._x != x || this._y != y) {\n        this._x = x;\n        this._y = y;\n        this.transform();\n      }\n    }\n  };\n\n  Object.defineProperty(AMElement.prototype, \"content\", {\n    /**\r\n     * Returns element's contents as SVG markup.\r\n     *\r\n     * @return Contents\r\n     */\n    get: function get() {\n      // @todo Do not use `innerHTML` as this is not reliable and will not work on all browsers\n      return this.node.innerHTML || \"\";\n    },\n\n    /**\r\n     * Element's SVG contents.\r\n     *\r\n     * @param value Contents\r\n     */\n    set: function set(value) {\n      // @todo Do not use `innerHTML` as this is not reliable and will not work on all browsers\n      this.node.innerHTML = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AMElement.prototype, \"textContent\", {\n    /**\r\n     * @return Text contents\r\n     */\n    get: function get() {\n      return this.node.textContent || \"\";\n    },\n\n    /**\r\n     * Text contents of the SVG element.\r\n     *\r\n     * @param value Text contents\r\n     */\n    set: function set(value) {\n      this.node.textContent = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AMElement.prototype, \"x\", {\n    /**\r\n     * @return X coordinate (px)\r\n     */\n    get: function get() {\n      return this._x;\n    },\n\n    /**\r\n     * Element's X position in pixels.\r\n     *\r\n     * @param value  X coordinate (px)\r\n     */\n    set: function set(value) {\n      if (this._x != value) {\n        this._x = value;\n        this.transform();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AMElement.prototype, \"y\", {\n    /**\r\n     * @return Y coordinate (px)\r\n     */\n    get: function get() {\n      return this._y;\n    },\n\n    /**\r\n     * Element's Y position in pixels.\r\n     *\r\n     * @param value Y coordinate (px)\r\n     */\n    set: function set(value) {\n      if (this._y != value) {\n        this._y = value;\n        this.transform();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AMElement.prototype, \"rotation\", {\n    /**\r\n     * @return Rotation\r\n     */\n    get: function get() {\n      return this._rotation;\n    },\n\n    /**\r\n     * Element's rotation in degrees.\r\n     *\r\n     * @param value Rotation\r\n     */\n    set: function set(angle) {\n      if (this._rotation != angle) {\n        this._rotation = angle;\n        this.transform();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AMElement.prototype, \"rotationX\", {\n    /**\r\n     * @ignore\r\n     */\n    get: function get() {\n      return this._rotationX;\n    },\n\n    /**\r\n     * @ignore\r\n     */\n    set: function set(x) {\n      if (this._rotationX != x) {\n        this._rotationX = x;\n        this.transform();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AMElement.prototype, \"rotationY\", {\n    /**\r\n     * @ignore\r\n     */\n    get: function get() {\n      return this._rotationY;\n    },\n\n    /**\r\n     * @ignore\r\n     */\n    set: function set(y) {\n      if (this._rotationY != y) {\n        this._rotationY = y;\n        this.transform();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AMElement.prototype, \"scale\", {\n    /**\r\n     * @return Scale\r\n     */\n    get: function get() {\n      return this._scale;\n    },\n\n    /**\r\n     * Element's scale where 1 is original size.\r\n     *\r\n     * Setting to 0.5 will reduce element's size by 50%, 2 will make element\r\n     * twice as large, etc.\r\n     *\r\n     * @param value Scale\r\n     */\n    set: function set(value) {\n      if (this._scale != value) {\n        this._scale = value;\n        this.transform();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Removes an attribute from element.\r\n   *\r\n   * @param attribute  Attribute to remove\r\n   */\n\n  AMElement.prototype.removeAttr = function (attribute) {\n    this.node.removeAttribute(attribute);\n  };\n  /**\r\n   * Sets a set of attributes on a element.\r\n   *\r\n   * @param attributes  An object with attribute names (key) and values\r\n   * @return The same element\r\n   */\n\n\n  AMElement.prototype.attr = function (attributes) {\n    var _this = this;\n\n    $object.each(attributes, function (attributeName, attributeValue) {\n      if (!$type.hasValue(attributeValue)) {\n        _this.node.removeAttribute(attributeName);\n      } else {\n        // this is for performance testing\n        //if(attributeValue == this.node.getAttribute(attributeName)){\n        //\tconsole.log(attributeName, attributeValue)\n        //}\n        _this.node.setAttribute(attributeName, attributeValue);\n      }\n    });\n    return this;\n  };\n  /**\r\n   * Returns a value of a node attribute.\r\n   *\r\n   * @param attribute  Attribute name\r\n   * @return Attribute value\r\n   */\n\n\n  AMElement.prototype.getAttr = function (attribute) {\n    return this.node.getAttribute(attribute);\n  };\n  /**\r\n   * Sets a single attribute of the element's node using namesspace.\r\n   *\r\n   * @param ns         Namespace\r\n   * @param attribute  Attribute\r\n   * @param value      Value\r\n   * @return The same element\r\n   */\n\n\n  AMElement.prototype.attrNS = function (ns, attribute, value) {\n    this.node.setAttributeNS(ns, attribute, value);\n    return this;\n  };\n  /**\r\n   * Returns a namespaced attribute value from node.\r\n   *\r\n   * @param ns         Namespace\r\n   * @param attribute  Attribute\r\n   * @return Attribute value\r\n   */\n\n\n  AMElement.prototype.getAttrNS = function (ns, attribute) {\n    return this.node.getAttributeNS(ns, attribute);\n  };\n  /**\r\n   * Removes `style` attribute from node.\r\n   *\r\n   * @param attribute  Attribute to remove\r\n   */\n\n\n  AMElement.prototype.removeStyle = function (attribute) {\n    // @todo Review because it's a bit messy and maybe not needed (pratically not used)\n    this.node.style[attribute] = null;\n    delete this.node.style[attribute];\n  };\n  /**\r\n   * Returns style attribute value.\r\n   *\r\n   * @param attribute  Style attribute value\r\n   * @return Attribute value\r\n   */\n\n\n  AMElement.prototype.getStyle = function (attribute) {\n    // @todo Review because it's a bit messy and maybe not needed (pratically not used)\n    return this.node.style[attribute];\n  };\n  /**\r\n   * Adds style attributes to element's node.\r\n   *\r\n   * @param attributes  Object containing attribute: value pairs\r\n   * @return The same element\r\n   */\n\n\n  AMElement.prototype.addStyle = function (attributes) {\n    var _this = this; // @todo Review because it's a bit messy and maybe not needed (pratically not used)\n\n\n    $object.each(attributes, function (attributeName, attributeValue) {\n      if (!$type.hasValue(attributeValue)) {\n        _this.removeStyle(attributeName);\n      } else {\n        _this.node.style[attributeName] = attributeValue;\n      }\n    });\n    return this;\n  };\n  /**\r\n   * Adds a class to element.\r\n   *\r\n   * @param name  Class name\r\n   */\n\n\n  AMElement.prototype.addClass = function (name) {\n    $dom.addClass(this.node, name);\n  };\n  /**\r\n   * Removes a class from element.\r\n   *\r\n   * @param name Class name\r\n   */\n\n\n  AMElement.prototype.removeClass = function (name) {\n    $dom.removeClass(this.node, name);\n  };\n  /**\r\n   * Sets a class name on element.\r\n   *\r\n   * @param name  Class name\r\n   */\n\n\n  AMElement.prototype.setClass = function (name) {\n    this.node.setAttribute(\"class\", name);\n  };\n  /**\r\n   * Removes all element's child nodes, basically leaving it empty.\r\n   */\n\n\n  AMElement.prototype.removeChildNodes = function () {\n    // remove all children\n    while (this.node.childNodes.length > 0) {\n      this.node.removeChild(this.node.firstChild);\n    }\n  };\n  /**\r\n   * Was this element already been disposed?\r\n   *\r\n   * @return Disposed?\r\n   */\n\n\n  AMElement.prototype.isDisposed = function () {\n    return this._isDisposed;\n  };\n  /**\r\n   * Disposes element.\r\n   */\n\n\n  AMElement.prototype.dispose = function () {\n    this.removeNode();\n  };\n\n  return AMElement;\n}();\n\nexport { AMElement };","map":{"version":3,"sources":["../../../../../src/.internal/core/rendering/AMElement.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * [[AMElement]] represents any SVG element and related functionality.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IRectangle } from \"../defs/IRectangle\";\r\nimport { IDisposer } from \"../utils/Disposer\";\r\nimport { IPoint } from \"../defs/IPoint\";\r\nimport * as $dom from \"../utils/DOM\";\r\nimport * as $object from \"../utils/Object\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines available SVG attributes.\r\n */\r\nexport type SVGAttribute =\r\n\t\"accent-height\" | \"accumulate\" | \"additive\" | \"alignment-baseline\" | \"allowReorder\" | \"alphabetic\" | \"amplitude\" | \"arabic-form\" | \"aria-checked\" | \"aria-describedby\" | \"aria-hidden\" | \"aria-label\" | \"aria-labelledby\" | \"aria-live\" | \"aria-controls\" | \"aria-orientation\" | \"aria-valuemax\" | \"aria-valuemin\" | \"aria-valuenow\" | \"aria-valuetext\" | \"ascent\" | \"attributeName\" | \"attributeType\" | \"autoReverse\" | \"azimuth\" | \"baseFrequency\" | \"baseline-shift\" | \"baseProfile\" | \"bbox\" | \"begin\" | \"bias\" | \"by\" | \"calcMode\" | \"cap-height\" | \"class\" | \"clip\" | \"clipPathUnits\" | \"clip-path\" | \"clip-rule\" | \"color\" | \"color-interpolation\" | \"color-interpolation-filters\" | \"color-profile\" | \"color-rendering\" | \"contentScriptType\" | \"contentStyleType\" | \"cursor\" | \"cx\" | \"cy\" | \"d\" | \"decelerate\" | \"descent\" | \"diffuseConstant\" | \"direction\" | \"display\" | \"divisor\" | \"dominant-baseline\" | \"dur\" | \"dx\" | \"dy\" | \"edgeMode\" | \"elevation\" | \"enable-background\" | \"end\" | \"exponent\" | \"externalResourcesRequired\" | \"fill\" | \"fill-opacity\" | \"fill-rule\" | \"filter\" | \"filterRes\" | \"filterUnits\" | \"flood-color\" | \"flood-opacity\" | \"focusable\" | \"font-family\" | \"font-size\" | \"font-size-adjust\" | \"font-stretch\" | \"font-style\" | \"font-variant\" | \"font-weight\" | \"format\" | \"from\" | \"fx\" | \"fy\" | \"g1\" | \"g2\" | \"glyph-name\" | \"glyph-orientation-horizontal\" | \"glyph-orientation-vertical\" | \"glyphRef\" | \"gradientTransform\" | \"gradientUnits\" | \"hanging\" | \"height\" | \"href\" | \"horiz-adv-x\" | \"horiz-origin-x\" | \"id\" | \"ideographic\" | \"image-rendering\" | \"in\" | \"in2\" | \"intercept\" | \"k\" | \"k1\" | \"k2\" | \"k3\" | \"k4\" | \"kernelMatrix\" | \"kernelUnitLength\" | \"kerning\" | \"keyPoints\" | \"keySplines\" | \"keyTimes\" | \"lang\" | \"lengthAdjust\" | \"letter-spacing\" | \"lighting-color\" | \"limitingConeAngle\" | \"local\" | \"marker-end\" | \"marker-mid\" | \"marker-start\" | \"markerHeight\" | \"markerUnits\" | \"markerWidth\" | \"mask\" | \"maskContentUnits\" | \"maskUnits\" | \"mathematical\" | \"max\" | \"media\" | \"method\" | \"min\" | \"mode\" | \"name\" | \"numOctaves\" | \"offset\" | \"onabort\" | \"onactivate\" | \"onbegin\" | \"onclick\" | \"onend\" | \"onerror\" | \"onfocusin\" | \"onfocusout\" | \"onload\" | \"onmousedown\" | \"onmousemove\" | \"onmouseout\" | \"onmouseover\" | \"onmouseup\" | \"onrepeat\" | \"onresize\" | \"onscroll\" | \"onunload\" | \"onzoom\" | \"opacity\" | \"operator\" | \"order\" | \"orient\" | \"orientation\" | \"origin\" | \"overflow\" | \"overline-position\" | \"overline-thickness\" | \"panose-1\" | \"paint-order\" | \"pathLength\" | \"patternContentUnits\" | \"patternTransform\" | \"patternUnits\" | \"pointer-events\" | \"points\" | \"pointsAtX\" | \"pointsAtY\" | \"pointsAtZ\" | \"preserveAlpha\" | \"preserveAspectRatio\" | \"primitiveUnits\" | \"r\" | \"radius\" | \"refX\" | \"refY\" | \"rendering-intent\" | \"repeatCount\" | \"repeatDur\" | \"requiredExtensions\" | \"requiredFeatures\" | \"restart\" | \"result\" | \"role\" | \"rotate\" | \"rx\" | \"ry\" | \"scale\" | \"seed\" | \"shape-rendering\" | \"slope\" | \"spacing\" | \"specularConstant\" | \"specularExponent\" | \"speed\" | \"spreadMethod\" | \"startOffset\" | \"stdDeviation\" | \"stemh\" | \"stemv\" | \"stitchTiles\" | \"stop-color\" | \"stop-opacity\" | \"strikethrough-position\" | \"strikethrough-thickness\" | \"string\" | \"stroke\" | \"stroke-dasharray\" | \"stroke-dashoffset\" | \"stroke-linecap\" | \"stroke-linejoin\" | \"stroke-miterlimit\" | \"stroke-opacity\" | \"stroke-width\" | \"style\" | \"surfaceScale\" | \"systemLanguage\" | \"tabindex\" | \"tableValues\" | \"target\" | \"targetX\" | \"targetY\" | \"text-anchor\" | \"text-decoration\" | \"text-rendering\" | \"textLength\" | \"to\" | \"transform\" | \"type\" | \"u1\" | \"u2\" | \"underline-position\" | \"underline-thickness\" | \"unicode\" | \"unicode-bidi\" | \"unicode-range\" | \"units-per-em\" | \"v-alphabetic\" | \"v-hanging\" | \"v-ideographic\" | \"v-mathematical\" | \"values\" | \"version\" | \"vert-adv-y\" | \"vert-origin-x\" | \"vert-origin-y\" | \"viewBox\" | \"viewTarget\" | \"visibility\" | \"width\" | \"widths\" | \"word-spacing\" | \"writing-mode\" | \"x\" | \"x-height\" | \"x1\" | \"x2\" | \"xChannelSelector\" | \"xlink:actuate\" | \"xlink:arcrole\" | \"xlink:href\" | \"xlink:role\" | \"xlink:show\" | \"xlink:title\" | \"xlink:type\" | \"xml:base\" | \"xml:lang\" | \"xml:space\" | \"y\" | \"y1\" | \"y2\" | \"yChannelSelector\" | \"z\" | \"zoomAndPan\";\r\n\r\n/**\r\n * Represents an interface for SVG attributes.\r\n *\r\n * This is a collection of all properties that an SVG element can have.\r\n */\r\nexport interface ISVGAttribute {\r\n\t\"accent-height\"?: any;\r\n\t\"accumulate\"?: any;\r\n\t\"additive\"?: any;\r\n\t\"alignment-baseline\"?: any;\r\n\t\"allowReorder\"?: any;\r\n\t\"alphabetic\"?: any;\r\n\t\"amplitude\"?: any;\r\n\t\"arabic-form\"?: any;\r\n\t\"aria-checked\"?: any;\r\n\t\"aria-describedby\"?: any;\r\n\t\"aria-hidden\"?: any;\r\n\t\"aria-label\"?: any;\r\n\t\"aria-labelledby\"?: any;\r\n\t\"aria-live\"?: any;\r\n\t\"aria-controls\"?: any;\r\n\t\"aria-orientation\"?: any;\r\n\t\"aria-valuemax\"?: any;\r\n\t\"aria-valuemin\"?: any;\r\n\t\"aria-valuenow\"?: any;\r\n\t\"aria-valuetext\"?: any;\r\n\t\"ascent\"?: any;\r\n\t\"attributeName\"?: any;\r\n\t\"attributeType\"?: any;\r\n\t\"autoReverse\"?: any;\r\n\t\"azimuth\"?: any;\r\n\t\"baseFrequency\"?: any;\r\n\t\"baseline-shift\"?: any;\r\n\t\"baseProfile\"?: any;\r\n\t\"bbox\"?: any;\r\n\t\"begin\"?: any;\r\n\t\"bias\"?: any;\r\n\t\"by\"?: any;\r\n\t\"calcMode\"?: any;\r\n\t\"cap-height\"?: any;\r\n\t\"class\"?: any;\r\n\t\"clip\"?: any;\r\n\t\"clipPathUnits\"?: any;\r\n\t\"clip-path\"?: any;\r\n\t\"clip-rule\"?: any;\r\n\t\"color\"?: any;\r\n\t\"color-interpolation\"?: any;\r\n\t\"color-interpolation-filters\"?: any;\r\n\t\"color-profile\"?: any;\r\n\t\"color-rendering\"?: any;\r\n\t\"contentScriptType\"?: any;\r\n\t\"contentStyleType\"?: any;\r\n\t\"cursor\"?: any;\r\n\t\"cx\"?: any;\r\n\t\"cy\"?: any;\r\n\t\"d\"?: any;\r\n\t\"decelerate\"?: any;\r\n\t\"descent\"?: any;\r\n\t\"diffuseConstant\"?: any;\r\n\t\"direction\"?: any;\r\n\t\"display\"?: any;\r\n\t\"divisor\"?: any;\r\n\t\"dominant-baseline\"?: any;\r\n\t\"dur\"?: any;\r\n\t\"dx\"?: any;\r\n\t\"dy\"?: any;\r\n\t\"edgeMode\"?: any;\r\n\t\"elevation\"?: any;\r\n\t\"enable-background\"?: any;\r\n\t\"end\"?: any;\r\n\t\"exponent\"?: any;\r\n\t\"externalResourcesRequired\"?: any;\r\n\t\"fill\"?: any;\r\n\t\"fill-opacity\"?: any;\r\n\t\"fill-rule\"?: any;\r\n\t\"filter\"?: any;\r\n\t\"filterRes\"?: any;\r\n\t\"filterUnits\"?: any;\r\n\t\"flood-color\"?: any;\r\n\t\"flood-opacity\"?: any;\r\n\t\"focusable\"?: any;\r\n\t\"font-family\"?: any;\r\n\t\"font-size\"?: any;\r\n\t\"font-size-adjust\"?: any;\r\n\t\"font-stretch\"?: any;\r\n\t\"font-style\"?: any;\r\n\t\"font-variant\"?: any;\r\n\t\"font-weight\"?: any;\r\n\t\"format\"?: any;\r\n\t\"from\"?: any;\r\n\t\"fx\"?: any;\r\n\t\"fy\"?: any;\r\n\t\"g1\"?: any;\r\n\t\"g2\"?: any;\r\n\t\"glyph-name\"?: any;\r\n\t\"glyph-orientation-horizontal\"?: any;\r\n\t\"glyph-orientation-vertical\"?: any;\r\n\t\"glyphRef\"?: any;\r\n\t\"gradientTransform\"?: any;\r\n\t\"gradientUnits\"?: any;\r\n\t\"hanging\"?: any;\r\n\t\"height\"?: any;\r\n\t\"href\"?: any;\r\n\t\"horiz-adv-x\"?: any;\r\n\t\"horiz-origin-x\"?: any;\r\n\t\"id\"?: any;\r\n\t\"ideographic\"?: any;\r\n\t\"image-rendering\"?: any;\r\n\t\"in\"?: any;\r\n\t\"in2\"?: any;\r\n\t\"intercept\"?: any;\r\n\t\"k\"?: any;\r\n\t\"k1\"?: any;\r\n\t\"k2\"?: any;\r\n\t\"k3\"?: any;\r\n\t\"k4\"?: any;\r\n\t\"kernelMatrix\"?: any;\r\n\t\"kernelUnitLength\"?: any;\r\n\t\"kerning\"?: any;\r\n\t\"keyPoints\"?: any;\r\n\t\"keySplines\"?: any;\r\n\t\"keyTimes\"?: any;\r\n\t\"lang\"?: any;\r\n\t\"lengthAdjust\"?: any;\r\n\t\"letter-spacing\"?: any;\r\n\t\"lighting-color\"?: any;\r\n\t\"limitingConeAngle\"?: any;\r\n\t\"local\"?: any;\r\n\t\"marker-end\"?: any;\r\n\t\"marker-mid\"?: any;\r\n\t\"marker-start\"?: any;\r\n\t\"markerHeight\"?: any;\r\n\t\"markerUnits\"?: any;\r\n\t\"markerWidth\"?: any;\r\n\t\"mask\"?: any;\r\n\t\"maskContentUnits\"?: any;\r\n\t\"maskUnits\"?: any;\r\n\t\"mathematical\"?: any;\r\n\t\"max\"?: any;\r\n\t\"media\"?: any;\r\n\t\"method\"?: any;\r\n\t\"min\"?: any;\r\n\t\"mode\"?: any;\r\n\t\"name\"?: any;\r\n\t\"numOctaves\"?: any;\r\n\t\"offset\"?: any;\r\n\t\"onabort\"?: any;\r\n\t\"onactivate\"?: any;\r\n\t\"onbegin\"?: any;\r\n\t\"onclick\"?: any;\r\n\t\"onend\"?: any;\r\n\t\"onerror\"?: any;\r\n\t\"onfocusin\"?: any;\r\n\t\"onfocusout\"?: any;\r\n\t\"onload\"?: any;\r\n\t\"onmousedown\"?: any;\r\n\t\"onmousemove\"?: any;\r\n\t\"onmouseout\"?: any;\r\n\t\"onmouseover\"?: any;\r\n\t\"onmouseup\"?: any;\r\n\t\"onrepeat\"?: any;\r\n\t\"onresize\"?: any;\r\n\t\"onscroll\"?: any;\r\n\t\"onunload\"?: any;\r\n\t\"onzoom\"?: any;\r\n\t\"opacity\"?: any;\r\n\t\"operator\"?: any;\r\n\t\"order\"?: any;\r\n\t\"orient\"?: any;\r\n\t\"orientation\"?: any;\r\n\t\"origin\"?: any;\r\n\t\"overflow\"?: any;\r\n\t\"overline-position\"?: any;\r\n\t\"overline-thickness\"?: any;\r\n\t\"panose-1\"?: any;\r\n\t\"paint-order\"?: any;\r\n\t\"path\"?: any;\r\n\t\"pathLength\"?: any;\r\n\t\"patternContentUnits\"?: any;\r\n\t\"patternTransform\"?: any;\r\n\t\"patternUnits\"?: any;\r\n\t\"pointer-events\"?: any;\r\n\t\"points\"?: any;\r\n\t\"pointsAtX\"?: any;\r\n\t\"pointsAtY\"?: any;\r\n\t\"pointsAtZ\"?: any;\r\n\t\"preserveAlpha\"?: any;\r\n\t\"preserveAspectRatio\"?: any;\r\n\t\"primitiveUnits\"?: any;\r\n\t\"r\"?: any;\r\n\t\"radius\"?: any;\r\n\t\"refX\"?: any;\r\n\t\"refY\"?: any;\r\n\t\"rendering-intent\"?: any;\r\n\t\"repeatCount\"?: any;\r\n\t\"repeatDur\"?: any;\r\n\t\"requiredExtensions\"?: any;\r\n\t\"requiredFeatures\"?: any;\r\n\t\"restart\"?: any;\r\n\t\"result\"?: any;\r\n\t\"role\"?: any;\r\n\t\"rotate\"?: any;\r\n\t\"rx\"?: any;\r\n\t\"ry\"?: any;\r\n\t\"scale\"?: any;\r\n\t\"seed\"?: any;\r\n\t\"shape-rendering\"?: any;\r\n\t\"slope\"?: any;\r\n\t\"spacing\"?: any;\r\n\t\"specularConstant\"?: any;\r\n\t\"specularExponent\"?: any;\r\n\t\"speed\"?: any;\r\n\t\"spreadMethod\"?: any;\r\n\t\"startOffset\"?: any;\r\n\t\"stdDeviation\"?: any;\r\n\t\"stemh\"?: any;\r\n\t\"stemv\"?: any;\r\n\t\"stitchTiles\"?: any;\r\n\t\"stop-color\"?: any;\r\n\t\"stop-opacity\"?: any;\r\n\t\"strikethrough-position\"?: any;\r\n\t\"strikethrough-thickness\"?: any;\r\n\t\"string\"?: any;\r\n\t\"stroke\"?: any;\r\n\t\"stroke-dasharray\"?: any;\r\n\t\"stroke-dashoffset\"?: any;\r\n\t\"stroke-linecap\"?: any;\r\n\t\"stroke-linejoin\"?: any;\r\n\t\"stroke-miterlimit\"?: any;\r\n\t\"stroke-opacity\"?: any;\r\n\t\"stroke-width\"?: any;\r\n\t\"style\"?: any;\r\n\t\"surfaceScale\"?: any;\r\n\t\"systemLanguage\"?: any;\r\n\t\"tabindex\"?: any;\r\n\t\"tableValues\"?: any;\r\n\t\"target\"?: any;\r\n\t\"targetX\"?: any;\r\n\t\"targetY\"?: any;\r\n\t\"text-anchor\"?: any;\r\n\t\"text-decoration\"?: any;\r\n\t\"text-rendering\"?: any;\r\n\t\"textLength\"?: any;\r\n\t\"to\"?: any;\r\n\t\"transform\"?: any;\r\n\t\"type\"?: any;\r\n\t\"u1\"?: any;\r\n\t\"u2\"?: any;\r\n\t\"underline-position\"?: any;\r\n\t\"underline-thickness\"?: any;\r\n\t\"unicode\"?: any;\r\n\t\"unicode-bidi\"?: any;\r\n\t\"unicode-range\"?: any;\r\n\t\"units-per-em\"?: any;\r\n\t\"v-alphabetic\"?: any;\r\n\t\"v-hanging\"?: any;\r\n\t\"v-ideographic\"?: any;\r\n\t\"v-mathematical\"?: any;\r\n\t\"values\"?: any;\r\n\t\"version\"?: any;\r\n\t\"vert-adv-y\"?: any;\r\n\t\"vert-origin-x\"?: any;\r\n\t\"vert-origin-y\"?: any;\r\n\t\"viewBox\"?: any;\r\n\t\"viewTarget\"?: any;\r\n\t\"visibility\"?: any;\r\n\t\"width\"?: any;\r\n\t\"widths\"?: any;\r\n\t\"word-spacing\"?: any;\r\n\t\"writing-mode\"?: any;\r\n\t\"x\"?: any;\r\n\t\"x-height\"?: any;\r\n\t\"x1\"?: any;\r\n\t\"x2\"?: any;\r\n\t\"xChannelSelector\"?: any;\r\n\t\"xlink:actuate\"?: any;\r\n\t\"xlink:arcrole\"?: any;\r\n\t\"xlink:href\"?: any;\r\n\t\"xlink:role\"?: any;\r\n\t\"xlink:show\"?: any;\r\n\t\"xlink:title\"?: any;\r\n\t\"xlink:type\"?: any;\r\n\t\"xml:base\"?: any;\r\n\t\"xml:lang\"?: any;\r\n\t\"xml:space\"?: any;\r\n\t\"y\"?: any;\r\n\t\"y1\"?: any;\r\n\t\"y2\"?: any;\r\n\t\"yChannelSelector\"?: any;\r\n\t\"z\"?: any;\r\n\t\"zoomAndPan\"?: any;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all SVG elements. Provides low-level DOM functionality.\r\n *\r\n * All visual elements extend this class.\r\n */\r\nexport class AMElement implements IDisposer {\r\n\r\n\t/**\r\n\t * Indicates if the element was already disposed.\r\n\t */\r\n\tprotected _isDisposed: boolean = false;\r\n\r\n\t/**\r\n\t * An SVG node of the element.\r\n\t */\r\n\tpublic node: SVGSVGElement;\r\n\r\n\t/**\r\n\t * Current X coordinate.\r\n\t */\r\n\tprivate _x: number = 0;\r\n\r\n\t/**\r\n\t * Current Y coordinate.\r\n\t */\r\n\tprivate _y: number = 0;\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\tprivate _rotationY: number = 0;\t\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\tprivate _rotationX: number = 0;\t\t\r\n\r\n\t/**\r\n\t * Current rotation.\r\n\t */\r\n\tprivate _rotation: number = 0;\r\n\r\n\t/**\r\n\t * Current scale.\r\n\t */\r\n\tprivate _scale: number = 1;\r\n\r\n\t/**\r\n\t * current value of transfrom string\r\n\t */\r\n\tprivate _transformString:string;\r\n\r\n\t/**\r\n\t * Constructor creates a new element or uses the one that was passed in.\r\n\t *\r\n\t * @param element Element reference node type\r\n\t */\r\n\tconstructor(element: string | SVGSVGElement) {\r\n\t\tif (typeof element === \"string\") {\r\n\t\t\tthis.node = <SVGSVGElement>document.createElementNS($dom.SVGNS, element);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.node = element;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes element's node from DOM.\r\n\t */\r\n\tpublic removeNode(): void {\r\n\t\tif (this.node) {\r\n\t\t\tif (this.node.parentNode) {\r\n\t\t\t\tthis.node.parentNode.removeChild(this.node);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `transform` attribute of the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Transform attribute value\r\n\t */\r\n\tpublic get transformString(): $type.Optional<string> {\r\n\t\tif (this.node) {\r\n\r\n\t\t\treturn this._transformString;\r\n\t\t\t/*\r\n\t\t\tconst value = this.node.getAttribute(\"transform\");\r\n\r\n\t\t\tif (value !== null) {\r\n\t\t\t\treturn value;\r\n\t\t\t}*/\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Appply position, rotation and scale properties via elemen's `transform`\r\n\t * property\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic transform(): void {\r\n\r\n\t\tlet transfromString = \"translate(\" + this._x + \",\" + this._y + \")\";\r\n\r\n\t\tif (this._scale != 1) {\r\n\t\t\ttransfromString += ((transfromString ? \" \" : \"\") + \"scale(\" + this._scale + \")\");\r\n\t\t}\r\n\r\n\t\tif (this._rotation != 0) {\r\n\t\t\tlet rotateString = \"rotate(\" + this._rotation + \")\";\r\n\r\n\t\t\tif(this._rotationX && this._rotationY){\r\n\t\t\t\trotateString = \"rotate(\" + this._rotation + \" \" + this._rotationX + \" \" + this._rotationY + \")\";\r\n\t\t\t}\r\n\r\n\t\t\ttransfromString += ((transfromString ? \" \" : \"\") + rotateString);\r\n\t\t}\r\n\r\n\t\tthis._transformString = transfromString;\r\n\r\n\t\tthis.node.setAttribute(\"transform\", transfromString);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns bounding box of the element.\r\n\t *\r\n\t * ATTENTION: Bounding box calculations are extremely costly so should be\r\n\t * used sparingly and cached whenever possible.\r\n\t *\r\n\t * @return Bounding rectangle\r\n\t */\r\n\tpublic getBBox(): IRectangle {\r\n\t\tlet bbox: IRectangle = {\r\n\t\t\twidth: 0,\r\n\t\t\theight: 0,\r\n\t\t\tx: 0,\r\n\t\t\ty: 0\r\n\t\t};\r\n\r\n\t\t// FF would fail if getBBox() is called without node added to parent\r\n\t\tif (this.node && this.node.parentNode) {\r\n\t\t\t\r\n\t\t\ttry { // again for ff. TODO: check if this doesn't slow down\r\n\t\t\t\tlet svgbbox = this.node.getBBox();\r\n\t\t\t\tbbox.x = svgbbox.x;\r\n\t\t\t\tbbox.y = svgbbox.y;\r\n\t\t\t\tbbox.width = svgbbox.width;\r\n\t\t\t\tbbox.height = svgbbox.height;\r\n\t\t\t} catch (err) { }\r\n\t\t}\r\n\r\n\t\treturn bbox;\r\n\t}\r\n\r\n\t/**\r\n\t * Moves the element to new coordinates.\r\n\t *\r\n\t * @param x  Target X\r\n\t * @param y  Target Y\r\n\t */\r\n\tpublic moveTo(point: IPoint): void {\r\n\t\tif (point) {\r\n\t\t\tlet x: number = point.x;\r\n\t\t\tlet y: number = point.y;\r\n\t\t\tif (this._x != x || this._y != y) {\r\n\t\t\t\tthis._x = x;\r\n\t\t\t\tthis._y = y;\r\n\t\t\t\tthis.transform();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Element's SVG contents.\r\n\t *\r\n\t * @param value Contents\r\n\t */\r\n\tpublic set content(value: string) {\r\n\t\t// @todo Do not use `innerHTML` as this is not reliable and will not work on all browsers\r\n\t\tthis.node.innerHTML = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns element's contents as SVG markup.\r\n\t *\r\n\t * @return Contents\r\n\t */\r\n\tpublic get content(): string {\r\n\t\t// @todo Do not use `innerHTML` as this is not reliable and will not work on all browsers\r\n\t\treturn this.node.innerHTML || \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * Text contents of the SVG element.\r\n\t *\r\n\t * @param value Text contents\r\n\t */\r\n\tpublic set textContent(value: string) {\r\n\t\tthis.node.textContent = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Text contents\r\n\t */\r\n\tpublic get textContent(): string {\r\n\t\treturn this.node.textContent || \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * Element's X position in pixels.\r\n\t *\r\n\t * @param value  X coordinate (px)\r\n\t */\r\n\tpublic set x(value: number) {\r\n\t\tif (this._x != value) {\r\n\t\t\tthis._x = value;\r\n\t\t\tthis.transform();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return X coordinate (px)\r\n\t */\r\n\tpublic get x(): number {\r\n\t\treturn this._x;\r\n\t}\r\n\r\n\t/**\r\n\t * Element's Y position in pixels.\r\n\t *\r\n\t * @param value Y coordinate (px)\r\n\t */\r\n\tpublic set y(value: number) {\r\n\t\tif (this._y != value) {\r\n\t\t\tthis._y = value;\r\n\t\t\tthis.transform();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y coordinate (px)\r\n\t */\r\n\tpublic get y(): number {\r\n\t\treturn this._y;\r\n\t}\r\n\r\n\t/**\r\n\t * Element's rotation in degrees.\r\n\t *\r\n\t * @param value Rotation\r\n\t */\r\n\tpublic set rotation(angle: number) {\r\n\t\tif (this._rotation != angle) {\r\n\t\t\tthis._rotation = angle;\r\n\t\t\tthis.transform();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Rotation\r\n\t */\r\n\tpublic get rotation(): number {\r\n\t\treturn this._rotation;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set rotationX(x: number) {\r\n\t\tif (this._rotationX != x) {\r\n\t\t\tthis._rotationX = x;\r\n\t\t\tthis.transform();\r\n\t\t}\r\n\t}\t\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get rotationX():number{\r\n\t\treturn this._rotationX;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set rotationY(y: number) {\r\n\t\tif (this._rotationY != y) {\r\n\t\t\tthis._rotationY = y;\r\n\t\t\tthis.transform();\r\n\t\t}\r\n\t}\t\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get rotationY():number{\r\n\t\treturn this._rotationY;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Element's scale where 1 is original size.\r\n\t *\r\n\t * Setting to 0.5 will reduce element's size by 50%, 2 will make element\r\n\t * twice as large, etc.\r\n\t *\r\n\t * @param value Scale\r\n\t */\r\n\tpublic set scale(value: number) {\r\n\t\tif (this._scale != value) {\r\n\t\t\tthis._scale = value;\r\n\t\t\tthis.transform();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Scale\r\n\t */\r\n\tpublic get scale(): number {\r\n\t\treturn this._scale;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes an attribute from element.\r\n\t *\r\n\t * @param attribute  Attribute to remove\r\n\t */\r\n\tpublic removeAttr(attribute: string): void {\r\n\t\tthis.node.removeAttribute(attribute);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a set of attributes on a element.\r\n\t *\r\n\t * @param attributes  An object with attribute names (key) and values\r\n\t * @return The same element\r\n\t */\r\n\tpublic attr(attributes: ISVGAttribute): AMElement {\r\n\t\t$object.each(attributes, (attributeName, attributeValue) => {\r\n\t\t\tif (!$type.hasValue(attributeValue)) {\r\n\t\t\t\tthis.node.removeAttribute(attributeName);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// this is for performance testing\r\n\t\t\t\t//if(attributeValue == this.node.getAttribute(attributeName)){\r\n\t\t\t\t//\tconsole.log(attributeName, attributeValue)\r\n\t\t\t\t//}\r\n\t\t\t\tthis.node.setAttribute(attributeName, attributeValue);\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a value of a node attribute.\r\n\t *\r\n\t * @param attribute  Attribute name\r\n\t * @return Attribute value\r\n\t */\r\n\tpublic getAttr(attribute: string): string | null {\r\n\t\treturn this.node.getAttribute(attribute);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a single attribute of the element's node using namesspace.\r\n\t *\r\n\t * @param ns         Namespace\r\n\t * @param attribute  Attribute\r\n\t * @param value      Value\r\n\t * @return The same element\r\n\t */\r\n\tpublic attrNS(ns: string, attribute: string, value: string): AMElement {\r\n\t\tthis.node.setAttributeNS(ns, attribute, value);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a namespaced attribute value from node.\r\n\t *\r\n\t * @param ns         Namespace\r\n\t * @param attribute  Attribute\r\n\t * @return Attribute value\r\n\t */\r\n\tpublic getAttrNS(ns: string, attribute: string): string {\r\n\t\treturn this.node.getAttributeNS(ns, attribute);\r\n\t}\r\n\r\n\t/**\r\n\t * Removes `style` attribute from node.\r\n\t *\r\n\t * @param attribute  Attribute to remove\r\n\t */\r\n\tpublic removeStyle(attribute: string): void {\r\n\t\t// @todo Review because it's a bit messy and maybe not needed (pratically not used)\r\n\t\t(<any>this.node.style)[attribute] = null;\r\n\t\tdelete (<any>this.node.style)[attribute];\r\n\t}\r\n\r\n\t/**\r\n\t * Returns style attribute value.\r\n\t *\r\n\t * @param attribute  Style attribute value\r\n\t * @return Attribute value\r\n\t */\r\n\tpublic getStyle(attribute: string): string {\r\n\t\t// @todo Review because it's a bit messy and maybe not needed (pratically not used)\r\n\t\treturn (<any>this.node.style)[attribute];\r\n\t}\r\n\r\n\t/**\r\n\t * Adds style attributes to element's node.\r\n\t *\r\n\t * @param attributes  Object containing attribute: value pairs\r\n\t * @return The same element\r\n\t */\r\n\tpublic addStyle(attributes: Object): AMElement {\r\n\t\t// @todo Review because it's a bit messy and maybe not needed (pratically not used)\r\n\t\t$object.each(attributes, (attributeName, attributeValue) => {\r\n\t\t\tif (!$type.hasValue(attributeValue)) {\r\n\t\t\t\tthis.removeStyle(attributeName);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t(<any>this.node.style)[attributeName] = attributeValue;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a class to element.\r\n\t *\r\n\t * @param name  Class name\r\n\t */\r\n\tpublic addClass(name: string): void {\r\n\t\t$dom.addClass(this.node, name);\r\n\t}\r\n\r\n\t/**\r\n\t * Removes a class from element.\r\n\t *\r\n\t * @param name Class name\r\n\t */\r\n\tpublic removeClass(name: string): void {\r\n\t\t$dom.removeClass(this.node, name);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a class name on element.\r\n\t *\r\n\t * @param name  Class name\r\n\t */\r\n\tpublic setClass(name: string): void {\r\n\t\tthis.node.setAttribute(\"class\", name);\r\n\t}\r\n\r\n\t/**\r\n\t * Removes all element's child nodes, basically leaving it empty.\r\n\t */\r\n\tpublic removeChildNodes(): void {\r\n\t\t// remove all children\r\n\t\twhile (this.node.childNodes.length > 0) {\r\n\t\t\tthis.node.removeChild(this.node.firstChild!);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Was this element already been disposed?\r\n\t *\r\n\t * @return Disposed?\r\n\t */\r\n\tpublic isDisposed(): boolean {\r\n\t\treturn this._isDisposed;\r\n\t}\r\n\r\n\t/**\r\n\t * Disposes element.\r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tthis.removeNode();\r\n\t}\r\n\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}