{"ast":null,"code":"/**\r\n * HeatLegend module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\nimport { registry } from \"../../core/Registry\";\nimport { toColor, Color } from \"../../core/utils/Color\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { ValueAxis } from \"../../charts/axes/ValueAxis\";\nimport { AxisRendererX } from \"../../charts/axes/AxisRendererX\";\nimport { AxisRendererY } from \"../../charts/axes/AxisRendererY\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $colors from \"../../core/utils/Colors\";\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Sankey Diagram.\r\n *\r\n * @see {@link IHeatLegendEvents} for a list of available events\r\n * @see {@link IHeatLegendAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar HeatLegend =\n/** @class */\nfunction (_super) {\n  __extends(HeatLegend, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function HeatLegend() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"HeatLegend\";\n    _this.markerContainer = _this.createChild(Container);\n    _this.markerContainer.shouldClone = false;\n    _this.markerCount = 1; // Create a template container and list for the a marker\n\n    var marker = new RoundedRectangle();\n    marker.minHeight = 20;\n    marker.minWidth = 20;\n    marker.interactionsEnabled = false;\n    marker.fillOpacity = 1;\n    marker.cornerRadius(0, 0, 0, 0);\n    _this.markerContainer.minHeight = 20;\n    _this.markerContainer.minWidth = 20;\n    _this.orientation = \"horizontal\";\n    _this.markers = new ListTemplate(marker);\n\n    _this._disposers.push(new ListDisposer(_this.markers));\n\n    _this._disposers.push(_this.markers.template);\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  HeatLegend.prototype.getMinFromRules = function (property) {\n    var series = this.series;\n\n    if (series) {\n      var minValue_1;\n      $iter.eachContinue(series.heatRules.iterator(), function (heatRule) {\n        if (heatRule.property == property) {\n          minValue_1 = heatRule.min;\n          return false;\n        }\n\n        return true;\n      });\n      return minValue_1;\n    }\n  };\n\n  HeatLegend.prototype.getMaxFromRules = function (property) {\n    var series = this.series;\n\n    if (series) {\n      var maxValue_1;\n      $iter.each(series.heatRules.iterator(), function (heatRule) {\n        if (heatRule.property == property) {\n          maxValue_1 = heatRule.max;\n          return false;\n        }\n\n        return true;\n      });\n      return maxValue_1;\n    }\n  };\n  /**\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  HeatLegend.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n\n    this.valueAxis.renderer.inversed = this.reverseOrder;\n    var series = this.series;\n    var minColor = this.minColor;\n    var maxColor = this.maxColor;\n\n    if (!$type.hasValue(minColor)) {\n      minColor = toColor(this.getMinFromRules(\"fill\"));\n    }\n\n    if (!$type.hasValue(maxColor)) {\n      maxColor = toColor(this.getMaxFromRules(\"fill\"));\n    }\n\n    if (series) {\n      var seriesFill = series.fill;\n\n      if (!$type.hasValue(minColor) && seriesFill instanceof Color) {\n        minColor = seriesFill;\n      }\n\n      if (!$type.hasValue(maxColor) && seriesFill instanceof Color) {\n        maxColor = seriesFill;\n      }\n    }\n\n    if (!$type.hasValue(maxColor)) {\n      maxColor = toColor(this.getMaxFromRules(\"fill\"));\n    }\n\n    var minOpacity = $type.toNumber(this.getMinFromRules(\"fillOpacity\"));\n\n    if (!$type.isNumber(minOpacity)) {\n      minOpacity = 1;\n    }\n\n    var maxOpacity = $type.toNumber(this.getMaxFromRules(\"fillOpacity\"));\n\n    if (!$type.isNumber(maxOpacity)) {\n      maxOpacity = 1;\n    }\n\n    var minStrokeOpacity = $type.toNumber(this.getMinFromRules(\"strokeOpacity\"));\n\n    if (!$type.isNumber(minStrokeOpacity)) {\n      minStrokeOpacity = 1;\n    }\n\n    var maxStrokeOpacity = $type.toNumber(this.getMaxFromRules(\"strokeOpacity\"));\n\n    if (!$type.isNumber(maxStrokeOpacity)) {\n      maxStrokeOpacity = 1;\n    }\n\n    var minStroke = toColor(this.getMinFromRules(\"stroke\"));\n    var maxStroke = toColor(this.getMaxFromRules(\"stroke\")); //if (series) {\n\n    for (var i = 0; i < this.markerCount; i++) {\n      var marker = this.markers.getIndex(i);\n\n      if (!marker) {\n        marker = this.markers.create();\n        marker.parent = this.markerContainer;\n        marker.height = percent(100);\n        marker.width = percent(100);\n      }\n\n      if (this.markerCount == 1) {\n        var gradient = new LinearGradient();\n\n        if (this.reverseOrder) {\n          gradient.addColor(maxColor, maxOpacity);\n          gradient.addColor(minColor, minOpacity);\n        } else {\n          gradient.addColor(minColor, minOpacity);\n          gradient.addColor(maxColor, maxOpacity);\n        }\n\n        if (this.orientation == \"vertical\") {\n          gradient.rotation = -90;\n        }\n\n        marker.fill = gradient;\n\n        if ($type.hasValue(minStroke) && $type.hasValue(maxStroke)) {\n          var strokeGradient = new LinearGradient();\n\n          if (this.reverseOrder) {\n            strokeGradient.addColor(maxStroke, maxStrokeOpacity);\n            strokeGradient.addColor(minStroke, minStrokeOpacity);\n          } else {\n            strokeGradient.addColor(minStroke, minStrokeOpacity);\n            strokeGradient.addColor(maxStroke, maxStrokeOpacity);\n          }\n\n          if (this.orientation == \"vertical\") {\n            strokeGradient.rotation = -90;\n          }\n\n          marker.stroke = strokeGradient;\n        }\n      } else {\n        var c = i;\n\n        if (this.reverseOrder) {\n          c = this.markerCount - i - 1;\n        }\n\n        var color = new Color($colors.interpolate(minColor.rgb, maxColor.rgb, c / this.markerCount));\n        marker.fill = color;\n        var opacity = minOpacity + (maxOpacity - minOpacity) * c / this.markerCount;\n        marker.fillOpacity = opacity;\n\n        if ($type.hasValue(minStroke) && $type.hasValue(maxStroke)) {\n          var color_1 = new Color($colors.interpolate(minStroke.rgb, maxStroke.rgb, c / this.markerCount));\n          marker.stroke = color_1;\n          var opacity_1 = minStrokeOpacity + (maxStrokeOpacity - minStrokeOpacity) * c / this.markerCount;\n          marker.strokeOpacity = opacity_1;\n        }\n      }\n    }\n\n    var renderer = this.valueAxis.renderer;\n\n    if (this.markerCount > 1) {\n      if (this.orientation == \"horizontal\") {\n        renderer.minGridDistance = this.measuredWidth / this.markerCount;\n      } else {\n        renderer.minGridDistance = this.measuredHeight / this.markerCount;\n      }\n    }\n\n    this.valueAxis.invalidate();\n\n    for (var i = this.markerCount, len = this.markers.length; i < len; i++) {\n      this.markers.getIndex(i).parent = undefined;\n    }\n  };\n\n  Object.defineProperty(HeatLegend.prototype, \"minColor\", {\n    /**\r\n     * Returns minColor value\r\n     * @return {Color}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minColor\");\n    },\n\n    /**\r\n     * Min color of a heat legend. If a series is set for the legend, minColor is taken from series.\r\n     *\r\n     * @param {Color}\r\n     */\n    set: function (value) {\n      if (!(value instanceof Color)) {\n        value = toColor(value);\n      }\n\n      this.setColorProperty(\"minColor\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HeatLegend.prototype, \"maxColor\", {\n    /**\r\n     * Returns maxColor value\r\n     * @return {Color}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxColor\");\n    },\n\n    /**\r\n     * Max color of a heat legend. If a series is set for the legend, maxColor is taken from series.\r\n     *\r\n     * @param {Color}\r\n     */\n    set: function (value) {\n      if (!(value instanceof Color)) {\n        value = toColor(value);\n      }\n\n      this.setColorProperty(\"maxColor\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HeatLegend.prototype, \"markerCount\", {\n    /**\r\n     * Returns number of color squares (markers).\r\n     * @return {number}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"markerCount\");\n    },\n\n    /**\r\n     * Number of color squares (markers) in the heat legend. If only 1 marker is used, it will be filled with gradient.\r\n     *\r\n     * @param {number}\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"markerCount\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HeatLegend.prototype, \"minValue\", {\n    /**\r\n     * Returns minimum value of heat legend.\r\n     * @return {number}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minValue\");\n    },\n\n    /**\r\n     * Minimum value of heat legend's value axis. If a series is set for the legend, min is taken from series.\r\n     *\r\n     * @param {number}\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"minValue\", value);\n      this.valueAxis.min = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HeatLegend.prototype, \"maxValue\", {\n    /**\r\n     * Returns maximum value of heat legend.\r\n     * @return {number}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxValue\");\n    },\n\n    /**\r\n     * Maximum value of heat legend's value axis. If a series is set for the legend, max is taken from series.\r\n     *\r\n     * @param {number}\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"maxValue\", value);\n      this.valueAxis.max = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HeatLegend.prototype, \"orientation\", {\n    /**\r\n     * Returns orientation value.\r\n     *\r\n     * @return {\"horizontal\" | \"vertical\"}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"orientation\");\n    },\n\n    /**\r\n    * Heat legend orientation. Note, if you change orientation of a heat legend, you must set value axis renderer properties after that, as with orientation renderer changes.\r\n    *\r\n    * @param {\"horizontal\" | \"vertical\"}\r\n    */\n    set: function (value) {\n      this.setPropertyValue(\"orientation\", value, true);\n      var markerContainer = this.markerContainer;\n      var valueAxis = this.valueAxis; // HORIZONTAL\n\n      if (value == \"horizontal\") {\n        if (!$type.hasValue(this.width)) {\n          this.width = 200;\n        }\n\n        this.height = undefined;\n        valueAxis.width = percent(100);\n        valueAxis.height = undefined;\n        valueAxis.tooltip.pointerOrientation = \"vertical\";\n        this.layout = \"vertical\";\n        markerContainer.width = percent(100);\n        markerContainer.height = undefined;\n\n        if (!(valueAxis.renderer instanceof AxisRendererX)) {\n          valueAxis.renderer = new AxisRendererX();\n        }\n      } // VERTICAL\n      else {\n          if (!$type.hasValue(this.height)) {\n            this.height = 200;\n          }\n\n          this.width = undefined;\n          this.layout = \"horizontal\";\n          markerContainer.width = undefined;\n          markerContainer.height = percent(100);\n          valueAxis.height = percent(100);\n          valueAxis.width = undefined;\n          valueAxis.tooltip.pointerOrientation = \"horizontal\";\n\n          if (!(valueAxis.renderer instanceof AxisRendererY)) {\n            valueAxis.renderer = new AxisRendererY();\n          }\n\n          valueAxis.renderer.inside = true;\n          valueAxis.renderer.labels.template.inside = true;\n          this.markerContainer.reverseOrder = true;\n        }\n\n      var renderer = valueAxis.renderer;\n      renderer.grid.template.disabled = true;\n      renderer.axisFills.template.disabled = true;\n      renderer.baseGrid.disabled = true;\n      renderer.labels.template.padding(2, 3, 2, 3);\n      renderer.minHeight = undefined;\n      renderer.minWidth = undefined;\n      this.markerContainer.layout = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HeatLegend.prototype, \"valueAxis\", {\n    /**\r\n     * Returns valueAxis value.\r\n     * @return {ValueAxis}\r\n     */\n    get: function () {\n      if (!this._valueAxis) {\n        this.valueAxis = this.createChild(ValueAxis);\n        this.valueAxis.shouldClone = false;\n      }\n\n      return this._valueAxis;\n    },\n\n    /**\r\n     * Sets a value axis of heat legend. Value axis for heat legend is created automatically.\r\n     * @param {ValueAxis}\r\n     */\n    set: function (valueAxis) {\n      this._valueAxis = valueAxis;\n      valueAxis.parent = this;\n      valueAxis.strictMinMax = true;\n      this.orientation = this.orientation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HeatLegend.prototype, \"series\", {\n    /**\r\n     * Returns series value.\r\n     * @return {Series}\r\n     */\n    get: function () {\n      return this._series;\n    },\n\n    /**\r\n     * You can set series for heat legend. It will take min, max, minColor and maxColor values from this series.\r\n     * @param series\r\n     */\n    set: function (series) {\n      var _this = this;\n\n      this._series = series;\n      var dataField = \"value\";\n\n      try {\n        var dataFieldDefined = series.heatRules.getIndex(0).dataField;\n\n        if (dataFieldDefined) {\n          dataField = dataFieldDefined;\n        }\n      } catch (err) {}\n\n      this.updateMinMax(series.dataItem.values[dataField].low, series.dataItem.values[dataField].high);\n      series.dataItem.events.on(\"calculatedvaluechanged\", function (event) {\n        _this.updateMinMax(series.dataItem.values[dataField].low, series.dataItem.values[dataField].high);\n      }, undefined, false);\n      series.heatRules.events.on(\"inserted\", this.invalidate, this, false);\n      series.heatRules.events.on(\"removed\", this.invalidate, this, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates min/max of value axis.\r\n   * @ignore\r\n   */\n\n  HeatLegend.prototype.updateMinMax = function (min, max) {\n    var valueAxis = this.valueAxis;\n\n    if (!$type.isNumber(this.minValue)) {\n      valueAxis.min = min;\n      valueAxis.invalidate();\n    }\n\n    if (!$type.isNumber(this.maxValue)) {\n      valueAxis.max = max;\n      valueAxis.invalidate();\n    }\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n\n  HeatLegend.prototype.processConfig = function (config) {\n    if (config) {\n      // Set up series\n      if ($type.hasValue(config.series) && $type.isString(config.series)) {\n        if ($type.isString(config.series)) {\n          if (this.map.hasKey(config.series)) {\n            config.series = this.map.getKey(config.series);\n          } else {\n            var seriesId_1 = config.series;\n            var disposer_1 = this.map.events.on(\"insertKey\", function (ev) {\n              if (ev.key == seriesId_1) {\n                this.series = ev.newValue;\n                disposer_1.dispose();\n              }\n            }, this);\n\n            this._disposers.push(disposer_1);\n\n            delete config.series;\n          }\n        }\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n\n  return HeatLegend;\n}(Container);\n\nexport { HeatLegend };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"HeatLegend\"] = HeatLegend;","map":{"version":3,"sources":["../../../../../src/.internal/charts/elements/HeatLegend.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * HeatLegend module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerEvents, IContainerAdapters } from \"../../core/Container\";\r\nimport { Series } from \"../series/Series\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { ValueAxis } from \"../../charts/axes/ValueAxis\";\r\nimport { AxisRendererX } from \"../../charts/axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../../charts/axes/AxisRendererY\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $colors from \"../../core/utils/Colors\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[HeatLegend]].\r\n */\r\nexport interface IHeatLegendProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Minimum color\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tminColor?: Color;\r\n\r\n\t/**\r\n\t * Minimum value\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tminValue?: number;\r\n\r\n\t/**\r\n\t * Maximum value\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tmaxValue?: number;\r\n\r\n\r\n\t/**\r\n\t * Maximum color\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tmaxColor?: Color;\r\n\r\n\t/**\r\n\t * Number of markers (steps)\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tmarkerCount?: number;\r\n\r\n\r\n\t/**\r\n\t * Orientation\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\torientation?: \"horizontal\" | \"vertical\";\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[HeatLegend]].\r\n */\r\nexport interface IHeatLegendEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[HeatLegend]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IHeatLegendAdapters extends IContainerAdapters, IHeatLegendProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Sankey Diagram.\r\n *\r\n * @see {@link IHeatLegendEvents} for a list of available events\r\n * @see {@link IHeatLegendAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class HeatLegend extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IHeatLegendProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IHeatLegendAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IHeatLegendEvents;\r\n\r\n\t/**\r\n\t * List of heat legend markers (color step rectangles).\r\n\t */\r\n\tpublic markers: ListTemplate<RoundedRectangle>;\r\n\r\n\t/**\r\n\t * Container which holds markers\r\n\t */\r\n\tpublic markerContainer: Container;\r\n\r\n\t/**\r\n\t * Value axis of a heat legend\r\n\t * @ignore\r\n\t */\r\n\tprotected _valueAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * Series of a heat legend\r\n\t * @ignore\r\n\t */\r\n\tprotected _series: Series;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"HeatLegend\";\r\n\r\n\t\tthis.markerContainer = this.createChild(Container);\r\n\t\tthis.markerContainer.shouldClone = false;\r\n\r\n\t\tthis.markerCount = 1;\r\n\r\n\t\t// Create a template container and list for the a marker\r\n\t\tlet marker: RoundedRectangle = new RoundedRectangle();\r\n\t\tmarker.minHeight = 20;\r\n\t\tmarker.minWidth = 20;\r\n\t\tmarker.interactionsEnabled = false;\r\n\t\tmarker.fillOpacity = 1;\r\n\t\tmarker.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tthis.markerContainer.minHeight = 20;\r\n\t\tthis.markerContainer.minWidth = 20;\r\n\r\n\t\tthis.orientation = \"horizontal\";\r\n\r\n\t\tthis.markers = new ListTemplate<RoundedRectangle>(marker);\r\n\t\tthis._disposers.push(new ListDisposer(this.markers));\r\n\t\tthis._disposers.push(this.markers.template);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\tprotected getMinFromRules(property: string, ) {\r\n\t\tlet series = this.series;\r\n\t\tif (series) {\r\n\t\t\tlet minValue;\r\n\t\t\t$iter.eachContinue(series.heatRules.iterator(), (heatRule) => {\r\n\t\t\t\tif (heatRule.property == property) {\r\n\t\t\t\t\tminValue = heatRule.min;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t})\r\n\t\t\treturn minValue;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getMaxFromRules(property: string, ) {\r\n\t\tlet series = this.series;\r\n\t\tif (series) {\r\n\t\t\tlet maxValue;\r\n\t\t\t$iter.each(series.heatRules.iterator(), (heatRule) => {\r\n\t\t\t\tif (heatRule.property == property) {\r\n\t\t\t\t\tmaxValue = heatRule.max;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\treturn maxValue;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.valueAxis.renderer.inversed = this.reverseOrder;\r\n\r\n\t\tlet series = this.series;\r\n\r\n\t\tlet minColor = this.minColor;\r\n\t\tlet maxColor = this.maxColor;\r\n\r\n\t\tif (!$type.hasValue(minColor)) {\r\n\t\t\tminColor = toColor(this.getMinFromRules(\"fill\"));\r\n\t\t}\r\n\r\n\t\tif (!$type.hasValue(maxColor)) {\r\n\t\t\tmaxColor = toColor(this.getMaxFromRules(\"fill\"));\r\n\t\t}\r\n\r\n\t\tif (series) {\r\n\t\t\tlet seriesFill = series.fill;\r\n\t\t\tif (!$type.hasValue(minColor) && seriesFill instanceof Color) {\r\n\t\t\t\tminColor = seriesFill;\r\n\t\t\t}\r\n\t\t\tif (!$type.hasValue(maxColor) && seriesFill instanceof Color) {\r\n\t\t\t\tmaxColor = seriesFill;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!$type.hasValue(maxColor)) {\r\n\t\t\tmaxColor = toColor(this.getMaxFromRules(\"fill\"));\r\n\t\t}\r\n\r\n\t\tlet minOpacity = $type.toNumber(this.getMinFromRules(\"fillOpacity\"));\r\n\t\tif (!$type.isNumber(minOpacity)) {\r\n\t\t\tminOpacity = 1;\r\n\t\t}\r\n\t\tlet maxOpacity = $type.toNumber(this.getMaxFromRules(\"fillOpacity\"));\r\n\t\tif (!$type.isNumber(maxOpacity)) {\r\n\t\t\tmaxOpacity = 1;\r\n\t\t}\r\n\r\n\r\n\t\tlet minStrokeOpacity = $type.toNumber(this.getMinFromRules(\"strokeOpacity\"));\r\n\t\tif (!$type.isNumber(minStrokeOpacity)) {\r\n\t\t\tminStrokeOpacity = 1;\r\n\t\t}\r\n\t\tlet maxStrokeOpacity = $type.toNumber(this.getMaxFromRules(\"strokeOpacity\"));\r\n\t\tif (!$type.isNumber(maxStrokeOpacity)) {\r\n\t\t\tmaxStrokeOpacity = 1;\r\n\t\t}\r\n\r\n\t\tlet minStroke = toColor(this.getMinFromRules(\"stroke\"));\r\n\t\tlet maxStroke = toColor(this.getMaxFromRules(\"stroke\"));\r\n\r\n\r\n\t\t//if (series) {\r\n\t\tfor (let i = 0; i < this.markerCount; i++) {\r\n\t\t\tlet marker = this.markers.getIndex(i);\r\n\r\n\t\t\tif (!marker) {\r\n\t\t\t\tmarker = this.markers.create();\r\n\t\t\t\tmarker.parent = this.markerContainer;\r\n\t\t\t\tmarker.height = percent(100);\r\n\t\t\t\tmarker.width = percent(100);\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif (this.markerCount == 1) {\r\n\t\t\t\tlet gradient = new LinearGradient();\r\n\t\t\t\tif (this.reverseOrder) {\r\n\t\t\t\t\tgradient.addColor(maxColor, maxOpacity);\r\n\t\t\t\t\tgradient.addColor(minColor, minOpacity);\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tgradient.addColor(minColor, minOpacity);\r\n\t\t\t\t\tgradient.addColor(maxColor, maxOpacity);\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\tgradient.rotation = -90;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmarker.fill = gradient;\r\n\t\t\t\tif ($type.hasValue(minStroke) && $type.hasValue(maxStroke)) {\r\n\t\t\t\t\tlet strokeGradient = new LinearGradient();\r\n\t\t\t\t\tif (this.reverseOrder) {\r\n\t\t\t\t\t\tstrokeGradient.addColor(maxStroke, maxStrokeOpacity);\r\n\t\t\t\t\t\tstrokeGradient.addColor(minStroke, minStrokeOpacity);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tstrokeGradient.addColor(minStroke, minStrokeOpacity);\r\n\t\t\t\t\t\tstrokeGradient.addColor(maxStroke, maxStrokeOpacity);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\t\tstrokeGradient.rotation = -90;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmarker.stroke = strokeGradient;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet c = i;\r\n\t\t\t\tif (this.reverseOrder) {\r\n\t\t\t\t\tc = this.markerCount - i - 1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet color = new Color($colors.interpolate(minColor.rgb, maxColor.rgb, c / this.markerCount));\r\n\t\t\t\tmarker.fill = color;\r\n\r\n\t\t\t\tlet opacity = minOpacity + (maxOpacity - minOpacity) * c / this.markerCount;\r\n\t\t\t\tmarker.fillOpacity = opacity;\r\n\r\n\t\t\t\tif ($type.hasValue(minStroke) && $type.hasValue(maxStroke)) {\r\n\t\t\t\t\tlet color = new Color($colors.interpolate(minStroke.rgb, maxStroke.rgb, c / this.markerCount));\r\n\t\t\t\t\tmarker.stroke = color;\r\n\r\n\t\t\t\t\tlet opacity = minStrokeOpacity + (maxStrokeOpacity - minStrokeOpacity) * c / this.markerCount;\r\n\t\t\t\t\tmarker.strokeOpacity = opacity;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet renderer = this.valueAxis.renderer;\r\n\t\tif (this.markerCount > 1) {\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\trenderer.minGridDistance = this.measuredWidth / this.markerCount;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trenderer.minGridDistance = this.measuredHeight / this.markerCount;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.valueAxis.invalidate();\r\n\r\n\t\tfor (let i = this.markerCount, len = this.markers.length; i < len; i++) {\r\n\t\t\tthis.markers.getIndex(i).parent = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Min color of a heat legend. If a series is set for the legend, minColor is taken from series.\r\n\t *\r\n\t * @param {Color}\r\n\t */\r\n\tpublic set minColor(value: Color) {\r\n\r\n\t\tif (!(value instanceof Color)) {\r\n\t\t\tvalue = toColor(value);\r\n\t\t}\r\n\r\n\t\tthis.setColorProperty(\"minColor\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns minColor value\r\n\t * @return {Color}\r\n\t */\r\n\tpublic get minColor(): Color {\r\n\t\treturn this.getPropertyValue(\"minColor\");\r\n\t}\r\n\r\n\t/**\r\n\t * Max color of a heat legend. If a series is set for the legend, maxColor is taken from series.\r\n\t *\r\n\t * @param {Color}\r\n\t */\r\n\tpublic set maxColor(value: Color) {\r\n\r\n\t\tif (!(value instanceof Color)) {\r\n\t\t\tvalue = toColor(value);\r\n\t\t}\r\n\r\n\t\tthis.setColorProperty(\"maxColor\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns maxColor value\r\n\t * @return {Color}\r\n\t */\r\n\tpublic get maxColor(): Color {\r\n\t\treturn this.getPropertyValue(\"maxColor\");\r\n\t}\r\n\r\n\t/**\r\n\t * Number of color squares (markers) in the heat legend. If only 1 marker is used, it will be filled with gradient.\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set markerCount(value: number) {\r\n\t\tthis.setPropertyValue(\"markerCount\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns number of color squares (markers).\r\n\t * @return {number}\r\n\t */\r\n\tpublic get markerCount(): number {\r\n\t\treturn this.getPropertyValue(\"markerCount\");\r\n\t}\r\n\r\n\t/**\r\n\t * Minimum value of heat legend's value axis. If a series is set for the legend, min is taken from series.\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set minValue(value: number) {\r\n\t\tthis.setPropertyValue(\"minValue\", value);\r\n\t\tthis.valueAxis.min = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns minimum value of heat legend.\r\n\t * @return {number}\r\n\t */\r\n\tpublic get minValue(): number {\r\n\t\treturn this.getPropertyValue(\"minValue\");\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum value of heat legend's value axis. If a series is set for the legend, max is taken from series.\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set maxValue(value: number) {\r\n\t\tthis.setPropertyValue(\"maxValue\", value);\r\n\t\tthis.valueAxis.max = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns maximum value of heat legend.\r\n\t * @return {number}\r\n\t */\r\n\tpublic get maxValue(): number {\r\n\t\treturn this.getPropertyValue(\"maxValue\");\r\n\t}\r\n\r\n\t/**\r\n\t* Heat legend orientation. Note, if you change orientation of a heat legend, you must set value axis renderer properties after that, as with orientation renderer changes.\r\n\t*\r\n\t* @param {\"horizontal\" | \"vertical\"}\r\n\t*/\r\n\tpublic set orientation(value: \"horizontal\" | \"vertical\") {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t\tlet markerContainer = this.markerContainer;\r\n\t\tlet valueAxis = this.valueAxis;\r\n\r\n\t\t// HORIZONTAL\r\n\t\tif (value == \"horizontal\") {\r\n\t\t\tif (!$type.hasValue(this.width)) {\r\n\t\t\t\tthis.width = 200;\r\n\t\t\t}\r\n\t\t\tthis.height = undefined;\r\n\r\n\t\t\tvalueAxis.width = percent(100);\r\n\t\t\tvalueAxis.height = undefined;\r\n\t\t\tvalueAxis.tooltip.pointerOrientation = \"vertical\";\r\n\r\n\t\t\tthis.layout = \"vertical\";\r\n\t\t\tmarkerContainer.width = percent(100);\r\n\t\t\tmarkerContainer.height = undefined;\r\n\t\t\tif (!(valueAxis.renderer instanceof AxisRendererX)) {\r\n\t\t\t\tvalueAxis.renderer = new AxisRendererX();\r\n\t\t\t}\r\n\t\t}\r\n\t\t// VERTICAL\r\n\t\telse {\r\n\t\t\tif (!$type.hasValue(this.height)) {\r\n\t\t\t\tthis.height = 200;\r\n\t\t\t}\r\n\t\t\tthis.width = undefined;\r\n\t\t\tthis.layout = \"horizontal\";\r\n\t\t\tmarkerContainer.width = undefined;\r\n\t\t\tmarkerContainer.height = percent(100);\r\n\t\t\tvalueAxis.height = percent(100);\r\n\t\t\tvalueAxis.width = undefined;\r\n\t\t\tvalueAxis.tooltip.pointerOrientation = \"horizontal\";\r\n\r\n\t\t\tif (!(valueAxis.renderer instanceof AxisRendererY)) {\r\n\t\t\t\tvalueAxis.renderer = new AxisRendererY();\r\n\t\t\t}\r\n\t\t\tvalueAxis.renderer.inside = true;\r\n\t\t\tvalueAxis.renderer.labels.template.inside = true;\r\n\r\n\t\t\tthis.markerContainer.reverseOrder = true;\r\n\t\t}\r\n\r\n\t\tlet renderer = valueAxis.renderer;\r\n\t\trenderer.grid.template.disabled = true;\r\n\t\trenderer.axisFills.template.disabled = true;\r\n\t\trenderer.baseGrid.disabled = true;\r\n\t\trenderer.labels.template.padding(2, 3, 2, 3);\r\n\r\n\t\trenderer.minHeight = undefined;\r\n\t\trenderer.minWidth = undefined;\r\n\r\n\t\tthis.markerContainer.layout = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns orientation value.\r\n\t *\r\n\t * @return {\"horizontal\" | \"vertical\"}\r\n\t */\r\n\tpublic get orientation(): \"horizontal\" | \"vertical\" {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a value axis of heat legend. Value axis for heat legend is created automatically.\r\n\t * @param {ValueAxis}\r\n\t */\r\n\tpublic set valueAxis(valueAxis: ValueAxis) {\r\n\r\n\t\tthis._valueAxis = valueAxis;\r\n\r\n\t\tvalueAxis.parent = this;\r\n\t\tvalueAxis.strictMinMax = true;\r\n\t\tthis.orientation = this.orientation;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns valueAxis value.\r\n\t * @return {ValueAxis}\r\n\t */\r\n\tpublic get valueAxis(): ValueAxis {\r\n\t\tif (!this._valueAxis) {\r\n\t\t\tthis.valueAxis = this.createChild(ValueAxis);\r\n\t\t\tthis.valueAxis.shouldClone = false;\r\n\t\t}\r\n\t\treturn this._valueAxis;\r\n\t}\r\n\r\n\t/**\r\n\t * You can set series for heat legend. It will take min, max, minColor and maxColor values from this series.\r\n\t * @param series\r\n\t */\r\n\tset series(series: Series) {\r\n\t\tthis._series = series;\r\n\r\n\t\tlet dataField = \"value\";\r\n\r\n\t\ttry {\r\n\t\t\tlet dataFieldDefined = series.heatRules.getIndex(0).dataField;\r\n\t\t\tif (dataFieldDefined) {\r\n\t\t\t\tdataField = dataFieldDefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (err) {\r\n\r\n\t\t}\r\n\r\n\t\tthis.updateMinMax(series.dataItem.values[dataField].low, series.dataItem.values[dataField].high);\r\n\r\n\t\tseries.dataItem.events.on(\"calculatedvaluechanged\", (event) => {\r\n\t\t\tthis.updateMinMax(series.dataItem.values[dataField].low, series.dataItem.values[dataField].high);\r\n\t\t}, undefined, false);\r\n\r\n\t\tseries.heatRules.events.on(\"inserted\", this.invalidate, this, false);\r\n\t\tseries.heatRules.events.on(\"removed\", this.invalidate, this, false);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns series value.\r\n\t * @return {Series}\r\n\t */\r\n\tget series(): Series {\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates min/max of value axis.\r\n\t * @ignore\r\n\t */\r\n\tprotected updateMinMax(min: number, max: number) {\r\n\t\tlet valueAxis = this.valueAxis;\r\n\t\tif (!$type.isNumber(this.minValue)) {\r\n\t\t\tvalueAxis.min = min;\r\n\t\t\tvalueAxis.invalidate();\r\n\t\t}\r\n\t\tif (!$type.isNumber(this.maxValue)) {\r\n\t\t\tvalueAxis.max = max;\r\n\t\t\tvalueAxis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isString(config.series)) {\r\n\t\t\t\tif ($type.isString(config.series)) {\r\n\t\t\t\t\tif (this.map.hasKey(config.series)) {\r\n\t\t\t\t\t\tconfig.series = this.map.getKey(config.series);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlet seriesId = config.series;\r\n\t\t\t\t\t\tconst disposer = this.map.events.on(\"insertKey\", function(ev) {\r\n\t\t\t\t\t\t\tif (ev.key == seriesId) {\r\n\t\t\t\t\t\t\t\tthis.series = ev.newValue;\r\n\t\t\t\t\t\t\t\tdisposer.dispose();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, this);\r\n\t\t\t\t\t\tthis._disposers.push(disposer);\r\n\t\t\t\t\t\tdelete config.series;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n}\r\n\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"HeatLegend\"] = HeatLegend;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}