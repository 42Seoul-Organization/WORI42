{"ast":null,"code":"/**\r\n * Morpher module contains functionality that allows morphing one polygon to\r\n * another.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { BaseObject } from \"../Base\";\nimport { Animation, AnimationDisposer } from \"../utils/Animation\";\nimport * as $math from \"../utils/Math\";\nimport * as $ease from \"../utils/Ease\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * Morpher can be used to morph one polygon to some other polygon.\r\n */\n\nvar Morpher =\n/** @class */\nfunction (_super) {\n  __extends(Morpher, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param morphable An object to morph\r\n   */\n\n\n  function Morpher(morphable) {\n    var _this = _super.call(this) || this;\n    /**\r\n     * A storage for measurements.\r\n     */\n\n\n    _this._bboxes = [];\n    /**\r\n     * Duration of the morphing animation in milliseconds.\r\n     */\n\n    _this.morphDuration = 800;\n    /**\r\n     * An easing function to use for morphing animation.\r\n     *\r\n     * @see {@link Ease}\r\n     */\n\n    _this.morphEasing = $ease.cubicOut;\n    /**\r\n     * If set to `true`, all separate parts of the multi-part polygon will\r\n     * morph into a single circle or polygon when using built-in methods\r\n     * `morphToCircle()` or `morphToPolygon()`.\r\n     *\r\n     * Otherwise each separate part of polygon will morph to individual target\r\n     * circle or polgyon.\r\n     */\n\n    _this.morphToSingle = true;\n    /**\r\n     * A ratio to scale morphed object in relation to the source object.\r\n     */\n\n    _this.scaleRatio = 1;\n    _this.className = \"Morpher\";\n    _this.morphable = morphable;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Morphs a polygon to another polygon.\r\n   *\r\n   * @param toPoints  Corner points of the target shape\r\n   * @param duration  Duration in milliseconds\r\n   * @param easing    Easing function\r\n   * @return Animation\r\n   */\n\n\n  Morpher.prototype.morphToPolygon = function (toPoints, duration, easing) {\n    var points = this.morphable.currentPoints;\n\n    if (points && toPoints) {\n      this.sortPoints(points);\n      this.sortPoints(toPoints);\n      this._morphFromPointsReal = [];\n      this._morphToPointsReal = [];\n\n      if (!$type.hasValue(duration)) {\n        duration = this.morphDuration;\n      }\n\n      if (!$type.hasValue(easing)) {\n        easing = this.morphEasing;\n      }\n\n      this._morphFromPointsReal = this.normalizePoints(toPoints, points);\n      this._morphToPointsReal = this.normalizePoints(points, toPoints);\n      this.morphable.currentPoints = this._morphFromPointsReal;\n      var animation = new Animation(this, {\n        property: \"morphProgress\",\n        from: 0,\n        to: 1\n      }, duration, easing);\n\n      this._disposers.push(animation);\n\n      animation.start();\n      return animation;\n    }\n  };\n  /**\r\n   * [normalizePoints description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param pointsA  Point A\r\n   * @param pointsB  Point B\r\n   * @return Normalized points\r\n   */\n\n\n  Morpher.prototype.normalizePoints = function (pointsA, pointsB) {\n    for (var i = 0, len = pointsA.length; i < len; i++) {\n      var surfaceA = pointsA[i][0];\n      var holeA = pointsA[i][1];\n      var bboxA = $type.getValue($math.getBBox(surfaceA));\n      var middleX = bboxA.x + bboxA.width;\n      var middleY = bboxA.y + bboxA.height; // check if we have the same in PointsB\n\n      if (!pointsB[i]) {\n        pointsB[i] = [];\n      } // check if we have surface in pointsB\n\n\n      if (surfaceA && !pointsB[i][0]) {\n        pointsB[i][0] = [{\n          x: middleX,\n          y: middleY\n        }, {\n          x: middleX,\n          y: middleY\n        }];\n      }\n\n      if (pointsB[i][0]) {\n        pointsB[i][0] = this.addPoints(pointsB[i][0], surfaceA.length);\n        var distance = Infinity;\n        var splitAt = 0;\n\n        for (var a = 0; a < pointsB[i][0].length; a++) {\n          var newDistance = $math.getDistance(pointsB[i][0][a], surfaceA[0]);\n\n          if (newDistance < distance) {\n            splitAt = a;\n            distance = newDistance;\n          }\n        }\n\n        var partA = pointsB[i][0].slice(0, splitAt);\n        var partB = pointsB[i][0].slice(splitAt);\n        pointsB[i][0] = partB.concat(partA);\n      }\n\n      if (holeA) {\n        if (!pointsB[i][1]) {\n          pointsB[i][1] = [{\n            x: middleX,\n            y: middleY\n          }, {\n            x: middleX,\n            y: middleY\n          }];\n        }\n\n        pointsB[i][1] = this.addPoints(pointsB[i][1], holeA.length);\n      }\n    }\n\n    return pointsB;\n  };\n  /**\r\n   * [sortPoints description]\r\n   *\r\n   * @ignore Exclude from doc\r\n   * @todo Description\r\n   * @param points  [description]\r\n   * @return                        common bbox of points\r\n   */\n\n\n  Morpher.prototype.sortPoints = function (points) {\n    points.sort(function (a, b) {\n      var bbox1 = $type.getValue($math.getBBox(a[0]));\n      var bbox2 = $type.getValue($math.getBBox(b[0]));\n\n      if (bbox1.width * bbox1.height > bbox2.width * bbox2.height) {\n        return -1;\n      } else {\n        return 1;\n      }\n    });\n    var bboxes = [];\n\n    for (var i = 0, len = points.length; i < len; i++) {\n      var surface = points[i][0];\n\n      if (surface) {\n        bboxes.push($type.getValue($math.getBBox(surface)));\n      }\n    }\n\n    return $math.getCommonRectangle(bboxes);\n  };\n  /**\r\n   * Morphs polygon to a circle (it is actually a polygon which makes a circle).\r\n   *\r\n   * @param radius    Target circle radius (px)\r\n   * @param duration  Duration (ms)\r\n   * @param easing    Easing function\r\n   * @return Animation\r\n   */\n\n\n  Morpher.prototype.morphToCircle = function (radius, duration, easing) {\n    var points = this.morphable.points;\n    var commonBBox = this.sortPoints(points);\n    this._morphFromPointsReal = [];\n    this._morphToPointsReal = [];\n\n    if (!$type.hasValue(duration)) {\n      duration = this.morphDuration;\n    }\n\n    if (!$type.hasValue(easing)) {\n      easing = this.morphEasing;\n    } // surface\n\n\n    for (var i = 0, len = points.length; i < len; i++) {\n      var surface = points[i][0];\n      var hole = points[i][1];\n      this._morphFromPointsReal[i] = [];\n      this._morphToPointsReal[i] = [];\n\n      if (surface) {\n        var toPoints = surface;\n        var fromPoints = surface;\n        var bbox = $type.getValue($math.getBBox(fromPoints)); // this._bboxes[i];\n\n        if (this.morphToSingle) {\n          bbox = $type.getValue(commonBBox);\n        }\n\n        var middleX = bbox.x + bbox.width / 2;\n        var middleY = bbox.y + bbox.height / 2;\n        var realRadius = radius;\n\n        if (!$type.isNumber(realRadius)) {\n          realRadius = Math.min(bbox.width / 2, bbox.height / 2);\n        }\n\n        toPoints = []; // find angle for the first point\n\n        var startAngle = $math.getAngle({\n          x: middleX,\n          y: middleY\n        }, surface[0]);\n        var count = 100;\n\n        if (surface.length > count) {\n          count = surface.length;\n        }\n\n        fromPoints = this.addPoints(surface, count);\n        count = fromPoints.length; // add Points might increase number a bit\n\n        var angle = 360 / (count - 1);\n\n        for (var a = 0; a < count; a++) {\n          var realAngle = angle * a + startAngle;\n          var pointOnCircle = {\n            x: middleX + realRadius * $math.cos(realAngle),\n            y: middleY + realRadius * $math.sin(realAngle)\n          };\n          toPoints[a] = pointOnCircle;\n        }\n\n        if (hole && hole.length > 0) {\n          for (var i_1 = 0, hlen = hole.length; i_1 < hlen; i_1++) {\n            toPoints.push({\n              x: middleX,\n              y: middleY\n            });\n          }\n        }\n\n        this._morphFromPointsReal[i][0] = fromPoints;\n        this._morphToPointsReal[i][0] = toPoints;\n      }\n    }\n\n    this.morphable.currentPoints = this._morphFromPointsReal;\n    var animation = new Animation(this, {\n      property: \"morphProgress\",\n      from: 0,\n      to: 1\n    }, duration, easing);\n\n    this._disposers.push(animation);\n\n    animation.start();\n    return animation;\n  };\n  /**\r\n   * [addPoints description]\r\n   *\r\n   * @ignore Exclude from doc\r\n   * @todo Description\r\n   * @param points         [description]\r\n   * @param mustHaveCount  [description]\r\n   * @return [description]\r\n   */\n\n\n  Morpher.prototype.addPoints = function (points, mustHaveCount) {\n    var addToSegmentCount = Math.round(mustHaveCount / points.length);\n    var newPoints = [];\n\n    for (var i = 0, len = points.length; i < len; i++) {\n      var point0 = points[i];\n      var point1 = void 0;\n\n      if (i == points.length - 1) {\n        point1 = points[0];\n      } else {\n        point1 = points[i + 1];\n      }\n\n      newPoints.push(point0);\n\n      for (var p = 1; p < addToSegmentCount; p++) {\n        var percent = p / addToSegmentCount;\n        var extraPoint = {\n          x: point0.x + (point1.x - point0.x) * percent,\n          y: point0.y + (point1.y - point0.y) * percent\n        };\n        newPoints.push(extraPoint);\n      } // stop adding in case we already added more than left in original\n\n\n      if (newPoints.length + points.length - i == mustHaveCount) {\n        addToSegmentCount = 0;\n      }\n    }\n\n    if (newPoints.length < mustHaveCount && points.length > 0) {\n      var lastPoint = points[points.length - 1];\n\n      for (var p = newPoints.length; p < mustHaveCount; p++) {\n        // add same as last\n        newPoints.push({\n          x: lastPoint.x,\n          y: lastPoint.y\n        });\n      }\n    }\n\n    return newPoints;\n  };\n  /**\r\n   * Morphs polygon into a rectangular polygon.\r\n   *\r\n   * @param width     Width of the target rectangle (px)\r\n   * @param height    Height of the target rectangle (px)\r\n   * @param duration  Duration (ms)\r\n   * @param easing    Easing function\r\n   * @return Animation\r\n   */\n\n\n  Morpher.prototype.morphToRectangle = function (width, height, duration, easing) {\n    var points = this.morphable.points;\n    this.sortPoints(points);\n    this._morphFromPointsReal = [];\n    this._morphToPointsReal = [];\n\n    if (!$type.hasValue(duration)) {\n      duration = this.morphDuration;\n    }\n\n    if (!$type.hasValue(easing)) {\n      easing = this.morphEasing;\n    } //\t\tlet biggestBBox: IRectangle = this._bboxes[this._biggestIndex];\n    // surface\n\n\n    for (var i = 0, len = points.length; i < len; i++) {\n      var surface = points[i][0];\n      var hole = points[i][1];\n      this._morphFromPointsReal[i] = [];\n      this._morphToPointsReal[i] = [];\n\n      if (surface) {\n        var toPoints = surface;\n        var fromPoints = surface;\n        var bbox = this._bboxes[i]; // we only work with first area. TODO: maybe we should find the biggest one?\n\n        if (this.morphToSingle) {//if (i != this._biggestIndex) {\n          //\tbbox = { x: biggestBBox.x + biggestBBox.width / 2, y: biggestBBox.y + biggestBBox.height / 2, width: 0, height: 0 };\n          //}\n        }\n\n        var x = bbox.x;\n        var y = bbox.y;\n        var realWidth = width;\n        var realHeight = height;\n\n        if (!$type.isNumber(realWidth)) {\n          realWidth = bbox.width;\n        }\n\n        if (!$type.isNumber(realHeight)) {\n          realHeight = bbox.height;\n        }\n\n        toPoints = [{\n          x: x,\n          y: y\n        }, {\n          x: x + realWidth,\n          y: y\n        }, {\n          x: x + realWidth,\n          y: y + realHeight\n        }, {\n          x: x,\n          y: y + realHeight\n        }];\n        toPoints = this.addPoints(toPoints, surface.length); // if polygon has less points then count, add\n\n        if (surface.length < 4) {\n          for (var i_2 = surface.length; i_2 < 4; i_2++) {\n            toPoints.push({\n              x: surface[i_2].x,\n              y: surface[i_2].y\n            });\n          }\n        }\n\n        if (hole && hole.length > 0) {\n          var middleX = bbox.x + bbox.width / 2;\n          var middleY = bbox.y + bbox.height / 2;\n\n          for (var i_3 = 0, hlen = hole.length; i_3 < hlen; i_3++) {\n            toPoints.push({\n              x: middleX,\n              y: middleY\n            });\n          }\n        }\n\n        this._morphFromPointsReal[i][0] = fromPoints;\n        this._morphToPointsReal[i][0] = toPoints;\n      }\n    }\n\n    this.morphable.currentPoints = this._morphFromPointsReal;\n    var animation = new Animation(this, {\n      property: \"morphProgress\",\n      from: 0,\n      to: 1\n    }, duration, easing);\n\n    this._disposers.push(animation);\n\n    animation.start();\n    return animation;\n  };\n\n  Object.defineProperty(Morpher.prototype, \"morphProgress\", {\n    /**\r\n     * Returns the progress of morph transition.\r\n     *\r\n     * @return Progress (0-1)\r\n     */\n    get: function get() {\n      return this._morphProgress;\n    },\n\n    /**\r\n     * Progress of the morph transition.\r\n     *\r\n     * Setting this will also trigger actual transformation.\r\n     *\r\n     * @param value  Progress (0-1)\r\n     */\n    set: function set(value) {\n      this._morphProgress = value;\n      var currentPoints = [];\n\n      if (value != null) {\n        var fromPoints = this._morphFromPointsReal;\n        var toPoints = this._morphToPointsReal;\n\n        if (fromPoints != null && toPoints != null) {\n          for (var i = 0, len = fromPoints.length; i < len; i++) {\n            var currentArea = [];\n            currentPoints.push(currentArea);\n            var surfaceFrom = fromPoints[i][0];\n            var holeFrom = fromPoints[i][1];\n            var surfaceTo = toPoints[i][0];\n            var holeTo = toPoints[i][1];\n\n            if (surfaceFrom && surfaceFrom.length > 0 && surfaceTo && surfaceTo.length > 0) {\n              var currentSurface = [];\n\n              for (var i_4 = 0, slen = surfaceFrom.length; i_4 < slen; i_4++) {\n                var point0 = surfaceFrom[i_4];\n                var point1 = surfaceTo[i_4];\n                var currentPoint = {\n                  x: point0.x + (point1.x * this.scaleRatio - point0.x) * value,\n                  y: point0.y + (point1.y * this.scaleRatio - point0.y) * value\n                };\n                currentSurface.push(currentPoint);\n              }\n\n              currentArea[0] = currentSurface;\n            }\n\n            if (holeFrom && holeFrom.length > 0 && holeTo && holeTo.length > 0) {\n              var currentHole = [];\n\n              for (var i_5 = 0, hlen = holeFrom.length; i_5 < hlen; i_5++) {\n                var point0 = holeFrom[i_5];\n                var point1 = holeTo[i_5];\n                var currentPoint = {\n                  x: point0.x + (point1.x * this.scaleRatio - point0.x) * value,\n                  y: point0.y + (point1.y * this.scaleRatio - point0.y) * value\n                };\n                currentHole.push(currentPoint);\n              }\n\n              currentArea[1] = currentHole;\n            }\n          }\n        }\n      }\n\n      this.morphable.currentPoints = currentPoints;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Restores the polygon to its original appearance.\r\n   *\r\n   * @param duration  Duration (ms)\r\n   * @param easing    Easing function\r\n   * @return Animation\r\n   */\n\n  Morpher.prototype.morphBack = function (duration, easing) {\n    this._morphToPointsReal = this._morphFromPointsReal;\n    this._morphFromPointsReal = this.morphable.currentPoints;\n\n    if (!$type.hasValue(duration)) {\n      duration = this.morphDuration;\n    }\n\n    if (!$type.hasValue(easing)) {\n      easing = this.morphEasing;\n    }\n\n    var animation = new Animation(this, {\n      property: \"morphProgress\",\n      from: 0,\n      to: 1\n    }, duration, easing);\n\n    this._disposers.push(animation);\n\n    animation.start();\n    return animation;\n  };\n\n  Object.defineProperty(Morpher.prototype, \"animations\", {\n    /**\r\n     * Returns a list of morph animations currently being played.\r\n     *\r\n     * @return List of animations\r\n     */\n    get: function get() {\n      if (!this._animations) {\n        this._animations = [];\n\n        this._disposers.push(new AnimationDisposer(this._animations));\n      }\n\n      return this._animations;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Morpher;\n}(BaseObject);\n\nexport { Morpher };","map":{"version":3,"sources":["../../../../../src/.internal/core/utils/Morpher.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Morpher module contains functionality that allows morphing one polygon to\r\n * another.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../Base\";\r\nimport { IPoint } from \"../defs/IPoint\";\r\nimport { IRectangle } from \"../defs/IRectangle\";\r\nimport { IMorphable } from \"../defs/IMorphable\";\r\nimport { IAnimatable, Animation, AnimationDisposer } from \"../utils/Animation\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $ease from \"../utils/Ease\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n\r\n/**\r\n * Morpher can be used to morph one polygon to some other polygon.\r\n */\r\nexport class Morpher extends BaseObject implements IAnimatable {\r\n\r\n\t/**\r\n\t * An element that will be a subject for morphing.\r\n\t */\r\n\tpublic morphable: IMorphable;\r\n\r\n\t/**\r\n\t * [_morphFromPointsReal description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _morphFromPointsReal: $type.Optional<Array<Array<Array<IPoint>>>>;\r\n\r\n\t/**\r\n\t * [_morphToPointsReal description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _morphToPointsReal: $type.Optional<Array<Array<Array<IPoint>>>>;\r\n\r\n\t/**\r\n\t * [_morphToPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _morphToPoints: $type.Optional<Array<Array<Array<IPoint>>>>;\r\n\r\n\t/**\r\n\t * Morph progress (0-1)\r\n\t */\r\n\tprotected _morphProgress: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * List of animations currently running.\r\n\t */\r\n\tprotected _animations: $type.Optional<Array<Animation>>;\r\n\r\n\t/**\r\n\t * A storage for measurements.\r\n\t */\r\n\tprotected _bboxes: IRectangle[] = [];\r\n\r\n\t/**\r\n\t * Duration of the morphing animation in milliseconds.\r\n\t */\r\n\tpublic morphDuration: number = 800;\r\n\r\n\t/**\r\n\t * An easing function to use for morphing animation.\r\n\t *\r\n\t * @see {@link Ease}\r\n\t */\r\n\tpublic morphEasing: (value: number) => number = $ease.cubicOut;\r\n\r\n\t/**\r\n\t * If set to `true`, all separate parts of the multi-part polygon will\r\n\t * morph into a single circle or polygon when using built-in methods\r\n\t * `morphToCircle()` or `morphToPolygon()`.\r\n\t *\r\n\t * Otherwise each separate part of polygon will morph to individual target\r\n\t * circle or polgyon.\r\n\t */\r\n\tpublic morphToSingle: boolean = true;\r\n\r\n\t/**\r\n\t * A ratio to scale morphed object in relation to the source object.\r\n\t */\r\n\tpublic scaleRatio: number = 1;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param morphable An object to morph\r\n\t */\r\n\tconstructor(morphable: IMorphable) {\r\n\t\tsuper();\r\n\t\tthis.className = \"Morpher\";\r\n\t\tthis.morphable = morphable;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Morphs a polygon to another polygon.\r\n\t *\r\n\t * @param toPoints  Corner points of the target shape\r\n\t * @param duration  Duration in milliseconds\r\n\t * @param easing    Easing function\r\n\t * @return Animation\r\n\t */\r\n\tpublic morphToPolygon(toPoints: Array<Array<Array<IPoint>>>, duration?: number, easing?: (value: number) => number): Animation {\r\n\t\tlet points: Array<Array<Array<IPoint>>> = this.morphable.currentPoints;\r\n\t\tif(points && toPoints){\r\n\t\t\tthis.sortPoints(points);\r\n\t\t\tthis.sortPoints(toPoints);\r\n\r\n\t\t\tthis._morphFromPointsReal = [];\r\n\t\t\tthis._morphToPointsReal = [];\r\n\r\n\t\t\tif (!$type.hasValue(duration)) {\r\n\t\t\t\tduration = this.morphDuration;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.hasValue(easing)) {\r\n\t\t\t\teasing = this.morphEasing;\r\n\t\t\t}\r\n\r\n\t\t\tthis._morphFromPointsReal = this.normalizePoints(toPoints, points);\r\n\t\t\tthis._morphToPointsReal = this.normalizePoints(points, toPoints);\r\n\r\n\t\t\tthis.morphable.currentPoints = this._morphFromPointsReal;\r\n\r\n\t\t\tlet animation = new Animation(this, { property: \"morphProgress\", from: 0, to: 1 }, duration, easing);\r\n\t\t\tthis._disposers.push(animation);\r\n\t\t\tanimation.start()\r\n\t\t\treturn animation;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [normalizePoints description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param pointsA  Point A\r\n\t * @param pointsB  Point B\r\n\t * @return Normalized points\r\n\t */\r\n\tpublic normalizePoints(pointsA: Array<Array<Array<IPoint>>>, pointsB: Array<Array<Array<IPoint>>>): Array<Array<Array<IPoint>>> {\r\n\t\tfor (let i = 0, len = pointsA.length; i < len; i++) {\r\n\t\t\tlet surfaceA: Array<IPoint> = pointsA[i][0];\r\n\r\n\t\t\tlet holeA: Array<IPoint> = pointsA[i][1];\r\n\t\t\tlet bboxA: IRectangle = $type.getValue($math.getBBox(surfaceA));\r\n\r\n\t\t\tlet middleX = bboxA.x + bboxA.width;\r\n\t\t\tlet middleY = bboxA.y + bboxA.height;\r\n\r\n\t\t\t// check if we have the same in PointsB\r\n\t\t\tif (!pointsB[i]) {\r\n\t\t\t\tpointsB[i] = [];\r\n\t\t\t}\r\n\r\n\t\t\t// check if we have surface in pointsB\r\n\t\t\tif (surfaceA && !pointsB[i][0]) {\r\n\t\t\t\tpointsB[i][0] = [{ x: middleX, y: middleY }, { x: middleX, y: middleY }];\r\n\t\t\t}\r\n\r\n\t\t\tif (pointsB[i][0]) {\r\n\t\t\t\tpointsB[i][0] = this.addPoints(pointsB[i][0], surfaceA.length);\r\n\r\n\t\t\t\tlet distance = Infinity;\r\n\t\t\t\tlet splitAt = 0;\r\n\r\n\t\t\t\tfor (let a = 0; a < pointsB[i][0].length; a++) {\r\n\t\t\t\t\tlet newDistance = $math.getDistance(pointsB[i][0][a], surfaceA[0]);\r\n\t\t\t\t\tif (newDistance < distance) {\r\n\t\t\t\t\t\tsplitAt = a;\r\n\t\t\t\t\t\tdistance = newDistance;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet partA = pointsB[i][0].slice(0, splitAt);\r\n\t\t\t\tlet partB = pointsB[i][0].slice(splitAt);\r\n\t\t\t\tpointsB[i][0] = partB.concat(partA);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (holeA) {\r\n\t\t\t\tif (!pointsB[i][1]) {\r\n\t\t\t\t\tpointsB[i][1] = [{ x: middleX, y: middleY }, { x: middleX, y: middleY }];\r\n\t\t\t\t}\r\n\t\t\t\tpointsB[i][1] = this.addPoints(pointsB[i][1], holeA.length);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn pointsB;\r\n\t}\r\n\r\n\t/**\r\n\t * [sortPoints description]\r\n\t *\r\n\t * @ignore Exclude from doc\r\n\t * @todo Description\r\n\t * @param points  [description]\r\n\t * @return                        common bbox of points\r\n\t */\r\n\tpublic sortPoints(points: Array<Array<Array<IPoint>>>): $type.Optional<IRectangle> {\r\n\t\tpoints.sort(function(a, b) {\r\n\t\t\tlet bbox1: IRectangle = $type.getValue($math.getBBox(a[0]));\r\n\t\t\tlet bbox2: IRectangle = $type.getValue($math.getBBox(b[0]));\r\n\r\n\t\t\tif (bbox1.width * bbox1.height > bbox2.width * bbox2.height) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet bboxes: IRectangle[] = [];\r\n\t\tfor (let i = 0, len = points.length; i < len; i++) {\r\n\t\t\tlet surface: IPoint[] = points[i][0];\r\n\t\t\tif (surface) {\r\n\t\t\t\tbboxes.push($type.getValue($math.getBBox(surface)));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn $math.getCommonRectangle(bboxes);\r\n\t}\r\n\r\n\t/**\r\n\t * Morphs polygon to a circle (it is actually a polygon which makes a circle).\r\n\t *\r\n\t * @param radius    Target circle radius (px)\r\n\t * @param duration  Duration (ms)\r\n\t * @param easing    Easing function\r\n\t * @return Animation\r\n\t */\r\n\tpublic morphToCircle(radius?: number, duration?: number, easing?: (value: number) => number): Animation {\r\n\t\tlet points: Array<Array<Array<IPoint>>> = this.morphable.points;\r\n\r\n\t\tlet commonBBox = this.sortPoints(points);\r\n\r\n\t\tthis._morphFromPointsReal = [];\r\n\t\tthis._morphToPointsReal = [];\r\n\r\n\t\tif (!$type.hasValue(duration)) {\r\n\t\t\tduration = this.morphDuration;\r\n\t\t}\r\n\r\n\t\tif (!$type.hasValue(easing)) {\r\n\t\t\teasing = this.morphEasing;\r\n\t\t}\r\n\r\n\t\t// surface\r\n\t\tfor (let i = 0, len = points.length; i < len; i++) {\r\n\t\t\tlet surface: IPoint[] = points[i][0];\r\n\t\t\tlet hole: IPoint[] = points[i][1];\r\n\r\n\t\t\tthis._morphFromPointsReal[i] = [];\r\n\t\t\tthis._morphToPointsReal[i] = [];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet toPoints: IPoint[] = surface;\r\n\t\t\t\tlet fromPoints: IPoint[] = surface;\r\n\t\t\t\tlet bbox: IRectangle = $type.getValue($math.getBBox(fromPoints)) // this._bboxes[i];\r\n\r\n\t\t\t\tif (this.morphToSingle) {\r\n\t\t\t\t\tbbox = $type.getValue(commonBBox);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet middleX: number = bbox.x + bbox.width / 2;\r\n\t\t\t\tlet middleY: number = bbox.y + bbox.height / 2;\r\n\t\t\t\tlet realRadius: $type.Optional<number> = radius;\r\n\t\t\t\tif (!$type.isNumber(realRadius)) {\r\n\t\t\t\t\trealRadius = Math.min(bbox.width / 2, bbox.height / 2);\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttoPoints = [];\r\n\r\n\t\t\t\t// find angle for the first point\r\n\t\t\t\tlet startAngle: number = $math.getAngle({ x: middleX, y: middleY }, surface[0]);\r\n\t\t\t\tlet count: number = 100;\r\n\r\n\t\t\t\tif (surface.length > count) {\r\n\t\t\t\t\tcount = surface.length;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfromPoints = this.addPoints(surface, count);\r\n\t\t\t\tcount = fromPoints.length; // add Points might increase number a bit\r\n\r\n\t\t\t\tlet angle: number = 360 / (count - 1);\r\n\r\n\t\t\t\tfor (let a: number = 0; a < count; a++) {\r\n\t\t\t\t\tlet realAngle: number = angle * a + startAngle;\r\n\t\t\t\t\tlet pointOnCircle: IPoint = { x: middleX + realRadius * $math.cos(realAngle), y: middleY + realRadius * $math.sin(realAngle) };\r\n\t\t\t\t\ttoPoints[a] = pointOnCircle;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (hole && hole.length > 0) {\r\n\t\t\t\t\tfor (let i = 0, hlen = hole.length; i < hlen; i++) {\r\n\t\t\t\t\t\ttoPoints.push({ x: middleX, y: middleY });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._morphFromPointsReal[i][0] = fromPoints;\r\n\t\t\t\tthis._morphToPointsReal[i][0] = toPoints;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.morphable.currentPoints = this._morphFromPointsReal;\r\n\r\n\t\tlet animation = new Animation(this, { property: \"morphProgress\", from: 0, to: 1 }, duration, easing);\r\n\t\tthis._disposers.push(animation);\r\n\t\tanimation.start()\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @ignore Exclude from doc\r\n\t * @todo Description\r\n\t * @param points         [description]\r\n\t * @param mustHaveCount  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic addPoints(points: IPoint[], mustHaveCount: number): IPoint[] {\r\n\t\tlet addToSegmentCount: number = Math.round(mustHaveCount / points.length);\r\n\t\tlet newPoints: IPoint[] = [];\r\n\t\tfor (let i = 0, len = points.length; i < len; i++) {\r\n\t\t\tlet point0: IPoint = points[i];\r\n\t\t\tlet point1: IPoint;\r\n\t\t\tif (i == points.length - 1) {\r\n\t\t\t\tpoint1 = points[0];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpoint1 = points[i + 1];\r\n\t\t\t}\r\n\r\n\t\t\tnewPoints.push(point0);\r\n\r\n\t\t\tfor (let p: number = 1; p < addToSegmentCount; p++) {\r\n\t\t\t\tlet percent: number = p / addToSegmentCount;\r\n\t\t\t\tlet extraPoint: IPoint = { x: point0.x + (point1.x - point0.x) * percent, y: point0.y + (point1.y - point0.y) * percent }\r\n\t\t\t\tnewPoints.push(extraPoint);\r\n\t\t\t}\r\n\r\n\t\t\t// stop adding in case we already added more than left in original\r\n\t\t\tif (newPoints.length + points.length - i == mustHaveCount) {\r\n\t\t\t\taddToSegmentCount = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (newPoints.length < mustHaveCount && points.length > 0) {\r\n\t\t\tlet lastPoint: IPoint = points[points.length - 1];\r\n\t\t\tfor (let p: number = newPoints.length; p < mustHaveCount; p++) {\r\n\t\t\t\t// add same as last\r\n\t\t\t\tnewPoints.push({ x: lastPoint.x, y: lastPoint.y });\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn newPoints;\r\n\t}\r\n\r\n\t/**\r\n\t * Morphs polygon into a rectangular polygon.\r\n\t *\r\n\t * @param width     Width of the target rectangle (px)\r\n\t * @param height    Height of the target rectangle (px)\r\n\t * @param duration  Duration (ms)\r\n\t * @param easing    Easing function\r\n\t * @return Animation\r\n\t */\r\n\tpublic morphToRectangle(width?: number, height?: number, duration?: number, easing?: (value: number) => number): Animation {\r\n\t\tlet points: Array<Array<Array<IPoint>>> = this.morphable.points;\r\n\r\n\t\tthis.sortPoints(points);\r\n\r\n\t\tthis._morphFromPointsReal = [];\r\n\t\tthis._morphToPointsReal = [];\r\n\r\n\t\tif (!$type.hasValue(duration)) {\r\n\t\t\tduration = this.morphDuration;\r\n\t\t}\r\n\r\n\t\tif (!$type.hasValue(easing)) {\r\n\t\t\teasing = this.morphEasing;\r\n\t\t}\r\n\r\n\t\t//\t\tlet biggestBBox: IRectangle = this._bboxes[this._biggestIndex];\r\n\r\n\t\t// surface\r\n\t\tfor (let i = 0, len = points.length; i < len; i++) {\r\n\t\t\tlet surface: IPoint[] = points[i][0];\r\n\t\t\tlet hole: IPoint[] = points[i][1];\r\n\r\n\t\t\tthis._morphFromPointsReal[i] = [];\r\n\t\t\tthis._morphToPointsReal[i] = [];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet toPoints: IPoint[] = surface;\r\n\t\t\t\tlet fromPoints: IPoint[] = surface;\r\n\t\t\t\tlet bbox: IRectangle = this._bboxes[i];\r\n\r\n\r\n\t\t\t\t// we only work with first area. TODO: maybe we should find the biggest one?\r\n\t\t\t\tif (this.morphToSingle) {\r\n\t\t\t\t\t//if (i != this._biggestIndex) {\r\n\t\t\t\t\t//\tbbox = { x: biggestBBox.x + biggestBBox.width / 2, y: biggestBBox.y + biggestBBox.height / 2, width: 0, height: 0 };\r\n\t\t\t\t\t//}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet x: number = bbox.x;\r\n\t\t\t\tlet y: number = bbox.y;\r\n\r\n\t\t\t\tlet realWidth: $type.Optional<number> = width;\r\n\t\t\t\tlet realHeight: $type.Optional<number> = height;\r\n\r\n\t\t\t\tif (!$type.isNumber(realWidth)) {\r\n\t\t\t\t\trealWidth = bbox.width;\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.isNumber(realHeight)) {\r\n\t\t\t\t\trealHeight = bbox.height;\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttoPoints = [{ x: x, y: y }, { x: x + realWidth, y: y }, { x: x + realWidth, y: y + realHeight }, { x: x, y: y + realHeight }];\r\n\t\t\t\ttoPoints = this.addPoints(toPoints, surface.length);\r\n\r\n\t\t\t\t// if polygon has less points then count, add\r\n\t\t\t\tif (surface.length < 4) {\r\n\t\t\t\t\tfor (let i = surface.length; i < 4; i++) {\r\n\t\t\t\t\t\ttoPoints.push({ x: surface[i].x, y: surface[i].y });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (hole && hole.length > 0) {\r\n\t\t\t\t\tlet middleX: number = bbox.x + bbox.width / 2;\r\n\t\t\t\t\tlet middleY: number = bbox.y + bbox.height / 2;\r\n\r\n\t\t\t\t\tfor (let i = 0, hlen = hole.length; i < hlen; i++) {\r\n\t\t\t\t\t\ttoPoints.push({ x: middleX, y: middleY });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._morphFromPointsReal[i][0] = fromPoints;\r\n\t\t\t\tthis._morphToPointsReal[i][0] = toPoints;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.morphable.currentPoints = this._morphFromPointsReal;\r\n\r\n\t\tlet animation = new Animation(this, { property: \"morphProgress\", from: 0, to: 1 }, duration, easing);\r\n\t\tthis._disposers.push(animation);\r\n\t\tanimation.start()\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Progress of the morph transition.\r\n\t *\r\n\t * Setting this will also trigger actual transformation.\r\n\t *\r\n\t * @param value  Progress (0-1)\r\n\t */\r\n\tpublic set morphProgress(value: $type.Optional<number>) {\r\n\t\tthis._morphProgress = value;\r\n\r\n\t\tlet currentPoints: Array<Array<Array<IPoint>>> = [];\r\n\r\n\t\tif (value != null) {\r\n\t\t\tlet fromPoints: $type.Optional<Array<Array<Array<IPoint>>>> = this._morphFromPointsReal;\r\n\t\t\tlet toPoints: $type.Optional<Array<Array<Array<IPoint>>>> = this._morphToPointsReal;\r\n\r\n\t\t\tif (fromPoints != null && toPoints != null) {\r\n\r\n\t\t\t\tfor (let i = 0, len = fromPoints.length; i < len; i++) {\r\n\r\n\t\t\t\t\tlet currentArea: Array<Array<IPoint>> = [];\r\n\t\t\t\t\tcurrentPoints.push(currentArea);\r\n\r\n\t\t\t\t\tlet surfaceFrom: IPoint[] = fromPoints[i][0];\r\n\t\t\t\t\tlet holeFrom: IPoint[] = fromPoints[i][1];\r\n\r\n\t\t\t\t\tlet surfaceTo: IPoint[] = toPoints[i][0];\r\n\t\t\t\t\tlet holeTo: IPoint[] = toPoints[i][1];\r\n\r\n\t\t\t\t\tif (surfaceFrom && surfaceFrom.length > 0 && surfaceTo && surfaceTo.length > 0) {\r\n\r\n\t\t\t\t\t\tlet currentSurface: IPoint[] = [];\r\n\r\n\t\t\t\t\t\tfor (let i = 0, slen = surfaceFrom.length; i < slen; i++) {\r\n\t\t\t\t\t\t\tlet point0: IPoint = surfaceFrom[i];\r\n\t\t\t\t\t\t\tlet point1: IPoint = surfaceTo[i];\r\n\r\n\t\t\t\t\t\t\tlet currentPoint: IPoint = { x: point0.x + (point1.x * this.scaleRatio - point0.x) * value, y: point0.y + (point1.y * this.scaleRatio - point0.y) * value }\r\n\r\n\t\t\t\t\t\t\tcurrentSurface.push(currentPoint);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcurrentArea[0] = currentSurface;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (holeFrom && holeFrom.length > 0 && holeTo && holeTo.length > 0) {\r\n\t\t\t\t\t\tlet currentHole: IPoint[] = [];\r\n\t\t\t\t\t\tfor (let i = 0, hlen = holeFrom.length; i < hlen; i++) {\r\n\t\t\t\t\t\t\tlet point0: IPoint = holeFrom[i];\r\n\t\t\t\t\t\t\tlet point1: IPoint = holeTo[i];\r\n\r\n\t\t\t\t\t\t\tlet currentPoint: IPoint = { x: point0.x + (point1.x * this.scaleRatio - point0.x) * value, y: point0.y + (point1.y * this.scaleRatio - point0.y) * value }\r\n\r\n\t\t\t\t\t\t\tcurrentHole.push(currentPoint);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcurrentArea[1] = currentHole;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.morphable.currentPoints = currentPoints;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the progress of morph transition.\r\n\t *\r\n\t * @return Progress (0-1)\r\n\t */\r\n\tpublic get morphProgress(): $type.Optional<number> {\r\n\t\treturn this._morphProgress;\r\n\t}\r\n\r\n\t/**\r\n\t * Restores the polygon to its original appearance.\r\n\t *\r\n\t * @param duration  Duration (ms)\r\n\t * @param easing    Easing function\r\n\t * @return Animation\r\n\t */\r\n\tpublic morphBack(duration?: number, easing?: (value: number) => number): Animation {\r\n\t\tthis._morphToPointsReal = this._morphFromPointsReal;\r\n\t\tthis._morphFromPointsReal = this.morphable.currentPoints;\r\n\r\n\t\tif (!$type.hasValue(duration)) {\r\n\t\t\tduration = this.morphDuration;\r\n\t\t}\r\n\r\n\t\tif (!$type.hasValue(easing)) {\r\n\t\t\teasing = this.morphEasing;\r\n\t\t}\r\n\r\n\t\tlet animation = new Animation(this, { property: \"morphProgress\", from: 0, to: 1 }, duration, easing);\r\n\t\tthis._disposers.push(animation);\r\n\t\tanimation.start()\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a list of morph animations currently being played.\r\n\t *\r\n\t * @return List of animations\r\n\t */\r\n\tpublic get animations(): Array<Animation> {\r\n\t\tif (!this._animations) {\r\n\t\t\tthis._animations = [];\r\n\t\t\tthis._disposers.push(new AnimationDisposer(this._animations));\r\n\t\t}\r\n\t\treturn this._animations;\r\n\t}\r\n\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}