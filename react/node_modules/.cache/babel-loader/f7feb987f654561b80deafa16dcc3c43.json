{"ast":null,"code":"/**\r\n * Defines Funnel Chart Series.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { PercentSeries, PercentSeriesDataItem } from \"./PercentSeries\";\nimport { FunnelSlice } from \"../elements/FunnelSlice\";\nimport { FunnelTick } from \"../elements/FunnelTick\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { registry } from \"../../core/Registry\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $array from \"../../core/utils/Array\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { Disposer } from \"../../core/utils/Disposer\";\nimport { options } from \"../../core/Options\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n//@todo: sequenced?\n\n/**\r\n * Defines a [[DataItem]] for [[FunnelSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar FunnelSeriesDataItem =\n/** @class */\nfunction (_super) {\n  __extends(FunnelSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function FunnelSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"FunnelSeriesDataItem\"; // this helps to invalidate series when value is 0 an it is hidden (no other events are triggered then)\n\n    _this.events.on(\"visibilitychanged\", function () {\n      if (_this.component) {\n        _this.component.invalidateDataItems();\n      }\n    }, _this, false);\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(FunnelSeriesDataItem.prototype, \"sliceLink\", {\n    /**\r\n     * A [[FunnelSlice]] element, related to this data item ([[FunnelSlice]]).\r\n     *\r\n     * @readonly\r\n     * @return Slice element\r\n     */\n    get: function () {\n      var _this = this;\n\n      if (!this._sliceLink) {\n        var sliceLink_1 = this.component.sliceLinks.create();\n        this._sliceLink = sliceLink_1;\n\n        this._disposers.push(sliceLink_1);\n\n        sliceLink_1.parent = this.component.slicesContainer;\n\n        this._disposers.push(new Disposer(function () {\n          if (_this.component) {\n            _this.component.sliceLinks.removeValue(sliceLink_1);\n          }\n        }));\n\n        this.addSprite(sliceLink_1);\n        sliceLink_1.visible = this.visible;\n      }\n\n      return this._sliceLink;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return FunnelSeriesDataItem;\n}(PercentSeriesDataItem);\n\nexport { FunnelSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IFunnelSeriesEvents} for a list of available Events\r\n * @see {@link IFunnelSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\n\nvar FunnelSeries =\n/** @class */\nfunction (_super) {\n  __extends(FunnelSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function FunnelSeries() {\n    var _this = _super.call(this) || this;\n\n    _this._nextY = 0;\n    _this.className = \"FunnelSeries\";\n    _this.orientation = \"vertical\";\n    _this.width = percent(100);\n    _this.height = percent(100);\n    _this.slicesContainer.width = percent(100);\n    _this.slicesContainer.height = percent(100);\n\n    _this._disposers.push(_this.slicesContainer.events.on(\"maxsizechanged\", _this.invalidateDataItems, _this, false));\n\n    _this.labelsOpposite = true;\n    _this.labelsContainer.layout = \"absolute\";\n    _this.bottomRatio = 0;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Creates a [[FunnelSlice]] element.\r\n   *\r\n   * @return Slice\r\n   */\n\n\n  FunnelSeries.prototype.createSlice = function () {\n    return new FunnelSlice();\n  };\n  /**\r\n   * Creates a [[FunnelTick]] element.\r\n   *\r\n   * @return Tick\r\n   */\n\n\n  FunnelSeries.prototype.createTick = function () {\n    return new FunnelTick();\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  FunnelSeries.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Funnel Series\");\n    }\n  };\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  FunnelSeries.prototype.createDataItem = function () {\n    return new FunnelSeriesDataItem();\n  };\n  /**\r\n   * Inits FunnelSlice.\r\n   *\r\n   * @param slice to init\r\n   */\n\n\n  FunnelSeries.prototype.initSlice = function (slice) {\n    slice.isMeasured = false;\n    slice.defaultState.properties.scale = 1;\n    slice.observe(\"scale\", this.handleSliceScale, this);\n    slice.observe([\"dx\", \"dy\", \"x\", \"y\"], this.handleSliceMove, this);\n    slice.tooltipText = \"{category}: {value.percent.formatNumber('#.#')}% ({value.value})\";\n    var hoverState = slice.states.create(\"hover\");\n    hoverState.properties.expandDistance = 0.2;\n  };\n  /**\r\n   * [initLabel description]\r\n   *\r\n   * @todo Description\r\n   * @param label [description]\r\n   */\n\n\n  FunnelSeries.prototype.initLabel = function (label) {\n    _super.prototype.initLabel.call(this, label);\n\n    label.verticalCenter = \"middle\";\n    label.horizontalCenter = \"middle\";\n    label.isMeasured = true;\n    label.padding(5, 5, 5, 5);\n  };\n  /**\r\n   * (Re)validates the whole series, effectively causing it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  FunnelSeries.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n\n    this._nextY = 0;\n  };\n  /**\r\n   * [validateDataElements description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  FunnelSeries.prototype.validateDataElements = function () {\n    var _this = this;\n\n    var slicesContainer = this.slicesContainer;\n    var labelsContainer = this.labelsContainer;\n    var labelTemplate = this.labels.template;\n\n    if (this.alignLabels) {\n      labelTemplate.interactionsEnabled = true;\n      slicesContainer.isMeasured = true;\n      labelsContainer.isMeasured = true;\n    } else {\n      labelTemplate.interactionsEnabled = false;\n      slicesContainer.isMeasured = false;\n      labelsContainer.isMeasured = false;\n    }\n\n    var total = 0;\n    var count = 0;\n    this.dataItems.each(function (dItem) {\n      if ($type.hasValue(dItem.value)) {\n        count++;\n\n        if (dItem.value > 0) {\n          total += Math.abs(dItem.getWorkingValue(\"value\") / dItem.value);\n        } else {\n          if (_this.ignoreZeroValues) {\n            count--;\n          } else {\n            if (!dItem.visible || dItem.__disabled || dItem.isHiding) {\n              count--;\n            } else {\n              total += 1;\n            }\n          }\n        }\n      }\n    });\n    this._total = 1 / count * total;\n    this._count = count;\n\n    _super.prototype.validateDataElements.call(this);\n\n    this.arrangeLabels();\n  };\n  /**\r\n   * [getNextValue description]\r\n   *\r\n   * @todo Description\r\n   * @param dataItem  [description]\r\n   * @return [description]\r\n   */\n\n\n  FunnelSeries.prototype.getNextValue = function (dataItem) {\n    var index = dataItem.index;\n    var nextValue = dataItem.getWorkingValue(\"value\");\n\n    if (index < this.dataItems.length - 1) {\n      var nextItem = this.dataItems.getIndex(index + 1);\n      nextValue = nextItem.getWorkingValue(\"value\");\n\n      if (!nextItem.visible || nextItem.isHiding || nextItem.__disabled || nextItem.value == 0 && this.ignoreZeroValues) {\n        return this.getNextValue(nextItem);\n      }\n    }\n\n    return nextValue;\n  };\n  /**\r\n   * [formDataElement description]\r\n   *\r\n   * @todo Description\r\n   */\n\n\n  FunnelSeries.prototype.formDataElement = function () {};\n  /**\r\n   * Validates data item's element, effectively redrawing it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n\n  FunnelSeries.prototype.validateDataElement = function (dataItem) {\n    var _this = this; //if ($type.hasValue(dataItem.value)) {\n    // FunnelSlice\n\n\n    var slice = dataItem.slice;\n    slice.orientation = this.orientation;\n    var sliceLink = dataItem.sliceLink;\n    sliceLink.orientation = this.orientation;\n    var tick = dataItem.tick;\n    var label = dataItem.label;\n    tick.slice = slice;\n    tick.label = label;\n\n    if ($type.hasValue(dataItem.value)) {\n      this.decorateSlice(dataItem);\n      $array.each(dataItem.sprites, function (sprite) {\n        if (dataItem.value == 0 && _this.ignoreZeroValues) {\n          sprite.__disabled = true;\n        } else {\n          sprite.__disabled = false;\n        }\n      });\n    } else {\n      $array.each(dataItem.sprites, function (sprite) {\n        sprite.__disabled = true;\n      });\n    }\n\n    if (dataItem.index == this.dataItems.length - 1) {\n      sliceLink.disabled = true;\n    } // do this at the end, otherwise bullets won't be positioned properly\n\n\n    _super.prototype.validateDataElement.call(this, dataItem);\n\n    sliceLink.fill = slice.fill; //}\n  };\n  /**\r\n   * [decorateSlice description]\r\n   *\r\n   * @todo Description\r\n   * @param dataItem [description]\r\n   */\n\n\n  FunnelSeries.prototype.decorateSlice = function (dataItem) {\n    var slice = dataItem.slice;\n    var sliceLink = dataItem.sliceLink;\n    var label = dataItem.label;\n    var tick = dataItem.tick;\n    var maxWidth = this.slicesContainer.innerWidth;\n    var maxHeight = this.slicesContainer.innerHeight;\n    var nextValue = this.getNextValue(dataItem);\n    var workingValue = Math.abs(dataItem.getWorkingValue(\"value\"));\n    var bottomRatio = this.bottomRatio;\n    var d = 1;\n\n    if (dataItem.value != 0) {\n      d = workingValue / Math.abs(dataItem.value);\n    } else {\n      if (dataItem.__disabled || dataItem.isHiding || !dataItem.visible) {\n        d = 0.000001;\n      }\n    }\n\n    if (this.ignoreZeroValues && dataItem.value == 0) {\n      dataItem.__disabled = true;\n      return;\n    } else {\n      dataItem.__disabled = false;\n    }\n\n    if (this._nextY == Infinity) {\n      this._nextY = 0;\n    }\n\n    if (this.orientation == \"vertical\") {\n      var linkHeight = sliceLink.pixelHeight * d;\n      maxHeight = maxHeight + linkHeight; // to avoid one link gap in the bottom\n\n      slice.topWidth = workingValue / this.dataItem.values.value.high * maxWidth;\n      slice.bottomWidth = (workingValue - (workingValue - nextValue) * bottomRatio) / this.dataItem.values.value.high * maxWidth;\n      sliceLink.topWidth = slice.bottomWidth;\n      sliceLink.bottomWidth = (workingValue - (workingValue - nextValue)) / this.dataItem.values.value.high * maxWidth;\n      slice.y = this._nextY;\n      slice.height = Math.min(100000, $math.max(0, maxHeight / this._count * d / this._total - linkHeight));\n      slice.x = maxWidth / 2;\n\n      if (!this.alignLabels) {\n        label.x = slice.x;\n      } else {\n        label.x = undefined;\n      }\n\n      label.y = slice.pixelY + slice.pixelHeight * tick.locationY;\n      this._nextY += slice.pixelHeight + linkHeight;\n      sliceLink.y = this._nextY - linkHeight;\n      sliceLink.x = slice.x;\n    } else {\n      var linkWidth = sliceLink.pixelWidth * d;\n      maxWidth = maxWidth + linkWidth; // to avoid one link gap in the bottom\n\n      slice.topWidth = workingValue / this.dataItem.values.value.high * maxHeight;\n      slice.bottomWidth = (workingValue - (workingValue - nextValue) * bottomRatio) / this.dataItem.values.value.high * maxHeight;\n      sliceLink.topWidth = slice.bottomWidth;\n      sliceLink.bottomWidth = (workingValue - (workingValue - nextValue)) / this.dataItem.values.value.high * maxHeight;\n      slice.x = this._nextY;\n      slice.width = Math.min(100000, maxWidth / this._count * d * 1 / this._total - linkWidth);\n      slice.y = maxHeight / 2;\n\n      if (!this.alignLabels) {\n        label.y = slice.y;\n      } else {\n        label.y = this.labelsContainer.measuredHeight;\n      }\n\n      label.x = slice.pixelX + slice.pixelWidth * tick.locationX;\n      this._nextY += slice.pixelWidth + linkWidth;\n      sliceLink.x = this._nextY - linkWidth;\n      sliceLink.y = slice.y;\n    }\n  };\n\n  FunnelSeries.prototype.getLastLabel = function (index) {\n    if (index > 0) {\n      var lastLabel = this.labels.getIndex(index);\n\n      if (lastLabel.__disabled || !lastLabel.visible) {\n        return this.getLastLabel(index - 1);\n      } else {\n        return lastLabel;\n      }\n    }\n  };\n  /**\r\n   * [arrangeLabels description]\r\n   *\r\n   * @todo Description\r\n   */\n\n\n  FunnelSeries.prototype.arrangeLabels = function () {\n    if (this.alignLabels) {\n      var count = this.labels.length;\n\n      if (count > 1) {\n        var lastLabel = this.getLastLabel(count - 1);\n\n        if (lastLabel) {\n          var lastY = lastLabel.pixelY;\n          var lastX = lastLabel.pixelX;\n\n          if (count > 1) {\n            for (var i = count - 2; i >= 0; i--) {\n              var label = this.labels.getIndex(i);\n\n              if (label.visible && !label.__disabled) {\n                if (label.invalid) {\n                  label.validate();\n                }\n\n                if (this.orientation == \"vertical\") {\n                  if (label.pixelY + label.measuredHeight > lastY) {\n                    label.y = Math.min(1000000, lastY - label.measuredHeight);\n                  }\n                } // horizontal\n                else {\n                    if (label.pixelX + label.measuredWidth > lastX) {\n                      label.x = Math.min(1000000, lastX - label.measuredWidth);\n                    }\n                  }\n\n                lastY = label.pixelY;\n                lastX = label.pixelX;\n              }\n            }\n\n            lastY = 0;\n            lastX = 0;\n\n            for (var i = 0; i < count; i++) {\n              var label = this.labels.getIndex(i);\n\n              if (label.visible && !label.__disabled) {\n                if (label.invalid) {\n                  label.validate();\n                }\n\n                if (this.orientation == \"vertical\") {\n                  if (label.pixelY < lastY) {\n                    label.y = Math.min(1000000, lastY);\n                  }\n                } // horizontal\n                else {\n                    if (label.pixelX < lastX) {\n                      label.x = Math.min(1000000, lastX);\n                    }\n                  }\n\n                lastY += label.measuredHeight;\n                lastX += label.measuredWidth;\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n  /**\r\n   * Positions series bullet.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param bullet  Bullet\r\n   */\n\n\n  FunnelSeries.prototype.positionBullet = function (bullet) {\n    _super.prototype.positionBullet.call(this, bullet);\n\n    var dataItem = bullet.dataItem;\n    var slice = dataItem.slice;\n    var locationX = bullet.locationX;\n\n    if (!$type.isNumber(locationX)) {\n      locationX = 0.5;\n    }\n\n    var locationY = bullet.locationY;\n\n    if (!$type.isNumber(locationY)) {\n      locationY = 1;\n    }\n\n    bullet.x = slice.pixelX + slice.measuredWidth * locationX;\n    bullet.y = slice.pixelY + slice.measuredHeight * locationY;\n  };\n\n  Object.defineProperty(FunnelSeries.prototype, \"orientation\", {\n    /**\r\n     * @return Orientation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"orientation\");\n    },\n\n    /**\r\n     * Orientation of the funnel slices: \"horizontal\" or \"vertical\" (default).\r\n     *\r\n     * @default \"vertical\"\r\n     * @param value Orientation\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"orientation\", value)) {\n        this.labelsOpposite = this.labelsOpposite;\n        this.invalidate();\n\n        if (value == \"vertical\") {\n          this.ticks.template.locationX = 1;\n          this.ticks.template.locationY = 0.5;\n          this.labels.template.rotation = 0;\n          this.layout = \"horizontal\";\n        } else {\n          this.ticks.template.locationX = 0.5;\n          this.ticks.template.locationY = 1;\n          this.labels.template.rotation = -90;\n          this.layout = \"vertical\";\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FunnelSeries.prototype, \"bottomRatio\", {\n    /**\r\n     * @return {number}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"bottomRatio\");\n    },\n\n    /**\r\n     * Indicates how slice's bottom will change in relation to slices top AND\r\n     * next slices top.\r\n     *\r\n     * Basically it's a relative value (0-1) that indicates bottom width\r\n     * position between current slice's top width and the top withd of the next\r\n     * one.\r\n     *\r\n     * The scale goes from 0 (closer to current slice width) to 1 (closer to next\r\n     * slice with).\r\n     *\r\n     * `0` (default) will mean that bottom will be the same as top, resulting in\r\n     * a prefectly square slice.\r\n     *\r\n     * From the data-viz standpoint `0` is a correct setting, since area of the\r\n     * slices will depict their value correctly.\r\n     *\r\n     * `1` will mean that slice will become trapezoid with its bottom matching\r\n     * width of the next slice.\r\n     *\r\n     * `0.5` will make bottom width be in the middle of width of current slice\r\n     * and the next slice.\r\n     *\r\n     * @default 0\r\n     * @param {number}\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"bottomRatio\", value)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FunnelSeries.prototype, \"sliceLinks\", {\n    /**\r\n     * A list of elements linking each actual slice.\r\n     *\r\n     * Please note that links are [[FunnelSlice]] objects, just like real links,\r\n     * so they have all the same configuration options.\r\n     *\r\n     * You can use `template` of this link, to specify how links will look.\r\n     *\r\n     * ```TypeScript\r\n     * series.sliceLinks.template.fillOpacity = 0.5;\r\n     * ```\r\n     * ```JavaScript\r\n     * series.sliceLinks.template.fillOpacity = 0.5;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     \"type\": \"FunnelSeries\",\r\n     *      // ...\r\n     *      \"sliceLinks\": {\r\n     *        \"fillOpacity\": 0.5\r\n     *      }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @return Funnel links\r\n     */\n    get: function () {\n      if (!this._sliceLinks) {\n        var sliceLink = new FunnelSlice();\n        sliceLink.applyOnClones = true;\n        sliceLink.fillOpacity = 0.5;\n        sliceLink.expandDistance = -0.3;\n        sliceLink.hiddenState.properties.opacity = 0;\n\n        this._disposers.push(sliceLink);\n\n        this._sliceLinks = new ListTemplate(sliceLink);\n\n        this._disposers.push(new ListDisposer(this._sliceLinks));\n      }\n\n      return this._sliceLinks;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Shows hidden series.\r\n   *\r\n   * @param duration  Duration of reveal animation (ms)\r\n   * @return Animation\r\n   */\n\n  FunnelSeries.prototype.show = function (duration) {\n    var _this = this;\n\n    var startIndex = this.startIndex;\n    var endIndex = this.endIndex;\n    var interpolationDuration = this.defaultState.transitionDuration;\n\n    if ($type.isNumber(duration)) {\n      interpolationDuration = duration;\n    }\n\n    if (!options.animationsEnabled) {\n      interpolationDuration = 0;\n    }\n\n    var delay = 0;\n    $iter.each($iter.indexed(this.dataItems.iterator()), function (a) {\n      var i = a[0];\n      var dataItem = a[1];\n\n      if (_this.sequencedInterpolation) {\n        delay = _this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\n      }\n\n      dataItem.show(interpolationDuration, delay, [\"value\"]);\n    });\n\n    var animation = _super.prototype.show.call(this, duration);\n\n    return animation;\n  };\n  /**\r\n   * Hides series.\r\n   *\r\n   * @param duration  Duration of hiding animation (ms)\r\n   * @return Animation\r\n   */\n\n\n  FunnelSeries.prototype.hide = function (duration) {\n    var _this = this;\n\n    var fields = [\"value\"];\n    var value = 0;\n    var startIndex = this.startIndex;\n    var endIndex = this.endIndex;\n    var delay = 0;\n    var interpolationDuration = this.hiddenState.transitionDuration;\n\n    if ($type.isNumber(duration)) {\n      interpolationDuration = duration;\n    }\n\n    if (!options.animationsEnabled) {\n      interpolationDuration = 0;\n    }\n\n    $iter.each($iter.indexed(this.dataItems.iterator()), function (a) {\n      var i = a[0];\n      var dataItem = a[1];\n\n      if (_this.sequencedInterpolation) {\n        delay = _this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\n      }\n\n      dataItem.hide(interpolationDuration, delay, value, fields);\n    });\n\n    var animation = _super.prototype.hide.call(this, duration);\n\n    if (animation && !animation.isFinished()) {\n      animation.delay(delay);\n    }\n\n    return animation;\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  FunnelSeries.prototype.setAlignLabels = function (value) {\n    _super.prototype.setAlignLabels.call(this, value);\n\n    this.ticks.template.disabled = !value;\n    var labelsContainer = this.labelsContainer;\n\n    if (labelsContainer) {\n      // do not align\n      if (!value) {\n        labelsContainer.width = percent(100);\n        labelsContainer.height = percent(100);\n      } //align\n      else {\n          labelsContainer.height = undefined;\n          labelsContainer.width = undefined;\n          labelsContainer.margin(10, 10, 10, 10);\n        }\n    }\n\n    this.labelsOpposite = this.labelsOpposite;\n  };\n\n  Object.defineProperty(FunnelSeries.prototype, \"labelsOpposite\", {\n    /**\r\n     * @return Labels on opposite side?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"labelsOpposite\");\n    },\n\n    /**\r\n     * Put labels on the oppsite side of the series?\r\n     *\r\n     * This setting is only used if `alignLabels = true`.\r\n     *\r\n     * If set to `true` (default) labels will be drawn to the right (on vertical\r\n     * series), or to the bottom (on horizontal series).\r\n     *\r\n     * If set to `false`, labels will be positioned to the left or top\r\n     * respectively.\r\n     *\r\n     * @default true\r\n     * @since 4.1.13\r\n     * @param  value  Labels on opposite side?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"labelsOpposite\", value);\n      var labelTemplate = this.labels.template;\n      var labelAlign = \"none\";\n      var labelValign = \"none\";\n\n      if (!this.alignLabels) {\n        if (this.orientation == \"vertical\") {\n          labelAlign = \"center\";\n        } else {\n          labelValign = \"middle\";\n        }\n      } else {\n        // opposite (left/bottom)\n        if (value) {\n          this.labelsContainer.toFront(); // left\n\n          if (this.orientation == \"vertical\") {\n            this.ticks.template.locationX = 1;\n            labelTemplate.horizontalCenter = \"left\";\n            labelAlign = \"right\";\n          } // bottom\n          else {\n              this.ticks.template.locationY = 1;\n              labelTemplate.horizontalCenter = \"right\";\n              labelValign = \"bottom\";\n            }\n        } // non oposite (right/top)\n        else {\n            this.labelsContainer.toBack(); // right\n\n            if (this.orientation == \"vertical\") {\n              this.ticks.template.locationX = 0;\n              labelAlign = \"left\";\n            } // top\n            else {\n                labelValign = \"top\";\n                this.ticks.template.locationY = 0;\n              }\n          }\n      }\n\n      labelTemplate.align = labelAlign;\n      labelTemplate.valign = labelValign;\n      this.validateLayout();\n      this.ticks.each(function (tick) {\n        tick.invalidate();\n      });\n      this.invalidateDataItems();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return FunnelSeries;\n}(PercentSeries);\n\nexport { FunnelSeries };\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"FunnelSeries\"] = FunnelSeries;\nregistry.registeredClasses[\"FunnelSeriesDataItem\"] = FunnelSeriesDataItem;","map":{"version":3,"sources":["../../../../../src/.internal/charts/series/FunnelSeries.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Defines Funnel Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPercentSeriesAdapters, IPercentSeriesDataFields, IPercentSeriesEvents, IPercentSeriesProperties, PercentSeries, PercentSeriesDataItem } from \"./PercentSeries\";\r\nimport { FunnelSlice } from \"../elements/FunnelSlice\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { FunnelTick } from \"../elements/FunnelTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { SlicedChart } from \"../types/SlicedChart\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { Align } from \"../../core/defs/Align\";\r\nimport { VerticalAlign } from \"../../core/defs/VerticalAlign\";\r\nimport { options } from \"../../core/Options\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[FunnelSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class FunnelSeriesDataItem extends PercentSeriesDataItem {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t */\r\n\tpublic _slice: FunnelSlice;\r\n\r\n\t/**\r\n\t * A reference to a label element.\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * A reference to a tick element.\r\n\t */\r\n\tpublic _tick: FunnelTick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: FunnelSeries;\r\n\r\n\t/**\r\n\t * Defines a type of elements linking slices.\r\n\t */\r\n\tpublic _sliceLink: FunnelSlice;\r\n\r\n\t/**\r\n\t * A [[FunnelSlice]] element, related to this data item ([[FunnelSlice]]).\r\n\t *\r\n\t * @readonly\r\n\t * @return Slice element\r\n\t */\r\n\tpublic get sliceLink(): this[\"_sliceLink\"] {\r\n\t\tif (!this._sliceLink) {\r\n\t\t\tlet sliceLink = this.component.sliceLinks.create();\r\n\t\t\tthis._sliceLink = sliceLink;\r\n\t\t\tthis._disposers.push(sliceLink);\r\n\t\t\tsliceLink.parent = this.component.slicesContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.sliceLinks.removeValue(sliceLink);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\t\t\tthis.addSprite(sliceLink);\r\n\t\t\tsliceLink.visible = this.visible;\r\n\t\t}\r\n\t\treturn this._sliceLink;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FunnelSeriesDataItem\";\r\n\t\t// this helps to invalidate series when value is 0 an it is hidden (no other events are triggered then)\r\n\t\tthis.events.on(\"visibilitychanged\", () => {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.invalidateDataItems();\r\n\t\t\t}\r\n\t\t}, this, false);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[FunnelSeries]].\r\n */\r\nexport interface IFunnelSeriesDataFields extends IPercentSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[FunnelSeries]].\r\n */\r\nexport interface IFunnelSeriesProperties extends IPercentSeriesProperties {\r\n\r\n\t/**\r\n\t * Relative width of the slice bottom. See description of `bottomRatio`\r\n\t * property for full description.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tbottomRatio?: number;\r\n\r\n\t/**\r\n\t * Orientation of series\r\n\t *\r\n\t * @default \"vertical\"\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n\t/**\r\n\t * Put labels on the oppsite side of the series?\r\n\t *\r\n\t * @since 4.1.13\r\n\t */\r\n\tlabelsOpposite?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[FunnelSeries]].\r\n */\r\nexport interface IFunnelSeriesEvents extends IPercentSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FunnelSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFunnelSeriesAdapters extends IPercentSeriesAdapters, IFunnelSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IFunnelSeriesEvents} for a list of available Events\r\n * @see {@link IFunnelSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class FunnelSeries extends PercentSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _slice: FunnelSlice;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _tick: FunnelTick;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * A reference to chart this series is for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _chart: SlicedChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IFunnelSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFunnelSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFunnelSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFunnelSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: FunnelSeriesDataItem;\r\n\r\n\r\n\tprotected _nextY: number = 0;\r\n\r\n\t/**\r\n\t * List of slice elements.\r\n\t */\r\n\tprotected _sliceLinks: ListTemplate<this[\"_slice\"]>;\r\n\r\n\t/**\r\n\t * Holds sum of values for all slices\r\n\t */\r\n\tprotected _total: number;\r\n\r\n\t/**\r\n\t * Holds number of slices.\r\n\t */\r\n\tprotected _count: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"FunnelSeries\";\r\n\t\tthis.orientation = \"vertical\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.slicesContainer.width = percent(100);\r\n\t\tthis.slicesContainer.height = percent(100);\r\n\r\n\t\tthis._disposers.push(this.slicesContainer.events.on(\"maxsizechanged\", this.invalidateDataItems, this, false));\r\n\r\n\t\tthis.labelsOpposite = true;\r\n\r\n\t\tthis.labelsContainer.layout = \"absolute\";\r\n\r\n\t\tthis.bottomRatio = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a [[FunnelSlice]] element.\r\n\t *\r\n\t * @return Slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new FunnelSlice();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a [[FunnelTick]] element.\r\n\t *\r\n\t * @return Tick\r\n\t */\r\n\tprotected createTick(): this[\"_tick\"] {\r\n\t\treturn new FunnelTick();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Funnel Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new FunnelSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits FunnelSlice.\r\n\t *\r\n\t * @param slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tslice.isMeasured = false;\r\n\t\tslice.defaultState.properties.scale = 1;\r\n\t\tslice.observe(\"scale\", this.handleSliceScale, this);\r\n\t\tslice.observe([\"dx\", \"dy\", \"x\", \"y\"], this.handleSliceMove, this);\r\n\t\tslice.tooltipText = \"{category}: {value.percent.formatNumber('#.#')}% ({value.value})\";\r\n\r\n\t\tlet hoverState = slice.states.create(\"hover\");\r\n\t\thoverState.properties.expandDistance = 0.2;\r\n\t}\r\n\r\n\t/**\r\n\t * [initLabel description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param label [description]\r\n\t */\r\n\tprotected initLabel(label: this[\"_label\"]) {\r\n\t\tsuper.initLabel(label);\r\n\t\tlabel.verticalCenter = \"middle\";\r\n\t\tlabel.horizontalCenter = \"middle\";\r\n\t\tlabel.isMeasured = true;\r\n\t\tlabel.padding(5, 5, 5, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis._nextY = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements() {\r\n\r\n\t\tlet slicesContainer = this.slicesContainer;\r\n\t\tlet labelsContainer = this.labelsContainer;\r\n\t\tlet labelTemplate = this.labels.template;\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tlabelTemplate.interactionsEnabled = true;\r\n\t\t\tslicesContainer.isMeasured = true;\r\n\t\t\tlabelsContainer.isMeasured = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlabelTemplate.interactionsEnabled = false;\r\n\t\t\tslicesContainer.isMeasured = false;\r\n\t\t\tlabelsContainer.isMeasured = false;\r\n\t\t}\r\n\r\n\t\tlet total = 0;\r\n\t\tlet count = 0;\r\n\t\tthis.dataItems.each((dItem) => {\r\n\t\t\tif ($type.hasValue(dItem.value)) {\r\n\t\t\t\tcount++;\r\n\t\t\t\tif (dItem.value > 0) {\r\n\t\t\t\t\ttotal += Math.abs(dItem.getWorkingValue(\"value\") / dItem.value);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (this.ignoreZeroValues) {\r\n\t\t\t\t\t\tcount--;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif (!dItem.visible || dItem.__disabled || dItem.isHiding) {\r\n\t\t\t\t\t\t\tcount--;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\ttotal += 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis._total = 1 / count * total;\r\n\t\tthis._count = count;\r\n\r\n\t\tsuper.validateDataElements();\r\n\r\n\t\tthis.arrangeLabels();\r\n\t}\r\n\r\n\t/**\r\n\t * [getNextValue description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getNextValue(dataItem: FunnelSeriesDataItem): number {\r\n\t\tlet index = dataItem.index;\r\n\t\tlet nextValue: number = dataItem.getWorkingValue(\"value\");\r\n\t\tif (index < this.dataItems.length - 1) {\r\n\t\t\tlet nextItem = this.dataItems.getIndex(index + 1);\r\n\t\t\tnextValue = nextItem.getWorkingValue(\"value\");\r\n\r\n\t\t\tif (!nextItem.visible || nextItem.isHiding || nextItem.__disabled || (nextItem.value == 0 && this.ignoreZeroValues)) {\r\n\t\t\t\treturn this.getNextValue(nextItem);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn nextValue;\r\n\t}\r\n\r\n\t/**\r\n\t * [formDataElement description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected formDataElement(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//if ($type.hasValue(dataItem.value)) {\r\n\t\t// FunnelSlice\r\n\t\tlet slice = dataItem.slice;\r\n\t\tslice.orientation = this.orientation;\r\n\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tsliceLink.orientation = this.orientation;\r\n\r\n\t\tlet tick = dataItem.tick;\r\n\t\tlet label = dataItem.label;\r\n\r\n\t\ttick.slice = slice;\r\n\t\ttick.label = label;\r\n\r\n\t\tif ($type.hasValue(dataItem.value)) {\r\n\t\t\tthis.decorateSlice(dataItem);\r\n\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\tif (dataItem.value == 0 && this.ignoreZeroValues) {\r\n\t\t\t\t\tsprite.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tsprite.__disabled = false;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\tsprite.__disabled = true;\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tif (dataItem.index == this.dataItems.length - 1) {\r\n\t\t\tsliceLink.disabled = true;\r\n\t\t}\r\n\r\n\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tsliceLink.fill = slice.fill;\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * [decorateSlice description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected decorateSlice(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet slice = dataItem.slice;\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tlet label = dataItem.label;\r\n\t\tlet tick = dataItem.tick;\r\n\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tlet nextValue = this.getNextValue(dataItem);\r\n\t\tlet workingValue = Math.abs(dataItem.getWorkingValue(\"value\"));\r\n\t\tlet bottomRatio = this.bottomRatio;\r\n\r\n\t\tlet d = 1;\r\n\t\tif (dataItem.value != 0) {\r\n\t\t\td = workingValue / Math.abs(dataItem.value);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (dataItem.__disabled || dataItem.isHiding || !dataItem.visible) {\r\n\t\t\t\td = 0.000001;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.ignoreZeroValues && dataItem.value == 0) {\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.__disabled = false;\r\n\t\t}\r\n\r\n\t\tif (this._nextY == Infinity) {\r\n\t\t\tthis._nextY = 0;\r\n\t\t}\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\r\n\t\t\tlet linkHeight = sliceLink.pixelHeight * d;\r\n\r\n\t\t\tmaxHeight = maxHeight + linkHeight; // to avoid one link gap in the bottom\r\n\r\n\t\t\tslice.topWidth = workingValue / this.dataItem.values.value.high * maxWidth;\r\n\t\t\tslice.bottomWidth = (workingValue - (workingValue - nextValue) * bottomRatio) / this.dataItem.values.value.high * maxWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = (workingValue - (workingValue - nextValue)) / this.dataItem.values.value.high * maxWidth;\r\n\r\n\t\t\tslice.y = this._nextY;\r\n\t\t\tslice.height = Math.min(100000, $math.max(0, maxHeight / this._count * d / this._total - linkHeight));\r\n\r\n\t\t\tslice.x = maxWidth / 2;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.x = slice.x;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.x = undefined;\r\n\t\t\t}\r\n\t\t\tlabel.y = slice.pixelY + slice.pixelHeight * tick.locationY;\r\n\r\n\t\t\tthis._nextY += slice.pixelHeight + linkHeight;\r\n\t\t\tsliceLink.y = this._nextY - linkHeight;\r\n\t\t\tsliceLink.x = slice.x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet linkWidth = sliceLink.pixelWidth * d;\r\n\r\n\t\t\tmaxWidth = maxWidth + linkWidth; // to avoid one link gap in the bottom\r\n\r\n\t\t\tslice.topWidth = workingValue / this.dataItem.values.value.high * maxHeight;\r\n\t\t\tslice.bottomWidth = (workingValue - (workingValue - nextValue) * bottomRatio) / this.dataItem.values.value.high * maxHeight;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = (workingValue - (workingValue - nextValue)) / this.dataItem.values.value.high * maxHeight;\r\n\r\n\t\t\tslice.x = this._nextY;\r\n\t\t\tslice.width = Math.min(100000, maxWidth / this._count * d * 1 / this._total - linkWidth);\r\n\t\t\tslice.y = maxHeight / 2;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.y = slice.y;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.y = this.labelsContainer.measuredHeight;\r\n\t\t\t}\r\n\t\t\tlabel.x = slice.pixelX + slice.pixelWidth * tick.locationX;\r\n\r\n\t\t\tthis._nextY += slice.pixelWidth + linkWidth;\r\n\t\t\tsliceLink.x = this._nextY - linkWidth;\r\n\r\n\t\t\tsliceLink.y = slice.y;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getLastLabel(index: number): Label {\r\n\t\tif (index > 0) {\r\n\t\t\tlet lastLabel = this.labels.getIndex(index);\r\n\t\t\tif (lastLabel.__disabled || !lastLabel.visible) {\r\n\t\t\t\treturn this.getLastLabel(index - 1);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn lastLabel;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [arrangeLabels description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected arrangeLabels(): void {\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tlet count = this.labels.length;\r\n\t\t\tif (count > 1) {\r\n\r\n\t\t\t\tlet lastLabel = this.getLastLabel(count - 1);\r\n\t\t\t\tif (lastLabel) {\r\n\r\n\t\t\t\t\tlet lastY = lastLabel.pixelY;\r\n\t\t\t\t\tlet lastX = lastLabel.pixelX;\r\n\r\n\t\t\t\t\tif (count > 1) {\r\n\t\t\t\t\t\tfor (let i = count - 2; i >= 0; i--) {\r\n\t\t\t\t\t\t\tlet label = this.labels.getIndex(i);\r\n\r\n\t\t\t\t\t\t\tif (label.visible && !label.__disabled) {\r\n\t\t\t\t\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\t\t\t\t\tlabel.validate();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\t\t\t\t\tif (label.pixelY + label.measuredHeight > lastY) {\r\n\t\t\t\t\t\t\t\t\t\tlabel.y = Math.min(1000000, lastY - label.measuredHeight);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// horizontal\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (label.pixelX + label.measuredWidth > lastX) {\r\n\t\t\t\t\t\t\t\t\t\tlabel.x = Math.min(1000000, lastX - label.measuredWidth);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tlastY = label.pixelY;\r\n\t\t\t\t\t\t\t\tlastX = label.pixelX;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlastY = 0;\r\n\t\t\t\t\t\tlastX = 0;\r\n\t\t\t\t\t\tfor (let i = 0; i < count; i++) {\r\n\t\t\t\t\t\t\tlet label = this.labels.getIndex(i);\r\n\t\t\t\t\t\t\tif (label.visible && !label.__disabled) {\r\n\t\t\t\t\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\t\t\t\t\tlabel.validate();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\t\t\t\t\tif (label.pixelY < lastY) {\r\n\t\t\t\t\t\t\t\t\t\tlabel.y = Math.min(1000000, lastY);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// horizontal\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (label.pixelX < lastX) {\r\n\t\t\t\t\t\t\t\t\t\tlabel.x = Math.min(1000000, lastX);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlastY += label.measuredHeight;\r\n\t\t\t\t\t\t\t\tlastX += label.measuredWidth;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice: FunnelSlice = dataItem.slice;\r\n\r\n\t\tlet locationX = bullet.locationX;\r\n\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\tlocationX = 0.5;\r\n\t\t}\r\n\t\tlet locationY = bullet.locationY;\r\n\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\tlocationY = 1;\r\n\t\t}\r\n\r\n\t\tbullet.x = slice.pixelX + slice.measuredWidth * locationX;\r\n\t\tbullet.y = slice.pixelY + slice.measuredHeight * locationY;\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the funnel slices: \"horizontal\" or \"vertical\" (default).\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param value Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tif (this.setPropertyValue(\"orientation\", value)) {\r\n\t\t\tthis.labelsOpposite = this.labelsOpposite;\r\n\t\t\tthis.invalidate();\r\n\t\t\tif (value == \"vertical\") {\r\n\t\t\t\tthis.ticks.template.locationX = 1;\r\n\t\t\t\tthis.ticks.template.locationY = 0.5;\r\n\t\t\t\tthis.labels.template.rotation = 0;\r\n\t\t\t\tthis.layout = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.ticks.template.locationX = 0.5;\r\n\t\t\t\tthis.ticks.template.locationY = 1;\r\n\t\t\t\tthis.labels.template.rotation = -90;\r\n\t\t\t\tthis.layout = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates how slice's bottom will change in relation to slices top AND\r\n\t * next slices top.\r\n\t *\r\n\t * Basically it's a relative value (0-1) that indicates bottom width\r\n\t * position between current slice's top width and the top withd of the next\r\n\t * one.\r\n\t *\r\n\t * The scale goes from 0 (closer to current slice width) to 1 (closer to next\r\n\t * slice with).\r\n\t *\r\n\t * `0` (default) will mean that bottom will be the same as top, resulting in\r\n\t * a prefectly square slice.\r\n\t *\r\n\t * From the data-viz standpoint `0` is a correct setting, since area of the\r\n\t * slices will depict their value correctly.\r\n\t *\r\n\t * `1` will mean that slice will become trapezoid with its bottom matching\r\n\t * width of the next slice.\r\n\t *\r\n\t * `0.5` will make bottom width be in the middle of width of current slice\r\n\t * and the next slice.\r\n\t *\r\n\t * @default 0\r\n\t * @param {number}\r\n\t */\r\n\tpublic set bottomRatio(value: number) {\r\n\t\tif (this.setPropertyValue(\"bottomRatio\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number}\r\n\t */\r\n\tpublic get bottomRatio(): number {\r\n\t\treturn this.getPropertyValue(\"bottomRatio\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of elements linking each actual slice.\r\n\t *\r\n\t * Please note that links are [[FunnelSlice]] objects, just like real links,\r\n\t * so they have all the same configuration options.\r\n\t *\r\n\t * You can use `template` of this link, to specify how links will look.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.sliceLinks.template.fillOpacity = 0.5;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.sliceLinks.template.fillOpacity = 0.5;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"FunnelSeries\",\r\n\t *      // ...\r\n\t *      \"sliceLinks\": {\r\n\t *        \"fillOpacity\": 0.5\r\n\t *      }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return Funnel links\r\n\t */\r\n\tpublic get sliceLinks(): ListTemplate<this[\"_slice\"]> {\r\n\t\tif (!this._sliceLinks) {\r\n\t\t\tlet sliceLink = new FunnelSlice();\r\n\t\t\tsliceLink.applyOnClones = true;\r\n\t\t\tsliceLink.fillOpacity = 0.5;\r\n\t\t\tsliceLink.expandDistance = - 0.3;\r\n\t\t\tsliceLink.hiddenState.properties.opacity = 0;\r\n\r\n\t\t\tthis._disposers.push(sliceLink);\r\n\r\n\t\t\tthis._sliceLinks = new ListTemplate(sliceLink);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._sliceLinks));\r\n\t\t}\r\n\t\treturn this._sliceLinks;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows hidden series.\r\n\t *\r\n\t * @param duration  Duration of reveal animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tif(!options.animationsEnabled){\r\n\t\t\tinterpolationDuration = 0;\r\n\t\t}\t\t\r\n\r\n\t\tlet delay: number = 0;\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tdataItem.show(interpolationDuration, delay, [\"value\"]);\r\n\t\t});\r\n\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param duration  Duration of hiding animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet fields: string[] = [\"value\"];\r\n\t\tlet value: number = 0;\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet delay: number = 0;\r\n\t\tlet interpolationDuration = this.hiddenState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tif(!options.animationsEnabled){\r\n\t\t\tinterpolationDuration = 0;\r\n\t\t}\t\t\t\t\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tdataItem.hide(interpolationDuration, delay, value, fields);\r\n\t\t});\r\n\r\n\t\tlet animation: Animation = super.hide(duration);\r\n\t\tif (animation && !animation.isFinished()) {\r\n\t\t\tanimation.delay(delay);\r\n\t\t}\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setAlignLabels(value: boolean) {\r\n\t\tsuper.setAlignLabels(value);\r\n\t\tthis.ticks.template.disabled = !value;\r\n\t\tlet labelsContainer = this.labelsContainer;\r\n\t\tif (labelsContainer) {\r\n\t\t\t// do not align\r\n\t\t\tif (!value) {\r\n\t\t\t\tlabelsContainer.width = percent(100);\r\n\t\t\t\tlabelsContainer.height = percent(100);\r\n\t\t\t}\r\n\t\t\t//align\r\n\t\t\telse {\r\n\t\t\t\tlabelsContainer.height = undefined;\r\n\t\t\t\tlabelsContainer.width = undefined;\r\n\t\t\t\tlabelsContainer.margin(10, 10, 10, 10);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.labelsOpposite = this.labelsOpposite;\r\n\t}\r\n\r\n\t/**\r\n\t * Put labels on the oppsite side of the series?\r\n\t *\r\n\t * This setting is only used if `alignLabels = true`.\r\n\t *\r\n\t * If set to `true` (default) labels will be drawn to the right (on vertical\r\n\t * series), or to the bottom (on horizontal series).\r\n\t *\r\n\t * If set to `false`, labels will be positioned to the left or top\r\n\t * respectively.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.1.13\r\n\t * @param  value  Labels on opposite side?\r\n\t */\r\n\tpublic set labelsOpposite(value: boolean) {\r\n\t\tthis.setPropertyValue(\"labelsOpposite\", value)\r\n\t\tlet labelTemplate = this.labels.template;\r\n\r\n\t\tlet labelAlign: Align = \"none\";\r\n\t\tlet labelValign: VerticalAlign = \"none\";\r\n\r\n\t\tif (!this.alignLabels) {\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tlabelAlign = \"center\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabelValign = \"middle\";\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// opposite (left/bottom)\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.labelsContainer.toFront();\r\n\t\t\t\t// left\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\tthis.ticks.template.locationX = 1;\r\n\t\t\t\t\tlabelTemplate.horizontalCenter = \"left\";\r\n\t\t\t\t\tlabelAlign = \"right\";\r\n\t\t\t\t}\r\n\t\t\t\t// bottom\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.ticks.template.locationY = 1;\r\n\t\t\t\t\tlabelTemplate.horizontalCenter = \"right\";\r\n\t\t\t\t\tlabelValign = \"bottom\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// non oposite (right/top)\r\n\t\t\telse {\r\n\t\t\t\tthis.labelsContainer.toBack();\r\n\t\t\t\t// right\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\tthis.ticks.template.locationX = 0;\r\n\t\t\t\t\tlabelAlign = \"left\";\r\n\t\t\t\t}\r\n\t\t\t\t// top\r\n\t\t\t\telse {\r\n\t\t\t\t\tlabelValign = \"top\";\r\n\t\t\t\t\tthis.ticks.template.locationY = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlabelTemplate.align = labelAlign;\r\n\t\tlabelTemplate.valign = labelValign;\r\n\r\n\t\tthis.validateLayout();\r\n\t\tthis.ticks.each((tick) => {\r\n\t\t\ttick.invalidate();\r\n\t\t})\r\n\t\tthis.invalidateDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Labels on opposite side?\r\n\t */\r\n\tpublic get labelsOpposite(): boolean {\r\n\t\treturn this.getPropertyValue(\"labelsOpposite\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelSeries\"] = FunnelSeries;\r\nregistry.registeredClasses[\"FunnelSeriesDataItem\"] = FunnelSeriesDataItem;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}