{"ast":null,"code":"export var ANCHOR_POSITION = {\n  top: {\n    x: 0.5,\n    y: 0\n  },\n  'top-left': {\n    x: 0,\n    y: 0\n  },\n  'top-right': {\n    x: 1,\n    y: 0\n  },\n  bottom: {\n    x: 0.5,\n    y: 1\n  },\n  'bottom-left': {\n    x: 0,\n    y: 1\n  },\n  'bottom-right': {\n    x: 1,\n    y: 1\n  },\n  left: {\n    x: 0,\n    y: 0.5\n  },\n  right: {\n    x: 1,\n    y: 0.5\n  }\n};\nvar ANCHOR_TYPES = Object.keys(ANCHOR_POSITION);\nexport function getDynamicPosition(_ref) {\n  var x = _ref.x,\n      y = _ref.y,\n      width = _ref.width,\n      height = _ref.height,\n      selfWidth = _ref.selfWidth,\n      selfHeight = _ref.selfHeight,\n      anchor = _ref.anchor,\n      _ref$padding = _ref.padding,\n      padding = _ref$padding === void 0 ? 0 : _ref$padding;\n  var _ANCHOR_POSITION$anch = ANCHOR_POSITION[anchor],\n      anchorX = _ANCHOR_POSITION$anch.x,\n      anchorY = _ANCHOR_POSITION$anch.y;\n  var top = y - anchorY * selfHeight;\n  var bottom = top + selfHeight;\n  var yStep = 0.5;\n\n  if (top < padding) {\n    while (top < padding && anchorY >= yStep) {\n      anchorY -= yStep;\n      top += yStep * selfHeight;\n    }\n  } else if (bottom > height - padding) {\n    while (bottom > height - padding && anchorY <= 1 - yStep) {\n      anchorY += yStep;\n      bottom -= yStep * selfHeight;\n    }\n  }\n\n  var left = x - anchorX * selfWidth;\n  var right = left + selfWidth;\n  var xStep = 0.5;\n\n  if (anchorY === 0.5) {\n    anchorX = Math.floor(anchorX);\n    xStep = 1;\n  }\n\n  if (left < padding) {\n    while (left < padding && anchorX >= xStep) {\n      anchorX -= xStep;\n      left += xStep * selfWidth;\n    }\n  } else if (right > width - padding) {\n    while (right > width - padding && anchorX <= 1 - xStep) {\n      anchorX += xStep;\n      right -= xStep * selfWidth;\n    }\n  }\n\n  return ANCHOR_TYPES.find(function (positionType) {\n    var anchorPosition = ANCHOR_POSITION[positionType];\n    return anchorPosition.x === anchorX && anchorPosition.y === anchorY;\n  }) || anchor;\n}","map":{"version":3,"sources":["../../../src/utils/dynamic-position.js"],"names":["ANCHOR_POSITION","top","x","y","bottom","left","right","ANCHOR_TYPES","Object","width","height","selfWidth","selfHeight","anchor","padding","anchorX","anchorY","yStep","xStep","Math","anchorPosition"],"mappings":"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","sourcesContent":["// @flow\n\nexport const ANCHOR_POSITION = {\n  top: {x: 0.5, y: 0},\n  'top-left': {x: 0, y: 0},\n  'top-right': {x: 1, y: 0},\n  bottom: {x: 0.5, y: 1},\n  'bottom-left': {x: 0, y: 1},\n  'bottom-right': {x: 1, y: 1},\n  left: {x: 0, y: 0.5},\n  right: {x: 1, y: 0.5}\n};\n\nexport type PositionType = $Keys<typeof ANCHOR_POSITION>;\n\nconst ANCHOR_TYPES = Object.keys(ANCHOR_POSITION);\n\n/**\n * Calculate the dynamic position for a popup to fit in a container.\n * @param {Number} x - x position of the anchor on screen\n * @param {Number} y - y position of the anchor on screen\n * @param {Number} width - width of the container\n * @param {Number} height - height of the container\n * @param {Number} padding - extra space from the edge in pixels\n * @param {Number} selfWidth - width of the popup\n * @param {Number} selfHeight - height of the popup\n * @param {String} anchor - type of the anchor, one of 'top', 'bottom',\n    'left', 'right', 'top-left', 'top-right', 'bottom-left' , and  'bottom-right'\n * @returns {String} position - one of 'top', 'bottom',\n    'left', 'right', 'top-left', 'top-right', 'bottom-left' , and  'bottom-right'\n */\n// eslint-disable-next-line complexity\nexport function getDynamicPosition({\n  x,\n  y,\n  width,\n  height,\n  selfWidth,\n  selfHeight,\n  anchor,\n  padding = 0\n}: {\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  selfWidth: number,\n  selfHeight: number,\n  anchor: PositionType,\n  padding: number\n}): PositionType {\n  let {x: anchorX, y: anchorY} = ANCHOR_POSITION[anchor];\n\n  // anchorY: top - 0, center - 0.5, bottom - 1\n  let top = y - anchorY * selfHeight;\n  let bottom = top + selfHeight;\n  // If needed, adjust anchorY at 0.5 step between [0, 1]\n  const yStep = 0.5;\n\n  if (top < padding) {\n    // Top edge is outside, try move down\n    while (top < padding && anchorY >= yStep) {\n      anchorY -= yStep;\n      top += yStep * selfHeight;\n    }\n  } else if (bottom > height - padding) {\n    // bottom edge is outside, try move up\n    while (bottom > height - padding && anchorY <= 1 - yStep) {\n      anchorY += yStep;\n      bottom -= yStep * selfHeight;\n    }\n  }\n\n  // anchorX: left - 0, center - 0.5, right - 1\n  let left = x - anchorX * selfWidth;\n  let right = left + selfWidth;\n\n  // If needed, adjust anchorX at 0.5 step between [0, 1]\n  let xStep = 0.5;\n  if (anchorY === 0.5) {\n    // If y is centered, then x cannot also be centered\n    anchorX = Math.floor(anchorX);\n    xStep = 1;\n  }\n\n  if (left < padding) {\n    // Left edge is outside, try move right\n    while (left < padding && anchorX >= xStep) {\n      anchorX -= xStep;\n      left += xStep * selfWidth;\n    }\n  } else if (right > width - padding) {\n    // Right edge is outside, try move left\n    while (right > width - padding && anchorX <= 1 - xStep) {\n      anchorX += xStep;\n      right -= xStep * selfWidth;\n    }\n  }\n\n  // Find the name of the new anchor position\n  return (\n    ANCHOR_TYPES.find(positionType => {\n      const anchorPosition = ANCHOR_POSITION[positionType];\n      return anchorPosition.x === anchorX && anchorPosition.y === anchorY;\n    }) || anchor\n  );\n}\n"]},"metadata":{},"sourceType":"module"}