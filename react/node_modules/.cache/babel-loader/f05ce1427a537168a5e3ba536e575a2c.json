{"ast":null,"code":"/**\r\n * Functionality for adding images in SVG tree.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Sprite } from \"../Sprite\";\nimport { registry } from \"../Registry\";\nimport * as $dom from \"../utils/DOM\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Used to add `<image>` elements to SVG.\r\n *\r\n * @see {@link IImageEvents} for a list of available events\r\n * @see {@link IImageAdapters} for a list of available Adapters\r\n */\n\nvar Image =\n/** @class */\nfunction (_super) {\n  __extends(Image, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Image() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Image\";\n    _this.element = _this.paper.add(\"image\");\n\n    _this.applyTheme();\n\n    _this.width = 50;\n    _this.height = 50;\n    return _this;\n  }\n  /**\r\n   * Draws an `<image>` element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Image.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    if (this.href) {\n      var width = this.innerWidth;\n      var height = this.innerHeight;\n\n      if ($type.isNumber(this.widthRatio)) {\n        width = height * this.widthRatio;\n        this.width = width;\n      }\n\n      if ($type.isNumber(this.heightRatio)) {\n        height = width * this.heightRatio;\n        this.height = height;\n      }\n\n      this.element.attr({\n        \"width\": width,\n        \"height\": height\n      });\n      this.element.attrNS($dom.XLINK, \"xlink:href\", this.href);\n    }\n  };\n\n  Object.defineProperty(Image.prototype, \"href\", {\n    /**\r\n     * @return Image URI\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"href\");\n    },\n\n    /**\r\n     * An image URI.\r\n     *\r\n     * @param value  Image URI\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"href\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Image.prototype, \"widthRatio\", {\n    /**\r\n     * @return Ratio\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"widthRatio\");\n    },\n\n    /**\r\n     * Sets image `width` relatively to its `height`.\r\n     *\r\n     * If image's `height = 100` and `widthRatio = 0.5` the actual width will be\r\n     * `50`.\r\n     *\r\n     * @param value  Ratio\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"widthRatio\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Image.prototype, \"heightRatio\", {\n    /**\r\n     * @return Ratio\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"heightRatio\");\n    },\n\n    /**\r\n     * Sets image `height` relatively to its `width`.\r\n     *\r\n     * If image's `width = 100` and `heightRatio = 0.5` the actual height will be\r\n     * `50`.\r\n     *\r\n     * @param value  Ratio\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"heightRatio\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Image.prototype, \"bbox\", {\n    /**\r\n     * Returns bounding box (square) for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    get: function get() {\n      return {\n        x: 0,\n        y: 0,\n        width: this.pixelWidth,\n        height: this.pixelHeight\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Image;\n}(Sprite);\n\nexport { Image };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Image\"] = Image;","map":{"version":3,"sources":["../../../../../src/.internal/core/elements/Image.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Functionality for adding images in SVG tree.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../Sprite\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $dom from \"../utils/DOM\";\r\nimport * as $type from \"../utils/Type\";\r\nimport { IRectangle } from \"../defs/IRectangle\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Image]].\r\n */\r\nexport interface IImageProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * A URI of the image.\r\n\t */\r\n\thref?: string;\r\n\r\n\t/**\r\n\t * Sets image `width` in relation to its `height`.\r\n\t */\r\n\twidthRatio?: number;\r\n\r\n\t/**\r\n\t * Sets image `height` in relation to its `width`.\r\n\t */\r\n\theightRatio?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[Image]].\r\n */\r\nexport interface IImageEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Image]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IImageAdapters extends ISpriteAdapters, IImageProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to add `<image>` elements to SVG.\r\n *\r\n * @see {@link IImageEvents} for a list of available events\r\n * @see {@link IImageAdapters} for a list of available Adapters\r\n */\r\nexport class Image extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IImageProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IImageAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IImageEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Image\";\r\n\t\tthis.element = this.paper.add(\"image\");\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.width = 50;\r\n\t\tthis.height = 50;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws an `<image>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.href) {\r\n\r\n\t\t\tlet width = this.innerWidth;\r\n\t\t\tlet height = this.innerHeight;\r\n\r\n\t\t\tif ($type.isNumber(this.widthRatio)) {\r\n\t\t\t\twidth = height * this.widthRatio;\r\n\t\t\t\tthis.width = width;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this.heightRatio)) {\r\n\t\t\t\theight = width * this.heightRatio;\r\n\t\t\t\tthis.height = height;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tthis.element.attr({\r\n\t\t\t\t\"width\": width,\r\n\t\t\t\t\"height\": height\r\n\t\t\t});\r\n\t\t\tthis.element.attrNS($dom.XLINK, \"xlink:href\", this.href);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * An image URI.\r\n\t *\r\n\t * @param value  Image URI\r\n\t */\r\n\tpublic set href(value: string) {\r\n\t\tthis.setPropertyValue(\"href\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Image URI\r\n\t */\r\n\tpublic get href(): string {\r\n\t\treturn this.getPropertyValue(\"href\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets image `width` relatively to its `height`.\r\n\t *\r\n\t * If image's `height = 100` and `widthRatio = 0.5` the actual width will be\r\n\t * `50`.\r\n\t *\r\n\t * @param value  Ratio\r\n\t */\r\n\tpublic set widthRatio(value: number) {\r\n\t\tthis.setPropertyValue(\"widthRatio\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Ratio\r\n\t */\r\n\tpublic get widthRatio(): number {\r\n\t\treturn this.getPropertyValue(\"widthRatio\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets image `height` relatively to its `width`.\r\n\t *\r\n\t * If image's `width = 100` and `heightRatio = 0.5` the actual height will be\r\n\t * `50`.\r\n\t *\r\n\t * @param value  Ratio\r\n\t */\r\n\tpublic set heightRatio(value: number) {\r\n\t\tthis.setPropertyValue(\"heightRatio\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Ratio\r\n\t */\r\n\tpublic get heightRatio(): number {\r\n\t\treturn this.getPropertyValue(\"heightRatio\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\treturn {\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\twidth: this.pixelWidth,\r\n\t\t\theight: this.pixelHeight\r\n\t\t};\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Image\"] = Image;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}