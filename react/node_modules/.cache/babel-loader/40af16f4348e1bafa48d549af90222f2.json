{"ast":null,"code":"/**\r\n * Functionality for drawing simple ClockHands\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { Circle } from \"../../core/elements/Circle\";\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\n\nvar ClockHand =\n/** @class */\nfunction (_super) {\n  __extends(ClockHand, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ClockHand() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * An Axis hand is related to.\r\n     */\n\n\n    _this._axis = new MutableValueDisposer();\n    _this.className = \"ClockHand\";\n    var interfaceColors = new InterfaceColorSet();\n    _this.fill = interfaceColors.getFor(\"alternativeBackground\");\n    _this.stroke = _this.fill;\n    var pin = new Circle();\n    pin.radius = 5;\n    _this.pin = pin;\n    _this.isMeasured = false;\n    _this.startWidth = 5;\n    _this.endWidth = 1;\n    _this.width = percent(100);\n    _this.height = percent(100);\n    _this.radius = percent(100);\n    _this.innerRadius = percent(0);\n    var hand = new Trapezoid();\n    _this.hand = hand;\n\n    _this._disposers.push(_this._axis); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Re(validates) the clock hand, effectively redrawing it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ClockHand.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n\n    var hand = this.hand;\n    hand.width = this.pixelWidth;\n    var h = Math.max(this.startWidth, this.endWidth);\n    hand.height = h;\n    hand.leftSide = percent(this.startWidth / h * 100);\n    hand.rightSide = percent(this.endWidth / h * 100);\n\n    if (this.axis) {\n      var renderer = this.axis.renderer;\n      var x0 = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\n      var x1 = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\n      hand.x = x0;\n      hand.y = -h / 2;\n      hand.width = x1 - x0;\n    }\n  };\n\n  Object.defineProperty(ClockHand.prototype, \"pin\", {\n    /**\r\n     * @return Pin element\r\n     */\n    get: function () {\n      return this._pin;\n    },\n\n    /**\r\n     * A circle element used as hand's base. (pin)\r\n     *\r\n     * @param pin  Pin element\r\n     */\n    set: function (pin) {\n      if (this._pin) {\n        this.removeDispose(this._pin);\n      }\n\n      if (pin) {\n        this._pin = pin;\n        pin.parent = this;\n\n        this._disposers.push(pin);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"hand\", {\n    /**\r\n     * @return Hand element\r\n     */\n    get: function () {\n      return this._hand;\n    },\n\n    /**\r\n     * A trapezoid shape used for hand itself.\r\n     *\r\n     * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n     * `endWidth` properties.\r\n     *\r\n     * Set `endWidth` to 1 (px) to make it pointy.\r\n     *\r\n     * @param hand  Hand element\r\n     */\n    set: function (hand) {\n      if (this._hand) {\n        this.removeDispose(this._hand);\n      }\n\n      if (hand) {\n        this._hand = hand;\n        hand.parent = this;\n\n        this._disposers.push(hand);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"radius\", {\n    /**\r\n     * @return Radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n\n    /**\r\n     * Radius of the hand's outer end. (tip)\r\n     *\r\n     * Absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @default Percent(0)\r\n     * @param value  Radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"radius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"innerRadius\", {\n    /**\r\n     * @return Radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n\n    /**\r\n     * Radius of the hand's inner end. (base)\r\n     *\r\n     * Absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @default Percent(0)\r\n     * @param value  Radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"startWidth\", {\n    /**\r\n     * @return Width (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startWidth\");\n    },\n\n    /**\r\n     * Width, in pixels, of the clock hand's inner end. (base)\r\n     *\r\n     * @default 5\r\n     * @param value  Width (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"startWidth\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"endWidth\", {\n    /**\r\n     * @return Width (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endWidth\");\n    },\n\n    /**\r\n     * Width, in pixels, of the clock hand's outer end. (tip)\r\n     *\r\n     * @default 1\r\n     * @param value  Width (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"endWidth\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"rotationDirection\", {\n    /**\r\n     * @return rotationDirection\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"rotationDirection\");\n    },\n\n    /**\r\n     * Rotation direction\r\n     *\r\n     * @default any\r\n     * @param value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"rotationDirection\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Moves clock hand to particular value.\r\n   *\r\n   * If `duration` is set to a number in milliseconds, the hand will move\r\n   * to the new position gracefully, rather than jumping rigth to it.\r\n   *\r\n   * Alternatively, you can also set `value` directly.\r\n   *\r\n   * @param value     New value\r\n   * @param duration  Animation duration (ms)\r\n   * @param easing  Animation easing function\r\n   */\n\n  ClockHand.prototype.showValue = function (value, duration, easing) {\n    this._value = value;\n\n    if (value != undefined) {\n      if (!$type.isNumber(duration)) {\n        duration = 0;\n      }\n\n      if (this.axis) {\n        var renderer = this.axis.renderer;\n        var newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\n        var currentAngle = this.rotation;\n\n        if (this.rotationDirection == \"clockWise\") {\n          if (newAngle < currentAngle) {\n            this.rotation = currentAngle - 360;\n          }\n        }\n\n        if (this.rotationDirection == \"counterClockWise\") {\n          if (newAngle > currentAngle) {\n            this.rotation = currentAngle + 360;\n          }\n        }\n\n        this.animate({\n          property: \"rotation\",\n          to: newAngle\n        }, duration, easing);\n      }\n    }\n  };\n\n  Object.defineProperty(ClockHand.prototype, \"currentPosition\", {\n    /**\r\n     * Returns hand's relative position on axis\r\n     */\n    get: function () {\n      if (this.axis) {\n        var renderer = this.axis.renderer;\n        return renderer.angleToPosition(this.rotation);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"value\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this._value;\n    },\n\n    /**\r\n     * A current value clock hand is pointing to.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.showValue(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"axis\", {\n    /**\r\n     * @return Axis\r\n     */\n    get: function () {\n      return this._axis.get();\n    },\n\n    /**\r\n     * An Axis clock hand is associated with.\r\n     *\r\n     * Hand's `value` relates to values on the Axis.\r\n     *\r\n     * @param axis  Axis\r\n     */\n    set: function (axis) {\n      if (this.axis != axis) {\n        this._axis.set(axis, new MultiDisposer([axis.events.on(\"datavalidated\", this.updateValue, this, false), axis.events.on(\"datarangechanged\", this.updateValue, this, false), axis.events.on(\"dataitemsvalidated\", this.updateValue, this, false), axis.events.on(\"propertychanged\", this.invalidate, this, false)]));\n      }\n\n      if (axis) {\n        var chart = axis.chart;\n\n        if (chart) {\n          this.rotation = chart.startAngle;\n        }\n      }\n\n      this.parent = axis.renderer;\n      this.zIndex = 5;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Triggers `value` accessor, so that Hand animates to new position, in case\r\n   * value has changed.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  ClockHand.prototype.updateValue = function () {\n    this.value = this.value;\n  };\n  /**\r\n  * Processes JSON-based config before it is applied to the object.\r\n  *\r\n  * @ignore Exclude from docs\r\n  * @param config  Config\r\n  */\n\n\n  ClockHand.prototype.processConfig = function (config) {\n    if (config) {\n      // Connect clock hands with axes\n      if ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\n        config.axis = this.map.getKey(config.axis);\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n\n  return ClockHand;\n}(Container);\n\nexport { ClockHand };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;","map":{"version":3,"sources":["../../../../../src/.internal/charts/elements/ClockHand.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Functionality for drawing simple ClockHands\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { GaugeChart } from \"../types/GaugeChart\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ClockHand]].\r\n */\r\nexport interface IClockHandProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's tip.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tendWidth: number;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's base.\r\n\t *\r\n\t * @default 5\r\n\t */\r\n\tstartWidth: number;\r\n\r\n\t/**\r\n\t * rotation direction\r\n\t * @default \"any\"\r\n\t */\r\n\trotationDirection: \"any\" | \"clockWise\" | \"counterClockWise\";\r\n}\r\n\r\n/**\r\n * Defines events for [[ClockHand]].\r\n */\r\nexport interface IClockHandEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ClockHand]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IClockHandAdapters extends IContainerAdapters, IClockHandProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\r\nexport class ClockHand extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IClockHandProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IClockHandAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IClockHandEvents;\r\n\r\n\t/**\r\n\t * A circle element used as hand's base.\r\n\t */\r\n\tprotected _pin: Circle;\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t */\r\n\tprotected _hand: Trapezoid;\r\n\r\n\t/**\r\n\t * An Axis hand is related to.\r\n\t */\r\n\tprotected _axis: MutableValueDisposer<Axis> = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Hand's current value.\r\n\t */\r\n\tprotected _value: any;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ClockHand\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.stroke = this.fill;\r\n\r\n\t\tlet pin: Circle = new Circle();\r\n\t\tpin.radius = 5;\r\n\t\tthis.pin = pin;\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startWidth = 5;\r\n\t\tthis.endWidth = 1;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\tlet hand: Trapezoid = new Trapezoid();\r\n\t\tthis.hand = hand;\r\n\r\n\t\tthis._disposers.push(this._axis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Re(validates) the clock hand, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet hand = this.hand;\r\n\t\thand.width = this.pixelWidth;\r\n\t\tlet h: number = Math.max(this.startWidth, this.endWidth);\r\n\t\thand.height = h;\r\n\t\thand.leftSide = percent(this.startWidth / h * 100);\r\n\t\thand.rightSide = percent(this.endWidth / h * 100);\r\n\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\r\n\t\t\tlet x0: number = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\r\n\t\t\tlet x1: number = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\r\n\r\n\t\t\thand.x = x0;\r\n\t\t\thand.y = - h / 2;\r\n\r\n\t\t\thand.width = x1 - x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A circle element used as hand's base. (pin)\r\n\t *\r\n\t * @param pin  Pin element\r\n\t */\r\n\tpublic set pin(pin: Circle) {\r\n\t\tif (this._pin) {\r\n\t\t\tthis.removeDispose(this._pin);\r\n\t\t}\r\n\t\tif (pin) {\r\n\t\t\tthis._pin = pin;\r\n\t\t\tpin.parent = this;\r\n\t\t\tthis._disposers.push(pin);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pin element\r\n\t */\r\n\tpublic get pin(): Circle {\r\n\t\treturn this._pin;\r\n\t}\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n\t * `endWidth` properties.\r\n\t *\r\n\t * Set `endWidth` to 1 (px) to make it pointy.\r\n\t *\r\n\t * @param hand  Hand element\r\n\t */\r\n\tpublic set hand(hand: Trapezoid) {\r\n\t\tif (this._hand) {\r\n\t\t\tthis.removeDispose(this._hand);\r\n\t\t}\r\n\t\tif (hand) {\r\n\t\t\tthis._hand = hand;\r\n\t\t\thand.parent = this;\r\n\t\t\tthis._disposers.push(hand);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hand element\r\n\t */\r\n\tpublic get hand(): Trapezoid {\r\n\t\treturn this._hand;\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's inner end. (base)\r\n\t *\r\n\t * @default 5\r\n\t * @param value  Width (px)\r\n\t */\r\n\tpublic set startWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"startWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get startWidth(): number {\r\n\t\treturn this.getPropertyValue(\"startWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's outer end. (tip)\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Width (px)\r\n\t */\r\n\tpublic set endWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"endWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get endWidth(): number {\r\n\t\treturn this.getPropertyValue(\"endWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Rotation direction\r\n\t *\r\n\t * @default any\r\n\t * @param value\r\n\t */\r\n\tpublic set rotationDirection(value: \"any\" | \"clockWise\" | \"counterClockWise\") {\r\n\t\tthis.setPropertyValue(\"rotationDirection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return rotationDirection\r\n\t */\r\n\tpublic get rotationDirection(): \"any\" | \"clockWise\" | \"counterClockWise\" {\r\n\t\treturn this.getPropertyValue(\"rotationDirection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Moves clock hand to particular value.\r\n\t *\r\n\t * If `duration` is set to a number in milliseconds, the hand will move\r\n\t * to the new position gracefully, rather than jumping rigth to it.\r\n\t *\r\n\t * Alternatively, you can also set `value` directly.\r\n\t *\r\n\t * @param value     New value\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param easing  Animation easing function\r\n\t */\r\n\tpublic showValue(value: any, duration?: number, easing?: (value: number) => number): void {\r\n\t\tthis._value = value;\r\n\t\tif (value != undefined) {\r\n\t\t\tif (!$type.isNumber(duration)) {\r\n\t\t\t\tduration = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\t\tlet newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\r\n\t\t\t\tlet currentAngle = this.rotation;\r\n\r\n\t\t\t\tif (this.rotationDirection == \"clockWise\") {\r\n\t\t\t\t\tif (newAngle < currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle - 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.rotationDirection == \"counterClockWise\") {\r\n\t\t\t\t\tif (newAngle > currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle + 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.animate({ property: \"rotation\", to: newAngle }, duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns hand's relative position on axis\r\n\t */\r\n\tpublic get currentPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\treturn renderer.angleToPosition(this.rotation);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A current value clock hand is pointing to.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: any) {\r\n\t\tthis.showValue(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): any {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis clock hand is associated with.\r\n\t *\r\n\t * Hand's `value` relates to values on the Axis.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set axis(axis: Axis) {\r\n\t\tif (this.axis != axis) {\r\n\t\t\tthis._axis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.events.on(\"datavalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"datarangechanged\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"dataitemsvalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"propertychanged\", this.invalidate, this, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t\tif (axis) {\r\n\t\t\tlet chart: GaugeChart = <GaugeChart>axis.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tthis.rotation = chart.startAngle;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.parent = axis.renderer;\r\n\t\tthis.zIndex = 5;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get axis(): Axis {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers `value` accessor, so that Hand animates to new position, in case\r\n\t * value has changed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateValue() {\r\n\t\tthis.value = this.value;\r\n\t}\r\n\r\n\t/**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param config  Config\r\n */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Connect clock hands with axes\r\n\t\t\tif ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\r\n\t\t\t\tconfig.axis = this.map.getKey(config.axis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}