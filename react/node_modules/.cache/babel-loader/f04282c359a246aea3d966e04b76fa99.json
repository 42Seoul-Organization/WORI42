{"ast":null,"code":"/**\r\n * Module, defining Axis Renderer for horizontal 3D axes.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\nimport { registry } from \"../../core/Registry\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Renderer for horizontal 3D axis.\r\n *\r\n * @see {@link IAxisRendererX3DEvents} for a list of available events\r\n * @see {@link IAxisRendererX3DAdapters} for a list of available Adapters\r\n */\n\nvar AxisRendererX3D =\n/** @class */\nfunction (_super) {\n  __extends(AxisRendererX3D, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param axis Related axis\r\n   */\n\n\n  function AxisRendererX3D() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * A related chart.\r\n     *\r\n     * @todo Description\r\n     */\n\n\n    _this._chart = new MutableValueDisposer();\n    _this.className = \"AxisRendererX3D\";\n\n    _this._disposers.push(_this._chart);\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Updates and positions a grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param grid         Grid element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRendererX3D.prototype.updateGridElement = function (grid, position, endPosition) {\n    position = position + (endPosition - position) * grid.location;\n    var point = this.positionToPoint(position);\n\n    if (grid.element) {\n      var dx = this.chart.dx3D || 0;\n      var dy = this.chart.dy3D || 0;\n      var h = this.getHeight();\n      grid.path = $path.moveTo({\n        x: dx,\n        y: dy\n      }) + $path.lineTo({\n        x: dx,\n        y: h + dy\n      }) + $path.lineTo({\n        x: 0,\n        y: h\n      });\n    }\n\n    this.positionItem(grid, point);\n    this.toggleVisibility(grid, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions the base grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererX3D.prototype.updateBaseGridElement = function () {\n    _super.prototype.updateBaseGridElement.call(this);\n\n    var h = this.getHeight();\n    var dx = this.chart.dx3D || 0;\n    var dy = this.chart.dy3D || 0;\n    this.baseGrid.path = $path.moveTo({\n      x: dx,\n      y: dy\n    }) + $path.lineTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: 0,\n      y: h\n    });\n  };\n\n  Object.defineProperty(AxisRendererX3D.prototype, \"chart\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Chart\r\n     */\n    get: function () {\n      return this._chart.get();\n    },\n\n    /**\r\n     * Chart, associated with the Axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Chart\r\n     */\n    set: function (chart) {\n      if (chart) {\n        this._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Invoked when 3D-related settings change, like depth or angle.\r\n   *\r\n   * @param event Event\r\n   */\n\n  AxisRendererX3D.prototype.handle3DChanged = function (event) {\n    if (event.property == \"depth\" || event.property == \"angle\") {\n      this.invalidate();\n    }\n  };\n\n  return AxisRendererX3D;\n}(AxisRendererX);\n\nexport { AxisRendererX3D };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"AxisRendererX3D\"] = AxisRendererX3D;","map":{"version":3,"sources":["../../../../../src/.internal/charts/axes/AxisRendererX3D.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Module, defining Axis Renderer for horizontal 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererX, IAxisRendererXProperties, IAxisRendererXAdapters, IAxisRendererXEvents } from \"../axes/AxisRendererX\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DProperties extends IAxisRendererXProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DEvents extends IAxisRendererXEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererX3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererX3DAdapters extends IAxisRendererXAdapters, IAxisRendererX3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for horizontal 3D axis.\r\n *\r\n * @see {@link IAxisRendererX3DEvents} for a list of available events\r\n * @see {@link IAxisRendererX3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererX3D extends AxisRendererX {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t */\r\n\tpublic _properties!: IAxisRendererX3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IAxisRendererX3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererX3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererX3D\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\t\tlet h: number = this.getHeight();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement() {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet h = this.getHeight();\r\n\t\tlet dx = this.chart.dx3D || 0;\r\n\t\tlet dy = this.chart.dy3D || 0;\r\n\t\tthis.baseGrid.path =  $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: h });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX3D\"] = AxisRendererX3D;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}