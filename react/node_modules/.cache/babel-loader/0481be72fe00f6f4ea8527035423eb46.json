{"ast":null,"code":"/**\r\n * SankeyNode module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { FlowDiagramNode } from \"./FlowDiagramNode\";\nimport { LabelBullet } from \"./LabelBullet\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $utils from \"../../core/utils/Utils\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a node in a Sankey Diagram.\r\n *\r\n * A Sankey node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[SankeyLink]] elements.\r\n *\r\n * @see {@link ISankeyNodeEvents} for a list of available events\r\n * @see {@link ISankeyNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar SankeyNode =\n/** @class */\nfunction (_super) {\n  __extends(SankeyNode, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function SankeyNode() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * [nextInCoord description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n\n\n    _this.nextInCoord = 0;\n    /**\r\n     * [nextOutCoord description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n\n    _this.nextOutCoord = 0;\n    _this.className = \"SankeyNode\";\n    _this.width = 10;\n    _this.height = 10;\n\n    var nameLabel = _this.createChild(LabelBullet);\n\n    nameLabel.shouldClone = false; //@should we auto update these locations if position is changed?\n\n    nameLabel.locationX = 1;\n    nameLabel.locationY = 0.5;\n    nameLabel.label.text = \"{name}\"; //nameLabel.label.textElement.hideOversized = false;\n\n    nameLabel.width = 150;\n    nameLabel.height = 150;\n    nameLabel.label.horizontalCenter = \"left\";\n    nameLabel.label.padding(0, 5, 0, 5);\n    _this.nameLabel = nameLabel;\n\n    var valueLabel = _this.createChild(LabelBullet);\n\n    valueLabel.shouldClone = false;\n    valueLabel.label.hideOversized = false;\n    valueLabel.locationX = 0.5;\n    valueLabel.locationY = 0.5;\n    valueLabel.width = 150;\n    valueLabel.height = 150; //valueLabel.label.text = \"{value}\";\n\n    valueLabel.label.horizontalCenter = \"middle\";\n    _this.valueLabel = valueLabel;\n    var hiddenState = _this.hiddenState;\n    hiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\n    hiddenState.properties.opacity = 0.5;\n    hiddenState.properties.visible = true;\n\n    _this.background.hiddenState.copyFrom(hiddenState);\n\n    return _this;\n  }\n  /**\r\n   * Invalidates all links, attached to this node.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  SankeyNode.prototype.invalidateLinks = function () {\n    var _this = this;\n\n    _super.prototype.invalidateLinks.call(this);\n\n    this.nextInCoord = 0;\n    this.nextOutCoord = 0;\n    var chart = this.chart;\n\n    if (chart) {\n      var orientation_1 = chart.orientation;\n\n      if (this._incomingSorted) {\n        $iter.each(this._incomingSorted, function (dataItem) {\n          var link = dataItem.link;\n          var value = dataItem.getWorkingValue(\"value\");\n\n          if ($type.isNumber(value)) {\n            link.parent = _this.chart.linksContainer;\n            var x = void 0;\n            var y = void 0;\n            var angle = void 0;\n\n            if (orientation_1 == \"horizontal\") {\n              x = _this.pixelX + _this.dx;\n              y = _this.nextInCoord + _this.pixelY + _this.dy;\n              angle = 0;\n            } else {\n              y = _this.pixelY + _this.dy;\n              x = _this.nextInCoord + _this.pixelX + _this.dx;\n              angle = 90;\n            }\n\n            link.endX = x;\n            link.endY = y;\n            link.startAngle = angle;\n            link.endAngle = angle;\n            link.gradient.rotation = angle;\n            link.linkWidth = value * chart.valueHeight;\n\n            if (!dataItem.fromNode) {\n              if (orientation_1 == \"horizontal\") {\n                link.maxWidth = 200;\n                link.startX = _this.pixelX + _this.dx - link.maxWidth;\n                link.startY = link.endY;\n              } else {\n                link.maxHeight = 200;\n                link.startX = link.endX;\n                link.startY = _this.pixelY + _this.dy - link.maxHeight;\n              } // TODO is this needed ?\n\n\n              $utils.used(link.gradient);\n              link.fill = dataItem.toNode.color;\n              var stop_1 = link.gradient.stops.getIndex(0);\n\n              if (stop_1) {\n                if (link.colorMode == \"gradient\") {\n                  stop_1.color = _this.color;\n                }\n\n                stop_1.opacity = 0;\n                link.fill = link.gradient;\n                link.stroke = link.gradient;\n                link.gradient.validate();\n              }\n            } //link.validate();\n\n\n            _this.nextInCoord += link.linkWidth;\n          }\n        });\n      }\n\n      if (this._outgoingSorted) {\n        $iter.each(this._outgoingSorted, function (dataItem) {\n          var link = dataItem.link;\n          link.parent = _this.chart.linksContainer;\n          var value = dataItem.getWorkingValue(\"value\");\n\n          if ($type.isNumber(value)) {\n            var x = void 0;\n            var y = void 0;\n            var angle = void 0;\n\n            if (orientation_1 == \"horizontal\") {\n              angle = 0;\n              x = _this.pixelX + _this.pixelWidth + _this.dx - 1;\n              y = _this.nextOutCoord + _this.pixelY + _this.dy;\n            } else {\n              angle = 90;\n              x = _this.nextOutCoord + _this.pixelX + _this.dx;\n              y = _this.pixelY + _this.pixelHeight + _this.dy - 1;\n            }\n\n            link.startX = x;\n            link.startY = y;\n            link.startAngle = angle;\n            link.endAngle = angle;\n            link.gradient.rotation = angle;\n            link.linkWidth = value * _this.chart.valueHeight;\n\n            if (!dataItem.toNode) {\n              if (orientation_1 == \"horizontal\") {\n                link.maxWidth = 200;\n                link.endX = _this.pixelX + link.maxWidth + _this.dx;\n                link.endY = link.startY;\n              } else {\n                link.maxHeight = 200;\n                link.endX = link.startX;\n                link.endY = _this.pixelY + link.maxHeight + _this.dy;\n              }\n\n              link.opacity = _this.opacity;\n              var stop_2 = link.gradient.stops.getIndex(1);\n\n              if (stop_2) {\n                if (link.colorMode == \"gradient\") {\n                  stop_2.color = _this.color;\n                }\n\n                stop_2.opacity = 0;\n                link.fill = link.gradient;\n                link.stroke = link.gradient;\n                link.gradient.validate();\n              }\n            } //link.validate();\n\n\n            _this.nextOutCoord += link.linkWidth;\n          }\n        });\n      }\n    }\n\n    this.positionBullet(this.nameLabel);\n    this.positionBullet(this.valueLabel);\n  };\n  /**\r\n   * Positions the bullet so it is centered within the node element.\r\n   *\r\n   * @param bullet  Target bullet\r\n   */\n\n\n  SankeyNode.prototype.positionBullet = function (bullet) {\n    if (bullet) {\n      bullet.x = this.measuredWidth * bullet.locationX;\n      bullet.y = this.measuredHeight * bullet.locationY;\n    }\n  };\n\n  Object.defineProperty(SankeyNode.prototype, \"level\", {\n    /**\r\n     * @return Level\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"level\");\n    },\n\n    /**\r\n     * A level node is displayed at. (0 - ...)\r\n     *\r\n     * Levels are measured from left to right.\r\n     *\r\n     * The nodes in the left-most column will have `level = 0`.\r\n     *\r\n     * Nodes in second column - `level = 1`, etc.\r\n     *\r\n     * @param value  Level\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"level\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies properties and labels from another [[SankeyNode]].\r\n   *\r\n   * @param source  Source node\r\n   */\n\n  SankeyNode.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.nameLabel.copyFrom(source.nameLabel);\n    this.valueLabel.copyFrom(source.valueLabel);\n  };\n\n  return SankeyNode;\n}(FlowDiagramNode);\n\nexport { SankeyNode };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"SankeyNode\"] = SankeyNode;","map":{"version":3,"sources":["../../../../../src/.internal/charts/elements/SankeyNode.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * SankeyNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode, IFlowDiagramNodeAdapters, IFlowDiagramNodeEvents, IFlowDiagramNodeProperties } from \"./FlowDiagramNode\";\r\nimport { SankeyDiagram, SankeyDiagramDataItem } from \"../types/SankeyDiagram\";\r\nimport { LabelBullet } from \"./LabelBullet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SankeyNode]].\r\n */\r\nexport interface ISankeyNodeProperties extends IFlowDiagramNodeProperties {\r\n\r\n\t/**\r\n\t * A level node is at. (0 - ...)\r\n\t */\r\n\tlevel?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[SankeyNode]].\r\n */\r\nexport interface ISankeyNodeEvents extends IFlowDiagramNodeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SankeyNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISankeyNodeAdapters extends IFlowDiagramNodeAdapters, ISankeyNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Sankey Diagram.\r\n *\r\n * A Sankey node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[SankeyLink]] elements.\r\n *\r\n * @see {@link ISankeyNodeEvents} for a list of available events\r\n * @see {@link ISankeyNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SankeyNode extends FlowDiagramNode {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISankeyNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISankeyNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISankeyNodeEvents;\r\n\r\n\r\n\t/**\r\n\t * [nextInCoord description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic nextInCoord: number = 0;\r\n\r\n\t/**\r\n\t * [nextOutCoord description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic nextOutCoord: number = 0;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t */\r\n\tpublic chart: SankeyDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[SankeyDiagramDataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: SankeyDiagramDataItem;\r\n\r\n\t/**\r\n\t * A label element which shows node's value.\r\n\t */\r\n\tpublic valueLabel: LabelBullet;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t */\r\n\tpublic nameLabel: LabelBullet;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyNode\";\r\n\r\n\t\tthis.width = 10;\r\n\t\tthis.height = 10;\r\n\r\n\t\tlet nameLabel = this.createChild(LabelBullet);\r\n\t\tnameLabel.shouldClone = false;\r\n\t\t//@should we auto update these locations if position is changed?\r\n\t\tnameLabel.locationX = 1;\r\n\t\tnameLabel.locationY = 0.5;\r\n\t\tnameLabel.label.text = \"{name}\";\r\n\r\n\t\t//nameLabel.label.textElement.hideOversized = false;\r\n\t\tnameLabel.width = 150;\r\n\t\tnameLabel.height = 150;\r\n\t\tnameLabel.label.horizontalCenter = \"left\";\r\n\t\tnameLabel.label.padding(0, 5, 0, 5);\r\n\t\tthis.nameLabel = nameLabel;\r\n\r\n\t\tlet valueLabel = this.createChild(LabelBullet);\r\n\t\tvalueLabel.shouldClone = false;\r\n\t\tvalueLabel.label.hideOversized = false;\r\n\t\tvalueLabel.locationX = 0.5;\r\n\t\tvalueLabel.locationY = 0.5;\r\n\t\tvalueLabel.width = 150;\r\n\t\tvalueLabel.height = 150;\r\n\t\t//valueLabel.label.text = \"{value}\";\r\n\t\tvalueLabel.label.horizontalCenter = \"middle\";\r\n\t\tthis.valueLabel = valueLabel;\r\n\r\n\t\tlet hiddenState = this.hiddenState;\r\n\t\thiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\thiddenState.properties.opacity = 0.5;\r\n\t\thiddenState.properties.visible = true;\r\n\r\n\t\tthis.background.hiddenState.copyFrom(hiddenState);\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\t\tsuper.invalidateLinks();\r\n\t\tthis.nextInCoord = 0;\r\n\t\tthis.nextOutCoord = 0;\r\n\t\tlet chart = this.chart;\r\n\r\n\t\tif (chart) {\r\n\t\t\tlet orientation = chart.orientation;\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\r\n\t\t\t\t\t\tlet x: number;\r\n\t\t\t\t\t\tlet y: number;\r\n\t\t\t\t\t\tlet angle: number;\r\n\r\n\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\tx = this.pixelX + this.dx;\r\n\t\t\t\t\t\t\ty = this.nextInCoord + this.pixelY + this.dy;\r\n\t\t\t\t\t\t\tangle = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\ty = this.pixelY + this.dy;\r\n\t\t\t\t\t\t\tx = this.nextInCoord + this.pixelX + this.dx;\r\n\t\t\t\t\t\t\tangle = 90;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.endX = x;\r\n\t\t\t\t\t\tlink.endY = y;\r\n\t\t\t\t\t\tlink.startAngle = angle;\r\n\t\t\t\t\t\tlink.endAngle = angle;\r\n\t\t\t\t\t\tlink.gradient.rotation = angle;\r\n\r\n\t\t\t\t\t\tlink.linkWidth = value * chart.valueHeight;\r\n\r\n\t\t\t\t\t\tif (!dataItem.fromNode) {\r\n\r\n\t\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\t\tlink.maxWidth = 200;\r\n\t\t\t\t\t\t\t\tlink.startX = this.pixelX + this.dx - link.maxWidth;\r\n\t\t\t\t\t\t\t\tlink.startY = link.endY;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tlink.maxHeight = 200;\r\n\t\t\t\t\t\t\t\tlink.startX = link.endX;\r\n\t\t\t\t\t\t\t\tlink.startY = this.pixelY + this.dy - link.maxHeight;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// TODO is this needed ?\r\n\t\t\t\t\t\t\t$utils.used(link.gradient);\r\n\r\n\t\t\t\t\t\t\tlink.fill = dataItem.toNode.color;\r\n\t\t\t\t\t\t\tlet stop = link.gradient.stops.getIndex(0);\r\n\t\t\t\t\t\t\tif (stop) {\r\n\t\t\t\t\t\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\t\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tstop.opacity = 0;\r\n\t\t\t\t\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.stroke = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//link.validate();\r\n\t\t\t\t\t\tthis.nextInCoord += link.linkWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\tlet x: number;\r\n\t\t\t\t\t\tlet y: number;\r\n\t\t\t\t\t\tlet angle: number;\r\n\r\n\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\tangle = 0;\r\n\t\t\t\t\t\t\tx = this.pixelX + this.pixelWidth + this.dx - 1;\r\n\t\t\t\t\t\t\ty = this.nextOutCoord + this.pixelY + this.dy;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tangle = 90;\r\n\t\t\t\t\t\t\tx = this.nextOutCoord + this.pixelX + this.dx;\r\n\t\t\t\t\t\t\ty = this.pixelY + this.pixelHeight + this.dy - 1;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.startX = x;\r\n\t\t\t\t\t\tlink.startY = y;\r\n\t\t\t\t\t\tlink.startAngle = angle;\r\n\t\t\t\t\t\tlink.endAngle = angle;\r\n\t\t\t\t\t\tlink.gradient.rotation = angle;\r\n\r\n\t\t\t\t\t\tlink.linkWidth = value * this.chart.valueHeight;\r\n\r\n\t\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\t\tlink.maxWidth = 200;\r\n\t\t\t\t\t\t\t\tlink.endX = this.pixelX + link.maxWidth + this.dx;\r\n\t\t\t\t\t\t\t\tlink.endY = link.startY;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tlink.maxHeight = 200;\r\n\t\t\t\t\t\t\t\tlink.endX = link.startX;\r\n\t\t\t\t\t\t\t\tlink.endY = this.pixelY + link.maxHeight + this.dy;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tlink.opacity = this.opacity;\r\n\r\n\t\t\t\t\t\t\tlet stop = link.gradient.stops.getIndex(1);\r\n\t\t\t\t\t\t\tif (stop) {\r\n\t\t\t\t\t\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\t\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tstop.opacity = 0;\r\n\t\t\t\t\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.stroke = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//link.validate();\r\n\t\t\t\t\t\tthis.nextOutCoord += link.linkWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.positionBullet(this.nameLabel);\r\n\t\tthis.positionBullet(this.valueLabel);\r\n\t}\r\n\r\n\t/**\r\n\t * Positions the bullet so it is centered within the node element.\r\n\t *\r\n\t * @param bullet  Target bullet\r\n\t */\r\n\tprotected positionBullet(bullet: LabelBullet) {\r\n\t\tif (bullet) {\r\n\t\t\tbullet.x = this.measuredWidth * bullet.locationX;\r\n\t\t\tbullet.y = this.measuredHeight * bullet.locationY;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A level node is displayed at. (0 - ...)\r\n\t *\r\n\t * Levels are measured from left to right.\r\n\t *\r\n\t * The nodes in the left-most column will have `level = 0`.\r\n\t *\r\n\t * Nodes in second column - `level = 1`, etc.\r\n\t *\r\n\t * @param value  Level\r\n\t */\r\n\tpublic set level(value: number) {\r\n\t\tthis.setPropertyValue(\"level\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\treturn this.getPropertyValue(\"level\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[SankeyNode]].\r\n\t *\r\n\t * @param source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.nameLabel.copyFrom(source.nameLabel);\r\n\t\tthis.valueLabel.copyFrom(source.valueLabel);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyNode\"] = SankeyNode;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}