{"ast":null,"code":"/**\r\n * Tick module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Sprite } from \"../../core/Sprite\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A basic Tick class.\r\n *\r\n * A tick is a short dash, mainly connecting an object like axis or slice to\r\n * it's textual label.\r\n *\r\n * @see {@link ITickEvents} for a list of available events\r\n * @see {@link ITickAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar Tick =\n/** @class */\nfunction (_super) {\n  __extends(Tick, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Tick() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Tick\";\n    var interfaceColors = new InterfaceColorSet();\n    _this.fillOpacity = 0;\n    _this.length = 6;\n    _this.strokeOpacity = 0.2;\n    _this.stroke = interfaceColors.getFor(\"grid\");\n    _this.isMeasured = false;\n    _this.nonScalingStroke = true;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(Tick.prototype, \"length\", {\n    /**\r\n     * @return Length (px)\r\n     */\n    get: function get() {\n      if (this.disabled) {\n        return 0;\n      }\n\n      return this.getPropertyValue(\"length\");\n    },\n\n    /**\r\n     * Length of the tick in pixels.\r\n     *\r\n     * @param value  Length (px)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"length\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Tick;\n}(Sprite);\n\nexport { Tick };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Tick\"] = Tick;","map":{"version":3,"sources":["../../../../../src/.internal/charts/elements/Tick.ts"],"names":[],"mappings":"AAAA;;;;AAIA;;;;;;;AAMA,SAAS,MAAT,QAA0E,mBAA1E;AACA,SAAS,QAAT,QAAyB,qBAAzB;AACA,SAAS,iBAAT,QAAkC,oCAAlC;AAkCA;;;;;;;AAOA;;;;;;;;;;;AAUA,IAAA,IAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA0B,EAAA,SAAA,CAAA,IAAA,EAAA,MAAA,CAAA;AAiBzB;;;;;AAGA,WAAA,IAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADR;;AAEC,IAAA,KAAI,CAAC,SAAL,GAAiB,MAAjB;AAEA,QAAI,eAAe,GAAG,IAAI,iBAAJ,EAAtB;AAEA,IAAA,KAAI,CAAC,WAAL,GAAmB,CAAnB;AACA,IAAA,KAAI,CAAC,MAAL,GAAc,CAAd;AACA,IAAA,KAAI,CAAC,aAAL,GAAqB,GAArB;AACA,IAAA,KAAI,CAAC,MAAL,GAAc,eAAe,CAAC,MAAhB,CAAuB,MAAvB,CAAd;AACA,IAAA,KAAI,CAAC,UAAL,GAAkB,KAAlB;AACA,IAAA,KAAI,CAAC,gBAAL,GAAwB,IAAxB;;AAEA,IAAA,KAAI,CAAC,UAAL;;;AACA;;AAOD,EAAA,MAAA,CAAA,cAAA,CAAW,IAAA,CAAA,SAAX,EAAW,QAAX,EAAiB;AAIjB;;;SAGA,eAAA;AACC,UAAI,KAAK,QAAT,EAAmB;AAClB,eAAO,CAAP;AACA;;AACD,aAAO,KAAK,gBAAL,CAAsB,QAAtB,CAAP;AACA,KAZgB;;AALjB;;;;;SAKA,aAAkB,KAAlB,EAA+B;AAC9B,WAAK,gBAAL,CAAsB,QAAtB,EAAgC,KAAhC,EAAuC,IAAvC;AACA,KAFgB;oBAAA;;AAAA,GAAjB;AAaD,SAAA,IAAA;AAAC,CAtDD,CAA0B,MAA1B,CAAA;;;AAwDA;;;;;;;AAMA,QAAQ,CAAC,iBAAT,CAA2B,MAA3B,IAAqC,IAArC","sourcesContent":["/**\r\n * Tick module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Tick]].\r\n */\r\nexport interface ITickProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * Length of the tick (px).\r\n\t */\r\n\tlength?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[Tick]].\r\n */\r\nexport interface ITickEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Tick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITickAdapters extends ISpriteAdapters, ITickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A basic Tick class.\r\n *\r\n * A tick is a short dash, mainly connecting an object like axis or slice to\r\n * it's textual label.\r\n *\r\n * @see {@link ITickEvents} for a list of available events\r\n * @see {@link ITickAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class Tick extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITickEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Tick\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fillOpacity = 0;\r\n\t\tthis.length = 6;\r\n\t\tthis.strokeOpacity = 0.2;\r\n\t\tthis.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.nonScalingStroke = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Length of the tick in pixels.\r\n\t *\r\n\t * @param value  Length (px)\r\n\t */\r\n\tpublic set length(value: number) {\r\n\t\tthis.setPropertyValue(\"length\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get length(): number {\r\n\t\tif (this.disabled) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\treturn this.getPropertyValue(\"length\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Tick\"] = Tick;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}