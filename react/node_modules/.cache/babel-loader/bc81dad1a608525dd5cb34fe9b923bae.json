{"ast":null,"code":"/**\r\n * XY series module.\r\n */\nimport { __extends, __values } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Series, SeriesDataItem } from \"./Series\";\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\nimport { ValueAxis } from \"../axes/ValueAxis\";\nimport { Dictionary } from \"../../core/utils/Dictionary\";\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\nimport { XYChart } from \"../types/XYChart\";\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\nimport { DateAxis } from \"../axes/DateAxis\";\nimport { registry } from \"../../core/Registry\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $time from \"../../core/utils/Time\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $object from \"../../core/utils/Object\";\nimport * as $path from \"../../core/rendering/Path\";\nimport { options } from \"../../core/Options\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[XYSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar XYSeriesDataItem =\n/** @class */\nfunction (_super) {\n  __extends(XYSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function XYSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"XYSeriesDataItem\";\n    _this.values.customValue = {};\n    _this.values.valueX = {\n      stack: 0\n    };\n    _this.values.valueY = {\n      stack: 0\n    };\n    _this.values.openValueX = {};\n    _this.values.openValueY = {};\n    _this.values.dateX = {};\n    _this.values.dateY = {};\n    _this.values.openDateX = {};\n    _this.values.openDateY = {};\n\n    _this.setLocation(\"dateX\", 0.5, 0);\n\n    _this.setLocation(\"dateY\", 0.5, 0);\n\n    _this.setLocation(\"categoryX\", 0.5, 0);\n\n    _this.setLocation(\"categoryY\", 0.5, 0);\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(XYSeriesDataItem.prototype, \"valueX\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function get() {\n      return this.values.valueX.value;\n    },\n\n    /**\r\n     * Item's numeric value on X value axis.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function set(value) {\n      this.setValue(\"valueX\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYSeriesDataItem.prototype, \"customValue\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function get() {\n      return this.values.customValue.value;\n    },\n\n    /**\r\n     * Item's custom numeric value.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function set(value) {\n      this.setValue(\"customValue\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYSeriesDataItem.prototype, \"valueY\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function get() {\n      return this.values.valueY.value;\n    },\n\n    /**\r\n     * Item's numeric value on Y value axis.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function set(value) {\n      this.setValue(\"valueY\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYSeriesDataItem.prototype, \"dateX\", {\n    /**\r\n     * @return Date\r\n     */\n    get: function get() {\n      return this.getDate(\"dateX\");\n    },\n\n    /**\r\n     * Item's date value on X date-based axis.\r\n     *\r\n     * @param date  Date\r\n     */\n    set: function set(date) {\n      this.setDate(\"dateX\", date);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYSeriesDataItem.prototype, \"dateY\", {\n    /**\r\n     * @return Date\r\n     */\n    get: function get() {\n      return this.getDate(\"dateY\");\n    },\n\n    /**\r\n     * Item's date value on Y date-based axis.\r\n     *\r\n     * @param date  Date\r\n     */\n    set: function set(date) {\n      this.setDate(\"dateY\", date);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYSeriesDataItem.prototype, \"categoryX\", {\n    /**\r\n     * @return Category\r\n     */\n    get: function get() {\n      return this.categories.categoryX;\n    },\n\n    /**\r\n     * Item's category on X category axis.\r\n     *\r\n     * @param category  Category\r\n     */\n    set: function set(category) {\n      this.setCategory(\"categoryX\", category);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYSeriesDataItem.prototype, \"categoryY\", {\n    /**\r\n     * @return Category\r\n     */\n    get: function get() {\n      return this.categories.categoryY;\n    },\n\n    /**\r\n     * Item's category on Y category axis.\r\n     *\r\n     * @param category  Category\r\n     */\n    set: function set(category) {\n      this.setCategory(\"categoryY\", category);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYSeriesDataItem.prototype, \"openValueX\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function get() {\n      return this.values.openValueX.value;\n    },\n\n    /**\r\n     * Item's open numeric value on X value axis.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function set(value) {\n      this.setValue(\"openValueX\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYSeriesDataItem.prototype, \"openValueY\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function get() {\n      return this.values.openValueY.value;\n    },\n\n    /**\r\n     * Item's open numeric value on Y value axis.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function set(value) {\n      this.setValue(\"openValueY\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYSeriesDataItem.prototype, \"openDateX\", {\n    /**\r\n     * @return Date\r\n     */\n    get: function get() {\n      return this.getDate(\"openDateX\");\n    },\n\n    /**\r\n     * Item's open date value on X date-based axis.\r\n     *\r\n     * @param date  Date\r\n     */\n    set: function set(date) {\n      this.setDate(\"openDateX\", date);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYSeriesDataItem.prototype, \"openDateY\", {\n    /**\r\n     * @return Date\r\n     */\n    get: function get() {\n      return this.getDate(\"openDateY\");\n    },\n\n    /**\r\n     * Item's open date value on Y date-based axis.\r\n     *\r\n     * @param date  Date\r\n     */\n    set: function set(date) {\n      this.setDate(\"openDateY\", date);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYSeriesDataItem.prototype, \"openCategoryX\", {\n    /**\r\n     * @return Category\r\n     */\n    get: function get() {\n      return this.categories.openCategoryX;\n    },\n\n    /**\r\n     * Item's open category on X category axis.\r\n     *\r\n     * @param category  Category\r\n     */\n    set: function set(category) {\n      this.setCategory(\"openCategoryX\", category);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYSeriesDataItem.prototype, \"openCategoryY\", {\n    /**\r\n     * @return Category\r\n     */\n    get: function get() {\n      return this.categories.openCategoryY;\n    },\n\n    /**\r\n     * Item's open category on Y category axis.\r\n     *\r\n     * @param category  Category\r\n     */\n    set: function set(category) {\n      this.setCategory(\"openCategoryY\", category);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Return smallest value out of all item's value fields.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param fields      Fields to check in\r\n   * @param working     Include working (temporary) values\r\n   * @param stackValue  If item is in a stack, the value item starts as\r\n   * @return Value\r\n   */\n\n  XYSeriesDataItem.prototype.getMin = function (fields, working, stackValue) {\n    var _this = this; //if (this.visible) {  // dumped because of non smooth zooming\n\n\n    var min;\n\n    if (!$type.isNumber(stackValue)) {\n      stackValue = 0;\n    }\n\n    $array.each(fields, function (field) {\n      var value;\n\n      if (working) {\n        value = _this.getWorkingValue(field);\n      } else {\n        value = _this.getValue(field);\n      }\n\n      value += stackValue;\n\n      if (value < min || !$type.isNumber(min)) {\n        min = value;\n      }\n    });\n    return min; //}\n  };\n  /**\r\n   * Return biggest value out of all item's value fields.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param fields      Fields to check in\r\n   * @param working     Include working (temporary) values\r\n   * @param stackValue  If item is in a stack, the value item starts as\r\n   * @return Value\r\n   */\n\n\n  XYSeriesDataItem.prototype.getMax = function (fields, working, stackValue) {\n    var _this = this; //if (this.visible) { // dumped because of non smooth zooming\n\n\n    var max;\n\n    if (!$type.isNumber(stackValue)) {\n      stackValue = 0;\n    }\n\n    $array.each(fields, function (field) {\n      var value;\n\n      if (working) {\n        value = _this.getWorkingValue(field);\n      } else {\n        value = _this.getValue(field);\n      }\n\n      value += stackValue;\n\n      if (value > max || !$type.isNumber(max)) {\n        max = value;\n      }\n    });\n    return max; //}\n  };\n\n  return XYSeriesDataItem;\n}(SeriesDataItem);\n\nexport { XYSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines Series for [[XYChart]].\r\n *\r\n * @see {@link IXYSeriesEvents} for a list of available Events\r\n * @see {@link IXYSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar XYSeries =\n/** @class */\nfunction (_super) {\n  __extends(XYSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function XYSeries() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Indicates which of the series' `dataFields` to calculate aggregate values\r\n     * for.\r\n     *\r\n     * Available data fields for all [[XYSeries]] are:\r\n     * `valueX`, `valueY`, `openValueX`, and `openValueY`.\r\n     *\r\n     * [[CandlestickSeries]] adds:\r\n     * `lowValueX`, `lowValueY`, `highValueX`, and `highValueY`.\r\n     *\r\n     * Available options:\r\n     * `\"open\"`, `\"close\"`, `\"low\"`, `\"high\"`, `\"average\"`, `\"sum\"`.\r\n     *\r\n     * Defaults are as follows:\r\n     * * `valueX`: `\"close\"`\r\n     * * `valueY`: `\"close\"`\r\n     * * `openValueX`: `\"open\"`\r\n     * * `openValueY`: `\"open\"`\r\n     * * `lowValueX`: `\"low\"`\r\n     * * `lowValueY`: `\"low\"`\r\n     * * `highValueX`: `\"high\"`\r\n     * * `highValueY`: `\"high\"`\r\n     *\r\n     * Is required only if data being plotted on a `DateAxis` and\r\n     * its `groupData` is set to `true`.\r\n     *\r\n     * ```TypeScript\r\n     * let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n     * dateAxis.groupData = true;\r\n     *\r\n     * let valueAxis = chart.xAxes.push(new am4charts.valueAxis());\r\n     *\r\n     * let series = chart.series.push(new am4charts.LineSeries());\r\n     * series.dataFields.dateX = \"date\";\r\n     * series.dataFields.valueY = \"value\";\r\n     * series.groupFields.valueY = \"average\";\r\n     * ```\r\n     * ```JavaScript\r\n     * var dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n     * dateAxis.groupData = true;\r\n     *\r\n     * var valueAxis = chart.xAxes.push(new am4charts.valueAxis());\r\n     *\r\n     * var series = chart.series.push(new am4charts.LineSeries());\r\n     * series.dataFields.dateX = \"date\";\r\n     * series.dataFields.valueY = \"value\";\r\n     * series.groupFields.valueY = \"average\";\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"xAxes\": [{\r\n     *     \"type\": \"DateAxis\",\r\n     *     \"groupData\": true\r\n     *   }],\r\n     *   \"yAxes\": [{\r\n     *     \"type\": \"ValueAxis\"\r\n     *   }],\r\n     *   \"series\": [{\r\n     *     \"type\": \"LineSeries\",\r\n     *     \"dataFields\": {\r\n     *       \"dateX\": \"date\",\r\n     *       \"valueY\": \"value\"\r\n     *     },\r\n     *     \"groupFields\": {\r\n     *       \"valueY\": \"average\"\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * The above setup will ensure, that if there are many data items within\r\n     * selected range, they will be grouped into aggregated data points, using\r\n     * average value of all the values.\r\n     *\r\n     * For example if we have 2 years worth of daily data (~700 data items), when\r\n     * fully zoomed out, the chart would show ~100 data items instead: one for\r\n     * each week in those two years.\r\n     *\r\n     * Grouping will occur automatically, based on current selection range, and\r\n     * will change dynamically when user zooms in/out the chart.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/date-axis/#Dynamic_data_item_grouping} for more information about dynamic data item grouping.\r\n     * @since 4.7.0\r\n     */\n\n\n    _this.groupFields = {};\n    /**\r\n     * X axis the series is attached to.\r\n     */\n\n    _this._xAxis = new MutableValueDisposer();\n    /**\r\n     * Y axis the series is attached to.\r\n     */\n\n    _this._yAxis = new MutableValueDisposer();\n    /**\r\n     * [_xValueFields description]\r\n     *\r\n     * @todo Description\r\n     */\n\n    _this._xValueFields = [];\n    /**\r\n     * [_yValueFields description]\r\n     *\r\n     * @todo Description\r\n     */\n\n    _this._yValueFields = [];\n    /**\r\n     * @ignore\r\n     */\n\n    _this._baseInterval = {};\n    /**\r\n     * @ignore\r\n     */\n\n    _this.dataGrouped = false;\n    /**\r\n     * @ignore\r\n     */\n\n    _this.usesShowFields = false;\n    /**\r\n     * @ignore\r\n     */\n\n    _this._dataSetChanged = false;\n    _this._maxxX = 100000;\n    _this._maxxY = 100000;\n    _this._propertiesChanged = false;\n    _this.className = \"XYSeries\";\n    _this.isMeasured = false;\n    _this.groupFields.valueX = \"close\";\n    _this.groupFields.valueY = \"close\";\n    _this.groupFields.customValue = \"close\";\n    _this.groupFields.openValueX = \"open\";\n    _this.groupFields.openValueY = \"open\";\n    _this.cursorTooltipEnabled = true;\n    _this.cursorHoverEnabled = true;\n    _this.excludeFromTotal = false;\n    _this.mainContainer.mask = new Sprite();\n\n    _this.mainContainer.mask.setElement(_this.paper.add(\"path\"));\n\n    _this.stacked = false;\n    _this.snapTooltip = false;\n    _this._showBullets = false;\n    _this.tooltip.pointerOrientation = \"horizontal\";\n    _this.hideTooltipWhileZooming = true;\n\n    _this.setPropertyValue(\"maskBullets\", true);\n\n    _this.tooltip.events.on(\"hidden\", function () {\n      _this.returnBulletDefaultState();\n    }, undefined, false);\n\n    _this._disposers.push(_this._xAxis);\n\n    _this._disposers.push(_this._yAxis);\n\n    _this.observe(visualProperties, function () {\n      if (_this.inited) {\n        _this._propertiesChanged = true;\n\n        if (_this.legendDataItem) {\n          _this.legendDataItem.childrenCreated = false;\n        }\n\n        if (_this.chart && _this.chart.legend) {\n          _this.chart.legend.invalidateDataItems();\n        }\n\n        _this.invalidate();\n      }\n    }, undefined, false);\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  XYSeries.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"X/Y Series\");\n    }\n  };\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  XYSeries.prototype.createDataItem = function () {\n    return new XYSeriesDataItem();\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  XYSeries.prototype.resetExtremes = function () {\n    this._tmin.clear();\n\n    this._tmax.clear();\n\n    this._smin.clear();\n\n    this._smax.clear();\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  XYSeries.prototype.dataChangeUpdate = function () {\n    this.dataGrouped = false;\n    this._baseInterval = {};\n    this._currentDataSetId = \"\";\n    this.resetExtremes();\n\n    if (this.xAxis) {\n      this.xAxis.seriesDataChangeUpdate(this);\n    }\n\n    if (this.yAxis) {\n      this.yAxis.seriesDataChangeUpdate(this);\n    }\n  };\n  /**\r\n   * (Re)validates the series' data.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYSeries.prototype.validateData = function () {\n    this._baseInterval = {};\n    var dataFields = this.dataFields;\n\n    if (dataFields.valueYShow || dataFields.openValueXShow || dataFields.openValueXShow || dataFields.openValueYShow) {\n      this.usesShowFields = true;\n    } else {\n      this.usesShowFields = false;\n    }\n\n    this.defineFields();\n\n    if (this.data.length > 0) {\n      this.dataChangeUpdate();\n    }\n\n    _super.prototype.validateData.call(this);\n\n    this.updateItemReaderText();\n\n    if (this.chart) {\n      if (!$type.hasValue(this.dataFields[this._xField]) || !$type.hasValue(this.dataFields[this._yField])) {\n        throw Error(\"Data fields for series \\\"\" + (this.name ? this.name : this.uid) + \"\\\" are not properly defined.\");\n      }\n    } // 4.7.21 solves 51540\n\n\n    if (this.inited && this.isHidden) {\n      this.hide(0);\n    }\n\n    this.dataGrouped = false;\n  };\n  /**\r\n   * Processes data item.\r\n   *\r\n   * @param dataItem     Data item\r\n   * @param dataContext  Raw data\r\n   * @param index        Index of the data item\r\n   */\n\n\n  XYSeries.prototype.processDataItem = function (dataItem, dataContext) {\n    try {\n      _super.prototype.processDataItem.call(this, dataItem, dataContext);\n\n      this.xAxis.processSeriesDataItem(dataItem, \"X\");\n      this.yAxis.processSeriesDataItem(dataItem, \"Y\");\n      this.setInitialWorkingValues(dataItem);\n    } catch (e) {\n      if (this._chart) {\n        this._chart.raiseCriticalError(e);\n      }\n    }\n  };\n  /**\r\n   *\r\n   * When validating raw data, instead of processing data item, we update it\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param item\r\n   */\n\n\n  XYSeries.prototype.updateDataItem = function (dataItem) {\n    _super.prototype.updateDataItem.call(this, dataItem); //dataItem.events.disable();\n\n\n    this.xAxis.processSeriesDataItem(dataItem, \"X\");\n    this.yAxis.processSeriesDataItem(dataItem, \"Y\"); //dataItem.events.enable();\t\t\n  };\n  /**\r\n   * Inits data item's working values.\r\n   *\r\n   * @param dataItem  Data item\r\n   * @param index     Data item's index\r\n   */\n\n\n  XYSeries.prototype.setInitialWorkingValues = function (dataItem) {};\n  /**\r\n   * @ignore\r\n   */\n\n\n  XYSeries.prototype.disposeData = function () {\n    _super.prototype.disposeData.call(this);\n\n    var xAxis = this.xAxis;\n    var yAxis = this.yAxis;\n\n    if (xAxis) {\n      var dataItemsX = this.dataItemsByAxis.getKey(xAxis.uid);\n\n      if (dataItemsX) {\n        dataItemsX.clear();\n      }\n\n      if (xAxis instanceof CategoryAxis) {\n        this.clearCatAxis(xAxis);\n      }\n    }\n\n    if (yAxis) {\n      var dataItemsY = this.dataItemsByAxis.getKey(yAxis.uid);\n\n      if (dataItemsY) {\n        dataItemsY.clear();\n      }\n\n      if (yAxis instanceof CategoryAxis) {\n        this.clearCatAxis(yAxis);\n      }\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  XYSeries.prototype.clearCatAxis = function (axis) {\n    var uid = this.uid;\n    axis.dataItems.each(function (dataItem) {\n      if (dataItem.seriesDataItems[uid]) {\n        dataItem.seriesDataItems[uid] = [];\n      }\n    });\n  };\n  /**\r\n   * Sets up which data fields to use for data access.\r\n   */\n\n\n  XYSeries.prototype.defineFields = function () {\n    var xAxis = this.xAxis;\n    var yAxis = this.yAxis;\n\n    if (xAxis && yAxis) {\n      var xAxisFieldName = xAxis.axisFieldName;\n      var xField = xAxisFieldName + \"X\";\n      var xOpenField = \"open\" + $utils.capitalize(xAxisFieldName) + \"X\";\n      var yAxisFieldName = yAxis.axisFieldName;\n      var yField = yAxisFieldName + \"Y\";\n      var yOpenField = \"open\" + $utils.capitalize(yAxisFieldName) + \"Y\";\n      this._xField = xField;\n      this._yField = yField;\n\n      if (this.dataFields[xOpenField]) {\n        this._xOpenField = xOpenField;\n      }\n\n      if (this.dataFields[yOpenField]) {\n        this._yOpenField = yOpenField;\n      }\n\n      if (!this.dataFields[yOpenField] && this.baseAxis == yAxis) {\n        this._yOpenField = yField;\n      }\n\n      if (!this.dataFields[xOpenField] && this.baseAxis == xAxis) {\n        this._xOpenField = xField;\n      }\n\n      if (this.stacked && this.baseAxis == xAxis) {\n        this._xOpenField = xField;\n      }\n\n      if (this.stacked && this.baseAxis == yAxis) {\n        this._yOpenField = yField;\n      }\n\n      if (xAxis instanceof CategoryAxis && yAxis instanceof CategoryAxis) {\n        if (!this._yOpenField) {\n          this._yOpenField = yField;\n        }\n      }\n\n      this._xValueFields = [];\n      this._yValueFields = [];\n      this.addValueField(xAxis, this._xValueFields, this._xField);\n      this.addValueField(xAxis, this._xValueFields, this._xOpenField);\n      this.addValueField(yAxis, this._yValueFields, this._yField);\n      this.addValueField(yAxis, this._yValueFields, this._yOpenField);\n    }\n  };\n  /**\r\n   * [axis description]\r\n   *\r\n   * @todo Description\r\n   * @param axis    Axis\r\n   * @param fields  Fields (?)\r\n   * @param field   Field\r\n   */\n\n\n  XYSeries.prototype.addValueField = function (axis, fields, field) {\n    if (axis instanceof ValueAxis) {\n      if ($type.hasValue(this.dataFields[field]) && fields.indexOf(field) == -1) {\n        fields.push(field);\n      }\n    }\n  };\n  /**\r\n   * Sets category field from the category axis.\r\n   *\r\n   * User might set field for category axis only, but not for series. In such\r\n   * case, we take field value from axis and set it for series.\r\n   *\r\n   * @param field  Field\r\n   * @param axis   Axis\r\n   */\n\n\n  XYSeries.prototype.setCategoryAxisField = function (field, axis) {\n    if (!$type.hasValue(this.dataFields[field])) {\n      this.dataFields[field] = axis.dataFields.category;\n    }\n  };\n  /**\r\n   * Sets date field from the date axis.\r\n   *\r\n   * User might set field for category axis only, but not for series. In such\r\n   * case, we take field value from axis and set it for series.\r\n   *\r\n   * @param field  Field\r\n   * @param axis   Axis\r\n   */\n\n\n  XYSeries.prototype.setDateAxisField = function (field, axis) {\n    if (!$type.hasValue(this.dataFields[field])) {\n      this.dataFields[field] = axis.dataFields.date;\n    }\n  };\n  /**\r\n   * Performs after-draw tasks, e.g. creates masks.\r\n   */\n\n\n  XYSeries.prototype.afterDraw = function () {\n    _super.prototype.afterDraw.call(this);\n\n    this.createMask();\n  };\n  /**\r\n   * Create a mask for the series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYSeries.prototype.createMask = function () {\n    // this mask from which we cut out ranges. does not work well if ranges overlap.\n    if (this.mainContainer.mask) {\n      var path_1 = this.getMaskPath(); // @todo: this approach won't work well on circluar or other non x/y axes\n\n      $iter.each(this.axisRanges.iterator(), function (range) {\n        if (range.axisFill.fillPath) {\n          range.axisFill.validate();\n          path_1 += range.axisFill.fillPath;\n        }\n      });\n      this.mainContainer.mask.path = path_1;\n    }\n  };\n  /**\r\n   * Returns an SVG path to use as series mask.\r\n   *\r\n   * @return SVG path\r\n   */\n\n\n  XYSeries.prototype.getMaskPath = function () {\n    if (this.xAxis && this.yAxis) {\n      return $path.rectToPath({\n        x: 0,\n        y: 0,\n        width: this.xAxis.axisLength,\n        height: this.yAxis.axisLength\n      });\n    }\n\n    return \"\";\n  };\n  /**\r\n   * Returns axis data field to use.\r\n   *\r\n   * @param axis  Axis\r\n   * @return Field name\r\n   */\n\n\n  XYSeries.prototype.getAxisField = function (axis) {\n    if (axis == this.xAxis) {\n      return this.xField;\n    }\n\n    if (axis == this.yAxis) {\n      return this.yField;\n    }\n  };\n  /**\r\n   * Validates data items.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYSeries.prototype.validateDataItems = function () {\n    var chart = this.chart;\n\n    if (chart) {\n      this._maxxX = $math.max(100000, chart.plotContainer.maxWidth * 2);\n      this._maxxY = $math.max(100000, chart.plotContainer.maxHeight * 2);\n    } // this helps date axis to check which baseInterval we should use\n\n\n    var xAxis = this.xAxis;\n    var yAxis = this.yAxis;\n\n    if (xAxis && yAxis) {\n      xAxis.updateAxisBySeries();\n      yAxis.updateAxisBySeries();\n    }\n\n    _super.prototype.validateDataItems.call(this);\n\n    if (xAxis && yAxis) {\n      xAxis.postProcessSeriesDataItems(this);\n      yAxis.postProcessSeriesDataItems(this);\n    }\n  };\n  /**\r\n   * Validates data range.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYSeries.prototype.validateDataRange = function () {\n    var xAxis = this.xAxis;\n    var yAxis = this.yAxis;\n\n    if (xAxis && yAxis) {\n      if (xAxis.dataRangeInvalid) {\n        xAxis.validateDataRange();\n      }\n\n      if (yAxis.dataRangeInvalid) {\n        yAxis.validateDataRange();\n      }\n    }\n\n    _super.prototype.validateDataRange.call(this);\n  };\n  /**\r\n   * (Re)validates the whole series, effectively causing it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYSeries.prototype.validate = function () {\n    var xAxis = this.xAxis;\n    var yAxis = this.yAxis;\n\n    if (xAxis && yAxis) {\n      if (xAxis.invalid) {\n        xAxis.validate();\n      }\n\n      if (yAxis.invalid) {\n        yAxis.validate();\n      }\n\n      this.y = yAxis.pixelY;\n      this.x = xAxis.pixelX;\n      this._showBullets = true;\n      var minBulletDistance = this.minBulletDistance;\n\n      if ($type.isNumber(minBulletDistance)) {\n        if (this.baseAxis.axisLength / (this.endIndex - this.startIndex) < minBulletDistance) {\n          this._showBullets = false;\n        }\n      }\n    }\n\n    this.updateTooltip();\n\n    _super.prototype.validate.call(this);\n\n    var chart = this.chart;\n    var maskBullets = this.maskBullets;\n\n    if (chart && maskBullets) {\n      if (chart.className == \"XYChart\") {\n        if (chart.leftAxesContainer.layout == \"vertical\" || chart.rightAxesContainer.layout == \"vertical\") {\n          if (this.yAxis) {\n            this.bulletsContainer.mask = this.yAxis.renderer.gridContainer;\n          } else {\n            this.bulletsContainer.mask = undefined;\n          }\n        }\n\n        if (chart.topAxesContainer.layout == \"horizontal\" || chart.bottomAxesContainer.layout == \"horizontal\") {\n          if (this.xAxis) {\n            this.bulletsContainer.mask = this.xAxis.renderer.gridContainer;\n          } else {\n            this.bulletsContainer.mask = undefined;\n          }\n        }\n      }\n    }\n  };\n\n  Object.defineProperty(XYSeries.prototype, \"xAxis\", {\n    /**\r\n     * @return Axis\r\n     */\n    get: function get() {\n      if (this.chart) {\n        if (!this._xAxis.get()) {\n          var axis = this.chart.xAxes.getIndex(0);\n\n          if (!axis) {\n            throw Error(\"There are no X axes on chart.\");\n          }\n\n          this.xAxis = axis;\n        }\n\n        return this._xAxis.get();\n      }\n    },\n\n    /**\r\n     * X axis the series is attached to.\r\n     *\r\n     * @param axis  Axis\r\n     */\n    set: function set(axis) {\n      this.setXAxis(axis);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  XYSeries.prototype.setXAxis = function (axis) {\n    var oldAxis = this._xAxis.get();\n\n    if (oldAxis != axis) {\n      if (oldAxis) {\n        this.dataItemsByAxis.removeKey(oldAxis.uid); // TODO why is this here ?\n\n        this._xAxis.dispose(); // temp @todo: why it is not disposed?\n\n\n        oldAxis.series.removeValue(this);\n      }\n\n      this._xAxis.set(axis, axis.registerSeries(this));\n\n      this.dataItemsByAxis.setKey(axis.uid, new Dictionary());\n      this.invalidateData();\n    }\n  };\n\n  Object.defineProperty(XYSeries.prototype, \"yAxis\", {\n    /**\r\n     * @return Axis\r\n     */\n    get: function get() {\n      if (this.chart) {\n        if (!this._yAxis.get()) {\n          var axis = this.chart.yAxes.getIndex(0);\n\n          if (!axis) {\n            throw Error(\"There are no Y axes on chart.\");\n          }\n\n          this.yAxis = axis;\n        }\n\n        return this._yAxis.get();\n      }\n    },\n\n    /**\r\n     * Y axis the series is attached to.\r\n     *\r\n     * @param axis  Axis\r\n     */\n    set: function set(axis) {\n      this.setYAxis(axis);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  XYSeries.prototype.setYAxis = function (axis) {\n    var oldAxis = this._yAxis.get();\n\n    if (oldAxis != axis) {\n      if (oldAxis) {\n        this.dataItemsByAxis.removeKey(oldAxis.uid); // TODO why is this here ?\n\n        this._yAxis.dispose(); // temp @todo: why it is not disposed?\n\n\n        oldAxis.series.removeValue(this);\n      }\n\n      this._yAxis.set(axis, axis.registerSeries(this));\n\n      if (axis.chart instanceof XYChart) {\n        axis.chart.handleYAxisSet(this);\n      }\n\n      this.dataItemsByAxis.setKey(axis.uid, new Dictionary());\n      this.invalidateData();\n    }\n  };\n\n  Object.defineProperty(XYSeries.prototype, \"baseAxis\", {\n    /**\r\n     * @return Axis\r\n     */\n    get: function get() {\n      var xAxis = this.xAxis;\n      var yAxis = this.yAxis;\n\n      if (!this._baseAxis && xAxis && yAxis) {\n        if (yAxis instanceof DateAxis) {\n          this._baseAxis = yAxis;\n        }\n\n        if (xAxis instanceof DateAxis) {\n          this._baseAxis = xAxis;\n        }\n\n        if (yAxis instanceof CategoryAxis) {\n          this._baseAxis = yAxis;\n        }\n\n        if (xAxis instanceof CategoryAxis) {\n          this._baseAxis = xAxis;\n        }\n\n        if (!this._baseAxis) {\n          this._baseAxis = xAxis;\n        }\n      }\n\n      return this._baseAxis;\n    },\n\n    /**\r\n     * The main (base) axis.\r\n     *\r\n     * This is the axis that series fills will go to, or grow animations will\r\n     * happen from.\r\n     *\r\n     * @param value  Axis\r\n     */\n    set: function set(value) {\n      if (this._baseAxis != value) {\n        this._baseAxis = value;\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Adds one or several (array) of data items to the existing data.\r\n   *\r\n   * @param rawDataItem One or many raw data item objects\r\n   */\n\n  XYSeries.prototype.addData = function (rawDataItem, removeCount, skipRaw) {\n    _super.prototype.addData.call(this, rawDataItem, removeCount, skipRaw);\n\n    var scrollbarSeries = this.scrollbarSeries;\n\n    if (scrollbarSeries) {\n      this.scrollbarSeries.addData(rawDataItem, removeCount, true);\n    }\n  };\n\n  XYSeries.prototype.setData = function (value) {\n    _super.prototype.setData.call(this, value);\n\n    if (this.scrollbarSeries) {\n      this.scrollbarSeries.setData(value);\n    }\n  };\n  /**\r\n   * Makes the chart use particular data set.\r\n   *\r\n   * If `id` is not provided or there is no such data set, main data will be\r\n   * used.\r\n   *\r\n   * @ignore\r\n   * @since 4.7.0\r\n   * @param  id  Data set id\r\n   */\n\n\n  XYSeries.prototype.setDataSet = function (id) {\n    var changed = _super.prototype.setDataSet.call(this, id);\n\n    if (changed) {\n      this._dataSetChanged = true;\n      var dataItems = this.dataItems;\n      this.resetExtremes();\n      var xAxis = this.xAxis;\n      var yAxis = this.yAxis;\n      this._prevStartIndex = undefined;\n      this._prevEndIndex = undefined;\n      this._startIndex = undefined;\n      this._endIndex = undefined;\n\n      if (!this.appeared) {\n        this.processValues(false); // this will slow down!\n      }\n\n      if (xAxis instanceof DateAxis && xAxis == this.baseAxis) {\n        this._tmin.setKey(xAxis.uid, dataItems.getIndex(0).dateX.getTime());\n\n        this._tmax.setKey(xAxis.uid, dataItems.getIndex(dataItems.length - 1).dateX.getTime());\n\n        this.dispatch(\"extremeschanged\");\n      }\n\n      if (yAxis instanceof DateAxis && yAxis == this.baseAxis) {\n        this._tmin.setKey(yAxis.uid, dataItems.getIndex(0).dateY.getTime());\n\n        this._tmax.setKey(yAxis.uid, dataItems.getIndex(dataItems.length - 1).dateY.getTime());\n\n        this.dispatch(\"extremeschanged\");\n      }\n    }\n\n    return changed;\n  };\n  /**\r\n   * Processes values after data items' were added.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItems  Data items\r\n   */\n\n\n  XYSeries.prototype.processValues = function (working) {\n    _super.prototype.processValues.call(this, working);\n\n    var xAxis = this.xAxis;\n    var yAxis = this.yAxis;\n\n    if (!xAxis || !yAxis) {\n      return;\n    }\n\n    var dataItems = this.dataItems;\n    var minX = Infinity;\n    var maxX = -Infinity;\n    var minY = Infinity;\n    var maxY = -Infinity;\n    var startIndex = this.startIndex;\n    var endIndex = this.endIndex;\n    var workingStartIndex = startIndex;\n    var workingEndIndex = endIndex;\n\n    if (!working) {\n      startIndex = 0;\n      endIndex = this.dataItems.length;\n    }\n\n    for (var i = startIndex; i < endIndex; i++) {\n      var dataItem = dataItems.getIndex(i);\n      this.getStackValue(dataItem, working);\n      var stackX = dataItem.getValue(\"valueX\", \"stack\");\n      var stackY = dataItem.getValue(\"valueY\", \"stack\");\n      minX = $math.min(dataItem.getMin(this._xValueFields, working, stackX), minX);\n      minY = $math.min(dataItem.getMin(this._yValueFields, working, stackY), minY);\n      maxX = $math.max(dataItem.getMax(this._xValueFields, working, stackX), maxX);\n      maxY = $math.max(dataItem.getMax(this._yValueFields, working, stackY), maxY); // if it's stacked, pay attention to stack value\n\n      if (this.stacked) {\n        if (this.baseAxis == xAxis) {\n          if (stackY < minY) {\n            minY = stackY;\n          }\n\n          if (stackY > maxY) {\n            maxY = stackY;\n          }\n        }\n\n        if (this.baseAxis == yAxis) {\n          if (stackX < minX) {\n            minX = stackX;\n          }\n\n          if (stackX > maxX) {\n            maxX = stackX;\n          }\n        }\n      }\n    } // this is mainly for value axis to calculate total and perecent.total of each series category\n\n\n    xAxis.processSeriesDataItems();\n    yAxis.processSeriesDataItems();\n    var xAxisId = xAxis.uid;\n    var yAxisId = yAxis.uid;\n\n    if (this.xAxis instanceof ValueAxis && (minX == Infinity || maxX == -Infinity)) {\n      this._smin.setKey(xAxisId, undefined);\n\n      this._smax.setKey(xAxisId, undefined);\n\n      this.dispatchImmediately(\"selectionextremeschanged\");\n      return;\n    }\n\n    if (this.yAxis instanceof ValueAxis && (minY == Infinity || maxY == -Infinity)) {\n      this._smin.setKey(yAxisId, undefined);\n\n      this._smax.setKey(yAxisId, undefined);\n\n      this.dispatchImmediately(\"selectionextremeschanged\");\n      return;\n    }\n\n    if (!working) {\n      if (this._tmin.getKey(xAxisId) != minX || this._tmax.getKey(xAxisId) != maxX || this._tmin.getKey(yAxisId) != minY || this._tmax.getKey(yAxisId) != maxY) {\n        this._tmin.setKey(xAxisId, minX);\n\n        this._tmax.setKey(xAxisId, maxX);\n\n        this._tmin.setKey(yAxisId, minY);\n\n        this._tmax.setKey(yAxisId, maxY);\n\n        var stackedSeries = this.stackedSeries;\n\n        if (stackedSeries) {\n          if (stackedSeries.isDisposed()) {\n            this.stackedSeries = undefined;\n          } else {\n            stackedSeries.processValues(false);\n          }\n        }\n\n        this.dispatchImmediately(\"extremeschanged\");\n      }\n    }\n\n    if (startIndex != workingStartIndex || endIndex != workingEndIndex) {\n      minX = Infinity;\n      maxX = -Infinity;\n      minY = Infinity;\n      maxY = -Infinity;\n\n      for (var i = workingStartIndex; i < workingEndIndex; i++) {\n        var dataItem = dataItems.getIndex(i);\n        this.getStackValue(dataItem, working);\n        var stackX = dataItem.getValue(\"valueX\", \"stack\");\n        var stackY = dataItem.getValue(\"valueY\", \"stack\");\n        minX = $math.min(dataItem.getMin(this._xValueFields, working, stackX), minX);\n        minY = $math.min(dataItem.getMin(this._yValueFields, working, stackY), minY);\n        maxX = $math.max(dataItem.getMax(this._xValueFields, working, stackX), maxX);\n        maxY = $math.max(dataItem.getMax(this._yValueFields, working, stackY), maxY); // if it's stacked, pay attention to stack value\n\n        if (this.stacked) {\n          if (this.baseAxis == xAxis) {\n            if (stackY < minY) {\n              minY = stackY;\n            }\n\n            if (stackY > maxY) {\n              maxY = stackY;\n            }\n          }\n\n          if (this.baseAxis == yAxis) {\n            if (stackX < minX) {\n              minX = stackX;\n            }\n\n            if (stackX > maxX) {\n              maxX = stackX;\n            }\n          }\n        }\n      }\n    }\n\n    if (this.xAxis instanceof ValueAxis && (minX == Infinity || maxX == -Infinity)) {\n      this._smin.setKey(xAxisId, undefined);\n\n      this._smax.setKey(xAxisId, undefined);\n\n      this.dispatchImmediately(\"selectionextremeschanged\");\n      return;\n    }\n\n    if (this.yAxis instanceof ValueAxis && (minY == Infinity || maxY == -Infinity)) {\n      this._smin.setKey(yAxisId, undefined);\n\n      this._smax.setKey(yAxisId, undefined);\n\n      this.dispatchImmediately(\"selectionextremeschanged\");\n      return;\n    }\n\n    if (this._smin.getKey(xAxisId) != minX || this._smax.getKey(xAxisId) != maxX || this._smin.getKey(yAxisId) != minY || this._smax.getKey(yAxisId) != maxY) {\n      this._smin.setKey(xAxisId, minX);\n\n      this._smax.setKey(xAxisId, maxX);\n\n      this._smin.setKey(yAxisId, minY);\n\n      this._smax.setKey(yAxisId, maxY);\n\n      if (this.appeared || this.start != 0 || this.end != 1 || this.dataItems != this.mainDataSet) {\n        /// new, helps to handle issues with change percent\n        var changed = false;\n\n        if (yAxis instanceof ValueAxis && !(yAxis instanceof DateAxis)) {\n          var tmin = this._tmin.getKey(yAxisId);\n\n          if (!$type.isNumber(tmin) || (this.usesShowFields || this._dataSetChanged) && minY < tmin || this.stackedSeries && !this.isHidden) {\n            this._tmin.setKey(yAxisId, minY);\n\n            changed = true;\n          }\n\n          var tmax = this._tmax.getKey(yAxisId);\n\n          if (!$type.isNumber(tmax) || (this.usesShowFields || this._dataSetChanged) && maxY > tmax || this.stackedSeries && !this.isHidden) {\n            this._tmax.setKey(yAxisId, maxY);\n\n            changed = true;\n          }\n        }\n\n        if (xAxis instanceof ValueAxis && !(xAxis instanceof DateAxis)) {\n          var tmin = this._tmin.getKey(xAxisId);\n\n          if (!$type.isNumber(tmin) || (this.usesShowFields || this._dataSetChanged) && minX < tmin || this.stackedSeries && !this.isHidden) {\n            this._tmin.setKey(xAxisId, minX);\n\n            changed = true;\n          }\n\n          var tmax = this._tmax.getKey(xAxisId);\n\n          if (!$type.isNumber(tmax) || (this.usesShowFields || this._dataSetChanged) && maxX > tmax || this.stackedSeries && !this.isHidden) {\n            this._tmax.setKey(xAxisId, maxX);\n\n            changed = true;\n          }\n        }\n\n        if (changed) {\n          this.dispatchImmediately(\"extremeschanged\");\n        }\n\n        if (this.start == 0 && this.end == 1) {\n          // yes, its ok. otherwise min/max won't be updated when zooming out\n          this._dataSetChanged = false;\n        }\n\n        this.dispatchImmediately(\"selectionextremeschanged\");\n      }\n    }\n\n    if (!working && this.stacked) {\n      this.processValues(true);\n    }\n  };\n  /**\r\n   * Hides element's [[Tooltip]].\r\n   *\r\n   * @see {@link Tooltip}\r\n   */\n\n\n  XYSeries.prototype.hideTooltip = function () {\n    _super.prototype.hideTooltip.call(this);\n\n    this.returnBulletDefaultState();\n    this._prevTooltipDataItem = undefined;\n  };\n  /**\r\n   * Shows series tooltip at specific position.\r\n   *\r\n   * @param xPosition  X\r\n   * @param yPosition  Y\r\n   */\n\n\n  XYSeries.prototype.showTooltipAtPosition = function (xPosition, yPosition) {\n    var dataItem;\n\n    if (this.visible && !this.isHiding && !this.isShowing) {\n      var xAxis = this._xAxis.get();\n\n      var yAxis = this._yAxis.get();\n\n      if (xAxis == this.baseAxis) {\n        dataItem = xAxis.getSeriesDataItem(this, xAxis.toAxisPosition(xPosition), this.snapTooltip);\n      }\n\n      if (yAxis == this.baseAxis) {\n        dataItem = yAxis.getSeriesDataItem(this, yAxis.toAxisPosition(yPosition), this.snapTooltip);\n      }\n\n      var point = this.showTooltipAtDataItem(dataItem);\n\n      if (point) {\n        return point;\n      } // so that if tooltip is shown on columns or bullets for it not to be hidden\n\n\n      if (!this.tooltipText) {\n        return;\n      }\n    }\n\n    this.hideTooltip();\n  };\n\n  XYSeries.prototype.getAdjustedXLocation = function (dataItem, field, bulletLocationX) {\n    return dataItem.locations[field];\n  };\n\n  XYSeries.prototype.getAdjustedYLocation = function (dataItem, field, bulletLocationY) {\n    return dataItem.locations[field];\n  };\n  /**\r\n   * Shows series tooltip at specific dataItem.\r\n   *\r\n   * @param dataItem\r\n   */\n\n\n  XYSeries.prototype.showTooltipAtDataItem = function (dataItem) {\n    var e_1, _a;\n\n    var cursor = this.chart.cursor;\n\n    if (cursor && cursor.hideSeriesTooltipsOnSelection && cursor.selection.visible && cursor.downPoint) {\n      this.hideTooltip();\n      return;\n    }\n\n    this.returnBulletDefaultState(dataItem);\n\n    if (dataItem && dataItem.visible) {\n      this.updateLegendValue(dataItem);\n\n      if (this.cursorTooltipEnabled) {\n        this.tooltipDataItem = dataItem; // todo: add tooltipXField and tooltipYField.\n\n        var tooltipXField = this.tooltipXField;\n        var tooltipYField = this.tooltipYField;\n\n        if ($type.hasValue(dataItem[tooltipXField]) && $type.hasValue(dataItem[tooltipYField])) {\n          var tooltipPoint = this.getPoint(dataItem, tooltipXField, tooltipYField, this.getAdjustedXLocation(dataItem, tooltipXField), this.getAdjustedYLocation(dataItem, tooltipYField));\n\n          if (tooltipPoint) {\n            if (this.chart.className == \"XYChart\" && (tooltipPoint.y < -1 || tooltipPoint.y > this.yAxis.pixelHeight + 1 || tooltipPoint.x < -1 || tooltipPoint.x > this.xAxis.pixelWidth + 1)) {// void\n            } else {\n              this.tooltipX = tooltipPoint.x;\n              this.tooltipY = tooltipPoint.y;\n\n              if (this._prevTooltipDataItem != dataItem) {\n                this.dispatchImmediately(\"tooltipshownat\", {\n                  type: \"tooltipshownat\",\n                  target: this,\n                  dataItem: dataItem\n                });\n                this._prevTooltipDataItem = dataItem;\n              }\n\n              if (this.cursorHoverEnabled) {\n                try {\n                  for (var _b = __values(dataItem.sprites), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var sprite = _c.value;\n\n                    if (!sprite.parent.visible || sprite.isHidden || sprite.__disabled || sprite.disabled || sprite.isHiding) {} else {\n                      if (!sprite.interactions.isRealHover) {\n                        sprite.dispatchImmediately(\"over\");\n                        sprite.interactions.isRealHover = true;\n                      }\n\n                      sprite.isHover = true;\n                    }\n                  }\n                } catch (e_1_1) {\n                  e_1 = {\n                    error: e_1_1\n                  };\n                } finally {\n                  try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                  } finally {\n                    if (e_1) throw e_1.error;\n                  }\n                }\n              }\n\n              if (this.showTooltip()) {\n                return $utils.spritePointToSvg({\n                  x: tooltipPoint.x,\n                  y: tooltipPoint.y\n                }, this);\n              }\n\n              return;\n            }\n          }\n        }\n      }\n    } else {\n      this.updateLegendValue(dataItem, true);\n    }\n  };\n  /**\r\n   * Returns default state to bullets when tooltip is shown at some other data\r\n   * item or hidden\r\n   */\n\n\n  XYSeries.prototype.returnBulletDefaultState = function (dataItem) {\n    var e_2, _a;\n\n    if (this._prevTooltipDataItem && this._prevTooltipDataItem != dataItem) {\n      try {\n        for (var _b = __values(this._prevTooltipDataItem.sprites), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var sprite = _c.value;\n\n          if (!sprite.isDisposed()) {\n            var fireEvent = sprite.interactions.isRealHover;\n            sprite.isHover = false;\n\n            if (fireEvent) {\n              sprite.dispatchImmediately(\"out\");\n            }\n          } else {\n            this._prevTooltipDataItem = undefined;\n          }\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    }\n  };\n\n  XYSeries.prototype.shouldCreateBullet = function (dataItem, bulletTemplate) {\n    // use series xField/yField if bullet doesn't have fields set\n    var xField = bulletTemplate.xField;\n\n    if (!$type.hasValue(xField)) {\n      xField = this.xField;\n    }\n\n    var yField = bulletTemplate.yField;\n\n    if (!$type.hasValue(yField)) {\n      yField = this.yField;\n    }\n\n    if (this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField]) || this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField])) {\n      return false;\n    }\n\n    if (bulletTemplate.disabled) {\n      var disabledField = bulletTemplate.propertyFields.disabled;\n      var dataContext = dataItem.dataContext;\n\n      if (dataContext && dataContext[disabledField] === false) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  XYSeries.prototype.updateTooltip = function () {\n    if (!this.hideTooltipWhileZooming && this.tooltip && !this.tooltip.isHidden && !this.isHiding && !this.isHidden && this.tooltipDataItem) {\n      this.showTooltipAtDataItem(this.tooltipDataItem);\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  XYSeries.prototype.positionBullet = function (bullet) {\n    _super.prototype.positionBullet.call(this, bullet);\n\n    var dataItem = bullet.dataItem; // use series xField/yField if bullet doesn't have fields set\n\n    var xField = bullet.xField;\n\n    if (!$type.hasValue(xField)) {\n      xField = this.xField;\n    }\n\n    var yField = bullet.yField;\n\n    if (!$type.hasValue(yField)) {\n      yField = this.yField;\n    }\n\n    var xAxis = this.xAxis;\n    var yAxis = this.yAxis;\n\n    if (xAxis instanceof ValueAxis && !dataItem.hasValue([xField]) || yAxis instanceof ValueAxis && !dataItem.hasValue([yField])) {\n      bullet.visible = false;\n    } else {\n      var bulletLocationX = this.getBulletLocationX(bullet, xField);\n      var bulletLocationY = this.getBulletLocationY(bullet, yField);\n      var point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);\n\n      if (point) {\n        var xOpenField = this.xOpenField;\n        var yOpenField = this.yOpenField;\n        var positionX = void 0;\n        var positionY = void 0;\n\n        if (xAxis instanceof DateAxis) {\n          if (!$type.isNumber(bulletLocationX)) {\n            bulletLocationX = 0;\n          }\n\n          var openValue = void 0;\n          var closeValue = dataItem.getWorkingValue(xField);\n\n          if (!xOpenField) {\n            if (xAxis == this.baseAxis) {\n              openValue = xAxis.baseValue;\n            }\n          } else {\n            openValue = dataItem.getWorkingValue(xOpenField);\n          }\n\n          if (!$type.isNumber(openValue)) {\n            openValue = closeValue;\n          }\n\n          var stack = dataItem.getValue(\"valueX\", \"stack\");\n          openValue += stack;\n          closeValue += stack;\n\n          if (openValue == closeValue) {\n            var baseInterval = xAxis.baseInterval;\n            var dateFormatter = xAxis.dateFormatter;\n            openValue = $time.round(new Date(openValue), baseInterval.timeUnit, baseInterval.count, dateFormatter.firstDayOfWeek, dateFormatter.utc).getTime();\n            closeValue = $time.add(new Date(openValue), baseInterval.timeUnit, baseInterval.count, dateFormatter.utc).getTime();\n          }\n\n          var middleValue = void 0;\n\n          if (xAxis == this.baseAxis) {\n            middleValue = openValue + (closeValue - openValue) * bulletLocationX;\n          } else {\n            middleValue = openValue + (closeValue - openValue) * (1 - bulletLocationX);\n          }\n\n          positionX = xAxis.valueToPosition(middleValue);\n        } else if (xAxis instanceof ValueAxis) {\n          if (!$type.isNumber(bulletLocationX)) {\n            bulletLocationX = 0;\n          }\n\n          var openValue = void 0;\n          var closeValue = dataItem.getWorkingValue(xField);\n\n          if (!xOpenField) {\n            openValue = xAxis.baseValue;\n          } else {\n            openValue = dataItem.getWorkingValue(xOpenField);\n          }\n\n          var stack = dataItem.getValue(\"valueX\", \"stack\");\n          openValue += stack;\n          closeValue += stack;\n          var middleValue = openValue + (closeValue - openValue) * (1 - bulletLocationX);\n          positionX = xAxis.valueToPosition(middleValue);\n        } else if (xAxis instanceof CategoryAxis) {\n          var rightLocation = this.getAdjustedXLocation(dataItem, xField, bullet.locationX);\n          var leftLocation = this.getAdjustedXLocation(dataItem, xOpenField, bullet.locationX);\n          positionX = xAxis.categoryToPosition(dataItem[xField], rightLocation);\n          var openPositionX = void 0;\n\n          if (xOpenField) {\n            openPositionX = xAxis.categoryToPosition(dataItem[xOpenField], leftLocation);\n          }\n\n          if (!$type.isNumber(openPositionX)) {\n            openPositionX = 1;\n          }\n\n          positionX = openPositionX + (positionX - openPositionX) * bulletLocationX;\n        }\n\n        if (yAxis instanceof DateAxis) {\n          if (!$type.isNumber(bulletLocationY)) {\n            bulletLocationY = 0;\n          }\n\n          var openValue = void 0;\n          var closeValue = dataItem.getWorkingValue(yField);\n\n          if (!yOpenField) {\n            if (yAxis == this.baseAxis) {\n              openValue = yAxis.baseValue;\n            }\n          } else {\n            openValue = dataItem.getWorkingValue(yOpenField);\n          }\n\n          if (!$type.isNumber(openValue)) {\n            openValue = closeValue;\n          }\n\n          var stack = dataItem.getValue(\"valueY\", \"stack\");\n          openValue += stack;\n          closeValue += stack;\n\n          if (openValue == closeValue) {\n            var baseInterval = yAxis.baseInterval;\n            var dateFormatter = yAxis.dateFormatter;\n            openValue = $time.round(new Date(openValue), baseInterval.timeUnit, baseInterval.count, dateFormatter.firstDayOfWeek, dateFormatter.utc).getTime();\n            closeValue = $time.add(new Date(openValue), baseInterval.timeUnit, baseInterval.count, dateFormatter.utc).getTime();\n          }\n\n          var middleValue = void 0;\n\n          if (yAxis == this.baseAxis) {\n            middleValue = openValue + (closeValue - openValue) * bulletLocationY;\n          } else {\n            middleValue = openValue + (closeValue - openValue) * (1 - bulletLocationY);\n          }\n\n          positionY = yAxis.valueToPosition(middleValue);\n        } else if (yAxis instanceof ValueAxis) {\n          if (!$type.isNumber(bulletLocationY)) {\n            bulletLocationY = 0;\n          }\n\n          var openValue = void 0;\n          var closeValue = dataItem.getWorkingValue(yField);\n\n          if (!yOpenField) {\n            openValue = yAxis.baseValue;\n          } else {\n            openValue = dataItem.getWorkingValue(yOpenField);\n          }\n\n          var stack = dataItem.getValue(\"valueY\", \"stack\");\n          openValue += stack;\n          closeValue += stack;\n          var middleValue = openValue + (closeValue - openValue) * (1 - bulletLocationY);\n          positionY = yAxis.valueToPosition(middleValue);\n        } else if (yAxis instanceof CategoryAxis) {\n          positionY = yAxis.categoryToPosition(dataItem[yField], bulletLocationY);\n          var topLocation = this.getAdjustedYLocation(dataItem, yField, bullet.locationY);\n          var bottomLocation = this.getAdjustedYLocation(dataItem, yOpenField, bullet.locationY);\n          positionY = yAxis.categoryToPosition(dataItem[yField], topLocation);\n          var openPositionY = void 0;\n\n          if (yOpenField) {\n            openPositionY = yAxis.categoryToPosition(dataItem[yOpenField], bottomLocation);\n          }\n\n          if (!$type.isNumber(openPositionY)) {\n            openPositionY = 1;\n          }\n\n          positionY = openPositionY + (positionY - openPositionY) * bulletLocationY;\n        }\n\n        bullet.visible = true;\n        this.positionBulletReal(bullet, positionX, positionY);\n      } else {\n        bullet.visible = false;\n      }\n    }\n  };\n\n  XYSeries.prototype.positionBulletReal = function (bullet, positionX, positionY) {\n    bullet.x = this.xAxis.renderer.positionToPoint(positionX, positionY).x;\n    bullet.y = this.yAxis.renderer.positionToPoint(positionY, positionX).y;\n  };\n  /**\r\n   * returns bullet x location\r\n   * @ignore\r\n   */\n\n\n  XYSeries.prototype.getBulletLocationX = function (bullet, field) {\n    var bulletLocation = bullet.locationX;\n    var dataItem = bullet.dataItem;\n\n    if (!$type.isNumber(bulletLocation)) {\n      bulletLocation = dataItem.workingLocations[field];\n    }\n\n    return bulletLocation;\n  };\n  /**\r\n   * Returns bullet x location\r\n   * @ignore\r\n   */\n\n\n  XYSeries.prototype.getBulletLocationY = function (bullet, field) {\n    var bulletLocation = bullet.locationY;\n    var dataItem = bullet.dataItem;\n\n    if (!$type.isNumber(bulletLocation)) {\n      bulletLocation = dataItem.workingLocations[field];\n    }\n\n    return bulletLocation;\n  };\n  /**\r\n   * This method must be called if you update Series' data fields that might\r\n   * affect stacking of the series.\r\n   *\r\n   * Since individual `dataField` changes are not being monitored, you need\r\n   * todo it manually for changes to take affect.\r\n   *\r\n   * @since 4.7.21\r\n   */\n\n\n  XYSeries.prototype.updateStacking = function () {\n    var _this = this;\n\n    this.invalidateDataItems();\n\n    if (this.chart) {\n      this.chart.series.each(function (series) {\n        if (series.baseAxis == _this.baseAxis) {\n          series.stackedSeries = undefined;\n          series.invalidateDataItems();\n          series.invalidateProcessedData();\n        }\n      });\n    }\n  };\n\n  Object.defineProperty(XYSeries.prototype, \"stacked\", {\n    /**\r\n     * @return Can be stacked?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"stacked\");\n    },\n\n    /**\r\n     * Can items from this series be included into stacks?\r\n     *\r\n     * Note: proper stacking is only possible if series have the same number\r\n     * of data items. To ensure this, don't set data directly on series\r\n     * but do this on chart instead.\r\n     *\r\n     * @default false\r\n     * @param stacked  Can be stacked?\r\n     */\n    set: function set(stacked) {\n      if (this.setPropertyValue(\"stacked\", stacked, true)) {\n        this.updateStacking();\n        var xAxis = this.xAxis;\n        var yAxis = this.yAxis;\n\n        if (!stacked) {\n          var field_1;\n\n          if (xAxis != this.baseAxis && xAxis instanceof ValueAxis) {\n            field_1 = this.xField;\n          }\n\n          if (yAxis != this.baseAxis && yAxis instanceof ValueAxis) {\n            field_1 = this.yField;\n          }\n\n          if (field_1) {\n            this.dataItems.each(function (dataItem) {\n              dataItem.setCalculatedValue(field_1, 0, \"stack\");\n            });\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYSeries.prototype, \"snapTooltip\", {\n    /**\r\n     * @return Should snap?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"snapTooltip\");\n    },\n\n    /**\r\n     * Should the nearest tooltip be shown if no data item is found on the\r\n     * current cursor position? In order this to work, you should set snapTooltip = false on the series baseAxis.\r\n     *\r\n     * @default false\r\n     * @param value  Should snap?\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"snapTooltip\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Shows hidden series.\r\n   *\r\n   * @param duration  Duration of reveal animation (ms)\r\n   * @return Animation\r\n   */\n\n  XYSeries.prototype.show = function (duration) {\n    var _this = this;\n\n    var fields;\n\n    if (this.xAxis instanceof ValueAxis && this.xAxis != this.baseAxis) {\n      fields = this._xValueFields;\n    }\n\n    if (this.yAxis instanceof ValueAxis && this.yAxis != this.baseAxis) {\n      fields = this._yValueFields;\n    }\n\n    var startIndex = this.startIndex;\n    var endIndex = this.endIndex;\n    var delay = 0;\n    var interpolationDuration = this.defaultState.transitionDuration;\n\n    if ($type.isNumber(duration)) {\n      interpolationDuration = duration;\n    }\n\n    if (!options.animationsEnabled) {\n      interpolationDuration = 0;\n    }\n\n    var anim;\n    $iter.each($iter.indexed(this.dataItems.iterator()), function (a) {\n      var i = a[0];\n      var dataItem = a[1];\n      var realDuration = interpolationDuration;\n\n      if (i < _this.startIndex - 10 || i > _this.endIndex + 10) {\n        realDuration = 0;\n        delay = 0;\n      }\n\n      if (_this.sequencedInterpolation && realDuration > 0) {\n        delay = _this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\n      }\n\n      anim = dataItem.show(realDuration, delay, fields);\n    }); // other data sets\n\n    this.dataSets.each(function (key, dataSet) {\n      if (dataSet != _this.dataItems) {\n        dataSet.each(function (dataItem) {\n          dataItem.events.disable();\n          dataItem.show(0, 0, fields);\n          dataItem.events.enable();\n        });\n      }\n    });\n\n    if (this.mainDataSet != this.dataItems) {\n      this.mainDataSet.each(function (dataItem) {\n        dataItem.events.disable();\n        dataItem.show(0, 0, fields);\n        dataItem.events.enable();\n      });\n    }\n\n    var animation = _super.prototype.show.call(this, duration);\n\n    if (anim && !anim.isFinished()) {\n      animation = anim;\n    }\n\n    if (this.hidden) {\n      this.dispatchImmediately(\"selectionextremeschanged\");\n      this.hidden = false;\n    }\n\n    return animation;\n  };\n  /**\r\n   * Hides series.\r\n   *\r\n   * @param duration  Duration of hiding animation (ms)\r\n   * @return Animation\r\n   */\n\n\n  XYSeries.prototype.hide = function (duration) {\n    var _this = this;\n\n    var fields;\n    var value;\n    var xAxis = this.xAxis;\n\n    if (xAxis instanceof ValueAxis && xAxis != this.baseAxis) {\n      fields = this._xValueFields; // animate to zero if 0 is within zoomMin/zoomMax\n\n      if (this.stacked || xAxis.minZoomed < xAxis.baseValue && xAxis.maxZoomed > xAxis.baseValue || this.stackedSeries) {\n        value = xAxis.baseValue;\n      } else {\n        value = xAxis.min;\n      }\n    }\n\n    var yAxis = this.yAxis;\n\n    if (yAxis instanceof ValueAxis && yAxis != this.baseAxis) {\n      fields = this._yValueFields; // animate to zero if 0 is within zoomMin/zoomMax\n\n      if (this.stacked || yAxis.minZoomed < yAxis.baseValue && yAxis.maxZoomed > yAxis.baseValue || this.stackedSeries) {\n        value = yAxis.baseValue;\n      } else {\n        value = yAxis.min;\n      }\n    } //if ($type.hasValue(fields)) {\n\n\n    var startIndex = this.startIndex;\n    var endIndex = this.endIndex;\n    var interpolationDuration = this.hiddenState.transitionDuration;\n\n    if ($type.isNumber(duration)) {\n      interpolationDuration = duration;\n    }\n\n    if (!options.animationsEnabled) {\n      interpolationDuration = 0;\n    }\n\n    var delay = 0;\n    var anim;\n    $iter.each($iter.indexed(this.dataItems.iterator()), function (a) {\n      var i = a[0];\n      var dataItem = a[1];\n      var realDuration = interpolationDuration;\n\n      if (i < _this.startIndex - 10 || i > _this.endIndex + 10) {\n        realDuration = 0;\n      }\n\n      if (realDuration == 0) {\n        dataItem.hide(0, 0, value, fields);\n      } else {\n        if (_this.sequencedInterpolation && realDuration > 0) {\n          delay = _this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\n        }\n\n        anim = dataItem.hide(realDuration, delay, value, fields);\n      }\n    });\n\n    var animation = _super.prototype.hide.call(this, interpolationDuration);\n\n    if (animation && !animation.isFinished()) {\n      animation.delay(delay);\n    }\n\n    if (anim && !anim.isFinished()) {\n      animation = anim;\n    } // helps to avoid flicker. otherwise columns will show up at full size and only on next frame will animate from 0\n\n\n    this.validateDataElements(); //}\n\n    return animation;\n  };\n  /**\r\n   * [handleDataItemWorkingValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYSeries.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {\n    _super.prototype.handleDataItemWorkingValueChange.call(this, dataItem, name); // to calculate stack values\n\n\n    var axisSeries = this.baseAxis.series;\n    $iter.each(axisSeries.iterator(), function (series) {\n      if (series.stacked || series.stackedSeries) {\n        series.invalidateProcessedData();\n      }\n    });\n  };\n  /**\r\n   * [getStackValue description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param dataItem  Data item\r\n   */\n\n\n  XYSeries.prototype.getStackValue = function (dataItem, working) {\n    // todo: here wer stack x and y values only. question is - what should we do with other values, like openX, openY?\n    // if this series is not stacked or new stack begins, return.\n    var _this = this;\n\n    var xAxis = this.xAxis;\n    var yAxis = this.yAxis;\n\n    if (!this.stacked || !xAxis || !yAxis) {\n      return;\n    } else {\n      // it might seem that it's better to go through base axis series, but we do not maintain the same order as in chart.series there.\n      var chart = this.chart;\n      var index = chart.series.indexOf(this);\n      var field_2;\n\n      if (xAxis != this.baseAxis && xAxis instanceof ValueAxis) {\n        field_2 = this.xField;\n      }\n\n      if (yAxis != this.baseAxis && yAxis instanceof ValueAxis) {\n        field_2 = this.yField;\n      }\n\n      if (!field_2) {\n        return;\n      } //this is good for removing series, otherwise stack values will remain the same and chart won't pay atention when adding/removing series\t\t\t\n\n\n      dataItem.setCalculatedValue(field_2, 0, \"stack\");\n      $iter.eachContinue(chart.series.range(0, index).backwards().iterator(), function (prevSeries) {\n        // stacking is only possible if both axes are the same\n        if (prevSeries.xAxis == xAxis && prevSeries.yAxis == yAxis) {\n          // saving value\n          prevSeries.stackedSeries = _this;\n          var prevDataItem = prevSeries.dataItems.getIndex(dataItem.index); // indexes should match\n\n          if (prevDataItem && prevDataItem.hasValue(_this._xValueFields) && prevDataItem.hasValue(_this._yValueFields)) {\n            var value = dataItem.getValue(field_2);\n            var prevValue = void 0;\n            var prevRealValue = prevDataItem.getValue(field_2) + prevDataItem.getValue(field_2, \"stack\");\n\n            if (working) {\n              prevValue = prevDataItem.getWorkingValue(field_2) + prevDataItem.getValue(field_2, \"stack\");\n            } else {\n              prevValue = prevDataItem.getValue(field_2) + prevDataItem.getValue(field_2, \"stack\");\n            }\n\n            if (value >= 0 && prevRealValue >= 0 || value < 0 && prevRealValue < 0) {\n              //dataItem.events.disable();\n              dataItem.setCalculatedValue(field_2, prevValue, \"stack\"); //dataItem.events.enable();\n\n              return false;\n            }\n          } else if (!prevSeries.stacked) {\n            return false;\n          }\n        }\n\n        return true;\n      });\n    }\n  };\n\n  Object.defineProperty(XYSeries.prototype, \"xField\", {\n    /**\r\n     * [xField description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @return [description]\r\n     */\n    get: function get() {\n      return this._xField;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYSeries.prototype, \"yField\", {\n    /**\r\n     * [yField description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @return [description]\r\n     */\n    get: function get() {\n      return this._yField;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYSeries.prototype, \"xOpenField\", {\n    /**\r\n     * [xOpenField description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @return [description]\r\n     */\n    get: function get() {\n      return this._xOpenField;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYSeries.prototype, \"yOpenField\", {\n    /**\r\n     * [yOpenField description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @return [description]\r\n     */\n    get: function get() {\n      return this._yOpenField;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYSeries.prototype, \"tooltipXField\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @return [description]\r\n     */\n    get: function get() {\n      if (this._tooltipXField) {\n        return this._tooltipXField;\n      }\n\n      return this._xField;\n    },\n\n    /**\r\n     * [tooltipXField description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param value [description]\r\n     */\n    set: function set(value) {\n      this._tooltipXField = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYSeries.prototype, \"tooltipYField\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @return [description]\r\n     */\n    get: function get() {\n      if (this._tooltipYField) {\n        return this._tooltipYField;\n      }\n\n      return this._yField;\n    },\n\n    /**\r\n     * [tooltipYField description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param value [description]\r\n     */\n    set: function set(value) {\n      this._tooltipYField = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns lowest value in the series for the specific axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axis  Axis\r\n   * @return value\r\n   */\n\n  XYSeries.prototype.min = function (axis) {\n    return this._tmin.getKey(axis.uid);\n  };\n  /**\r\n   * Returns highest value in the series for the specific axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axis  Axis\r\n   * @return value\r\n   */\n\n\n  XYSeries.prototype.max = function (axis) {\n    return this._tmax.getKey(axis.uid);\n  };\n  /**\r\n   * Returns lowest value in the series for the specific axis within current\r\n   * selection.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axis  Axis\r\n   * @return value\r\n   */\n\n\n  XYSeries.prototype.selectionMin = function (axis) {\n    var value = this._smin.getKey(axis.uid); // not good, because bad if there are no items with values in selection\n    //if (!$type.isNumber(value)) {\n    //value = this.min(axis);\n    //}\t\t\n\n\n    return value;\n  };\n  /**\r\n   * Returns highest value in the series for the specific axis within current\r\n   * selection.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axis  Axis\r\n   * @return value\r\n   */\n\n\n  XYSeries.prototype.selectionMax = function (axis) {\n    var value = this._smax.getKey(axis.uid); // not good, because bad if there are no items with values in selection\n    //if (!$type.isNumber(value)) {\n    //value = this.max(axis);\n    //}\n\n\n    return value;\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n\n  XYSeries.prototype.processConfig = function (config) {\n    if (config) {\n      // Set up base axes\n      if ($type.hasValue(config.baseAxis) && $type.isString(config.baseAxis)) {\n        if (this.map.hasKey(config.baseAxis)) {\n          config.baseAxis = this.map.getKey(config.baseAxis);\n        } else {\n          this.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.baseAxis + \"\\\" found for `baseAxis`.\");\n          delete config.baseAxis;\n        }\n      } // Set up axes\n\n\n      if ($type.hasValue(config.xAxis) && $type.isString(config.xAxis)) {\n        if (this.map.hasKey(config.xAxis)) {\n          config.xAxis = this.map.getKey(config.xAxis);\n        } else {\n          this.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.xAxis + \"\\\" found for `xAxis`.\");\n          delete config.xAxis;\n        }\n      }\n\n      if ($type.hasValue(config.yAxis) && $type.isString(config.yAxis)) {\n        if (this.map.hasKey(config.yAxis)) {\n          config.yAxis = this.map.getKey(config.yAxis);\n        } else {\n          this.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.yAxis + \"\\\" found for `yAxis`.\");\n          delete config.yAxis;\n        }\n      } // Set up axis ranges\n\n\n      if ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\n        for (var i = 0, len = config.axisRanges.length; i < len; i++) {\n          var range = config.axisRanges[i];\n\n          if (!$type.hasValue(range.type)) {\n            range.type = \"AxisDataItem\";\n          }\n\n          if ($type.hasValue(range.axis) && $type.isString(range.axis) && this.map.hasKey(range.axis)) {\n            range.component = this.map.getKey(range.axis);\n          } else if ($type.hasValue(range.component) && $type.isString(range.component) && this.map.hasKey(range.component)) {\n            range.component = this.map.getKey(range.component);\n          }\n        }\n      } // Parse date fields based on the series fields\n\n\n      if (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\n        this.processingErrors.push(\"`dataFields` is not set for series [\" + (this.name || \"unnamed\") + \"]\");\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n  /**\r\n   * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n   *\r\n   * @param    dataItem   Data item\r\n   * @param    xKey       Name of X data field\r\n   * @param    yKey       Name of Y data field\r\n   * @param    locationX  X location\r\n   * @param    locationY  Y location\r\n   * @param    stackKeyX  ?\r\n   * @param    stackKeyY  ?\r\n   * @returns             Coordinates\r\n   */\n\n\n  XYSeries.prototype.getPoint = function (dataItem, xKey, yKey, locationX, locationY, stackKeyX, stackKeyY) {\n    if (this.xAxis && this.yAxis) {\n      var x = this.xAxis.getX(dataItem, xKey, locationX);\n      var y = this.yAxis.getY(dataItem, yKey, locationY);\n      x = $math.fitToRange(x, -this._maxxX, this._maxxX); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\n\n      y = $math.fitToRange(y, -this._maxxY, this._maxxY); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\n\n      return {\n        x: x,\n        y: y\n      };\n    }\n  };\n  /**\r\n   * Updates item reader text based on the type and set up of axis.\r\n   */\n\n\n  XYSeries.prototype.updateItemReaderText = function () {\n    // We do not want to overwrite this if `itemReaderText` was changed by\n    // user code.\n    if (this._itemReaderTextChanged) {\n      return;\n    }\n\n    var text = \"\";\n    $object.each(this.dataFields, function (key, val) {\n      text += \"{\" + key + \"} \";\n    });\n    this.itemReaderText = text;\n    this._itemReaderTextChanged = false;\n  };\n\n  Object.defineProperty(XYSeries.prototype, \"cursorTooltipEnabled\", {\n    /**\r\n     * @return Display tooltip?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"cursorTooltipEnabled\");\n    },\n\n    /**\r\n     * Indicates if series should display a tooltip for chart's cursor.\r\n     *\r\n     * If set to `true` (default), the tooltips set for all series item's\r\n     * elements like columns and bullets will be automatically shown\r\n     * when [[XYCursor]] passes over category/date, even if its not hovered\r\n     * directly over the item.\r\n     *\r\n     * Set this to `false` to disable such behavior and display item-specific\r\n     * tooltips only when hovered directly over them\r\n     *\r\n     * @default true\r\n     * @param value Display tooltip?\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"cursorTooltipEnabled\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYSeries.prototype, \"cursorHoverEnabled\", {\n    /**\r\n     * @return Hover enabled?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"cursorHoverEnabled\");\n    },\n\n    /**\r\n     * Indicates if series should apply hover state on bullets/columns/etc when\r\n     * cursor is over the data item.\r\n     *\r\n     * If set to `true` (default) and chart cursor is enabled on th chart,\r\n     * hovering over date/category will trigger hover states on related Series\r\n     * items like bullets and columns.\r\n     *\r\n     * @default true\r\n     * @since 4.2.2\r\n     * @param  value  Hover enabled?\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"cursorHoverEnabled\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYSeries.prototype, \"excludeFromTotal\", {\n    /**\r\n     * @return Exclude from totals?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"excludeFromTotal\");\n    },\n\n    /**\r\n     * Indicates if series' values should be excluded when calculating totals.\r\n     *\r\n     * @default false\r\n     * @since 4.4.9\r\n     * @param  value  Exclude from totals?\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"excludeFromTotal\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYSeries.prototype, \"hideTooltipWhileZooming\", {\n    /**\r\n     * @return Hide tooltip while zooming?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"hideTooltipWhileZooming\");\n    },\n\n    /**\r\n     * Indicates if series' tooltip should be hidden while series axis range is\r\n     * animating (zooming).\r\n     *\r\n     * @default true\r\n     * @since 4.7.16\r\n     * @param  value  Hide tooltip while zooming?\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"hideTooltipWhileZooming\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYSeries.prototype, \"maskBullets\", {\n    /**\r\n     * @return Mask bullets?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"maskBullets\");\n    },\n\n    /**\r\n     * Indicates if series' bullets should be masked.\r\n     *\r\n     * @default true\r\n     * @since 4.7.17\r\n     * @param  value  Mask bullets?\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"maskBullets\", value);\n      var chart = this.chart;\n\n      if (chart) {\n        if (value) {\n          this.bulletsContainer.parent = chart.bulletsContainer;\n        } else {\n          this.bulletsContainer.parent = chart.axisBulletsContainer;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all properties from another instance of [[Series]].\r\n   *\r\n   * @param source  Source series\r\n   */\n\n  XYSeries.prototype.copyFrom = function (source) {\n    this.groupFields = $utils.copyProperties(source.groupFields, {});\n\n    _super.prototype.copyFrom.call(this, source);\n  };\n  /**\r\n   * Destroys this object and all related data.\r\n   */\n\n\n  XYSeries.prototype.dispose = function () {\n    if (this.scrollbarSeries) {\n      this.scrollbarSeries.dispose();\n    }\n\n    _super.prototype.dispose.call(this);\n  };\n\n  return XYSeries;\n}(Series);\n\nexport { XYSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"XYSeries\"] = XYSeries;\nregistry.registeredClasses[\"XYSeriesDataItem\"] = XYSeriesDataItem;","map":{"version":3,"sources":["../../../../../src/.internal/charts/series/XYSeries.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * XY series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { XYCursor } from \"../cursors/XYCursor\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { CalculatedValue } from \"../../core/Component\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { options } from \"../../core/Options\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * [_minX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _minX: number;\r\n\r\n\t/**\r\n\t * [_maxX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _maxX: number;\r\n\r\n\t/**\r\n\t * [_minY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _minY: number;\r\n\r\n\t/**\r\n\t * [_maxY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _maxY: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t * \r\n\t * @ignore\r\n\t */\r\n\tpublic _component!: XYSeries;\r\n\r\n\t/**\r\n\t * References to any aggregate data items this data item is part of.\r\n\t *\r\n\t * @ignore\r\n\t * @since 4.7.0\r\n\t */\r\n\tpublic groupDataItems: this[];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYSeriesDataItem\";\r\n\r\n\t\tthis.values.customValue = {};\r\n\r\n\t\tthis.values.valueX = { stack: 0 };\r\n\t\tthis.values.valueY = { stack: 0 };\r\n\t\tthis.values.openValueX = {};\r\n\t\tthis.values.openValueY = {};\r\n\r\n\t\tthis.values.dateX = {};\r\n\t\tthis.values.dateY = {};\r\n\t\tthis.values.openDateX = {};\r\n\t\tthis.values.openDateY = {};\r\n\r\n\t\tthis.setLocation(\"dateX\", 0.5, 0);\r\n\t\tthis.setLocation(\"dateY\", 0.5, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0.5, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0.5, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on X value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set valueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get valueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's custom numeric value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set customValue(value: number) {\r\n\t\tthis.setValue(\"customValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get customValue(): number {\r\n\t\treturn this.values.customValue.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on Y value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set valueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get valueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on X date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set dateX(date: Date) {\r\n\t\tthis.setDate(\"dateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get dateX(): Date {\r\n\t\treturn this.getDate(\"dateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on Y date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set dateY(date: Date) {\r\n\t\tthis.setDate(\"dateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get dateY(): Date {\r\n\t\treturn this.getDate(\"dateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on X category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set categoryX(category: string) {\r\n\t\tthis.setCategory(\"categoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get categoryX(): string {\r\n\t\treturn this.categories.categoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on Y category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set categoryY(category: string) {\r\n\t\tthis.setCategory(\"categoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get categoryY(): string {\r\n\t\treturn this.categories.categoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on X value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set openValueX(value: number) {\r\n\t\tthis.setValue(\"openValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get openValueX(): number {\r\n\t\treturn this.values.openValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on Y value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set openValueY(value: number) {\r\n\t\tthis.setValue(\"openValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get openValueY(): number {\r\n\t\treturn this.values.openValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on X date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set openDateX(date: Date) {\r\n\t\tthis.setDate(\"openDateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get openDateX(): Date {\r\n\t\treturn this.getDate(\"openDateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on Y date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set openDateY(date: Date) {\r\n\t\tthis.setDate(\"openDateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get openDateY(): Date {\r\n\t\treturn this.getDate(\"openDateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on X category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set openCategoryX(category: string) {\r\n\t\tthis.setCategory(\"openCategoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get openCategoryX(): string {\r\n\t\treturn this.categories.openCategoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on Y category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set openCategoryY(category: string) {\r\n\t\tthis.setCategory(\"openCategoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get openCategoryY(): string {\r\n\t\treturn this.categories.openCategoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Return smallest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param fields      Fields to check in\r\n\t * @param working     Include working (temporary) values\r\n\t * @param stackValue  If item is in a stack, the value item starts as\r\n\t * @return Value\r\n\t */\r\n\tpublic getMin(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) {  // dumped because of non smooth zooming\r\n\t\tlet min: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value < min || !$type.isNumber(min)) {\r\n\t\t\t\tmin = value;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn min;\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Return biggest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param fields      Fields to check in\r\n\t * @param working     Include working (temporary) values\r\n\t * @param stackValue  If item is in a stack, the value item starts as\r\n\t * @return Value\r\n\t */\r\n\tpublic getMax(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) { // dumped because of non smooth zooming\r\n\t\tlet max: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value > max || !$type.isNumber(max)) {\r\n\t\t\t\tmax = value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn max;\r\n\t\t//}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Defines property set for a [[XYSeries]] tooltip event that contains information about dataItem\r\n */\r\nexport type XYSeriesTooltipEvent = {\r\n\r\n\t/**\r\n\t * Shift in coordinates after dragging.\r\n\t */\r\n\tdataItem: XYSeriesDataItem;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for horizontal axis.\r\n\t */\r\n\tvalueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for vertical axis.\r\n\t */\r\n\tvalueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for horizontal axis.\r\n\t */\r\n\tcategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for vertical axis.\r\n\t */\r\n\tcategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for horizontal axis.\r\n\t */\r\n\tdateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for vertical axis.\r\n\t */\r\n\tdateY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for horizontal\r\n\t * axis.\r\n\t */\r\n\topenValueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for vertical\r\n\t * axis.\r\n\t */\r\n\topenValueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for horizontal axis.\r\n\t */\r\n\topenCategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for vertical axis.\r\n\t */\r\n\topenCategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for horizontal axis.\r\n\t */\r\n\topenDateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for vertical axis.\r\n\t */\r\n\topenDateY?: string;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis value for the\r\n\t * item.\r\n\t */\r\n\tvalueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis value for the\r\n\t * item.\r\n\t */\r\n\tvalueYShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis open value for\r\n\t * the item.\r\n\t */\r\n\topenValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis open value for\r\n\t * the item.\r\n\t */\r\n\topenValueYShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for some custom data.\r\n\t */\r\n\tcustomValue?: string;\r\n}\r\n\r\n\r\n/**\r\n * Defines types of the aggregate value.\r\n *\r\n * @since 4.7.0\r\n */\r\nexport type GroupField = \"open\" | \"close\" | \"low\" | \"high\" | \"average\" | \"sum\";\r\n\r\n/**\r\n * Defines data fields that can be calculated for aggregate values.\r\n * \r\n * @since 4.7.0\r\n */\r\nexport interface IXYSeriesGroupFields {\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `valueX` data field.\r\n\t *\r\n\t * @default \"close\"\r\n\t */\r\n\tvalueX?: GroupField;\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `valueY` data field.\r\n\t * \r\n\t * @default \"close\"\r\n\t */\r\n\tvalueY?: GroupField;\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `customValue` value data field.\r\n\t * \r\n\t * @default \"close\"\r\n\t */\r\n\tcustomValue?: GroupField;\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `openValueX` data field.\r\n\t * \r\n\t * @default \"open\"\r\n\t */\r\n\topenValueX?: GroupField;\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `openValueY` data field.\r\n\t * \r\n\t * @default \"open\"\r\n\t */\r\n\topenValueY?: GroupField;\r\n}\r\n\r\n/**\r\n * Defines properties for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tstacked?: boolean;\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tsnapTooltip?: boolean;\r\n\r\n\t/**\r\n\t * Indicates if series should display a tooltip for chart's cursor.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tcursorTooltipEnabled?: boolean;\r\n\r\n\t/**\r\n\t * Indicates if series should apply hover state on bullets/columns/etc when\r\n\t * cursor is over the data item.\r\n\t * \r\n\t * @default true\r\n\t */\r\n\tcursorHoverEnabled?: boolean;\r\n\r\n\t/**\r\n\t * Indicates if series' values should be excluded when calculating totals.\r\n\t * \r\n\t * @default false\r\n\t */\r\n\texcludeFromTotal?: boolean;\r\n\r\n\r\n\t/**\r\n\t * Indicates if series' tooltip should be hidden while series axis range is\r\n\t * animating (zooming)\r\n\t *\r\n\t * @since 4.7.16\r\n\t * @default true\r\n\t */\r\n\thideTooltipWhileZooming?: boolean;\r\n\r\n\t/**\r\n\t * Should series bullets be masked?\r\n\t * @default true\r\n\t * @since 4.7.17\r\n\t */\r\n\tmaskBullets?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesEvents extends ISeriesEvents {\r\n\t/**\r\n\t * Invoked when series tooltip was shown on some particular data item\r\n\t */\r\n\ttooltipshownat: XYSeriesTooltipEvent;\r\n}\r\n\r\n/**\r\n * Defines adapters for [[XYSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYSeriesAdapters extends ISeriesAdapters, IXYSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for [[XYChart]].\r\n *\r\n * @see {@link IXYSeriesEvents} for a list of available Events\r\n * @see {@link IXYSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines type of the group fields.\r\n\t * \r\n\t * @ignore\r\n\t * @since 4.7.0\r\n\t */\r\n\tpublic _groupFields: IXYSeriesGroupFields;\r\n\r\n\t/**\r\n\t * Indicates which of the series' `dataFields` to calculate aggregate values\r\n\t * for.\r\n\t *\r\n\t * Available data fields for all [[XYSeries]] are:\r\n\t * `valueX`, `valueY`, `openValueX`, and `openValueY`.\r\n\t *\r\n\t * [[CandlestickSeries]] adds:\r\n\t * `lowValueX`, `lowValueY`, `highValueX`, and `highValueY`.\r\n\t *\r\n\t * Available options:\r\n\t * `\"open\"`, `\"close\"`, `\"low\"`, `\"high\"`, `\"average\"`, `\"sum\"`.\r\n\t *\r\n\t * Defaults are as follows:\r\n\t * * `valueX`: `\"close\"`\r\n\t * * `valueY`: `\"close\"`\r\n\t * * `openValueX`: `\"open\"`\r\n\t * * `openValueY`: `\"open\"`\r\n\t * * `lowValueX`: `\"low\"`\r\n\t * * `lowValueY`: `\"low\"`\r\n\t * * `highValueX`: `\"high\"`\r\n\t * * `highValueY`: `\"high\"`\r\n\t *\r\n\t * Is required only if data being plotted on a `DateAxis` and\r\n\t * its `groupData` is set to `true`.\r\n\t *\r\n\t * ```TypeScript\r\n\t * let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n\t * dateAxis.groupData = true;\r\n\t *\r\n\t * let valueAxis = chart.xAxes.push(new am4charts.valueAxis());\r\n\t *\r\n\t * let series = chart.series.push(new am4charts.LineSeries());\r\n\t * series.dataFields.dateX = \"date\";\r\n\t * series.dataFields.valueY = \"value\";\r\n\t * series.groupFields.valueY = \"average\";\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * var dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n\t * dateAxis.groupData = true;\r\n\t *\r\n\t * var valueAxis = chart.xAxes.push(new am4charts.valueAxis());\r\n\t *\r\n\t * var series = chart.series.push(new am4charts.LineSeries());\r\n\t * series.dataFields.dateX = \"date\";\r\n\t * series.dataFields.valueY = \"value\";\r\n\t * series.groupFields.valueY = \"average\";\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     \"type\": \"DateAxis\",\r\n\t *     \"groupData\": true\r\n\t *   }],\r\n\t *   \"yAxes\": [{\r\n\t *     \"type\": \"ValueAxis\"\r\n\t *   }],\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"LineSeries\",\r\n\t *     \"dataFields\": {\r\n\t *       \"dateX\": \"date\",\r\n\t *       \"valueY\": \"value\"\r\n\t *     },\r\n\t *     \"groupFields\": {\r\n\t *       \"valueY\": \"average\"\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * The above setup will ensure, that if there are many data items within\r\n\t * selected range, they will be grouped into aggregated data points, using\r\n\t * average value of all the values.\r\n\t *\r\n\t * For example if we have 2 years worth of daily data (~700 data items), when\r\n\t * fully zoomed out, the chart would show ~100 data items instead: one for\r\n\t * each week in those two years.\r\n\t *\r\n\t * Grouping will occur automatically, based on current selection range, and\r\n\t * will change dynamically when user zooms in/out the chart.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/date-axis/#Dynamic_data_item_grouping} for more information about dynamic data item grouping.\r\n\t * @since 4.7.0\r\n\t */\r\n\tpublic groupFields: this[\"_groupFields\"] = {};\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IXYSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t */\r\n\tprotected _baseAxis: Axis;\r\n\r\n\t/**\r\n\t * Total data item count.\r\n\t */\r\n\tprotected _count: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * Data item count in current selection.\r\n\t */\r\n\tprotected _scount: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * [_xField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _xField: string;\r\n\r\n\t/**\r\n\t * [_yField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _yField: string;\r\n\r\n\t/**\r\n\t * [_xOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _xOpenField: string;\r\n\r\n\t/**\r\n\t * [_yOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _yOpenField: string;\r\n\r\n\t/**\r\n\t * [_tooltipXField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _tooltipXField: string;\r\n\r\n\t/**\r\n\t * [_tooltipYField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _tooltipYField: string;\r\n\r\n\t/**\r\n\t * [_xValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _xValueFields: Array<string> = [];\r\n\r\n\t/**\r\n\t * [_yValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _yValueFields: Array<string> = [];\r\n\r\n\t/**\r\n\t * Series which is stacked on top of this series, if any.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic stackedSeries: XYSeries;\r\n\r\n\t/**\r\n\t * Dataitem of previously shown tooltip, used to avoid multiple\r\n\t * tooltipshownat dispatches.\r\n\t */\r\n\tprotected _prevTooltipDataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _baseInterval: { [index: string]: ITimeInterval } = {};\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataGrouped = false;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic usesShowFields: boolean = false;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _dataSetChanged: boolean = false;\r\n\r\n\r\n\tprotected _maxxX: number = 100000;\r\n\tprotected _maxxY: number = 100000;\r\n\r\n\tprotected _propertiesChanged: boolean = false;\r\n\r\n\t/**\r\n\t * If this series was used to create a series for scrollbar, this is a reference to it.\r\n\t */\r\n\tpublic scrollbarSeries: this;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYSeries\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\r\n\t\tthis.groupFields.valueX = \"close\";\r\n\t\tthis.groupFields.valueY = \"close\";\r\n\t\tthis.groupFields.customValue = \"close\";\r\n\r\n\t\tthis.groupFields.openValueX = \"open\";\r\n\t\tthis.groupFields.openValueY = \"open\";\r\n\r\n\t\tthis.cursorTooltipEnabled = true;\r\n\r\n\t\tthis.cursorHoverEnabled = true;\r\n\t\tthis.excludeFromTotal = false;\r\n\r\n\t\tthis.mainContainer.mask = new Sprite();\r\n\t\tthis.mainContainer.mask.setElement(this.paper.add(\"path\"));\r\n\r\n\t\tthis.stacked = false;\r\n\t\tthis.snapTooltip = false;\r\n\r\n\t\tthis._showBullets = false;\r\n\r\n\t\tthis.tooltip.pointerOrientation = \"horizontal\";\r\n\r\n\t\tthis.hideTooltipWhileZooming = true;\r\n\t\tthis.setPropertyValue(\"maskBullets\", true);\r\n\r\n\t\tthis.tooltip.events.on(\"hidden\", () => {\r\n\t\t\tthis.returnBulletDefaultState();\r\n\t\t}, undefined, false)\r\n\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.observe(visualProperties, () => {\r\n\t\t\tif (this.inited) {\r\n\t\t\t\tthis._propertiesChanged = true;\r\n\t\t\t\tif (this.legendDataItem) {\r\n\t\t\t\t\tthis.legendDataItem.childrenCreated = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (this.chart && this.chart.legend) {\r\n\t\t\t\t\tthis.chart.legend.invalidateDataItems();\r\n\t\t\t\t}\r\n\t\t\t\tthis.invalidate();\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new XYSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic resetExtremes() {\r\n\t\tthis._tmin.clear();\r\n\t\tthis._tmax.clear();\r\n\r\n\t\tthis._smin.clear();\r\n\t\tthis._smax.clear();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate() {\r\n\t\tthis.dataGrouped = false;\r\n\t\tthis._baseInterval = {};\r\n\t\tthis._currentDataSetId = \"\";\r\n\r\n\t\tthis.resetExtremes();\r\n\r\n\t\tif (this.xAxis) {\r\n\t\t\tthis.xAxis.seriesDataChangeUpdate(this);\r\n\t\t}\r\n\r\n\t\tif (this.yAxis) {\r\n\t\t\tthis.yAxis.seriesDataChangeUpdate(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series' data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis._baseInterval = {};\r\n\t\tlet dataFields = this.dataFields;\r\n\t\tif (dataFields.valueYShow || dataFields.openValueXShow || dataFields.openValueXShow || dataFields.openValueYShow) {\r\n\t\t\tthis.usesShowFields = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.usesShowFields = false;\r\n\t\t}\r\n\r\n\t\tthis.defineFields();\r\n\r\n\t\tif (this.data.length > 0) {\r\n\t\t\tthis.dataChangeUpdate();\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tthis.updateItemReaderText();\r\n\t\tif (this.chart) {\r\n\t\t\tif (!$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._xField]) || !$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._yField])) {\r\n\t\t\t\tthrow Error(\"Data fields for series \\\"\" + (this.name ? this.name : this.uid) + \"\\\" are not properly defined.\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 4.7.21 solves 51540\r\n\t\tif (this.inited && this.isHidden) {\r\n\t\t\tthis.hide(0);\r\n\t\t}\r\n\r\n\t\tthis.dataGrouped = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param dataItem     Data item\r\n\t * @param dataContext  Raw data\r\n\t * @param index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\ttry {\r\n\t\t\tsuper.processDataItem(dataItem, dataContext);\r\n\r\n\t\t\tthis.xAxis.processSeriesDataItem(dataItem, \"X\");\r\n\t\t\tthis.yAxis.processSeriesDataItem(dataItem, \"Y\");\r\n\r\n\t\t\tthis.setInitialWorkingValues(dataItem);\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tif (this._chart) {\r\n\t\t\t\tthis._chart.raiseCriticalError(e);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * When validating raw data, instead of processing data item, we update it\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param item\r\n\t */\r\n\tprotected updateDataItem(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.updateDataItem(dataItem);\r\n\r\n\t\t//dataItem.events.disable();\r\n\t\tthis.xAxis.processSeriesDataItem(dataItem, \"X\");\r\n\t\tthis.yAxis.processSeriesDataItem(dataItem, \"Y\");\r\n\t\t//dataItem.events.enable();\t\t\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @param index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (xAxis) {\r\n\t\t\tlet dataItemsX = this.dataItemsByAxis.getKey(xAxis.uid);\r\n\t\t\tif (dataItemsX) {\r\n\t\t\t\tdataItemsX.clear();\r\n\t\t\t}\r\n\t\t\tif (xAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis.clearCatAxis(xAxis);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (yAxis) {\r\n\t\t\tlet dataItemsY = this.dataItemsByAxis.getKey(yAxis.uid);\r\n\t\t\tif (dataItemsY) {\r\n\t\t\t\tdataItemsY.clear();\r\n\t\t\t}\r\n\t\t\tif (yAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis.clearCatAxis(yAxis);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected clearCatAxis(axis: CategoryAxis) {\r\n\t\tlet uid = this.uid;\r\n\t\taxis.dataItems.each((dataItem) => {\r\n\t\t\tif (dataItem.seriesDataItems[uid]) {\r\n\t\t\t\tdataItem.seriesDataItems[uid] = [];\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\t\tif (xAxis && yAxis) {\r\n\t\t\tlet xAxisFieldName: string = xAxis.axisFieldName;\r\n\t\t\tlet xField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(xAxisFieldName + \"X\");\r\n\t\t\tlet xOpenField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(\"open\" + $utils.capitalize(xAxisFieldName) + \"X\");\r\n\r\n\t\t\tlet yAxisFieldName: string = yAxis.axisFieldName;\r\n\t\t\tlet yField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(yAxisFieldName + \"Y\");\r\n\t\t\tlet yOpenField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(\"open\" + $utils.capitalize(yAxisFieldName) + \"Y\");\r\n\r\n\t\t\tthis._xField = xField;\r\n\t\t\tthis._yField = yField;\r\n\r\n\t\t\tif (this.dataFields[xOpenField]) {\r\n\t\t\t\tthis._xOpenField = xOpenField;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.dataFields[yOpenField]) {\r\n\t\t\t\tthis._yOpenField = yOpenField;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.dataFields[yOpenField] && this.baseAxis == yAxis) {\r\n\t\t\t\tthis._yOpenField = yField;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.dataFields[xOpenField] && this.baseAxis == xAxis) {\r\n\t\t\t\tthis._xOpenField = xField;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.stacked && this.baseAxis == xAxis) {\r\n\t\t\t\tthis._xOpenField = xField;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.stacked && this.baseAxis == yAxis) {\r\n\t\t\t\tthis._yOpenField = yField;\r\n\t\t\t}\r\n\r\n\t\t\tif ((xAxis instanceof CategoryAxis) && (yAxis instanceof CategoryAxis)) {\r\n\t\t\t\tif (!this._yOpenField) {\r\n\t\t\t\t\tthis._yOpenField = yField;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis._xValueFields = [];\r\n\t\t\tthis._yValueFields = [];\r\n\r\n\t\t\tthis.addValueField(xAxis, <any>this._xValueFields, <any>this._xField);\r\n\t\t\tthis.addValueField(xAxis, <any>this._xValueFields, <any>this._xOpenField);\r\n\r\n\t\t\tthis.addValueField(yAxis, <any>this._yValueFields, <any>this._yField);\r\n\t\t\tthis.addValueField(yAxis, <any>this._yValueFields, <any>this._yOpenField);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [axis description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param axis    Axis\r\n\t * @param fields  Fields (?)\r\n\t * @param field   Field\r\n\t */\r\n\tprotected addValueField<Key extends keyof this[\"_dataFields\"]>(axis: Axis, fields: Array<Key>, field: Key): void {\r\n\t\tif (axis instanceof ValueAxis) {\r\n\t\t\tif ($type.hasValue(this.dataFields[field]) && fields.indexOf(field) == -1) {\r\n\t\t\t\tfields.push(field);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets category field from the category axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param field  Field\r\n\t * @param axis   Axis\r\n\t */\r\n\tprotected setCategoryAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: CategoryAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets date field from the date axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param field  Field\r\n\t * @param axis   Axis\r\n\t */\r\n\tprotected setDateAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: DateAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.date;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs after-draw tasks, e.g. creates masks.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.createMask();\r\n\t}\r\n\r\n\t/**\r\n\t * Create a mask for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createMask(): void {\r\n\t\t// this mask from which we cut out ranges. does not work well if ranges overlap.\r\n\t\tif (this.mainContainer.mask) {\r\n\t\t\tlet path: string = this.getMaskPath();\r\n\r\n\t\t\t// @todo: this approach won't work well on circluar or other non x/y axes\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\t\tif (range.axisFill.fillPath) {\r\n\t\t\t\t\trange.axisFill.validate();\r\n\t\t\t\t\tpath += range.axisFill.fillPath;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.mainContainer.mask.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tif (this.xAxis && this.yAxis) {\r\n\t\t\treturn $path.rectToPath({\r\n\t\t\t\tx: 0,\r\n\t\t\t\ty: 0,\r\n\t\t\t\twidth: this.xAxis.axisLength,\r\n\t\t\t\theight: this.yAxis.axisLength\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * Returns axis data field to use.\r\n\t *\r\n\t * @param axis  Axis\r\n\t * @return Field name\r\n\t */\r\n\tpublic getAxisField(axis: Axis): string {\r\n\t\tif (axis == this.xAxis) {\r\n\t\t\treturn this.xField;\r\n\t\t}\r\n\t\tif (axis == this.yAxis) {\r\n\t\t\treturn this.yField;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tthis._maxxX = $math.max(100000, chart.plotContainer.maxWidth * 2);\r\n\t\t\tthis._maxxY = $math.max(100000, chart.plotContainer.maxHeight * 2);\r\n\t\t}\r\n\r\n\t\t// this helps date axis to check which baseInterval we should use\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\t\tif (xAxis && yAxis) {\r\n\t\t\txAxis.updateAxisBySeries();\r\n\t\t\tyAxis.updateAxisBySeries();\r\n\t\t}\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tif (xAxis && yAxis) {\r\n\t\t\txAxis.postProcessSeriesDataItems(this);\r\n\t\t\tyAxis.postProcessSeriesDataItems(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataRange() {\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (xAxis && yAxis) {\r\n\t\t\tif (xAxis.dataRangeInvalid) {\r\n\t\t\t\txAxis.validateDataRange();\r\n\t\t\t}\r\n\r\n\t\t\tif (yAxis.dataRangeInvalid) {\r\n\t\t\t\tyAxis.validateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (xAxis && yAxis) {\r\n\t\t\tif (xAxis.invalid) {\r\n\t\t\t\txAxis.validate();\r\n\t\t\t}\r\n\r\n\t\t\tif (yAxis.invalid) {\r\n\t\t\t\tyAxis.validate();\r\n\t\t\t}\r\n\r\n\t\t\tthis.y = yAxis.pixelY;\r\n\t\t\tthis.x = xAxis.pixelX;\r\n\r\n\r\n\t\t\tthis._showBullets = true;\r\n\t\t\tlet minBulletDistance: number = this.minBulletDistance;\r\n\t\t\tif ($type.isNumber(minBulletDistance)) {\r\n\t\t\t\tif (this.baseAxis.axisLength / (this.endIndex - this.startIndex) < minBulletDistance) {\r\n\t\t\t\t\tthis._showBullets = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.updateTooltip();\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tlet maskBullets = this.maskBullets;\r\n\t\tif (chart && maskBullets) {\r\n\t\t\tif (chart.className == \"XYChart\") {\r\n\t\t\t\tif (chart.leftAxesContainer.layout == \"vertical\" || chart.rightAxesContainer.layout == \"vertical\") {\r\n\t\t\t\t\tif (this.yAxis) {\r\n\t\t\t\t\t\tthis.bulletsContainer.mask = this.yAxis.renderer.gridContainer;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.bulletsContainer.mask = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (chart.topAxesContainer.layout == \"horizontal\" || chart.bottomAxesContainer.layout == \"horizontal\") {\r\n\t\t\t\t\tif (this.xAxis) {\r\n\t\t\t\t\t\tthis.bulletsContainer.mask = this.xAxis.renderer.gridContainer;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.bulletsContainer.mask = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tthis.setXAxis(axis);\r\n\t}\r\n\r\n\tprotected setXAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._xAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._xAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._xAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\tif (this.chart) {\r\n\t\t\tif (!this._xAxis.get()) {\r\n\t\t\t\tconst axis = this.chart.xAxes.getIndex(0);\r\n\r\n\t\t\t\tif (!axis) {\r\n\t\t\t\t\tthrow Error(\"There are no X axes on chart.\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xAxis = axis;\r\n\t\t\t}\r\n\t\t\treturn this._xAxis.get();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tthis.setYAxis(axis);\r\n\t}\r\n\r\n\tprotected setYAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._yAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._yAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._yAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tif (axis.chart instanceof XYChart) {\r\n\t\t\t\taxis.chart.handleYAxisSet(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\tif (this.chart) {\r\n\t\t\tif (!this._yAxis.get()) {\r\n\t\t\t\tconst axis = this.chart.yAxes.getIndex(0);\r\n\r\n\t\t\t\tif (!axis) {\r\n\t\t\t\t\tthrow Error(\"There are no Y axes on chart.\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.yAxis = axis;\r\n\t\t\t}\r\n\r\n\t\t\treturn this._yAxis.get();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @param value  Axis\r\n\t */\r\n\tpublic set baseAxis(value: Axis) {\r\n\t\tif (this._baseAxis != value) {\r\n\t\t\tthis._baseAxis = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get baseAxis(): Axis {\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (!this._baseAxis && xAxis && yAxis) {\r\n\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (yAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (xAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this._baseAxis) {\r\n\t\t\t\tthis._baseAxis = xAxis;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._baseAxis;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds one or several (array) of data items to the existing data.\r\n\t *\r\n\t * @param rawDataItem One or many raw data item objects\r\n\t */\r\n\tpublic addData(rawDataItem: Object | Object[], removeCount?: number, skipRaw?: boolean): void {\r\n\t\tsuper.addData(rawDataItem, removeCount, skipRaw);\r\n\t\tconst scrollbarSeries = this.scrollbarSeries;\r\n\t\tif (scrollbarSeries) {\r\n\t\t\tthis.scrollbarSeries.addData(rawDataItem, removeCount, true);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected setData(value: any[]) {\r\n\t\tsuper.setData(value);\r\n\t\tif (this.scrollbarSeries) {\r\n\t\t\tthis.scrollbarSeries.setData(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Makes the chart use particular data set.\r\n\t *\r\n\t * If `id` is not provided or there is no such data set, main data will be\r\n\t * used.\r\n\t *\r\n\t * @ignore\r\n\t * @since 4.7.0\r\n\t * @param  id  Data set id\r\n\t */\r\n\tpublic setDataSet(id: string): boolean {\r\n\t\tlet changed = super.setDataSet(id);\r\n\r\n\t\tif (changed) {\r\n\r\n\t\t\tthis._dataSetChanged = true;\r\n\t\t\tlet dataItems = this.dataItems;\r\n\r\n\t\t\tthis.resetExtremes();\r\n\r\n\t\t\tlet xAxis = this.xAxis;\r\n\t\t\tlet yAxis = this.yAxis;\r\n\r\n\t\t\tthis._prevStartIndex = undefined;\r\n\t\t\tthis._prevEndIndex = undefined;\r\n\t\t\tthis._startIndex = undefined;\r\n\t\t\tthis._endIndex = undefined;\r\n\r\n\t\t\tif (!this.appeared) {\r\n\t\t\t\tthis.processValues(false); // this will slow down!\r\n\t\t\t}\r\n\r\n\t\t\tif (xAxis instanceof DateAxis && xAxis == this.baseAxis) {\r\n\t\t\t\tthis._tmin.setKey(xAxis.uid, dataItems.getIndex(0).dateX.getTime());\r\n\t\t\t\tthis._tmax.setKey(xAxis.uid, dataItems.getIndex(dataItems.length - 1).dateX.getTime());\r\n\t\t\t\tthis.dispatch(\"extremeschanged\");\r\n\t\t\t}\r\n\r\n\t\t\tif (yAxis instanceof DateAxis && yAxis == this.baseAxis) {\r\n\t\t\t\tthis._tmin.setKey(yAxis.uid, dataItems.getIndex(0).dateY.getTime());\r\n\t\t\t\tthis._tmax.setKey(yAxis.uid, dataItems.getIndex(dataItems.length - 1).dateY.getTime());\r\n\t\t\t\tthis.dispatch(\"extremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn changed;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Processes values after data items' were added.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItems  Data items\r\n\t */\r\n\tpublic processValues(working: boolean): void {\r\n\t\tsuper.processValues(working);\r\n\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (!xAxis || !yAxis) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet dataItems = this.dataItems;\r\n\r\n\t\tlet minX = Infinity;\r\n\t\tlet maxX = - Infinity;\r\n\r\n\t\tlet minY = Infinity;\r\n\t\tlet maxY = - Infinity;\r\n\r\n\t\tlet startIndex = this.startIndex;\r\n\t\tlet endIndex = this.endIndex;\r\n\r\n\t\tlet workingStartIndex = startIndex;\r\n\t\tlet workingEndIndex = endIndex;\r\n\r\n\t\tif (!working) {\r\n\t\t\tstartIndex = 0;\r\n\t\t\tendIndex = this.dataItems.length;\r\n\t\t}\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\tthis.getStackValue(dataItem, working);\r\n\r\n\t\t\tlet stackX = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\tlet stackY = dataItem.getValue(\"valueY\", \"stack\");\r\n\r\n\t\t\tminX = $math.min(dataItem.getMin(this._xValueFields, working, stackX), minX);\r\n\t\t\tminY = $math.min(dataItem.getMin(this._yValueFields, working, stackY), minY);\r\n\r\n\t\t\tmaxX = $math.max(dataItem.getMax(this._xValueFields, working, stackX), maxX);\r\n\t\t\tmaxY = $math.max(dataItem.getMax(this._yValueFields, working, stackY), maxY);\r\n\r\n\t\t\t// if it's stacked, pay attention to stack value\r\n\t\t\tif (this.stacked) {\r\n\t\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\t\tif (stackY < minY) {\r\n\t\t\t\t\t\tminY = stackY\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (stackY > maxY) {\r\n\t\t\t\t\t\tmaxY = stackY;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\t\tif (stackX < minX) {\r\n\t\t\t\t\t\tminX = stackX;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (stackX > maxX) {\r\n\t\t\t\t\t\tmaxX = stackX;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\t// this is mainly for value axis to calculate total and perecent.total of each series category\r\n\t\txAxis.processSeriesDataItems();\r\n\t\tyAxis.processSeriesDataItems();\r\n\r\n\t\tlet xAxisId: string = xAxis.uid;\r\n\t\tlet yAxisId: string = yAxis.uid;\r\n\r\n\t\tif (this.xAxis instanceof ValueAxis && (minX == Infinity || maxX == -Infinity)) {\r\n\t\t\tthis._smin.setKey(xAxisId, undefined);\r\n\t\t\tthis._smax.setKey(xAxisId, undefined);\r\n\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.yAxis instanceof ValueAxis && (minY == Infinity || maxY == -Infinity)) {\r\n\t\t\tthis._smin.setKey(yAxisId, undefined);\r\n\t\t\tthis._smax.setKey(yAxisId, undefined);\r\n\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!working) {\r\n\t\t\tif (this._tmin.getKey(xAxisId) != minX || this._tmax.getKey(xAxisId) != maxX || this._tmin.getKey(yAxisId) != minY || this._tmax.getKey(yAxisId) != maxY) {\r\n\t\t\t\tthis._tmin.setKey(xAxisId, minX);\r\n\t\t\t\tthis._tmax.setKey(xAxisId, maxX);\r\n\t\t\t\tthis._tmin.setKey(yAxisId, minY);\r\n\t\t\t\tthis._tmax.setKey(yAxisId, maxY);\r\n\r\n\t\t\t\tlet stackedSeries = this.stackedSeries;\r\n\t\t\t\tif (stackedSeries) {\r\n\t\t\t\t\tif (stackedSeries.isDisposed()) {\r\n\t\t\t\t\t\tthis.stackedSeries = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tstackedSeries.processValues(false);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (startIndex != workingStartIndex || endIndex != workingEndIndex) {\r\n\t\t\tminX = Infinity;\r\n\t\t\tmaxX = - Infinity;\r\n\r\n\t\t\tminY = Infinity;\r\n\t\t\tmaxY = - Infinity;\r\n\r\n\t\t\tfor (let i = workingStartIndex; i < workingEndIndex; i++) {\r\n\t\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\t\tthis.getStackValue(dataItem, working);\r\n\r\n\t\t\t\tlet stackX = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\t\tlet stackY = dataItem.getValue(\"valueY\", \"stack\");\r\n\r\n\t\t\t\tminX = $math.min(dataItem.getMin(this._xValueFields, working, stackX), minX);\r\n\r\n\t\t\t\tminY = $math.min(dataItem.getMin(this._yValueFields, working, stackY), minY);\r\n\r\n\t\t\t\tmaxX = $math.max(dataItem.getMax(this._xValueFields, working, stackX), maxX);\r\n\t\t\t\tmaxY = $math.max(dataItem.getMax(this._yValueFields, working, stackY), maxY);\r\n\r\n\t\t\t\t// if it's stacked, pay attention to stack value\r\n\t\t\t\tif (this.stacked) {\r\n\t\t\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\t\t\tif (stackY < minY) {\r\n\t\t\t\t\t\t\tminY = stackY\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (stackY > maxY) {\r\n\t\t\t\t\t\t\tmaxY = stackY;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\t\t\tif (stackX < minX) {\r\n\t\t\t\t\t\t\tminX = stackX;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (stackX > maxX) {\r\n\t\t\t\t\t\t\tmaxX = stackX;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.xAxis instanceof ValueAxis && (minX == Infinity || maxX == -Infinity)) {\r\n\t\t\tthis._smin.setKey(xAxisId, undefined);\r\n\t\t\tthis._smax.setKey(xAxisId, undefined);\r\n\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.yAxis instanceof ValueAxis && (minY == Infinity || maxY == -Infinity)) {\r\n\t\t\tthis._smin.setKey(yAxisId, undefined);\r\n\t\t\tthis._smax.setKey(yAxisId, undefined);\r\n\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this._smin.getKey(xAxisId) != minX || this._smax.getKey(xAxisId) != maxX || this._smin.getKey(yAxisId) != minY || this._smax.getKey(yAxisId) != maxY) {\r\n\t\t\tthis._smin.setKey(xAxisId, minX);\r\n\t\t\tthis._smax.setKey(xAxisId, maxX);\r\n\t\t\tthis._smin.setKey(yAxisId, minY);\r\n\t\t\tthis._smax.setKey(yAxisId, maxY);\r\n\r\n\r\n\t\t\tif (this.appeared || this.start != 0 || this.end != 1 || this.dataItems != this.mainDataSet) {\r\n\t\t\t\t/// new, helps to handle issues with change percent\r\n\t\t\t\tlet changed = false;\r\n\r\n\t\t\t\tif (yAxis instanceof ValueAxis && !(yAxis instanceof DateAxis)) {\r\n\t\t\t\t\tlet tmin = this._tmin.getKey(yAxisId);\r\n\r\n\t\t\t\t\tif (!$type.isNumber(tmin) || ((this.usesShowFields || this._dataSetChanged) && minY < tmin) || (this.stackedSeries && !this.isHidden)) {\r\n\t\t\t\t\t\tthis._tmin.setKey(yAxisId, minY);\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet tmax = this._tmax.getKey(yAxisId);\r\n\t\t\t\t\tif (!$type.isNumber(tmax) || ((this.usesShowFields || this._dataSetChanged) && maxY > tmax) || (this.stackedSeries && !this.isHidden)) {\r\n\t\t\t\t\t\tthis._tmax.setKey(yAxisId, maxY);\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (xAxis instanceof ValueAxis && !(xAxis instanceof DateAxis)) {\r\n\t\t\t\t\tlet tmin = this._tmin.getKey(xAxisId);\r\n\t\t\t\t\tif (!$type.isNumber(tmin) || ((this.usesShowFields || this._dataSetChanged) && minX < tmin) || (this.stackedSeries && !this.isHidden)) {\r\n\t\t\t\t\t\tthis._tmin.setKey(xAxisId, minX);\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet tmax = this._tmax.getKey(xAxisId);\r\n\t\t\t\t\tif (!$type.isNumber(tmax) || ((this.usesShowFields || this._dataSetChanged) && maxX > tmax) || (this.stackedSeries && !this.isHidden)) {\r\n\t\t\t\t\t\tthis._tmax.setKey(xAxisId, maxX);\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (changed) {\r\n\t\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.start == 0 && this.end == 1) {\r\n\t\t\t\t\t// yes, its ok. otherwise min/max won't be updated when zooming out\r\n\t\t\t\t\tthis._dataSetChanged = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!working && this.stacked) {\r\n\t\t\tthis.processValues(true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides element's [[Tooltip]].\r\n\t *\r\n\t * @see {@link Tooltip}\r\n\t */\r\n\tpublic hideTooltip() {\r\n\t\tsuper.hideTooltip();\r\n\t\tthis.returnBulletDefaultState();\r\n\t\tthis._prevTooltipDataItem = undefined;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows series tooltip at specific position.\r\n\t *\r\n\t * @param xPosition  X\r\n\t * @param yPosition  Y\r\n\t */\r\n\tpublic showTooltipAtPosition(xPosition: number, yPosition: number): IPoint {\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"];\r\n\r\n\t\tif (this.visible && !this.isHiding && !this.isShowing) {\r\n\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\r\n\t\t\tif (xAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>xAxis.getSeriesDataItem(this, xAxis.toAxisPosition(xPosition), this.snapTooltip);\r\n\t\t\t}\r\n\t\t\tif (yAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>yAxis.getSeriesDataItem(this, yAxis.toAxisPosition(yPosition), this.snapTooltip);\r\n\t\t\t}\r\n\r\n\t\t\tlet point = this.showTooltipAtDataItem(dataItem);\r\n\r\n\t\t\tif (point) {\r\n\t\t\t\treturn point;\r\n\t\t\t}\r\n\r\n\t\t\t// so that if tooltip is shown on columns or bullets for it not to be hidden\r\n\t\t\tif (!this.tooltipText) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.hideTooltip();\r\n\t}\r\n\r\n\tprotected getAdjustedXLocation(dataItem: this[\"_dataItem\"], field: string, bulletLocationX?: number) {\r\n\t\treturn dataItem.locations[field];\r\n\t}\r\n\r\n\tprotected getAdjustedYLocation(dataItem: this[\"_dataItem\"], field: string, bulletLocationY?: number) {\r\n\t\treturn dataItem.locations[field];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows series tooltip at specific dataItem.\r\n\t *\r\n\t * @param dataItem\r\n\t */\r\n\tpublic showTooltipAtDataItem(dataItem: this[\"_dataItem\"]): IPoint {\r\n\r\n\t\tlet cursor = <XYCursor>this.chart.cursor;\r\n\t\tif (cursor && cursor.hideSeriesTooltipsOnSelection && cursor.selection.visible && cursor.downPoint) {\r\n\t\t\tthis.hideTooltip();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.returnBulletDefaultState(dataItem);\r\n\t\tif (dataItem && dataItem.visible) {\r\n\r\n\t\t\tthis.updateLegendValue(dataItem);\r\n\t\t\tif (this.cursorTooltipEnabled) {\r\n\t\t\t\tthis.tooltipDataItem = dataItem;\r\n\r\n\t\t\t\t// todo: add tooltipXField and tooltipYField.\r\n\t\t\t\tlet tooltipXField = this.tooltipXField;\r\n\t\t\t\tlet tooltipYField = this.tooltipYField;\r\n\r\n\t\t\t\tif ($type.hasValue((<any>dataItem)[tooltipXField]) && $type.hasValue((<any>dataItem)[tooltipYField])) {\r\n\r\n\t\t\t\t\tlet tooltipPoint = this.getPoint(dataItem, tooltipXField, tooltipYField, this.getAdjustedXLocation(dataItem, tooltipXField), this.getAdjustedYLocation(dataItem, tooltipYField));\r\n\r\n\t\t\t\t\tif (tooltipPoint) {\r\n\r\n\t\t\t\t\t\tif (this.chart.className == \"XYChart\" && (tooltipPoint.y < -1 || tooltipPoint.y > this.yAxis.pixelHeight + 1 || tooltipPoint.x < -1 || tooltipPoint.x > this.xAxis.pixelWidth + 1)) {\r\n\t\t\t\t\t\t\t// void\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.tooltipX = tooltipPoint.x;\r\n\t\t\t\t\t\t\tthis.tooltipY = tooltipPoint.y;\r\n\r\n\t\t\t\t\t\t\tif (this._prevTooltipDataItem != dataItem) {\r\n\t\t\t\t\t\t\t\tthis.dispatchImmediately(\"tooltipshownat\", {\r\n\t\t\t\t\t\t\t\t\ttype: \"tooltipshownat\",\r\n\t\t\t\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\t\t\t\tdataItem: dataItem\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tthis._prevTooltipDataItem = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (this.cursorHoverEnabled) {\r\n\t\t\t\t\t\t\t\tfor (let sprite of dataItem.sprites) {\r\n\t\t\t\t\t\t\t\t\tif (!sprite.parent.visible || sprite.isHidden || sprite.__disabled || sprite.disabled || sprite.isHiding) {\r\n\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tif (!sprite.interactions.isRealHover) {\r\n\t\t\t\t\t\t\t\t\t\t\tsprite.dispatchImmediately(\"over\");\r\n\t\t\t\t\t\t\t\t\t\t\tsprite.interactions.isRealHover = true;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tsprite.isHover = true;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (this.showTooltip()) {\r\n\t\t\t\t\t\t\t\treturn $utils.spritePointToSvg({ x: tooltipPoint.x, y: tooltipPoint.y }, this);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.updateLegendValue(dataItem, true);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Returns default state to bullets when tooltip is shown at some other data\r\n\t * item or hidden\r\n\t */\r\n\tprotected returnBulletDefaultState(dataItem?: XYSeriesDataItem) {\r\n\t\tif (this._prevTooltipDataItem && this._prevTooltipDataItem != dataItem) {\r\n\t\t\tfor (let sprite of this._prevTooltipDataItem.sprites) {\r\n\t\t\t\tif (!sprite.isDisposed()) {\r\n\t\t\t\t\tconst fireEvent = sprite.interactions.isRealHover;\r\n\t\t\t\t\tsprite.isHover = false;\r\n\t\t\t\t\tif (fireEvent) {\r\n\t\t\t\t\t\tsprite.dispatchImmediately(\"out\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._prevTooltipDataItem = undefined;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected shouldCreateBullet(dataItem: this[\"_dataItem\"], bulletTemplate: Bullet): boolean {\r\n\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\tlet xField: string = bulletTemplate.xField;\r\n\t\tif (!$type.hasValue(xField)) {\r\n\t\t\txField = this.xField;\r\n\t\t}\r\n\r\n\t\tlet yField: string = bulletTemplate.yField;\r\n\t\tif (!$type.hasValue(yField)) {\r\n\t\t\tyField = this.yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (bulletTemplate.disabled) {\r\n\t\t\tlet disabledField = bulletTemplate.propertyFields.disabled;\r\n\t\t\tlet dataContext = <any>dataItem.dataContext;\r\n\t\t\tif (dataContext && dataContext[disabledField] === false) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateTooltip() {\r\n\t\tif (!this.hideTooltipWhileZooming && this.tooltip && !this.tooltip.isHidden && !this.isHiding && !this.isHidden && this.tooltipDataItem) {\r\n\t\t\tthis.showTooltipAtDataItem(<this[\"_dataItem\"]>this.tooltipDataItem);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet) {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: XYSeriesDataItem = <XYSeriesDataItem>bullet.dataItem;\r\n\r\n\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\tlet xField: string = bullet.xField;\r\n\t\tif (!$type.hasValue(xField)) {\r\n\t\t\txField = this.xField;\r\n\t\t}\r\n\r\n\t\tlet yField: string = bullet.yField;\r\n\t\tif (!$type.hasValue(yField)) {\r\n\t\t\tyField = this.yField;\r\n\t\t}\r\n\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif ((xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet bulletLocationX: number = this.getBulletLocationX(bullet, xField);\r\n\t\t\tlet bulletLocationY: number = this.getBulletLocationY(bullet, yField);\r\n\r\n\t\t\tlet point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);\r\n\t\t\tif (point) {\r\n\t\t\t\tlet xOpenField = this.xOpenField;\r\n\t\t\t\tlet yOpenField = this.yOpenField;\r\n\r\n\t\t\t\tlet positionX: number;\r\n\t\t\t\tlet positionY: number;\r\n\r\n\r\n\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\r\n\t\t\t\t\tif (!$type.isNumber(bulletLocationX)) {\r\n\t\t\t\t\t\tbulletLocationX = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet openValue: number;\r\n\t\t\t\t\tlet closeValue: number = dataItem.getWorkingValue(xField);\r\n\r\n\t\t\t\t\tif (!xOpenField) {\r\n\t\t\t\t\t\tif (xAxis == this.baseAxis) {\r\n\t\t\t\t\t\t\topenValue = xAxis.baseValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\topenValue = dataItem.getWorkingValue(xOpenField);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!$type.isNumber(openValue)) {\r\n\t\t\t\t\t\topenValue = closeValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\t\t\topenValue += stack;\r\n\t\t\t\t\tcloseValue += stack;\r\n\r\n\t\t\t\t\tif (openValue == closeValue) {\r\n\t\t\t\t\t\tlet baseInterval = xAxis.baseInterval;\r\n\t\t\t\t\t\tlet dateFormatter = xAxis.dateFormatter;\r\n\t\t\t\t\t\topenValue = $time.round(new Date(openValue), baseInterval.timeUnit, baseInterval.count, dateFormatter.firstDayOfWeek, dateFormatter.utc).getTime();\r\n\t\t\t\t\t\tcloseValue = $time.add(new Date(openValue), baseInterval.timeUnit, baseInterval.count, dateFormatter.utc).getTime();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet middleValue: number;\r\n\t\t\t\t\tif (xAxis == this.baseAxis) {\r\n\t\t\t\t\t\tmiddleValue = openValue + (closeValue - openValue) * bulletLocationX;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tmiddleValue = openValue + (closeValue - openValue) * (1 - bulletLocationX);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpositionX = xAxis.valueToPosition(middleValue);\r\n\t\t\t\t}\r\n\t\t\t\telse if (xAxis instanceof ValueAxis) {\r\n\r\n\t\t\t\t\tif (!$type.isNumber(bulletLocationX)) {\r\n\t\t\t\t\t\tbulletLocationX = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet openValue: number;\r\n\t\t\t\t\tlet closeValue: number = dataItem.getWorkingValue(xField);\r\n\r\n\t\t\t\t\tif (!xOpenField) {\r\n\t\t\t\t\t\topenValue = xAxis.baseValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\topenValue = dataItem.getWorkingValue(xOpenField);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\t\t\topenValue += stack;\r\n\t\t\t\t\tcloseValue += stack;\r\n\r\n\t\t\t\t\tlet middleValue = openValue + (closeValue - openValue) * (1 - bulletLocationX);\r\n\r\n\t\t\t\t\tpositionX = xAxis.valueToPosition(middleValue);\r\n\t\t\t\t}\r\n\t\t\t\telse if (xAxis instanceof CategoryAxis) {\r\n\r\n\t\t\t\t\tlet rightLocation = this.getAdjustedXLocation(dataItem, xField, bullet.locationX);\r\n\t\t\t\t\tlet leftLocation = this.getAdjustedXLocation(dataItem, xOpenField, bullet.locationX);\r\n\r\n\t\t\t\t\tpositionX = xAxis.categoryToPosition((<any>dataItem)[xField], rightLocation);\r\n\t\t\t\t\tlet openPositionX: number;\r\n\r\n\r\n\t\t\t\t\tif (xOpenField) {\r\n\t\t\t\t\t\topenPositionX = xAxis.categoryToPosition((<any>dataItem)[xOpenField], leftLocation);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!$type.isNumber(openPositionX)) {\r\n\t\t\t\t\t\topenPositionX = 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpositionX = openPositionX + (positionX - openPositionX) * bulletLocationX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\tif (!$type.isNumber(bulletLocationY)) {\r\n\t\t\t\t\t\tbulletLocationY = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet openValue: number;\r\n\t\t\t\t\tlet closeValue: number = dataItem.getWorkingValue(yField);\r\n\r\n\t\t\t\t\tif (!yOpenField) {\r\n\t\t\t\t\t\tif (yAxis == this.baseAxis) {\r\n\t\t\t\t\t\t\topenValue = yAxis.baseValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\topenValue = dataItem.getWorkingValue(yOpenField);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!$type.isNumber(openValue)) {\r\n\t\t\t\t\t\topenValue = closeValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet stack: number = dataItem.getValue(\"valueY\", \"stack\");\r\n\t\t\t\t\topenValue += stack;\r\n\t\t\t\t\tcloseValue += stack;\r\n\r\n\t\t\t\t\tif (openValue == closeValue) {\r\n\t\t\t\t\t\tlet baseInterval = yAxis.baseInterval;\r\n\t\t\t\t\t\tlet dateFormatter = yAxis.dateFormatter;\r\n\t\t\t\t\t\topenValue = $time.round(new Date(openValue), baseInterval.timeUnit, baseInterval.count, dateFormatter.firstDayOfWeek, dateFormatter.utc).getTime();\r\n\t\t\t\t\t\tcloseValue = $time.add(new Date(openValue), baseInterval.timeUnit, baseInterval.count, dateFormatter.utc).getTime();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet middleValue: number;\r\n\r\n\t\t\t\t\tif (yAxis == this.baseAxis) {\r\n\t\t\t\t\t\tmiddleValue = openValue + (closeValue - openValue) * bulletLocationY;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tmiddleValue = openValue + (closeValue - openValue) * (1 - bulletLocationY);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpositionY = yAxis.valueToPosition(middleValue);\r\n\t\t\t\t}\r\n\t\t\t\telse if (yAxis instanceof ValueAxis) {\r\n\r\n\t\t\t\t\tif (!$type.isNumber(bulletLocationY)) {\r\n\t\t\t\t\t\tbulletLocationY = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet openValue: number;\r\n\t\t\t\t\tlet closeValue: number = dataItem.getWorkingValue(yField);\r\n\r\n\t\t\t\t\tif (!yOpenField) {\r\n\t\t\t\t\t\topenValue = yAxis.baseValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\topenValue = dataItem.getWorkingValue(yOpenField);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet stack: number = dataItem.getValue(\"valueY\", \"stack\");\r\n\t\t\t\t\topenValue += stack;\r\n\t\t\t\t\tcloseValue += stack;\r\n\r\n\t\t\t\t\tlet middleValue = openValue + (closeValue - openValue) * (1 - bulletLocationY);\r\n\r\n\t\t\t\t\tpositionY = yAxis.valueToPosition(middleValue);\r\n\t\t\t\t}\r\n\t\t\t\telse if (yAxis instanceof CategoryAxis) {\r\n\t\t\t\t\tpositionY = yAxis.categoryToPosition((<any>dataItem)[yField], bulletLocationY);\r\n\r\n\t\t\t\t\tlet topLocation = this.getAdjustedYLocation(dataItem, yField, bullet.locationY);\r\n\t\t\t\t\tlet bottomLocation = this.getAdjustedYLocation(dataItem, yOpenField, bullet.locationY);\r\n\r\n\t\t\t\t\tpositionY = yAxis.categoryToPosition((<any>dataItem)[yField], topLocation);\r\n\t\t\t\t\tlet openPositionY: number;\r\n\r\n\t\t\t\t\tif (yOpenField) {\r\n\t\t\t\t\t\topenPositionY = yAxis.categoryToPosition((<any>dataItem)[yOpenField], bottomLocation);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!$type.isNumber(openPositionY)) {\r\n\t\t\t\t\t\topenPositionY = 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpositionY = openPositionY + (positionY - openPositionY) * bulletLocationY;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbullet.visible = true;\r\n\t\t\t\tthis.positionBulletReal(bullet, positionX, positionY);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected positionBulletReal(bullet: Sprite, positionX: number, positionY: number) {\r\n\t\tbullet.x = this.xAxis.renderer.positionToPoint(positionX, positionY).x;\r\n\t\tbullet.y = this.yAxis.renderer.positionToPoint(positionY, positionX).y;\r\n\t}\r\n\r\n\t/**\r\n\t * returns bullet x location\r\n\t * @ignore\r\n\t */\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationX;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns bullet x location\r\n\t * @ignore\r\n\t */\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationY;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * This method must be called if you update Series' data fields that might\r\n\t * affect stacking of the series.\r\n\t *\r\n\t * Since individual `dataField` changes are not being monitored, you need\r\n\t * todo it manually for changes to take affect.\r\n\t *\r\n\t * @since 4.7.21\r\n\t */\r\n\tpublic updateStacking(): void {\r\n\t\tthis.invalidateDataItems();\r\n\t\tif (this.chart) {\r\n\t\t\tthis.chart.series.each((series) => {\r\n\t\t\t\tif (series.baseAxis == this.baseAxis) {\r\n\t\t\t\t\tseries.stackedSeries = undefined;\r\n\t\t\t\t\tseries.invalidateDataItems();\r\n\t\t\t\t\tseries.invalidateProcessedData();\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t * \r\n\t * Note: proper stacking is only possible if series have the same number\r\n\t * of data items. To ensure this, don't set data directly on series\r\n\t * but do this on chart instead.\r\n\t *\r\n\t * @default false\r\n\t * @param stacked  Can be stacked?\r\n\t */\r\n\tpublic set stacked(stacked: boolean) {\r\n\t\tif (this.setPropertyValue(\"stacked\", stacked, true)) {\r\n\t\t\tthis.updateStacking();\r\n\r\n\t\t\tlet xAxis = this.xAxis;\r\n\t\t\tlet yAxis = this.yAxis;\r\n\r\n\t\t\tif (!stacked) {\r\n\t\t\t\tlet field: string;\r\n\r\n\t\t\t\tif (xAxis != this.baseAxis && xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tfield = this.xField;\r\n\t\t\t\t}\r\n\t\t\t\tif (yAxis != this.baseAxis && yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tfield = this.yField;\r\n\t\t\t\t}\r\n\t\t\t\tif (field) {\r\n\t\t\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(field, 0, \"stack\");\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Can be stacked?\r\n\t */\r\n\tpublic get stacked(): boolean {\r\n\t\treturn this.getPropertyValue(\"stacked\");\r\n\t}\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position? In order this to work, you should set snapTooltip = false on the series baseAxis.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Should snap?\r\n\t */\r\n\tpublic set snapTooltip(value: boolean) {\r\n\t\tthis.setPropertyValue(\"snapTooltip\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Should snap?\r\n\t */\r\n\tpublic get snapTooltip(): boolean {\r\n\t\treturn this.getPropertyValue(\"snapTooltip\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows hidden series.\r\n\t *\r\n\t * @param duration  Duration of reveal animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\tlet fields: string[];\r\n\t\tif (this.xAxis instanceof ValueAxis && this.xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t}\r\n\r\n\t\tif (this.yAxis instanceof ValueAxis && this.yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet delay: number = 0;\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\t\tif (!options.animationsEnabled) {\r\n\t\t\tinterpolationDuration = 0;\r\n\t\t}\r\n\r\n\t\tlet anim: Animation;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet realDuration = interpolationDuration;\r\n\t\t\tif (i < this.startIndex - 10 || i > this.endIndex + 10) {\r\n\t\t\t\trealDuration = 0;\r\n\t\t\t\tdelay = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.sequencedInterpolation && realDuration > 0) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tanim = dataItem.show(realDuration, delay, fields);\r\n\t\t});\r\n\r\n\t\t// other data sets\r\n\t\tthis.dataSets.each((key, dataSet) => {\r\n\t\t\tif (dataSet != this.dataItems) {\r\n\t\t\t\tdataSet.each((dataItem) => {\r\n\t\t\t\t\tdataItem.events.disable();\r\n\t\t\t\t\tdataItem.show(0, 0, fields);\r\n\t\t\t\t\tdataItem.events.enable();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (this.mainDataSet != this.dataItems) {\r\n\t\t\tthis.mainDataSet.each((dataItem) => {\r\n\t\t\t\tdataItem.events.disable();\r\n\t\t\t\tdataItem.show(0, 0, fields);\r\n\t\t\t\tdataItem.events.enable();\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\tif (anim && !anim.isFinished()) {\r\n\t\t\tanimation = anim;\r\n\t\t}\r\n\r\n\t\tif (this.hidden) {\r\n\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\tthis.hidden = false;\r\n\t\t}\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param duration  Duration of hiding animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet fields: string[];\r\n\t\tlet value: number;\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\r\n\t\tif (xAxis instanceof ValueAxis && xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (xAxis.minZoomed < xAxis.baseValue && xAxis.maxZoomed > xAxis.baseValue) || this.stackedSeries) {\r\n\t\t\t\tvalue = xAxis.baseValue;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = xAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\t\tif (yAxis instanceof ValueAxis && yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (yAxis.minZoomed < yAxis.baseValue && yAxis.maxZoomed > yAxis.baseValue) || this.stackedSeries) {\r\n\t\t\t\tvalue = yAxis.baseValue;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = yAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//if ($type.hasValue(fields)) {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet interpolationDuration = this.hiddenState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tif (!options.animationsEnabled) {\r\n\t\t\tinterpolationDuration = 0;\r\n\t\t}\r\n\r\n\t\tlet delay: number = 0;\r\n\t\tlet anim: Animation;\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet realDuration = interpolationDuration;\r\n\r\n\t\t\tif (i < this.startIndex - 10 || i > this.endIndex + 10) {\r\n\t\t\t\trealDuration = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (realDuration == 0) {\r\n\t\t\t\tdataItem.hide(0, 0, value, fields);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.sequencedInterpolation && realDuration > 0) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t\t}\r\n\t\t\t\tanim = dataItem.hide(realDuration, delay, value, fields);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet animation = super.hide(interpolationDuration);\r\n\t\tif (animation && !animation.isFinished()) {\r\n\t\t\tanimation.delay(delay);\r\n\t\t}\r\n\r\n\t\tif (anim && !anim.isFinished()) {\r\n\t\t\tanimation = anim;\r\n\t\t}\r\n\r\n\t\t// helps to avoid flicker. otherwise columns will show up at full size and only on next frame will animate from 0\r\n\t\tthis.validateDataElements();\r\n\t\t//}\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tsuper.handleDataItemWorkingValueChange(dataItem, name);\r\n\r\n\t\t// to calculate stack values\r\n\t\tlet axisSeries: List<XYSeries> = <List<XYSeries>>this.baseAxis.series;\r\n\r\n\t\t$iter.each(axisSeries.iterator(), (series) => {\r\n\t\t\tif (series.stacked || series.stackedSeries) {\r\n\t\t\t\tseries.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getStackValue description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic getStackValue(dataItem: this[\"_dataItem\"], working?: boolean): void {\r\n\t\t// todo: here wer stack x and y values only. question is - what should we do with other values, like openX, openY?\r\n\t\t// if this series is not stacked or new stack begins, return.\r\n\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (!this.stacked || !xAxis || !yAxis) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// it might seem that it's better to go through base axis series, but we do not maintain the same order as in chart.series there.\r\n\t\t\tlet chart: XYChart = this.chart;\r\n\t\t\tlet index: number = chart.series.indexOf(this);\r\n\r\n\t\t\tlet field: string;\r\n\r\n\t\t\tif (xAxis != this.baseAxis && xAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.xField;\r\n\t\t\t}\r\n\t\t\tif (yAxis != this.baseAxis && yAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.yField;\r\n\t\t\t}\r\n\r\n\t\t\tif (!field) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t//this is good for removing series, otherwise stack values will remain the same and chart won't pay atention when adding/removing series\t\t\t\r\n\t\t\tdataItem.setCalculatedValue(field, 0, \"stack\");\r\n\r\n\t\t\t$iter.eachContinue(chart.series.range(0, index).backwards().iterator(), (prevSeries) => {\r\n\t\t\t\t// stacking is only possible if both axes are the same\r\n\t\t\t\tif (prevSeries.xAxis == xAxis && prevSeries.yAxis == yAxis) {\r\n\t\t\t\t\t// saving value\r\n\t\t\t\t\tprevSeries.stackedSeries = this;\r\n\r\n\t\t\t\t\tlet prevDataItem = prevSeries.dataItems.getIndex(dataItem.index); // indexes should match\r\n\r\n\t\t\t\t\tif (prevDataItem && prevDataItem.hasValue(this._xValueFields) && prevDataItem.hasValue(this._yValueFields)) {\r\n\r\n\t\t\t\t\t\tlet value = dataItem.getValue(field);\r\n\t\t\t\t\t\tlet prevValue: number;\r\n\t\t\t\t\t\tlet prevRealValue = prevDataItem.getValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\r\n\t\t\t\t\t\tif (working) {\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getWorkingValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ((value >= 0 && prevRealValue >= 0) || (value < 0 && prevRealValue < 0)) {\r\n\t\t\t\t\t\t\t//dataItem.events.disable();\r\n\t\t\t\t\t\t\tdataItem.setCalculatedValue(field, prevValue, \"stack\");\r\n\t\t\t\t\t\t\t//dataItem.events.enable();\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (!prevSeries.stacked) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [xField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get xField(): string {\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get yField(): string {\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * [xOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get xOpenField(): string {\r\n\t\treturn this._xOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get yOpenField(): string {\r\n\t\treturn this._yOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipXField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set tooltipXField(value: string) {\r\n\t\tthis._tooltipXField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get tooltipXField(): string {\r\n\t\tif (this._tooltipXField) {\r\n\t\t\treturn this._tooltipXField;\r\n\t\t}\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipYField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set tooltipYField(value: string) {\r\n\t\tthis._tooltipYField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get tooltipYField(): string {\r\n\t\tif (this._tooltipYField) {\r\n\t\t\treturn this._tooltipYField;\r\n\t\t}\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic min(axis: ValueAxis): number {\r\n\t\treturn this._tmin.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic max(axis: ValueAxis): number {\r\n\t\treturn this._tmax.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic selectionMin(axis: ValueAxis): number {\r\n\t\tlet value = this._smin.getKey(axis.uid);\r\n\t\t// not good, because bad if there are no items with values in selection\r\n\t\t//if (!$type.isNumber(value)) {\r\n\t\t//value = this.min(axis);\r\n\t\t//}\t\t\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic selectionMax(axis: ValueAxis): number {\r\n\t\tlet value = this._smax.getKey(axis.uid);\r\n\t\t// not good, because bad if there are no items with values in selection\r\n\t\t//if (!$type.isNumber(value)) {\r\n\t\t//value = this.max(axis);\r\n\t\t//}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up base axes\r\n\t\t\tif ($type.hasValue(config.baseAxis) && $type.isString(config.baseAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.baseAxis)) {\r\n\t\t\t\t\tconfig.baseAxis = this.map.getKey(config.baseAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.baseAxis + \"\\\" found for `baseAxis`.\");\r\n\t\t\t\t\tdelete config.baseAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.xAxis)) {\r\n\t\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.xAxis + \"\\\" found for `xAxis`.\");\r\n\t\t\t\t\tdelete config.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.yAxis)) {\r\n\t\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.yAxis + \"\\\" found for `yAxis`.\");\r\n\t\t\t\t\tdelete config.yAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axis ranges\r\n\t\t\tif ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\r\n\t\t\t\tfor (let i = 0, len = config.axisRanges.length; i < len; i++) {\r\n\t\t\t\t\tlet range = config.axisRanges[i];\r\n\t\t\t\t\tif (!$type.hasValue(range.type)) {\r\n\t\t\t\t\t\trange.type = \"AxisDataItem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.hasValue(range.axis) && $type.isString(range.axis) && this.map.hasKey(range.axis)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.axis);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(range.component) && $type.isString(range.component) && this.map.hasKey(range.component)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.component);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Parse date fields based on the series fields\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tthis.processingErrors.push(\"`dataFields` is not set for series [\" + (this.name || \"unnamed\") + \"]\");\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n\t *\r\n\t * @param    dataItem   Data item\r\n\t * @param    xKey       Name of X data field\r\n\t * @param    yKey       Name of Y data field\r\n\t * @param    locationX  X location\r\n\t * @param    locationY  Y location\r\n\t * @param    stackKeyX  ?\r\n\t * @param    stackKeyY  ?\r\n\t * @returns             Coordinates\r\n\t */\r\n\tpublic getPoint(dataItem: XYSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string): IPoint {\r\n\t\tif (this.xAxis && this.yAxis) {\r\n\t\t\tlet x: number = this.xAxis.getX(dataItem, xKey, locationX);\r\n\t\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY);\r\n\r\n\t\t\tx = $math.fitToRange(x, -this._maxxX, this._maxxX); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\t\ty = $math.fitToRange(y, -this._maxxY, this._maxxY); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\t\treturn { x: x, y: y };\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates item reader text based on the type and set up of axis.\r\n\t */\r\n\tprotected updateItemReaderText(): void {\r\n\r\n\t\t// We do not want to overwrite this if `itemReaderText` was changed by\r\n\t\t// user code.\r\n\t\tif (this._itemReaderTextChanged) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet text = \"\"\r\n\t\t$object.each(this.dataFields, (key, val) => {\r\n\t\t\ttext += \"{\" + key + \"} \";\r\n\t\t});\r\n\t\tthis.itemReaderText = text;\r\n\t\tthis._itemReaderTextChanged = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if series should display a tooltip for chart's cursor.\r\n\t *\r\n\t * If set to `true` (default), the tooltips set for all series item's\r\n\t * elements like columns and bullets will be automatically shown\r\n\t * when [[XYCursor]] passes over category/date, even if its not hovered\r\n\t * directly over the item.\r\n\t *\r\n\t * Set this to `false` to disable such behavior and display item-specific\r\n\t * tooltips only when hovered directly over them\r\n\t *\r\n\t * @default true\r\n\t * @param value Display tooltip?\r\n\t */\r\n\tpublic set cursorTooltipEnabled(value: boolean) {\r\n\t\tthis.setPropertyValue(\"cursorTooltipEnabled\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Display tooltip?\r\n\t */\r\n\tpublic get cursorTooltipEnabled(): boolean {\r\n\t\treturn this.getPropertyValue(\"cursorTooltipEnabled\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if series should apply hover state on bullets/columns/etc when\r\n\t * cursor is over the data item.\r\n\t *\r\n\t * If set to `true` (default) and chart cursor is enabled on th chart,\r\n\t * hovering over date/category will trigger hover states on related Series\r\n\t * items like bullets and columns.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.2.2\r\n\t * @param  value  Hover enabled?\r\n\t */\r\n\tpublic set cursorHoverEnabled(value: boolean) {\r\n\t\tthis.setPropertyValue(\"cursorHoverEnabled\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hover enabled?\r\n\t */\r\n\tpublic get cursorHoverEnabled(): boolean {\r\n\t\treturn this.getPropertyValue(\"cursorHoverEnabled\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if series' values should be excluded when calculating totals.\r\n\t * \r\n\t * @default false\r\n\t * @since 4.4.9\r\n\t * @param  value  Exclude from totals?\r\n\t */\r\n\tpublic set excludeFromTotal(value: boolean) {\r\n\t\tthis.setPropertyValue(\"excludeFromTotal\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Exclude from totals?\r\n\t */\r\n\tpublic get excludeFromTotal(): boolean {\r\n\t\treturn this.getPropertyValue(\"excludeFromTotal\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if series' tooltip should be hidden while series axis range is\r\n\t * animating (zooming).\r\n\t * \r\n\t * @default true\r\n\t * @since 4.7.16\r\n\t * @param  value  Hide tooltip while zooming?\r\n\t */\r\n\tpublic set hideTooltipWhileZooming(value: boolean) {\r\n\t\tthis.setPropertyValue(\"hideTooltipWhileZooming\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hide tooltip while zooming?\r\n\t */\r\n\tpublic get hideTooltipWhileZooming(): boolean {\r\n\t\treturn this.getPropertyValue(\"hideTooltipWhileZooming\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Indicates if series' bullets should be masked.\r\n\t * \r\n\t * @default true\r\n\t * @since 4.7.17\r\n\t * @param  value  Mask bullets?\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value)\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.bulletsContainer.parent = chart.bulletsContainer;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.bulletsContainer.parent = chart.axisBulletsContainer;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mask bullets?\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.groupFields = $utils.copyProperties(source.groupFields, {});\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose() {\r\n\t\tif (this.scrollbarSeries) {\r\n\t\t\tthis.scrollbarSeries.dispose();\r\n\t\t}\r\n\t\tsuper.dispose();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYSeries\"] = XYSeries;\r\nregistry.registeredClasses[\"XYSeriesDataItem\"] = XYSeriesDataItem;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}