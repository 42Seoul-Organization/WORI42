{"ast":null,"code":"/**\r\n * Module, defining Axis Renderer for vertical axes.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { AxisRenderer } from \"./AxisRenderer\";\nimport { AxisBullet } from \"./AxisBullet\";\nimport { WavedLine } from \"../../core/elements/WavedLine\";\nimport { WavedRectangle } from \"../../core/elements/WavedRectangle\";\nimport { registry } from \"../../core/Registry\";\nimport { percent, Percent } from \"../../core/utils/Percent\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A renderer for horizontal axis.\r\n *\r\n * @see {@link IAxisRendererEvents} for a list of available events\r\n * @see {@link IAxisRendererAdapters} for a list of available Adapters\r\n */\n\nvar AxisRendererX =\n/** @class */\nfunction (_super) {\n  __extends(AxisRendererX, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param axis Related axis\r\n   */\n\n\n  function AxisRendererX() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"AxisRendererX\";\n    _this.minGridDistance = 120;\n    _this.opposite = false;\n    _this.rotation = 0;\n    _this.width = percent(100);\n    _this.labels.template.horizontalCenter = \"middle\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n  * @ignore\r\n  */\n\n\n  AxisRendererX.prototype.setAxis = function (axis) {\n    _super.prototype.setAxis.call(this, axis);\n\n    axis.layout = \"vertical\";\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  AxisRendererX.prototype.updateGridContainer = function () {\n    var axis = this.axis;\n\n    if (axis) {\n      var gridContainer = this.gridContainer;\n      gridContainer.x = axis.pixelX;\n      gridContainer.width = axis.axisLength;\n    }\n  };\n  /**\r\n   * Called when rendered is attached to an Axis, as well as a property of\r\n   * Axis that might affect the appearance is updated.\r\n   *\r\n   * E.g. `axis.opposite`, `axis.inside`, etc.\r\n   *\r\n   * This method is called **before** draw, so that any related setting\r\n   * changed in this method can be changed.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererX.prototype.processRenderer = function () {\n    _super.prototype.processRenderer.call(this); // can not do this in init, as axis is set later\n\n\n    var axis = this.axis;\n\n    if (axis) {\n      if (!(axis.width instanceof Percent)) {\n        axis.width = percent(100);\n      } // @todo Is thi sneeded?\n\n\n      $utils.used(this.line);\n      var title = axis.title;\n      title.rotation = 0;\n      title.align = \"center\";\n\n      if (this.opposite) {\n        this.line.toFront();\n        title.toBack();\n      } else {\n        title.toFront();\n        this.toBack();\n        this.line.toBack();\n      }\n    }\n  };\n  /**\r\n   * Updates some of the Axis tooltip's visual properties, related to\r\n   * rendering of the Axis.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererX.prototype.updateTooltip = function () {\n    var axis = this.axis;\n\n    if (axis) {\n      var bigNum = 1000;\n      var bbx = this.line.pixelX;\n      var bby = this.line.pixelY;\n      var bbw = this.axisLength;\n      var bbh = bigNum; // top\n\n      if (this.opposite) {\n        if (!this.inside) {\n          bby = -bigNum;\n          bbh = bigNum;\n        }\n      } // bottom\n      else {\n          if (this.inside) {\n            bby = -bigNum;\n            bbh = bigNum;\n          }\n        }\n\n      this.axis.updateTooltip(\"vertical\", {\n        x: bbx,\n        y: bby,\n        width: bbw,\n        height: bbh\n      });\n    }\n  };\n  /**\r\n   * Updates and positions a label element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param label        Label element\r\n   * @param position     Starting position\r\n   * @param endPosition  Ending position\r\n   */\n\n\n  AxisRendererX.prototype.updateLabelElement = function (label, position, endPosition, location) {\n    if (!$type.hasValue(location)) {\n      location = label.location;\n    }\n\n    position = position + (endPosition - position) * location;\n    var point = this.positionToPoint(position);\n    label.isMeasured = !label.inside;\n    var deltaY = 0;\n    var verticalCenter;\n    var maxHeight = this.gridContainer.maxHeight;\n\n    if (this.opposite) {\n      if (label.inside) {\n        verticalCenter = \"top\";\n\n        if (label.valign == \"bottom\") {\n          deltaY = maxHeight;\n          verticalCenter = \"bottom\";\n        }\n\n        if (label.valign == \"middle\") {\n          deltaY = maxHeight / 2;\n          verticalCenter = \"middle\";\n        }\n      } else {\n        verticalCenter = \"bottom\";\n      }\n\n      point.y = deltaY;\n    } else {\n      if (label.inside) {\n        verticalCenter = \"bottom\";\n\n        if (label.valign == \"top\") {\n          deltaY = -maxHeight;\n          verticalCenter = \"top\";\n        }\n\n        if (label.valign == \"middle\") {\n          deltaY = -maxHeight / 2;\n          verticalCenter = \"middle\";\n        }\n      } else {\n        verticalCenter = \"top\";\n      }\n\n      point.y += deltaY;\n    }\n\n    if (label.rotation == 0) {\n      // Apply fuzzy logic to verticalCenter only if labels are not rotated\n      label.verticalCenter = verticalCenter;\n    }\n\n    this.positionItem(label, point);\n    this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\n  };\n\n  Object.defineProperty(AxisRendererX.prototype, \"axisLength\", {\n    /**\r\n     * Returns actual length of the Axis, in pixels.\r\n     *\r\n     * @return Length (px)\r\n     */\n    get: function get() {\n      var axis = this.axis;\n      return axis.measuredWidth - axis.pixelPaddingRight - axis.pixelPaddingLeft || 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts relative position on axis to point coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @param position2  Position (0-1) Position on the second axis\r\n   * @return Point\r\n   */\n\n  AxisRendererX.prototype.positionToPoint = function (position, position2) {\n    return {\n      x: this.positionToCoordinate(position),\n      y: 0\n    };\n  };\n  /**\r\n   * Converts a point at specific coordinates to a relative position (0-1)\r\n   * on the axis.\r\n   *\r\n   * @param point  Point\r\n   * @return Position (0-1)\r\n   */\n\n\n  AxisRendererX.prototype.pointToPosition = function (point) {\n    return this.coordinateToPosition(point.x, point.y);\n  };\n  /**\r\n   * [getPositionRangePath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param startPosition  Starting position\r\n   * @param endPosition    End position\r\n   * @return SVG path\r\n   */\n\n\n  AxisRendererX.prototype.getPositionRangePath = function (startPosition, endPosition) {\n    var x1 = $math.fitToRange(this.positionToCoordinate(startPosition), 0, this.axisLength);\n    var x2 = $math.fitToRange(this.positionToCoordinate(endPosition), 0, this.axisLength);\n    var w = Math.abs(x2 - x1);\n    var h = this.getHeight();\n    var x = Math.min(x1, x2);\n    var y = 0;\n    return $path.rectToPath({\n      x: x,\n      y: y,\n      width: w,\n      height: h\n    }, true);\n  };\n  /**\r\n   * Updates and positions an axis break element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axisBreak Break element\r\n   */\n\n\n  AxisRendererX.prototype.updateBreakElement = function (axisBreak) {\n    _super.prototype.updateBreakElement.call(this, axisBreak);\n\n    var startLine = axisBreak.startLine;\n    var endLine = axisBreak.endLine;\n    var fillShape = axisBreak.fillShape;\n    var startPoint = axisBreak.startPoint;\n    var endPoint = axisBreak.endPoint;\n    var y1 = axisBreak.pixelMarginLeft;\n    var y2 = this.getHeight() - axisBreak.pixelMarginTop - axisBreak.pixelMarginBottom;\n    startPoint.x = $math.fitToRange(startPoint.x, -1, this.axisLength + 1);\n    endPoint.x = $math.fitToRange(endPoint.x, -1, this.axisLength + 1);\n\n    if (startPoint.x == endPoint.x && (startPoint.x < 0 || startPoint.x > this.axisLength)) {\n      axisBreak.fillShape.__disabled = true;\n    } else {\n      axisBreak.fillShape.__disabled = false;\n    }\n\n    startLine.y = y1;\n    startLine.width = 0;\n    startLine.height = y2;\n    endLine.y = y1;\n    endLine.width = 0;\n    endLine.height = y2;\n    fillShape.height = y2;\n    fillShape.width = Math.abs(endPoint.x - startPoint.x);\n    fillShape.y = y1;\n    fillShape.x = startPoint.x;\n  };\n  /**\r\n   * Updates and positions a grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param grid         Grid element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRendererX.prototype.updateGridElement = function (grid, position, endPosition) {\n    position = position + (endPosition - position) * grid.location;\n    var point = this.positionToPoint(position); //point.x = $utils.spritePointToSprite({x:point.x, y:0}, this, this.gridContainer).x;\n\n    grid.path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: 0,\n      y: this.getHeight()\n    });\n    this.positionItem(grid, point);\n    this.toggleVisibility(grid, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions a tick element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param tick         Tick element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRendererX.prototype.updateTickElement = function (tick, position, endPosition) {\n    position = position + (endPosition - position) * tick.location;\n    var point = this.positionToPoint(position);\n    var tickLength = tick.length;\n    point.y = $utils.spritePointToSprite({\n      x: 0,\n      y: this.line.pixelY\n    }, this.line.parent, this.gridContainer).y;\n\n    if (this.opposite) {\n      tickLength *= tick.inside ? 1 : -1;\n    } else {\n      tickLength *= tick.inside ? -1 : 1;\n    }\n\n    tick.path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: 0,\n      y: tickLength\n    });\n    this.positionItem(tick, point);\n    this.toggleVisibility(tick, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions the axis line element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererX.prototype.updateAxisLine = function () {\n    this.line.path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: this.axisLength,\n      y: 0\n    });\n  };\n  /**\r\n   * Updates and positions the base grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererX.prototype.updateBaseGridElement = function () {\n    _super.prototype.updateBaseGridElement.call(this);\n\n    var axis = this.axis;\n    var h = this.getHeight();\n    var w = this.axisLength;\n    var baseGrid = this.baseGrid;\n    var x = axis.basePoint.x;\n\n    if (x < -0.2 || x > w + 0.2) {\n      baseGrid.hide(0);\n    } else {\n      var y = $utils.spritePointToSprite({\n        x: 0,\n        y: 0\n      }, this.gridContainer, baseGrid.parent).y;\n      baseGrid.path = $path.moveTo({\n        x: 0,\n        y: 0\n      }) + $path.lineTo({\n        x: 0,\n        y: h\n      });\n      baseGrid.moveTo({\n        x: x,\n        y: y\n      });\n      baseGrid.show(0);\n    }\n  };\n  /**\r\n   * Creates visual elements for and axis break.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axisBreak Axis break\r\n   */\n\n\n  AxisRendererX.prototype.createBreakSprites = function (axisBreak) {\n    axisBreak.startLine = new WavedLine();\n    axisBreak.endLine = new WavedLine();\n    var wavedRectangle = new WavedRectangle();\n    wavedRectangle.setWavedSides(false, true, false, true);\n    axisBreak.fillShape = wavedRectangle;\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  AxisRendererX.prototype.toAxisPosition = function (value) {\n    var inversedPosition = value;\n    var axis = this.axis;\n\n    if (axis) {\n      var relativePositionSprite = axis.relativePositionSprite;\n      var x = axis.pixelX;\n\n      if (relativePositionSprite) {\n        x = $utils.spritePointToSprite({\n          x: this.pixelX,\n          y: 0\n        }, this.parent, relativePositionSprite).x;\n      } else {\n        relativePositionSprite = axis.parent;\n      }\n\n      if (relativePositionSprite) {\n        var relativeX = x / relativePositionSprite.innerWidth;\n        var relativeWidth = axis.axisLength / relativePositionSprite.innerWidth;\n        return (inversedPosition - relativeX) / relativeWidth;\n      }\n    }\n\n    return value;\n  };\n  /**\r\n   * Updates and positions axis bullets.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param bullet       AxisBullet element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRendererX.prototype.updateBullet = function (bullet, position, endPosition) {\n    var location = 0.5;\n\n    if (bullet instanceof AxisBullet) {\n      location = bullet.location;\n    }\n\n    position = position + (endPosition - position) * location;\n    var point = this.positionToPoint(position);\n    point.y = $utils.spritePointToSprite({\n      x: 0,\n      y: this.line.pixelY\n    }, this.line.parent, this.gridContainer).y;\n    this.positionItem(bullet, point);\n    this.toggleVisibility(bullet, position, 0, 1);\n  };\n\n  return AxisRendererX;\n}(AxisRenderer);\n\nexport { AxisRendererX };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"AxisRendererX\"] = AxisRendererX;\n/**\r\n * Add default responsive rules\r\n */\n\n/**\r\n * Put labels inside plot area.\r\n * Disable first and last labels.\r\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.heightXS,\n  state: function state(target, stateId) {\n    if (target instanceof AxisRendererX) {\n      var state = target.states.create(stateId);\n      state.properties.inside = true;\n      state.properties.maxLabelPosition = 0.9;\n      state.properties.minLabelPosition = 0.1;\n      return state;\n    }\n\n    return null;\n  }\n});\n/**\r\n * Disable labels altogather on very small charts\r\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.heightXXS,\n  state: function state(target, stateId) {\n    if (target instanceof AxisRendererX) {\n      var state = target.states.create(stateId);\n      state.properties.disabled = true;\n      return state;\n    }\n\n    return null;\n  }\n});","map":{"version":3,"sources":["../../../../../src/.internal/charts/axes/AxisRendererX.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Module, defining Axis Renderer for vertical axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Axis } from \"./Axis\";\r\nimport { Grid } from \"./Grid\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\nimport { WavedLine } from \"../../core/elements/WavedLine\";\r\nimport { WavedRectangle } from \"../../core/elements/WavedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { VerticalCenter } from \"../../core/defs/VerticalCenter\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererX]].\r\n */\r\nexport interface IAxisRendererXProperties extends IAxisRendererProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererX]].\r\n */\r\nexport interface IAxisRendererXEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererX]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererXAdapters extends IAxisRendererAdapters, IAxisRendererXProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for horizontal axis.\r\n *\r\n * @see {@link IAxisRendererEvents} for a list of available events\r\n * @see {@link IAxisRendererAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererX extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererXProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererXAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererXEvents;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"AxisRendererX\";\r\n\r\n\t\tthis.minGridDistance = 120;\r\n\r\n\t\tthis.opposite = false;\r\n\r\n\t\tthis.rotation = 0;\r\n\r\n\t\tthis.width = percent(100);\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.layout = \"vertical\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateGridContainer() {\r\n\t\tlet axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\tlet gridContainer = this.gridContainer;\r\n\t\t\tgridContainer.x = axis.pixelX;\r\n\t\t\tgridContainer.width = axis.axisLength;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Called when rendered is attached to an Axis, as well as a property of\r\n\t * Axis that might affect the appearance is updated.\r\n\t *\r\n\t * E.g. `axis.opposite`, `axis.inside`, etc.\r\n\t *\r\n\t * This method is called **before** draw, so that any related setting\r\n\t * changed in this method can be changed.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processRenderer(): void {\r\n\t\tsuper.processRenderer();\r\n\r\n\t\t// can not do this in init, as axis is set later\r\n\t\tlet axis = this.axis;\r\n\r\n\t\tif (axis) {\r\n\t\t\tif (!(axis.width instanceof Percent)) {\r\n\t\t\t\taxis.width = percent(100);\r\n\t\t\t}\r\n\r\n\t\t\t// @todo Is thi sneeded?\r\n\t\t\t$utils.used(this.line);\r\n\r\n\t\t\tlet title: Label = axis.title;\r\n\t\t\ttitle.rotation = 0;\r\n\t\t\ttitle.align = \"center\";\r\n\r\n\t\t\tif (this.opposite) {\r\n\t\t\t\tthis.line.toFront();\r\n\t\t\t\ttitle.toBack();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttitle.toFront();\r\n\t\t\t\tthis.toBack();\r\n\t\t\t\tthis.line.toBack();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip() {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\tlet bigNum: number = 1000;\r\n\t\t\tlet bbx: number = this.line.pixelX;\r\n\t\t\tlet bby: number = this.line.pixelY;\r\n\t\t\tlet bbw: number = this.axisLength;\r\n\r\n\t\t\tlet bbh: number = bigNum;\r\n\r\n\t\t\t// top\r\n\t\t\tif (this.opposite) {\r\n\t\t\t\tif (!this.inside) {\r\n\t\t\t\t\tbby = - bigNum;\r\n\t\t\t\t\tbbh = bigNum;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// bottom\r\n\t\t\telse {\r\n\t\t\t\tif (this.inside) {\r\n\t\t\t\t\tbby = - bigNum;\r\n\t\t\t\t\tbbh = bigNum;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.axis.updateTooltip(\"vertical\", { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: AxisLabel, position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlabel.isMeasured = !label.inside;\r\n\r\n\t\tlet deltaY = 0;\r\n\t\tlet verticalCenter: VerticalCenter;\r\n\t\tlet maxHeight = this.gridContainer.maxHeight;\r\n\t\tif (this.opposite) {\r\n\t\t\tif (label.inside) {\r\n\t\t\t\tverticalCenter = \"top\";\r\n\t\t\t\tif (label.valign == \"bottom\") {\r\n\t\t\t\t\tdeltaY = maxHeight;\r\n\t\t\t\t\tverticalCenter = \"bottom\";\r\n\t\t\t\t}\r\n\t\t\t\tif (label.valign == \"middle\") {\r\n\t\t\t\t\tdeltaY = maxHeight / 2;\r\n\t\t\t\t\tverticalCenter = \"middle\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tverticalCenter = \"bottom\";\r\n\t\t\t}\r\n\r\n\t\t\tpoint.y = deltaY;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (label.inside) {\r\n\t\t\t\tverticalCenter = \"bottom\";\r\n\t\t\t\tif (label.valign == \"top\") {\r\n\t\t\t\t\tdeltaY = -maxHeight;\r\n\t\t\t\t\tverticalCenter = \"top\";\r\n\t\t\t\t}\r\n\t\t\t\tif (label.valign == \"middle\") {\r\n\t\t\t\t\tdeltaY = -maxHeight / 2;\r\n\t\t\t\t\tverticalCenter = \"middle\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tverticalCenter = \"top\";\r\n\t\t\t}\r\n\r\n\t\t\tpoint.y += deltaY;\r\n\t\t}\r\n\r\n\t\tif (label.rotation == 0) {\r\n\t\t\t// Apply fuzzy logic to verticalCenter only if labels are not rotated\r\n\t\t\tlabel.verticalCenter = verticalCenter;\r\n\t\t}\r\n\r\n\t\tthis.positionItem(label, point);\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\tlet axis = this.axis;\r\n\t\treturn (axis.measuredWidth - axis.pixelPaddingRight - axis.pixelPaddingLeft) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @param position2  Position (0-1) Position on the second axis\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number, position2?: number): IPoint {\r\n\t\treturn { x: this.positionToCoordinate(position), y: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\treturn this.coordinateToPosition(point.x, point.y);\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet x1: number = $math.fitToRange(this.positionToCoordinate(startPosition), 0, this.axisLength);\r\n\t\tlet x2: number = $math.fitToRange(this.positionToCoordinate(endPosition), 0, this.axisLength);\r\n\r\n\t\tlet w: number = Math.abs(x2 - x1);\r\n\t\tlet h: number = this.getHeight();\r\n\t\tlet x: number = Math.min(x1, x2);\r\n\t\tlet y: number = 0;\r\n\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: x,\r\n\t\t\ty: y,\r\n\t\t\twidth: w,\r\n\t\t\theight: h\r\n\t\t}, true);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak): void {\r\n\t\tsuper.updateBreakElement(axisBreak);\r\n\r\n\t\tlet startLine = axisBreak.startLine;\r\n\t\tlet endLine = axisBreak.endLine;\r\n\t\tlet fillShape = axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tlet y1: number = axisBreak.pixelMarginLeft;\r\n\t\tlet y2: number = this.getHeight() - axisBreak.pixelMarginTop - axisBreak.pixelMarginBottom;\r\n\r\n\t\tstartPoint.x = $math.fitToRange(startPoint.x, -1, this.axisLength + 1);\r\n\t\tendPoint.x = $math.fitToRange(endPoint.x, -1, this.axisLength + 1);\r\n\r\n\t\tif (startPoint.x == endPoint.x && (startPoint.x < 0 || startPoint.x > this.axisLength)) {\r\n\t\t\taxisBreak.fillShape.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxisBreak.fillShape.__disabled = false;\r\n\t\t}\r\n\r\n\t\tstartLine.y = y1;\r\n\t\tstartLine.width = 0;\r\n\t\tstartLine.height = y2;\r\n\r\n\t\tendLine.y = y1;\r\n\t\tendLine.width = 0;\r\n\t\tendLine.height = y2;\r\n\r\n\t\tfillShape.height = y2;\r\n\t\tfillShape.width = Math.abs(endPoint.x - startPoint.x);\r\n\t\tfillShape.y = y1;\r\n\t\tfillShape.x = startPoint.x;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\t//point.x = $utils.spritePointToSprite({x:point.x, y:0}, this, this.gridContainer).x;\r\n\r\n\t\tgrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.getHeight() });\r\n\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick         Tick element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlet tickLength = tick.length;\r\n\r\n\t\tpoint.y = $utils.spritePointToSprite({ x: 0, y: this.line.pixelY }, this.line.parent, this.gridContainer).y;\r\n\r\n\t\tif (this.opposite) {\r\n\t\t\ttickLength *= (tick.inside ? 1 : -1);\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttickLength *= (tick.inside ? -1 : 1);\r\n\t\t}\r\n\r\n\t\ttick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: tickLength });\r\n\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine(): void {\r\n\t\tthis.line.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.axisLength, y: 0 });\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet h: number = this.getHeight();\r\n\t\tlet w: number = this.axisLength;\r\n\t\tlet baseGrid: Sprite = this.baseGrid;\r\n\r\n\t\tlet x: number = axis.basePoint.x;\r\n\t\tif (x < -0.2 || x > w + 0.2) {\r\n\t\t\tbaseGrid.hide(0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet y = $utils.spritePointToSprite({ x: 0, y: 0 }, this.gridContainer, baseGrid.parent).y;\r\n\t\t\tbaseGrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: h });\r\n\t\t\tbaseGrid.moveTo({ x: x, y: y });\r\n\t\t\tbaseGrid.show(0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedLine();\r\n\t\taxisBreak.endLine = new WavedLine();\r\n\t\tlet wavedRectangle: WavedRectangle = new WavedRectangle();\r\n\t\twavedRectangle.setWavedSides(false, true, false, true);\r\n\t\taxisBreak.fillShape = wavedRectangle;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic toAxisPosition(value: number): number {\r\n\t\tlet inversedPosition = value;\r\n\t\tlet axis = this.axis;\r\n\r\n\t\tif (axis) {\r\n\t\t\tlet relativePositionSprite = axis.relativePositionSprite;\r\n\r\n\t\t\tlet x = axis.pixelX;\r\n\t\t\tif (relativePositionSprite) {\r\n\t\t\t\tx = $utils.spritePointToSprite({ x: this.pixelX, y: 0 }, this.parent, relativePositionSprite).x;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trelativePositionSprite = axis.parent;\r\n\t\t\t}\r\n\r\n\t\t\tif(relativePositionSprite){\r\n\t\t\t\tlet relativeX = x / relativePositionSprite.innerWidth;\r\n\t\t\t\tlet relativeWidth = axis.axisLength / relativePositionSprite.innerWidth;\r\n\r\n\t\t\t\treturn (inversedPosition - relativeX) / relativeWidth;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions axis bullets.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\t\tlet location = 0.5;\r\n\t\tif (bullet instanceof AxisBullet) {\r\n\t\t\tlocation = bullet.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tpoint.y = $utils.spritePointToSprite({ x: 0, y: this.line.pixelY }, this.line.parent, this.gridContainer).y;\r\n\r\n\t\tthis.positionItem(bullet, point);\r\n\r\n\t\tthis.toggleVisibility(bullet, position, 0, 1);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX\"] = AxisRendererX;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Put labels inside plot area.\r\n * Disable first and last labels.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.heightXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof AxisRendererX) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.inside = true;\r\n\t\t\tstate.properties.maxLabelPosition = 0.9;\r\n\t\t\tstate.properties.minLabelPosition = 0.1;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Disable labels altogather on very small charts\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.heightXXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof AxisRendererX) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});"],"sourceRoot":""},"metadata":{},"sourceType":"module"}