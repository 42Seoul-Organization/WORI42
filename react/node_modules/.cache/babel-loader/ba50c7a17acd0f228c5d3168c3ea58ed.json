{"ast":null,"code":"/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport * as $array from \"./Array\";\nimport * as $type from \"./Type\";\n/**\r\n * ============================================================================\r\n * UTILITY FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Returns an iterator for all entries in object.\r\n *\r\n * Can be used to safely iterate through all properties of the object.\r\n *\r\n * @param object  Source object\r\n * @returns Iterator\r\n */\n\nexport function entries(object) {\n  return function (push) {\n    // TODO make this more efficient ?\n    for (var key in object) {\n      if (hasKey(object, key)) {\n        if (!push([key, object[key]])) {\n          break;\n        }\n      }\n    }\n  };\n}\n/**\r\n * Returns an array of object's property names.\r\n *\r\n * @param object  Source object\r\n * @returns Object property names\r\n */\n\nexport function keys(object) {\n  var output = [];\n\n  for (var key in object) {\n    if (hasKey(object, key)) {\n      output.push(key);\n    }\n  }\n\n  return output;\n}\n/**\r\n * Returns an array of object's property names ordered using specific ordering\r\n * function.\r\n *\r\n * @param object  Source object\r\n * @param order   Ordering function\r\n * @returns Object property names\r\n */\n\nexport function keysOrdered(object, order) {\n  return keys(object).sort(order);\n}\n/**\r\n * Checks if `object` has a specific `key`.\r\n *\r\n * @param object  Source object\r\n * @param key     Property name\r\n * @returns Has key?\r\n */\n\nexport function hasKey(object, key) {\n  return {}.hasOwnProperty.call(object, key);\n}\n/**\r\n * Returns value of the specific `key`.\r\n *\r\n * @param object  Source object\r\n * @param key     Property name\r\n * @returns Key value\r\n */\n\nexport function getKey(object, key) {\n  return object[key];\n}\n/**\r\n * Iterates through all properties of the object calling `fn` for each of them.\r\n *\r\n * If return value of the function evaluates to `false` further iteration is\r\n * cancelled.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n */\n\nexport function eachContinue(object, fn) {\n  for (var key in object) {\n    if (hasKey(object, key)) {\n      if (!fn(key, object[key])) {\n        break;\n      }\n    }\n  }\n}\n/**\r\n * Iterates through all properties of the object calling `fn` for each of them.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n */\n\nexport function each(object, fn) {\n  eachContinue(object, function (key, value) {\n    fn(key, value);\n    return true;\n  });\n}\n/**\r\n * Orders object properties using custom `ord` function and iterates through\r\n * them calling `fn` for each of them.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n * @param order   Ordering function\r\n */\n\nexport function eachOrdered(object, fn, ord) {\n  $array.each(keysOrdered(object, ord), function (key) {\n    fn(key, object[key]);\n  });\n}\n/**\r\n * Returns a copy of the object.\r\n *\r\n * @param object  Source object\r\n * @returns Copy of the object\r\n */\n\nexport function copy(object) {\n  return Object.assign({}, object);\n}\n/**\r\n * Merges two objects and returns a new object that contains properties from\r\n * both source objects.\r\n *\r\n * @param object1  Source object #1\r\n * @param object2  Source object #2\r\n * @returns Combined object\r\n */\n\nexport function merge(object1, object2) {\n  return Object.assign({}, object1, object2);\n}\n/**\r\n * Returns object clone.\r\n *\r\n * @param object  Source object\r\n * @returns       Clone\r\n */\n\nexport function clone(object) {\n  return JSON.parse(JSON.stringify(object));\n}\n/**\r\n * Copies a list of properties from one object to another.\r\n *\r\n * Will not copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\n\nexport function copyProperties(source, target, keys) {\n  $array.each(keys, function (key) {\n    if ($type.hasValue(source[key])) {\n      target[key] = source[key];\n    }\n  });\n}\n/**\r\n * Copies a list of properties from one object to another only if target does't have value of the property set.\r\n *\r\n * Will not copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\n\nexport function softCopyProperties(source, target, keys) {\n  $array.each(keys, function (key) {\n    if ($type.hasValue(source[key]) && !$type.hasValue(target[key])) {\n      target[key] = source[key];\n    }\n  });\n}\n/**\r\n * Copies a list of properties from one object to another.\r\n *\r\n * Will copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\n\nexport function forceCopyProperties(source, target, keys) {\n  $array.each(keys, function (key) {\n    target[key] = source[key];\n  });\n}\n/**\r\n * Copies all properties from one object to another.\r\n *\r\n * @param from  Source object\r\n * @param to    Target object\r\n */\n\nexport function copyAllProperties(from, to) {\n  copyProperties(from, to, keys(from));\n}","map":{"version":3,"sources":["../../../../../src/.internal/core/utils/Object.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $array from \"./Array\";\r\nimport * as $iter from \"./Iterator\";\r\nimport * as $type from \"./Type\";\r\nimport { Ordering } from \"./Order\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * UTILITY FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Returns an iterator for all entries in object.\r\n *\r\n * Can be used to safely iterate through all properties of the object.\r\n *\r\n * @param object  Source object\r\n * @returns Iterator\r\n */\r\nexport function entries<Object>(object: Object): $iter.Iterator<[$type.Keyof<Object>, Object[$type.Keyof<Object>]]> {\r\n\treturn (push) => {\r\n\t\t// TODO make this more efficient ?\r\n\t\tfor (let key in object) {\r\n\t\t\tif (hasKey(object, key)) {\r\n\t\t\t\tif (!push([key as $type.Keyof<Object>, object[key] as Object[$type.Keyof<Object>]])) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns an array of object's property names.\r\n *\r\n * @param object  Source object\r\n * @returns Object property names\r\n */\r\nexport function keys<Object>(object: Object): Array<$type.Keyof<Object>> {\r\n\tconst output = [];\r\n\r\n\tfor (let key in object) {\r\n\t\tif (hasKey(object, key)) {\r\n\t\t\toutput.push(key as $type.Keyof<Object>);\r\n\t\t}\r\n\t}\r\n\r\n\treturn output;\r\n}\r\n\r\n/**\r\n * Returns an array of object's property names ordered using specific ordering\r\n * function.\r\n *\r\n * @param object  Source object\r\n * @param order   Ordering function\r\n * @returns Object property names\r\n */\r\nexport function keysOrdered<Object>(object: Object, order: (a: $type.Keyof<Object>, b: $type.Keyof<Object>) => Ordering): Array<$type.Keyof<Object>> {\r\n\treturn keys(object).sort(order);\r\n}\r\n\r\n/**\r\n * Checks if `object` has a specific `key`.\r\n *\r\n * @param object  Source object\r\n * @param key     Property name\r\n * @returns Has key?\r\n */\r\nexport function hasKey<Object, Key extends keyof Object>(object: Object, key: Key): boolean {\r\n\treturn {}.hasOwnProperty.call(object, key);\r\n}\r\n\r\n/**\r\n * Returns value of the specific `key`.\r\n *\r\n * @param object  Source object\r\n * @param key     Property name\r\n * @returns Key value\r\n */\r\nexport function getKey<Object, Key extends keyof Object>(object: Object, key: Key): Object[Key] {\r\n\treturn object[key];\r\n}\r\n\r\n/**\r\n * Iterates through all properties of the object calling `fn` for each of them.\r\n *\r\n * If return value of the function evaluates to `false` further iteration is\r\n * cancelled.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n */\r\nexport function eachContinue<Object>(object: Object, fn: <Key extends $type.Keyof<Object>>(key: Key, value: Object[Key]) => boolean): void {\r\n\tfor (let key in object) {\r\n\t\tif (hasKey(object, key)) {\r\n\t\t\tif (!fn(key as $type.Keyof<Object>, object[key] as Object[$type.Keyof<Object>])) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Iterates through all properties of the object calling `fn` for each of them.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n */\r\nexport function each<Object>(object: Object, fn: <Key extends $type.Keyof<Object>>(key: Key, value: Object[Key]) => void): void {\r\n\teachContinue(object, (key, value) => {\r\n\t\tfn(key, value);\r\n\t\treturn true;\r\n\t});\r\n}\r\n\r\n/**\r\n * Orders object properties using custom `ord` function and iterates through\r\n * them calling `fn` for each of them.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n * @param order   Ordering function\r\n */\r\nexport function eachOrdered<Object>(object: Object, fn: <Key extends $type.Keyof<Object>>(key: Key, value: Object[Key]) => void, ord: (a: $type.Keyof<Object>, b: $type.Keyof<Object>) => Ordering): void {\r\n\t$array.each(keysOrdered(object, ord), (key) => {\r\n\t\tfn(key, object[key]);\r\n\t});\r\n}\r\n\r\n/**\r\n * Returns a copy of the object.\r\n *\r\n * @param object  Source object\r\n * @returns Copy of the object\r\n */\r\nexport function copy<Object>(object: Object): Object {\r\n\treturn Object.assign({}, object);\r\n}\r\n\r\n/**\r\n * Merges two objects and returns a new object that contains properties from\r\n * both source objects.\r\n *\r\n * @param object1  Source object #1\r\n * @param object2  Source object #2\r\n * @returns Combined object\r\n */\r\nexport function merge<Object1, Object2>(object1: Object1, object2: Object2): Object1 & Object2 {\r\n\treturn Object.assign({}, object1, object2);\r\n}\r\n\r\n/**\r\n * Returns object clone.\r\n *\r\n * @param object  Source object\r\n * @returns       Clone\r\n */\r\nexport function clone<Object>(object: Object): Object {\r\n\treturn JSON.parse(JSON.stringify(object));\r\n}\r\n/**\r\n * Copies a list of properties from one object to another.\r\n *\r\n * Will not copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\r\nexport function copyProperties(source: { [key: string]: any }, target: { [key: string]: any }, keys: Array<string>): void {\r\n\t$array.each(keys, (key) => {\r\n\t\tif ($type.hasValue(source[key])) {\r\n\t\t\ttarget[key] = source[key];\r\n\t\t}\r\n\t});\r\n}\r\n\r\n/**\r\n * Copies a list of properties from one object to another only if target does't have value of the property set.\r\n *\r\n * Will not copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\r\nexport function softCopyProperties(source: { [key: string]: any }, target: { [key: string]: any }, keys: Array<string>): void {\r\n\t$array.each(keys, (key) => {\r\n\t\tif ($type.hasValue(source[key]) && !($type.hasValue((<any>target)[key]))) {\r\n\t\t\ttarget[key] = source[key];\r\n\t\t}\r\n\t});\r\n}\r\n\r\n/**\r\n * Copies a list of properties from one object to another.\r\n *\r\n * Will copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\r\nexport function forceCopyProperties(source: { [key: string]: any }, target: { [key: string]: any }, keys: Array<string>): void {\r\n\t$array.each(keys, (key) => {\r\n\t\ttarget[key] = source[key];\r\n\t});\r\n}\r\n\r\n/**\r\n * Copies all properties from one object to another.\r\n *\r\n * @param from  Source object\r\n * @param to    Target object\r\n */\r\nexport function copyAllProperties(from: { [key: string]: any }, to: { [key: string]: any }): void {\r\n\tcopyProperties(from, to, keys(from));\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}