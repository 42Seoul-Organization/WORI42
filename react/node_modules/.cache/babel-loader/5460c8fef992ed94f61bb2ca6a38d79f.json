{"ast":null,"code":"/**\r\n * Functionality for any series-based elements, like Line Series (graphs),\r\n * Pie slice lists, etc.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Component } from \"../../core/Component\";\nimport { Sprite } from \"../../core/Sprite\";\nimport { List, ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { Dictionary, DictionaryDisposer } from \"../../core/utils/Dictionary\";\nimport { DataItem } from \"../../core/DataItem\";\nimport { Container } from \"../../core/Container\";\nimport { Tooltip } from \"../../core/elements/Tooltip\";\nimport { Bullet } from \"../elements/Bullet\";\nimport { LegendSettings } from \"../Legend\";\nimport { options } from \"../../core/Options\";\nimport { Color } from \"../../core/utils/Color\";\nimport { registry } from \"../../core/Registry\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $ease from \"../../core/utils/Ease\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $object from \"../../core/utils/Object\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $colors from \"../../core/utils/Colors\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[Series]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar SeriesDataItem =\n/** @class */\nfunction (_super) {\n  __extends(SeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function SeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"SeriesDataItem\"; //@todo Should we make `bullets` list disposable?\n    //this._disposers.push(new DictionaryDisposer(this.bullets));\n\n    _this.values.value = {};\n    _this.values.value = {};\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(SeriesDataItem.prototype, \"bullets\", {\n    /**\r\n     * A dictionary of data items bullets, where key is uid of a bullet template.\r\n     */\n    get: function () {\n      if (!this._bullets) {\n        this._bullets = new Dictionary();\n\n        this._disposers.push(new DictionaryDisposer(this._bullets));\n      }\n\n      return this._bullets;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Destroys this object and all related data.\r\n   */\n\n  SeriesDataItem.prototype.dispose = function () {\n    this.bullets.clear();\n\n    _super.prototype.dispose.call(this);\n  };\n\n  Object.defineProperty(SeriesDataItem.prototype, \"value\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this.values.value.value;\n    },\n\n    /**\r\n     * data items's numeric value.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.setValue(\"value\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return SeriesDataItem;\n}(DataItem);\n\nexport { SeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines base class for any kind of serial data.\r\n *\r\n * @see {@link ISeriesEvents} for a list of available Events\r\n * @see {@link ISeriesAdapters} for a list of available Adapters\r\n * @todo Separate axis-related stuff to some other class so that MapSeries would not have unrelated stuff\r\n */\n\nvar Series =\n/** @class */\nfunction (_super) {\n  __extends(Series, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Series() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Should this series excluded from the axis scale calculations?\r\n     *\r\n     * @default false\r\n     */\n\n\n    _this._ignoreMinMax = false;\n    /**\r\n     * Should series' bullets?\r\n     *\r\n     * @default true\r\n     */\n\n    _this._showBullets = true;\n    /**\r\n     * Settings for the appearance of the related legend items.\r\n     */\n\n    _this.legendSettings = new LegendSettings();\n    /**\r\n     * Lowest overal values by type.\r\n     */\n\n    _this._tmin = new Dictionary();\n    /**\r\n     * Highest overal values by type.\r\n     */\n\n    _this._tmax = new Dictionary();\n    /**\r\n     * Lowest values in current selection by type.\r\n     */\n\n    _this._smin = new Dictionary();\n    /**\r\n     * Highest values in current selection by type.\r\n     */\n\n    _this._smax = new Dictionary();\n    /**\r\n     * [dataItemsByAxis description]\r\n     *\r\n     * Both by category and date.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n\n    _this.dataItemsByAxis = new Dictionary();\n    /**\r\n     * Normally series items are focusable using keyboard, so that people can\r\n     * select them with a TAB key. However, if there are a lot of data points on\r\n     * screen it might be long and useless to tab through all o fthem.\r\n     *\r\n     * This is where `skipFocusThreshold` comes in. If there are more items than\r\n     * the value set here, we will not make those focusable and rather let screen\r\n     * reader software rely on the series summary, or authors provide alternative\r\n     * detailed information display, such as HTML table.\r\n     *\r\n     * Different series might have different threshold defaults.\r\n     */\n\n    _this.skipFocusThreshold = 20;\n    /**\r\n     * Used to indicate if `itemReaderText` was changed \"from the outside\".\r\n     */\n\n    _this._itemReaderTextChanged = false;\n    /**\r\n     * Most of the series use absolute values. However sometimes various\r\n     * calculated percent values are need, e.g. item's percent representation\r\n     * across all values in series, etc.\r\n     *\r\n     * It's a resource-intensive operation, so it is disabled by default.\r\n     *\r\n     * If you need percents to be calculated, e.g. for showing them in tooltips,\r\n     * or creating 100% stacks, this setting needs to be set to `true`.\r\n     *\r\n     * NOTE: `PieChart`, which relies on slice percentages, has this\r\n     * automatically set to `true`.\r\n     *\r\n     * @default false\r\n     */\n\n    _this.calculatePercent = false;\n    /**\r\n     * When `calculatePercent` is enabled and data item's percent value is\r\n     * calculated, last item's real value is used instead of its working value.\r\n     *\r\n     * This is done for the animations when last item in series (e.g. slice in\r\n     * a `PieSeries`) is hidden or shown. (if we would use real value, the\r\n     * calculated percent would always be 100%).\r\n     *\r\n     * Sometimes there is a need (e.g. for drill-down Sunburst) to disable this\r\n     * hack by setting `usePercentHack` to `false`.\r\n     *\r\n     * @since 4.9.13\r\n     * @default true\r\n     */\n\n    _this.usePercentHack = true;\n    /**\r\n     * Specifies if series should be automatically disposed when removing from\r\n     * chart's `series` list.\r\n     *\r\n     * @default true\r\n     */\n\n    _this.autoDispose = true;\n    /**\r\n     * When chart/series' data is processed, all kinds of derivative values are\r\n     * calculated. E.g. sum, min, max, change, etc. This is a potentially\r\n     * time-consuming operation, especially prominent in data-heavy charts.\r\n     *\r\n     * If your chart does not need those values, and you have a lot of data,\r\n     * setting this to `true` might give a dramatic increase in initial chart\r\n     * load speed.\r\n     *\r\n     * Please note, regular column and line series usage scenarios do not\r\n     * require derivative values. Those come into play only when you do advanced\r\n     * functionality like coloring segments of charts in different colors\r\n     * depending on change between open and close values, have stacked series, or\r\n     * display any of the derived values, like percent, in tooltips or bullets.\r\n     *\r\n     * @default false\r\n     */\n\n    _this.simplifiedProcessing = false;\n\n    if (_this.constructor === Series) {\n      throw new Error(\"'Series' cannot be instantiated directly. Please use a specific series type.\");\n    }\n\n    _this.className = \"Series\";\n    _this.isMeasured = false;\n    _this.layout = \"none\";\n    _this.shouldClone = false;\n\n    _this.setPropertyValue(\"hidden\", false);\n\n    _this.axisRanges = new List();\n\n    _this.axisRanges.events.on(\"inserted\", _this.processAxisRange, _this, false);\n\n    _this.minBulletDistance = 0; // otherwise we'll have a lot of cases when people won't see bullets and think it's a bug\n\n    _this.mainContainer = _this.createChild(Container);\n    _this.mainContainer.shouldClone = false;\n    _this.mainContainer.mask = _this.createChild(Sprite);\n\n    _this._disposers.push(_this.mainContainer); // all bullets should go on top of lines/fills. So we add a separate container for bullets and later set it's parent to chart.bulletsContainer\n\n\n    var bulletsContainer = _this.mainContainer.createChild(Container);\n\n    _this._shouldBeReady.push(bulletsContainer);\n\n    bulletsContainer.shouldClone = false;\n    bulletsContainer.layout = \"none\";\n    bulletsContainer.virtualParent = _this;\n\n    _this._disposers.push(bulletsContainer);\n\n    _this.bulletsContainer = bulletsContainer;\n    _this.tooltip = new Tooltip();\n    _this.tooltip.virtualParent = _this;\n\n    _this._disposers.push(_this.tooltip);\n\n    _this.hiddenState.transitionEasing = $ease.cubicIn; // this data item holds sums, averages, etc\n\n    _this.dataItem = _this.createDataItem();\n\n    _this._disposers.push(_this.dataItem);\n\n    _this.dataItem.component = _this; // Apply accessibility\n\n    _this.role = \"group\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * We need this here so that class names can be applied to bullets container.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Series.prototype.applyTheme = function () {\n    _super.prototype.applyTheme.call(this);\n\n    if (options.autoSetClassName && this.bulletsContainer) {\n      this.bulletsContainer.className = this.className + \"-bullets\";\n      this.bulletsContainer.setClassName();\n    }\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  Series.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Series\");\n    }\n  };\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  Series.prototype.createDataItem = function () {\n    return new SeriesDataItem();\n  };\n\n  Object.defineProperty(Series.prototype, \"chart\", {\n    /**\r\n     * @return Chart\r\n     */\n    get: function () {\n      return this._chart;\n    },\n\n    /**\r\n     * Chart series is used on.\r\n     *\r\n     * @param value  Chart\r\n     */\n    set: function (value) {\n      this._chart = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Positions bullet.\r\n   *\r\n   * @param bullet  Sprite\r\n   */\n\n  Series.prototype.positionBullet = function (bullet) {// Placeholder method for extending classes to override.\n  };\n  /**\r\n   * Decorates newly created bullet after it has been instert into the list.\r\n   *\r\n   * @param event  List event\r\n   * @todo investigate why itemReaderText is undefined\r\n   */\n\n\n  Series.prototype.processBullet = function (event) {\n    var _this = this;\n\n    var bullet = event.newValue;\n    bullet.isTemplate = true; // Add accessibility options to bullet\n    // If there are relatively few bullets, make them focusable\n\n    this.events.once(\"datavalidated\", function (ev) {\n      if (_this.itemsFocusable()) {\n        bullet.focusable = true;\n      }\n    });\n  };\n  /**\r\n   * removes bullets\r\n   *\r\n   * @param event  List event\r\n   */\n\n\n  Series.prototype.removeBullet = function (event) {\n    var bullet = event.oldValue;\n    this.dataItems.each(function (dataItem) {\n      var eachBullet = dataItem.bullets.getKey(bullet.uid);\n\n      if (eachBullet) {\n        eachBullet.dispose();\n      }\n    });\n    this.invalidate();\n  };\n  /**\r\n   * Validates data items.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Series.prototype.validateDataItems = function () {\n    _super.prototype.validateDataItems.call(this);\n\n    this.processValues(false);\n  };\n  /**\r\n   * Returns first value for the specific key in the series.\r\n   *\r\n   * @param key  Key\r\n   * @return Value\r\n   * @todo Description\r\n   * @todo Convert to propert object property iterator\r\n   */\n\n\n  Series.prototype.getFirstValue = function (key, startIndex) {\n    // find first\n\n    /*\r\n    return $iter.findMap(this.dataItems.iterator(), (dataItem) => {\r\n        for (let key in dataItem.values) {\r\n            if ($object.hasKey(dataItem.values, key)) {\r\n                let value: number = dataItem.values[key].workingValue;\r\n                if ($type.isNumber(value)) {\r\n                    return value;\r\n                }\r\n            }\r\n        }\r\n          return null;\r\n    });*/\n    //if (startIndex > 0 && startIndex < this.dataItems.length - 1) {\n    //startIndex++;\n    //}\n    for (var i = startIndex; i >= 0; i--) {\n      var dataItem = this.dataItems.getIndex(i);\n      var value = dataItem.getActualWorkingValue(key);\n\n      if ($type.isNumber(value)) {\n        return value;\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * Returns first value for the specific key in the series.\r\n   *\r\n   * @param key  Key\r\n   * @return Value\r\n   * @todo Description\r\n   * @todo Convert to propert object property iterator\r\n   */\n\n\n  Series.prototype.getAbsoluteFirstValue = function (key) {\n    for (var i = 0; i < this.dataItems.length; i++) {\n      var dataItem = this.dataItems.getIndex(i);\n      var value = dataItem.values[key].value;\n\n      if ($type.isNumber(value)) {\n        return value;\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * [rangeChangeUpdate description]\r\n   *\r\n   * @todo Description\r\n   */\n\n\n  Series.prototype.rangeChangeUpdate = function () {\n    _super.prototype.rangeChangeUpdate.call(this);\n\n    this.processValues(true);\n  };\n  /**\r\n   * [processValues description]\r\n   *\r\n   * @todo Description\r\n   * @todo Convert to propert object property iterator\r\n   * @param dataItems [description]\r\n   */\n\n\n  Series.prototype.processValues = function (working) {\n    var _this = this;\n\n    if (!this.simplifiedProcessing) {\n      var dataItems = this.dataItems;\n      var count_1 = {};\n      var sum_1 = {};\n      var absoluteSum_1 = {};\n      var low_1 = {};\n      var high_1 = {};\n      var open_1 = {};\n      var close_1 = {};\n      var previous_1 = {};\n      var first_1 = {};\n      var absoluteFirst_1 = {}; //let duration: number = 0; // todo: check if series uses selection.change or selection.change.percent and set duration to interpolationduration\n\n      var startIndex_1 = $math.max(0, this.startIndex);\n      startIndex_1 = $math.min(startIndex_1, this.dataItems.length);\n      var endIndex = $math.min(this.endIndex, this.dataItems.length);\n\n      if (!$type.isNumber(startIndex_1)) {\n        startIndex_1 = 0;\n      }\n\n      if (!$type.isNumber(endIndex)) {\n        endIndex = this.dataItems.length;\n      }\n\n      if (startIndex_1 > 0) {\n        var dataItem_1 = dataItems.getIndex(startIndex_1 - 1);\n        $object.each(dataItem_1.values, function (key, values) {\n          var value = dataItem_1.getActualWorkingValue(key);\n\n          if ($type.isNumber(value)) {\n            // save previous\n            previous_1[key] = value;\n          }\n        });\n      }\n\n      var _loop_1 = function (i) {\n        var dataItem_2 = dataItems.getIndex(i);\n        $object.each(dataItem_2.values, function (key, values) {\n          var value = dataItem_2.getActualWorkingValue(key); //if (i >= startIndex && i <= endIndex) { // do not add to count, sum etc if it is not within start/end index\n\n          if ($type.isNumber(value)) {\n            // count values\n            if (!$type.isNumber(count_1[key])) {\n              count_1[key] = 0;\n            }\n\n            count_1[key]++; // sum values\n\n            if (!$type.isNumber(sum_1[key])) {\n              sum_1[key] = 0;\n            }\n\n            sum_1[key] += value; // absolute sum values\n\n            if (!$type.isNumber(absoluteSum_1[key])) {\n              absoluteSum_1[key] = 0;\n            }\n\n            absoluteSum_1[key] += Math.abs(value); // open\n\n            if (!$type.isNumber(open_1[key])) {\n              open_1[key] = value;\n            } // close\n\n\n            close_1[key] = value; // low\n\n            if (!$type.isNumber(low_1[key])) {\n              low_1[key] = value;\n            } else {\n              if (low_1[key] > value) {\n                low_1[key] = value;\n              }\n            } // high\n\n\n            if (!$type.isNumber(high_1[key])) {\n              high_1[key] = value;\n            } else {\n              if (high_1[key] < value) {\n                high_1[key] = value;\n              }\n            }\n\n            if (!$type.isNumber(first_1[key])) {\n              first_1[key] = _this.getFirstValue(key, startIndex_1);\n            }\n\n            if (!$type.isNumber(absoluteFirst_1[key])) {\n              absoluteFirst_1[key] = _this.getAbsoluteFirstValue(key);\n            } // change\n\n\n            dataItem_2.setCalculatedValue(key, value - first_1[key], \"change\"); // change from start percent\n            // will fail if first value is 0\n\n            dataItem_2.setCalculatedValue(key, (value - first_1[key]) / first_1[key] * 100, \"changePercent\");\n            dataItem_2.setCalculatedValue(key, value - absoluteFirst_1[key], \"startChange\");\n            dataItem_2.setCalculatedValue(key, (value - absoluteFirst_1[key]) / absoluteFirst_1[key] * 100, \"startChangePercent\"); // previous change\n\n            var prevValue = previous_1[key];\n\n            if (!$type.isNumber(prevValue)) {\n              prevValue = value;\n            }\n\n            dataItem_2.setCalculatedValue(key, value - prevValue, \"previousChange\"); // previous change percent\n\n            dataItem_2.setCalculatedValue(key, (value - prevValue) / prevValue * 100, \"previousChangePercent\"); // save previous\n\n            previous_1[key] = value;\n          }\n        });\n      };\n\n      for (var i = startIndex_1; i < endIndex; i++) {\n        _loop_1(i);\n      }\n\n      if (this.calculatePercent) {\n        var _loop_2 = function (i) {\n          var dataItem_3 = dataItems.getIndex(i);\n          $object.each(dataItem_3.values, function (key) {\n            var ksum = absoluteSum_1[key];\n            var value = dataItem_3.getActualWorkingValue(key);\n\n            if ($type.isNumber(value)) {\n              if (ksum > 0) {\n                if (_this.usePercentHack) {\n                  // this hack is made in order to make it possible to animate single slice to 0\n                  // if there is only one slice left, percent value is always 100%, so it won't animate\n                  // so we use real value of a slice instead of current value\n                  if (value == ksum) {\n                    ksum = dataItem_3.values[key].value;\n                  }\n                }\n\n                var percent = value / ksum * 100;\n                dataItem_3.setCalculatedValue(key, percent, \"percent\");\n              } else {\n                dataItem_3.setCalculatedValue(key, 0, \"percent\");\n              }\n            }\n          });\n        };\n\n        for (var i = startIndex_1; i < endIndex; i++) {\n          _loop_2(i);\n        }\n      } // calculate one before first (cant do that in cycle, as we don't know open yet\n      // when drawing line chart we should draw line to the invisible data point to the left, otherwise the line will always look like it starts from the selected point\n      // so we do startIndex - 1\n\n\n      if (startIndex_1 > 0) {\n        var zeroItem_1 = dataItems.getIndex(startIndex_1 - 1);\n        $object.each(zeroItem_1.values, function (key) {\n          var value = zeroItem_1.values[key].value; // change\n\n          zeroItem_1.setCalculatedValue(key, value - open_1[key], \"change\"); // change percent\n\n          zeroItem_1.setCalculatedValue(key, (value - open_1[key]) / open_1[key] * 100, \"changePercent\");\n        });\n      } // we save various data like sum, average to dataPoint of the series\n\n\n      var dataItem_4 = this.dataItem;\n      $object.each(dataItem_4.values, function (key) {\n        dataItem_4.setCalculatedValue(key, sum_1[key], \"sum\");\n        dataItem_4.setCalculatedValue(key, absoluteSum_1[key], \"absoluteSum\");\n        dataItem_4.setCalculatedValue(key, sum_1[key] / count_1[key], \"average\");\n        dataItem_4.setCalculatedValue(key, open_1[key], \"open\");\n        dataItem_4.setCalculatedValue(key, close_1[key], \"close\");\n        dataItem_4.setCalculatedValue(key, low_1[key], \"low\");\n        dataItem_4.setCalculatedValue(key, high_1[key], \"high\");\n        dataItem_4.setCalculatedValue(key, count_1[key], \"count\");\n      });\n    }\n  };\n  /**\r\n   * (Re)validates the whole series, effectively causing it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Series.prototype.validate = function () {\n    if ($utils.isIE()) {\n      this.filters.clear();\n    }\n\n    $iter.each(this.axisRanges.iterator(), function (axisRange) {\n      //axisRange.contents.disposeChildren(); // not good for columns, as they are reused\n      //\t\t\taxisRange.appendChildren();\n      axisRange.validate();\n    });\n\n    _super.prototype.validate.call(this);\n\n    var bulletsContainer = this.bulletsContainer;\n    bulletsContainer.fill = this.fill;\n    bulletsContainer.stroke = this.stroke;\n    bulletsContainer.x = this.pixelX;\n    bulletsContainer.y = this.pixelY;\n\n    if (this.bulletsContainer.children.length > 0) {\n      if (this._showBullets) {\n        for (var i = 0; i < this.startIndex; i++) {\n          var dataItem = this.dataItems.getIndex(i);\n\n          if (dataItem) {\n            dataItem.bullets.each(function (key, bullet) {\n              bullet.__disabled = true;\n            });\n          }\n        }\n\n        for (var i = this.dataItems.length - 1; i > this.endIndex; i--) {\n          var dataItem = this.dataItems.getIndex(i);\n\n          if (dataItem) {\n            dataItem.bullets.each(function (key, bullet) {\n              bullet.__disabled = true;\n            });\n          }\n        }\n      } else {\n        this.bulletsContainer.children.each(function (bullet) {\n          bullet.__disabled = true;\n        });\n      }\n    }\n\n    this.updateTooltipBounds();\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  Series.prototype.updateTooltipBounds = function () {\n    if (this.topParent) {\n      var x = 0;\n      var y = 0;\n      var w = this.topParent.maxWidth;\n      var h = this.topParent.maxHeight;\n      var rect = {\n        x: x,\n        y: y,\n        width: w,\n        height: h\n      };\n      this.tooltip.setBounds(rect);\n    }\n  };\n\n  Series.prototype.shouldCreateBullet = function (dataItem, bulletTemplate) {\n    return true;\n  };\n  /**\r\n   * Validates data item's element, effectively redrawing it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n\n  Series.prototype.validateDataElement = function (dataItem) {\n    var _this = this;\n\n    _super.prototype.validateDataElement.call(this, dataItem);\n\n    if (this._showBullets) {\n      if (!this.isHidden) {\n        this.bulletsContainer.visible = true;\n      }\n\n      this.bullets.each(function (bulletTemplate) {\n        // always better to use the same, this helps to avoid redrawing\n        var bullet = dataItem.bullets.getKey(bulletTemplate.uid);\n\n        if (_this.shouldCreateBullet(dataItem, bulletTemplate)) {\n          if (!bullet) {\n            var disabledField = bulletTemplate.propertyFields.disabled;\n            var dataContext = dataItem.dataContext;\n\n            if (disabledField && dataContext && dataContext[disabledField] === false) {\n              bulletTemplate.applyOnClones = false;\n              bulletTemplate.disabled = false;\n              bullet = bulletTemplate.clone();\n              bulletTemplate.disabled = true;\n              bulletTemplate.applyOnClones = true;\n            } else {\n              bullet = bulletTemplate.clone();\n            }\n\n            bullet.shouldClone = false;\n            dataItem.addSprite(bullet);\n\n            if (!_this.visible || _this.isHiding) {\n              bullet.hide(0);\n            }\n          }\n\n          var currentDataItem = bullet.dataItem;\n\n          if (currentDataItem != dataItem) {\n            // set to undefined in order not to reuse\n            if (currentDataItem) {\n              currentDataItem.bullets.setKey(bulletTemplate.uid, undefined);\n            }\n\n            var readerText_1 = _this.itemReaderText;\n\n            if (bullet instanceof Bullet) {\n              if (!readerText_1) {\n                readerText_1 = \"{\" + bullet.xField + \"}: {\" + bullet.yField + \"}\";\n              }\n\n              if (bullet.isDynamic) {\n                dataItem.events.on(\"workingvaluechanged\", bullet.deepInvalidate, bullet, false); //dataItem.events.on(\"calculatedvaluechanged\", bullet.deepInvalidate, bullet, false);\n\n                _this.dataItem.events.on(\"workingvaluechanged\", bullet.deepInvalidate, bullet, false);\n              }\n\n              bullet.deepInvalidate();\n            } // Add accessibility to bullet\n\n\n            if (bullet.focusable) {\n              bullet.events.on(\"focus\", function (ev) {\n                bullet.readerTitle = _this.populateString(readerText_1, bullet.dataItem);\n              }, undefined, false);\n              bullet.events.on(\"blur\", function (ev) {\n                bullet.readerTitle = \"\";\n              }, undefined, false);\n            }\n\n            if (bullet.hoverable) {\n              bullet.events.on(\"over\", function (ev) {\n                bullet.readerTitle = _this.populateString(readerText_1, bullet.dataItem);\n              }, undefined, false);\n              bullet.events.on(\"out\", function (ev) {\n                bullet.readerTitle = \"\";\n              }, undefined, false);\n            }\n          }\n\n          bullet.parent = _this.bulletsContainer;\n          dataItem.bullets.setKey(bulletTemplate.uid, bullet); // pass max w/h so we'd know if we should show/hide somethings\n\n          bullet.maxWidth = dataItem.itemWidth;\n          bullet.maxHeight = dataItem.itemHeight;\n          bullet.__disabled = false;\n\n          _this.positionBullet(bullet);\n        } else {\n          if (bullet) {\n            bullet.__disabled = true;\n          }\n        }\n      });\n    } else {\n      this.bulletsContainer.visible = false;\n    }\n  };\n  /**\r\n   * [handleDataItemWorkingValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Series.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {\n    if (!this.dataRangeInvalid) {\n      this.invalidateProcessedData();\n    }\n  };\n\n  Object.defineProperty(Series.prototype, \"ignoreMinMax\", {\n    /**\r\n     * @return Exclude from calculations?\r\n     */\n    get: function () {\n      return this._ignoreMinMax;\n    },\n\n    /**\r\n     * Should this series excluded from the axis scale calculations?\r\n     *\r\n     * @default false\r\n     * @param value  Exclude from calculations?\r\n     */\n    set: function (value) {\n      this._ignoreMinMax = value;\n      this.invalidateDataItems();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Create a mask for the series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Series.prototype.createMask = function () {// A placeholder method for extending classes to override.\n  };\n  /**\r\n   * Process axis range after it has been added to the list.\r\n   *\r\n   * @param event  Event\r\n   */\n\n\n  Series.prototype.processAxisRange = function (event) {\n    // create container if not existing\n    if (!this.rangesContainer) {\n      this.rangesContainer = this.createChild(Container);\n      this.rangesContainer.shouldClone = false;\n      this.rangesContainer.isMeasured = false;\n    }\n\n    var axisRange = event.newValue;\n\n    if (axisRange) {\n      axisRange.contents.parent = this.rangesContainer;\n      axisRange.isRange = true;\n      axisRange.events.on(\"valuechanged\", this.invalidateDataItems, this, false);\n    }\n  };\n  /**\r\n   * [getAxisField description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param axis  [description]\r\n   * @return [description]\r\n   */\n\n\n  Series.prototype.getAxisField = function (axis) {\n    return;\n  };\n  /**\r\n   * Shows the tooltip at specific position.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param xPosition  X\r\n   * @param yPosition  Y\r\n   */\n\n\n  Series.prototype.showTooltipAtPosition = function (xPosition, yPosition) {// Placeholder method for extending classes to override.\n  };\n\n  Object.defineProperty(Series.prototype, \"minBulletDistance\", {\n    /**\r\n     * @return Distance (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minBulletDistance\");\n    },\n\n    /**\r\n     * Minimal distance between data points in pixels.\r\n     *\r\n     * If distance gets smaller than this, bullets are turned off to avoid\r\n     * overlapping.\r\n     *\r\n     * `0` (zero) disables this behavior.\r\n     *\r\n     * IMPORTANT: This setting will work only when Series' base axis\r\n     * is [[CategoryAxis]] or [[DateAxis]]. If base axis is [[ValueAxis]] the\r\n     * setting will be ignored, because it would be a huge overhead to measure\r\n     * distance between each and every bullet.\r\n     *\r\n     * @default 0\r\n     * @param value  Distance (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"minBulletDistance\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Series.prototype, \"bullets\", {\n    /**\r\n     * A list of bullets that will be added to each and every items in the\r\n     * series.\r\n     *\r\n     * You can push any object that is a descendant of a [[Sprite]] here. All\r\n     * items added to this list will be copied and used as a bullet on all data\r\n     * items, including their properties, events, etc.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/bullets/} for more info about the concept of Bullets\r\n     * @return List of bullets.\r\n     */\n    get: function () {\n      if (!this._bullets) {\n        this._bullets = new ListTemplate(new Bullet());\n        this._bullets.template.virtualParent = this;\n\n        this._bullets.events.on(\"inserted\", this.processBullet, this, false);\n\n        this._bullets.events.on(\"removed\", this.removeBullet, this, false);\n\n        this._disposers.push(new ListDisposer(this._bullets));\n\n        this._disposers.push(this._bullets.template);\n      }\n\n      return this._bullets;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Binds related legend data item's visual settings to this series' visual\r\n   * settings.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param marker  Legend item container\r\n   */\n\n  Series.prototype.createLegendMarker = function (marker) {// This is a placeholder method for extending classes to override.\n  };\n\n  Object.defineProperty(Series.prototype, \"hiddenInLegend\", {\n    /**\r\n     * @return Hidden in legend?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"hiddenInLegend\");\n    },\n\n    /**\r\n     * Should the series be hidden in legend?\r\n     *\r\n     * @param value Hidden in legend?\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"hiddenInLegend\", value)) {\n        if (this.chart) {\n          this.chart.feedLegend();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Series.prototype, \"name\", {\n    /**\r\n     * @return Name\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"name\");\n    },\n\n    /**\r\n     * Series' name.\r\n     *\r\n     * @param value  Name\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"name\", value);\n      var legendDataItem = this.legendDataItem;\n\n      if (legendDataItem) {\n        legendDataItem.component.invalidate();\n        legendDataItem.component.invalidateRawData();\n      }\n\n      this.readerTitle = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Series.prototype, \"itemReaderText\", {\n    /**\r\n     * @return Screen reader text template\r\n     */\n    get: function () {\n      // Get explicitly set reader text\n      var readerText = this._itemReaderText; // Not set? Let's try something else\n\n      if (!readerText) {\n        // Tooltip text?\n        if (this.tooltipText) {\n          readerText = $utils.plainText(this.tooltipText);\n        } else if (this.tooltipHTML) {\n          readerText = $utils.plainText(this.tooltipHTML);\n        }\n      }\n\n      if (!this._adapterO) {\n        return readerText;\n      } else {\n        return this._adapterO.apply(\"itemReaderText\", readerText);\n      }\n    },\n\n    /**\r\n     * Screen reader text to be applied to each individual data item, such\r\n     * as bullets, columns or slices.\r\n     *\r\n     * The template can contain field reference meta codes, i.e. `{dateX}`,\r\n     * `{valueY}`, etc.\r\n     *\r\n     * Any text formatting options, e.g. `[bold]` will be ignored.\r\n     *\r\n     * @param value Screen reader text template\r\n     */\n    set: function (value) {\n      this._itemReaderText = value;\n      this._itemReaderTextChanged = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns if number of data items in the series are beyond non-focusable\r\n   * count and should not be available for TAB-through.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Items focusable?\r\n   */\n\n  Series.prototype.itemsFocusable = function () {\n    return this.dataItems.length >= this.skipFocusThreshold ? false : true;\n  };\n\n  Object.defineProperty(Series.prototype, \"legendDataItem\", {\n    /**\r\n     * @return Data item\r\n     */\n    get: function () {\n      return this._legendDataItem;\n    },\n\n    /**\r\n     * Legend data item that corresponds to this series.\r\n     *\r\n     * @param value  Data item\r\n     */\n    set: function (value) {\n      this._legendDataItem = value;\n\n      this._legendDataItem.itemContainer.deepInvalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates corresponding legend data item with current values.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n  Series.prototype.updateLegendValue = function (dataItem, notRange) {\n    // if this series has legend item\n    if (this.legendDataItem) {\n      var legendSettings = this.legendSettings;\n      var legendDataItem = this.legendDataItem;\n      var label = legendDataItem.label;\n      var valueLabel = legendDataItem.valueLabel; // update legend\n\n      if (dataItem || notRange) {\n        if (valueLabel) {\n          if (legendSettings.itemValueText) {\n            valueLabel.text = legendSettings.itemValueText;\n          }\n\n          valueLabel.dataItem = dataItem;\n        }\n\n        if (label) {\n          if (legendSettings.itemLabelText) {\n            label.text = legendSettings.itemLabelText;\n          }\n\n          label.dataItem = dataItem;\n        }\n      } else {\n        if (label) {\n          // if itemLabelText is set, means we have to reset label even if labelText is not set\n          if (legendSettings.labelText || legendSettings.itemLabelText != undefined) {\n            label.text = legendSettings.labelText;\n          }\n\n          label.dataItem = this.dataItem;\n        }\n\n        if (valueLabel) {\n          if (legendSettings.valueText || legendSettings.itemValueText != undefined) {\n            valueLabel.text = legendSettings.valueText;\n          }\n\n          valueLabel.dataItem = this.dataItem;\n        }\n      }\n    }\n  };\n  /**\r\n   * Copies all properties from another instance of [[Series]].\r\n   *\r\n   * @param source  Source series\r\n   */\n\n\n  Series.prototype.copyFrom = function (source) {\n    this.bullets.copyFrom(source.bullets);\n    this.bulletsContainer.copyFrom(source.bulletsContainer);\n    this.calculatePercent = source.calculatePercent;\n    this.usePercentHack = source.usePercentHack;\n    this.simplifiedProcessing = source.simplifiedProcessing;\n\n    _super.prototype.copyFrom.call(this, source);\n  };\n  /**\r\n   * Displays a modal or console message with error, and halts any further\r\n   * processing of this element.\r\n   *\r\n   * @param e Error\r\n   */\n\n\n  Series.prototype.raiseCriticalError = function (e) {\n    if (this._chart && this._chart.modal) {\n      this._chart.modal.content = this._chart.adapter.apply(\"criticalError\", e).message;\n      this._chart.modal.closable = false;\n\n      if (!options.suppressErrors) {\n        this._chart.modal.open();\n      }\n\n      this._chart.disabled = true;\n    }\n\n    if (options.verbose) {\n      console.log(e);\n    }\n  };\n  /**\r\n   * Applies filters to the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Series.prototype.applyFilters = function () {\n    var _this = this;\n\n    _super.prototype.applyFilters.call(this);\n\n    this.bulletsContainer.filters.clear(); // copyFrom of a list copies, does not clone\n\n    $iter.each(this.filters.iterator(), function (filter) {\n      _this.bulletsContainer.filters.push(filter.clone());\n    });\n  };\n\n  Object.defineProperty(Series.prototype, \"heatRules\", {\n    /**\r\n     * A list of heat rules to apply to series' elements based on the value\r\n     * of the data item.\r\n     *\r\n     * Heat rules can be any \"numeric\" (including `Color`) property, and can also\r\n     * be applied to child objects of series, like columns, bullets, etc.\r\n     *\r\n     * E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * series.heatRules.push({\r\n     *  \"target\": series.columns.template,\r\n     *  \"property\": \"fill\",\r\n     *  \"min\": am4core.color(\"#F5DBCB\"),\r\n     *  \"max\": am4core.color(\"#ED7B84\"),\r\n     *  \"dataField\": \"valueY\"\r\n     *});\r\n     *```\r\n     * ```Javacript\r\n     * series.heatRules.push({\r\n     *  \"target\": series.columns.template,\r\n     *  \"property\": \"fill\",\r\n     *  \"min\": am4core.color(\"#F5DBCB\"),\r\n     *  \"max\": am4core.color(\"#ED7B84\"),\r\n     *  \"dataField\": \"valueY\"\r\n     *});\r\n     *```\r\n     *```JSON\r\n     *{\r\n     *  // ...\r\n     *  \"series\": [{\r\n     *    \"type\": \"ColumnSeries\",\r\n     *    \"heatRules\": [{\r\n     *      \"target\": \"columns.template\",\r\n     *      \"property\": \"fill\",\r\n     *      \"min\": \"#F5DBCB\",\r\n     *      \"max\": \"#ED7B84\",\r\n     *      \"dataField\": \"valueY\"\r\n     *    }]\r\n     *  }]\r\n     *}\r\n     *```\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/series/#Heat_maps} for more about heat rules\r\n     * @return  Heat rules\r\n     */\n    get: function () {\n      var _this = this;\n\n      if (!this._heatRules) {\n        this._heatRules = new List();\n\n        this._heatRules.events.on(\"inserted\", function (event) {\n          var heatRule = event.newValue;\n          var target = heatRule.target;\n\n          if (target) {\n            var dataField_1 = heatRule.dataField;\n\n            if (!$type.hasValue(dataField_1)) {\n              dataField_1 = \"value\";\n            }\n\n            var seriesDataItem_1 = _this.dataItem;\n            var property_1 = heatRule.property;\n            var minValue = $type.toNumber(heatRule.minValue);\n            var maxValue = $type.toNumber(heatRule.maxValue);\n\n            if (!$type.isNumber(minValue) && !$type.isNumber(maxValue)) {\n              _this.dataItem.events.on(\"calculatedvaluechanged\", function (event) {\n                if (event.property == dataField_1) {\n                  $iter.each(_this.dataItems.iterator(), function (dataItem) {\n                    var foundSprite = false;\n                    $array.each(dataItem.sprites, function (sprite) {\n                      if (sprite.clonedFrom == target) {\n                        var anySprite = sprite;\n                        anySprite[property_1] = anySprite[property_1];\n                        foundSprite = true;\n                      }\n                    });\n\n                    if (!foundSprite) {\n                      $array.each(dataItem.sprites, function (sprite) {\n                        if (sprite instanceof Container) {\n                          $iter.each(sprite.children.iterator(), function (child) {\n                            if (child.className == target.className) {\n                              var anyChild = child;\n                              anyChild[property_1] = anyChild[property_1];\n                            } // giveup here\n                            else if (child instanceof Container) {\n                                child.deepInvalidate();\n                              }\n                          });\n                        }\n                      });\n                    }\n                  });\n                }\n              });\n            }\n\n            _this.dataItems.template.events.on(\"workingvaluechanged\", function (event) {\n              if (event.property == dataField_1) {\n                var dataItem = event.target;\n                var foundSprite_1 = false;\n                $array.each(dataItem.sprites, function (sprite) {\n                  if (sprite.clonedFrom == target) {\n                    var anySprite = sprite;\n                    anySprite[property_1] = anySprite[property_1];\n                    foundSprite_1 = true;\n                  }\n                });\n\n                if (!foundSprite_1) {\n                  $array.each(dataItem.sprites, function (sprite) {\n                    if (sprite instanceof Container) {\n                      $iter.each(sprite.children.iterator(), function (child) {\n                        if (child.className == target.className) {\n                          var anyChild = child;\n                          anyChild[property_1] = anyChild[property_1];\n                        } // givup here\n                        else if (child instanceof Container) {\n                            child.deepInvalidate();\n                          }\n                      });\n                    }\n                  });\n                }\n              }\n            });\n\n            target.adapter.add(property_1, function (value, ruleTarget, property) {\n              var minValue = $type.toNumber(heatRule.minValue);\n              var maxValue = $type.toNumber(heatRule.maxValue);\n              var min = heatRule.min;\n              var max = heatRule.max;\n\n              if (ruleTarget instanceof Sprite) {\n                var anySprite = ruleTarget;\n                var propertyField = anySprite.propertyFields[property];\n\n                if (propertyField && ruleTarget.dataItem) {\n                  var dataContext = ruleTarget.dataItem.dataContext;\n\n                  if (dataContext && $type.hasValue(dataContext[propertyField])) {\n                    return value;\n                  }\n                }\n              }\n\n              var dataItem = ruleTarget.dataItem;\n\n              if (!$type.isNumber(minValue)) {\n                minValue = seriesDataItem_1.values[dataField_1].low;\n              }\n\n              if (!$type.isNumber(maxValue)) {\n                maxValue = seriesDataItem_1.values[dataField_1].high;\n              }\n\n              if (dataItem) {\n                var fieldValues = dataItem.values[dataField_1];\n\n                if (fieldValues) {\n                  var workingValue = dataItem.getActualWorkingValue(dataField_1);\n\n                  if ($type.hasValue(min) && $type.hasValue(max) && $type.isNumber(minValue) && $type.isNumber(maxValue) && $type.isNumber(workingValue)) {\n                    var percent = void 0;\n\n                    if (heatRule.logarithmic) {\n                      percent = (Math.log(workingValue) * Math.LOG10E - Math.log(minValue) * Math.LOG10E) / (Math.log(maxValue) * Math.LOG10E - Math.log(minValue) * Math.LOG10E);\n                    } else {\n                      percent = (workingValue - minValue) / (maxValue - minValue);\n                    }\n\n                    if ($type.isNumber(workingValue) && !$type.isNumber(percent)) {\n                      percent = 0.5;\n                    } // fixes problems if all values are the same\n\n\n                    if ($type.isNumber(min)) {\n                      return min + (max - min) * percent;\n                    } else if (min instanceof Color) {\n                      return new Color($colors.interpolate(min.rgb, max.rgb, percent));\n                    }\n                  }\n                }\n              }\n\n              return value;\n            });\n          }\n        });\n      }\n\n      return this._heatRules;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n  Series.prototype.processConfig = function (config) {\n    var heatRules;\n\n    if (config) {\n      // Set up bullets\n      if ($type.hasValue(config.bullets) && $type.isArray(config.bullets)) {\n        for (var i = 0, len = config.bullets.length; i < len; i++) {\n          var bullets = config.bullets[i];\n\n          if (!$type.hasValue(bullets.type)) {\n            bullets.type = \"Bullet\";\n          }\n        }\n      } // Let's take heatRules out of the config, so that we can process\n      // them later, when bullets are already there\n\n\n      if ($type.hasValue(config.heatRules) && $type.isArray(config.heatRules)) {\n        heatRules = config.heatRules;\n        delete config.heatRules;\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config); // Process heat rules again, when all other elements are ready\n\n\n    if (heatRules) {\n      for (var i = 0, len = heatRules.length; i < len; i++) {\n        var rule = heatRules[i]; // Resolve target\n\n        var target = this;\n\n        if ($type.hasValue(rule.target) && $type.isString(rule.target)) {\n          // Check if we can find this element by id\n          if (this.map.hasKey(rule.target)) {\n            target = this.map.getKey(rule.target);\n          } else {\n            var parts = rule.target.split(\".\");\n\n            for (var x = 0; x < parts.length; x++) {\n              if (target instanceof List) {\n                var listitem = target.getIndex($type.toNumber(parts[x]));\n\n                if (!listitem) {\n                  target = target[parts[x]];\n                } else {\n                  target = listitem;\n                }\n              } else {\n                var maybeIndex = parts[x].match(/^(.*)\\[([0-9]+)\\]/);\n\n                if (maybeIndex) {\n                  if (target[maybeIndex[1]] instanceof List) {\n                    target = target[maybeIndex[1]].getIndex($type.toNumber(maybeIndex[2]));\n                  } else {\n                    target = target[maybeIndex[1]][$type.toNumber(maybeIndex[2])];\n                  }\n                } else {\n                  target = target[parts[x]];\n                }\n              }\n            }\n          }\n        }\n\n        rule.target = target; // Resolve colors and percents\n\n        if ($type.hasValue(rule.min)) {\n          rule.min = this.maybeColorOrPercent(rule.min);\n        }\n\n        if ($type.hasValue(rule.max)) {\n          rule.max = this.maybeColorOrPercent(rule.max);\n        }\n      }\n\n      _super.prototype.processConfig.call(this, {\n        heatRules: heatRules\n      });\n    }\n  };\n  /**\r\n   * Returns visibility value\r\n   * @ignore\r\n   */\n\n  /*\r\n      protected getVisibility(): boolean {\r\n          let hidden = this.getPropertyValue(\"hidden\");\r\n          if (hidden) {\r\n              return false;\r\n          }\r\n          else {\r\n              return super.getVisibility();\r\n          }\r\n      }*/\n\n  /**\r\n   * This function is used to sort element's JSON config properties, so that\r\n   * some properties that absolutely need to be processed last, can be put at\r\n   * the end.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param a  Element 1\r\n   * @param b  Element 2\r\n   * @return Sorting number\r\n   */\n\n\n  Series.prototype.configOrder = function (a, b) {\n    if (a == b) {\n      return 0;\n    } // Must come last\n    else if (a == \"heatRules\") {\n        return 1;\n      } else if (b == \"heatRules\") {\n        return -1;\n      } else {\n        return _super.prototype.configOrder.call(this, a, b);\n      }\n  };\n  /**\r\n   * Sets `visibility` property:\r\n   *\r\n   * * `true` - visible\r\n   * * `false` - hidden\r\n   *\r\n   * @param value  true - visible, false - hidden\r\n   * @return Current visibility\r\n   */\n\n\n  Series.prototype.setVisibility = function (value) {\n    _super.prototype.setVisibility.call(this, value);\n\n    this.bulletsContainer.visible = value;\n  };\n\n  return Series;\n}(Component);\n\nexport { Series };\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Series\"] = Series;\nregistry.registeredClasses[\"SeriesDataItem\"] = SeriesDataItem;","map":{"version":3,"sources":["../../../../../src/.internal/charts/series/Series.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Functionality for any series-based elements, like Line Series (graphs),\r\n * Pie slice lists, etc.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentDataFields, IComponentAdapters, IComponentEvents } from \"../../core/Component\";\r\nimport { AxisDataItem } from \"../axes/Axis\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { List, ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { SerialChart } from \"../types/SerialChart\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { LegendDataItem, LegendSettings } from \"../Legend\";\r\nimport { options } from \"../../core/Options\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $colors from \"../../core/utils/Colors\";\r\n\r\nexport interface IHeatRule {\r\n\ttarget: Sprite;\r\n\tproperty: string;\r\n\tmin: any;\r\n\tmax: any;\r\n\tdataField?: string;\r\n\tminValue?: number;\r\n\tmaxValue?: number;\r\n\tlogarithmic?: boolean;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[Series]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SeriesDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Related item's width in pixels.\r\n\t *\r\n\t * This is passed to bullets so that we'd know if the bullet (LabelBullet)\r\n\t * fits to max width/height.\r\n\t *\r\n\t * At the moment this is only used by column series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic itemWidth: number;\r\n\r\n\t/**\r\n\t * Related item's height in pixels.\r\n\t *\r\n\t * This is passed to bullets so that we'd know if the bullet (LabelBullet)\r\n\t * fits to max width/height.\r\n\t *\r\n\t * At the moment this is only used by column series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic itemHeight: number;\r\n\r\n\t/**\r\n\t * A dictionary of data items bullets, where key is uid of a bullet template.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _bullets: Dictionary<string, Sprite>;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: Series;\r\n\r\n\t/**\r\n\t * A dictionary of data items bullets, where key is uid of a bullet template.\r\n\t */\r\n\tpublic get bullets(): Dictionary<string, Sprite> {\r\n\t\tif (!this._bullets) {\r\n\t\t\tthis._bullets = new Dictionary<string, Sprite>();\r\n\t\t\tthis._disposers.push(new DictionaryDisposer(this._bullets));\r\n\t\t}\r\n\t\treturn this._bullets;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SeriesDataItem\";\r\n\t\t//@todo Should we make `bullets` list disposable?\r\n\t\t//this._disposers.push(new DictionaryDisposer(this.bullets));\r\n\r\n\t\tthis.values.value = {};\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose() {\r\n\t\tthis.bullets.clear();\r\n\t\tsuper.dispose();\r\n\t}\r\n\r\n\t/**\r\n\t * data items's numeric value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values.value.value;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[Series]].\r\n */\r\nexport interface ISeriesDataFields extends IComponentDataFields {\r\n\t/**\r\n\t * Name of the field in data that holds numeric value.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds boolean flag if item should be hidden.\r\n\t */\r\n\thidden?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[Series]].\r\n */\r\nexport interface ISeriesProperties extends IComponentProperties {\r\n\r\n\t/**\r\n\t * Minimal distance between data points in pixels.\r\n\t *\r\n\t * If distance gets smaller than this, bullets are turned off to avoid\r\n\t * overlapping.\r\n\t *\r\n\t * `0` (zero) disables this behavior.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tminBulletDistance?: number;\r\n\r\n\t/**\r\n\t * Should series be hidden in chart's legend?\r\n\t */\r\n\thiddenInLegend?: boolean;\r\n\r\n\t/**\r\n\t * Series' name.\r\n\t */\r\n\tname?: string;\r\n}\r\n\r\n/**\r\n * Defines events for [[Series]].\r\n */\r\nexport interface ISeriesEvents extends IComponentEvents {\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tselectionextremeschanged: {};\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\textremeschanged: {};\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tdataitemchanged: {\r\n\t\tdataItem: DataItem\r\n\t};\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Series]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISeriesAdapters extends IComponentAdapters, ISeriesProperties {\r\n\t/**\r\n\t * Applied to the name used by screen readers.\r\n\t */\r\n\titemReaderText: string\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines base class for any kind of serial data.\r\n *\r\n * @see {@link ISeriesEvents} for a list of available Events\r\n * @see {@link ISeriesAdapters} for a list of available Adapters\r\n * @todo Separate axis-related stuff to some other class so that MapSeries would not have unrelated stuff\r\n */\r\nexport class Series extends Component {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ISeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISeriesEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used for the series.\r\n\t */\r\n\tpublic _dataItem: SeriesDataItem;\r\n\r\n\t/**\r\n\t * A reference to the legend data item related to this series.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Should this series excluded from the axis scale calculations?\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tprotected _ignoreMinMax: boolean = false;\r\n\r\n\t/**\r\n\t * Container series' elements are placed in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic mainContainer: Container;\r\n\r\n\t/**\r\n\t * Should series' bullets?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tprotected _showBullets: boolean = true;\r\n\r\n\t/**\r\n\t * List of series' bullets.\r\n\t */\r\n\tprotected _bullets: ListTemplate<Sprite>;\r\n\r\n\t/**\r\n\t * Container bullets are placed in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic bulletsContainer: Container;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: SerialChart;\r\n\r\n\t/**\r\n\t * A container axis ranges are placed in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rangesContainer: Container;\r\n\r\n\t/**\r\n\t * A list of axis ranges for this series.\r\n\t */\r\n\tpublic axisRanges: List<AxisDataItem>;\r\n\r\n\t/**\r\n\t * Settings for the appearance of the related legend items.\r\n\t */\r\n\tpublic legendSettings: LegendSettings = new LegendSettings();\r\n\r\n\t/**\r\n\t * Lowest overal values by type.\r\n\t */\r\n\tprotected _tmin = new Dictionary<string, number>();\r\n\r\n\t/**\r\n\t * Highest overal values by type.\r\n\t */\r\n\tprotected _tmax = new Dictionary<string, number>();\r\n\r\n\t/**\r\n\t * Lowest values in current selection by type.\r\n\t */\r\n\tprotected _smin = new Dictionary<string, number>();\r\n\r\n\t/**\r\n\t * Highest values in current selection by type.\r\n\t */\r\n\tprotected _smax = new Dictionary<string, number>();\r\n\r\n\t/**\r\n\t * [dataItemsByAxis description]\r\n\t *\r\n\t * Both by category and date.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataItemsByAxis = new Dictionary<string, Dictionary<string, this[\"_dataItem\"]>>();\r\n\r\n\t/**\r\n\t * Normally series items are focusable using keyboard, so that people can\r\n\t * select them with a TAB key. However, if there are a lot of data points on\r\n\t * screen it might be long and useless to tab through all o fthem.\r\n\t *\r\n\t * This is where `skipFocusThreshold` comes in. If there are more items than\r\n\t * the value set here, we will not make those focusable and rather let screen\r\n\t * reader software rely on the series summary, or authors provide alternative\r\n\t * detailed information display, such as HTML table.\r\n\t *\r\n\t * Different series might have different threshold defaults.\r\n\t */\r\n\tpublic skipFocusThreshold: number = 20;\r\n\r\n\t/**\r\n\t * Holds a default screen reader text for series data items. It will be used\r\n\t * to generate information for screen readers. If not set, the series will\r\n\t * try to deduce reader text from `tooltipText` or `tooltipHTML`. If those\r\n\t * are not set either, a default reader text will be used which is relevant\r\n\t * for each Series type.\r\n\t */\r\n\tprotected _itemReaderText: string;\r\n\r\n\r\n\t/**\r\n\t * Used to indicate if `itemReaderText` was changed \"from the outside\".\r\n\t */\r\n\tprotected _itemReaderTextChanged: boolean = false;\r\n\r\n\t/*\r\n\t\tpublic heatMapfillRule: (fill:Color, column: Sprite) => any = function(fill:Color, sprite: Sprite) {\r\n\t\t\tlet dataItem: SeriesDataItem = <SeriesDataItem>sprite.dataItem;\r\n\r\n\t\t\tif (dataItem && dataItem.value) {\r\n\t\t\t\tlet series = dataItem.component;\r\n\t\t\t\tif($type.hasValue(series.minColor) &&  $type.hasValue(series.maxColor) && $type.isNumber(series.minValue) && $type.isNumber(series.maxValue)){\r\n\t\t\t\t\tlet percent = (dataItem.values.value.workingValue - series.minValue) / (series.maxValue - series.minValue);\r\n\t\t\t\t\treturn new Color($colors.interpolate(series.minColor.rgb, series.maxColor.rgb, percent));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t*/\r\n\r\n\tprotected _heatRules: List<IHeatRule>;\r\n\r\n\t/**\r\n\t * Most of the series use absolute values. However sometimes various\r\n\t * calculated percent values are need, e.g. item's percent representation\r\n\t * across all values in series, etc.\r\n\t *\r\n\t * It's a resource-intensive operation, so it is disabled by default.\r\n\t *\r\n\t * If you need percents to be calculated, e.g. for showing them in tooltips,\r\n\t * or creating 100% stacks, this setting needs to be set to `true`.\r\n\t *\r\n\t * NOTE: `PieChart`, which relies on slice percentages, has this\r\n\t * automatically set to `true`.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tpublic calculatePercent: boolean = false;\r\n\r\n\t/**\r\n\t * When `calculatePercent` is enabled and data item's percent value is\r\n\t * calculated, last item's real value is used instead of its working value.\r\n\t *\r\n\t * This is done for the animations when last item in series (e.g. slice in\r\n\t * a `PieSeries`) is hidden or shown. (if we would use real value, the\r\n\t * calculated percent would always be 100%).\r\n\t *\r\n\t * Sometimes there is a need (e.g. for drill-down Sunburst) to disable this\r\n\t * hack by setting `usePercentHack` to `false`.\r\n\t *\r\n\t * @since 4.9.13\r\n\t * @default true\r\n\t */\r\n\tpublic usePercentHack: boolean = true;\r\n\r\n\t/**\r\n\t * Specifies if series should be automatically disposed when removing from\r\n\t * chart's `series` list.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tpublic autoDispose: boolean = true;\r\n\r\n\t/**\r\n\t * When chart/series' data is processed, all kinds of derivative values are\r\n\t * calculated. E.g. sum, min, max, change, etc. This is a potentially\r\n\t * time-consuming operation, especially prominent in data-heavy charts.\r\n\t *\r\n\t * If your chart does not need those values, and you have a lot of data,\r\n\t * setting this to `true` might give a dramatic increase in initial chart\r\n\t * load speed.\r\n\t *\r\n\t * Please note, regular column and line series usage scenarios do not\r\n\t * require derivative values. Those come into play only when you do advanced\r\n\t * functionality like coloring segments of charts in different colors\r\n\t * depending on change between open and close values, have stacked series, or\r\n\t * display any of the derived values, like percent, in tooltips or bullets.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tpublic simplifiedProcessing: boolean = false;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tif (this.constructor === Series) {\r\n\t\t\tthrow new Error(\"'Series' cannot be instantiated directly. Please use a specific series type.\");\r\n\t\t}\r\n\r\n\t\tthis.className = \"Series\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.shouldClone = false;\r\n\t\tthis.setPropertyValue(\"hidden\", false);\r\n\r\n\t\tthis.axisRanges = new List<AxisDataItem>();\r\n\t\tthis.axisRanges.events.on(\"inserted\", this.processAxisRange, this, false);\r\n\r\n\t\tthis.minBulletDistance = 0; // otherwise we'll have a lot of cases when people won't see bullets and think it's a bug\r\n\t\tthis.mainContainer = this.createChild(Container);\r\n\t\tthis.mainContainer.shouldClone = false;\r\n\t\tthis.mainContainer.mask = this.createChild(Sprite);\r\n\r\n\t\tthis._disposers.push(this.mainContainer);\r\n\r\n\t\t// all bullets should go on top of lines/fills. So we add a separate container for bullets and later set it's parent to chart.bulletsContainer\r\n\t\tlet bulletsContainer = this.mainContainer.createChild(Container);\r\n\t\tthis._shouldBeReady.push(bulletsContainer);\r\n\t\tbulletsContainer.shouldClone = false;\r\n\t\tbulletsContainer.layout = \"none\";\r\n\t\tbulletsContainer.virtualParent = this;\r\n\t\tthis._disposers.push(bulletsContainer);\r\n\t\tthis.bulletsContainer = bulletsContainer;\r\n\r\n\t\tthis.tooltip = new Tooltip();\r\n\t\tthis.tooltip.virtualParent = this;\r\n\t\tthis._disposers.push(this.tooltip);\r\n\r\n\t\tthis.hiddenState.transitionEasing = $ease.cubicIn;\r\n\r\n\t\t// this data item holds sums, averages, etc\r\n\t\tthis.dataItem = this.createDataItem();\r\n\t\tthis._disposers.push(this.dataItem);\r\n\t\tthis.dataItem.component = this;\r\n\r\n\t\t// Apply accessibility\r\n\t\tthis.role = \"group\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * We need this here so that class names can be applied to bullets container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic applyTheme(): void {\r\n\t\tsuper.applyTheme();\r\n\t\tif (options.autoSetClassName && this.bulletsContainer) {\r\n\t\t\tthis.bulletsContainer.className = this.className + \"-bullets\";\r\n\t\t\tthis.bulletsContainer.setClassName();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new SeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Chart series is used on.\r\n\t *\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: this[\"_chart\"]) {\r\n\t\tthis._chart = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): this[\"_chart\"] {\r\n\t\treturn this._chart;\r\n\t}\r\n\r\n\t/**\r\n\t * Positions bullet.\r\n\t *\r\n\t * @param bullet  Sprite\r\n\t */\r\n\tpublic positionBullet(bullet: Sprite): void {\r\n\r\n\t\t// Placeholder method for extending classes to override.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates newly created bullet after it has been instert into the list.\r\n\t *\r\n\t * @param event  List event\r\n\t * @todo investigate why itemReaderText is undefined\r\n\t */\r\n\tprotected processBullet(event: IListEvents<Sprite>[\"inserted\"]) {\r\n\t\tlet bullet: Sprite = event.newValue;\r\n\t\tbullet.isTemplate = true;\r\n\t\t// Add accessibility options to bullet\r\n\t\t// If there are relatively few bullets, make them focusable\r\n\t\tthis.events.once(\"datavalidated\", (ev) => {\r\n\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\tbullet.focusable = true;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * removes bullets\r\n\t *\r\n\t * @param event  List event\r\n\t */\r\n\tprotected removeBullet(event: IListEvents<Sprite>[\"removed\"]) {\r\n\t\tlet bullet: Sprite = event.oldValue;\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet eachBullet = dataItem.bullets.getKey(bullet.uid);\r\n\t\t\tif (eachBullet) {\r\n\t\t\t\teachBullet.dispose();\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.processValues(false);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns first value for the specific key in the series.\r\n\t *\r\n\t * @param key  Key\r\n\t * @return Value\r\n\t * @todo Description\r\n\t * @todo Convert to propert object property iterator\r\n\t */\r\n\tprotected getFirstValue(key: string, startIndex: number): number {\r\n\t\t// find first\r\n\t\t/*\r\n\t\treturn $iter.findMap(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tfor (let key in dataItem.values) {\r\n\t\t\t\tif ($object.hasKey(dataItem.values, key)) {\r\n\t\t\t\t\tlet value: number = dataItem.values[key].workingValue;\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t});*/\r\n\r\n\t\t//if (startIndex > 0 && startIndex < this.dataItems.length - 1) {\r\n\t\t//startIndex++;\r\n\t\t//}\r\n\t\tfor (let i = startIndex; i >= 0; i--) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet value: number = dataItem.getActualWorkingValue(key);\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns first value for the specific key in the series.\r\n\t *\r\n\t * @param key  Key\r\n\t * @return Value\r\n\t * @todo Description\r\n\t * @todo Convert to propert object property iterator\r\n\t */\r\n\tprotected getAbsoluteFirstValue(key: string): number {\r\n\t\tfor (let i = 0; i < this.dataItems.length; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet value: number = dataItem.values[key].value;\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * [rangeChangeUpdate description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected rangeChangeUpdate() {\r\n\t\tsuper.rangeChangeUpdate();\r\n\t\tthis.processValues(true);\r\n\t}\r\n\r\n\t/**\r\n\t * [processValues description]\r\n\t *\r\n\t * @todo Description\r\n\t * @todo Convert to propert object property iterator\r\n\t * @param dataItems [description]\r\n\t */\r\n\tprotected processValues(working: boolean) {\r\n\t\tif (!this.simplifiedProcessing) {\r\n\t\t\tlet dataItems = this.dataItems;\r\n\r\n\t\t\tlet count: { [index: string]: number } = {};\r\n\t\t\tlet sum: { [index: string]: number } = {};\r\n\t\t\tlet absoluteSum: { [index: string]: number } = {};\r\n\t\t\tlet low: { [index: string]: number } = {};\r\n\t\t\tlet high: { [index: string]: number } = {};\r\n\t\t\tlet open: { [index: string]: number } = {};\r\n\t\t\tlet close: { [index: string]: number } = {};\r\n\t\t\tlet previous: { [index: string]: number } = {};\r\n\t\t\tlet first: { [index: string]: number } = {};\r\n\t\t\tlet absoluteFirst: { [index: string]: number } = {};\r\n\r\n\t\t\t//let duration: number = 0; // todo: check if series uses selection.change or selection.change.percent and set duration to interpolationduration\r\n\r\n\t\t\tlet startIndex: number = $math.max(0, this.startIndex);\r\n\t\t\tstartIndex = $math.min(startIndex, this.dataItems.length);\r\n\r\n\t\t\tlet endIndex: number = $math.min(this.endIndex, this.dataItems.length);\r\n\r\n\t\t\tif (!$type.isNumber(startIndex)) {\r\n\t\t\t\tstartIndex = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(endIndex)) {\r\n\t\t\t\tendIndex = this.dataItems.length;\r\n\t\t\t}\r\n\r\n\t\t\tif (startIndex > 0) {\r\n\t\t\t\tlet dataItem = dataItems.getIndex(startIndex - 1);\r\n\r\n\t\t\t\t$object.each(dataItem.values, (key, values) => {\r\n\t\t\t\t\tlet value: number = dataItem.getActualWorkingValue(key);\r\n\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t// save previous\r\n\t\t\t\t\t\tprevious[key] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\t\t$object.each(dataItem.values, (key, values) => {\r\n\t\t\t\t\tlet value: number = dataItem.getActualWorkingValue(key);\r\n\r\n\t\t\t\t\t//if (i >= startIndex && i <= endIndex) { // do not add to count, sum etc if it is not within start/end index\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t\t\t\t// count values\r\n\t\t\t\t\t\tif (!$type.isNumber(count[key])) {\r\n\t\t\t\t\t\t\tcount[key] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcount[key]++;\r\n\r\n\t\t\t\t\t\t// sum values\r\n\t\t\t\t\t\tif (!$type.isNumber(sum[key])) {\r\n\t\t\t\t\t\t\tsum[key] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsum[key] += value;\r\n\r\n\t\t\t\t\t\t// absolute sum values\r\n\t\t\t\t\t\tif (!$type.isNumber(absoluteSum[key])) {\r\n\t\t\t\t\t\t\tabsoluteSum[key] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tabsoluteSum[key] += Math.abs(value);\r\n\r\n\t\t\t\t\t\t// open\r\n\t\t\t\t\t\tif (!$type.isNumber(open[key])) {\r\n\t\t\t\t\t\t\topen[key] = value;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// close\r\n\t\t\t\t\t\tclose[key] = value;\r\n\r\n\t\t\t\t\t\t// low\r\n\t\t\t\t\t\tif (!$type.isNumber(low[key])) {\r\n\t\t\t\t\t\t\tlow[key] = value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (low[key] > value) {\r\n\t\t\t\t\t\t\t\tlow[key] = value;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// high\r\n\t\t\t\t\t\tif (!$type.isNumber(high[key])) {\r\n\t\t\t\t\t\t\thigh[key] = value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (high[key] < value) {\r\n\t\t\t\t\t\t\t\thigh[key] = value;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!$type.isNumber(first[key])) {\r\n\t\t\t\t\t\t\tfirst[key] = this.getFirstValue(key, startIndex);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!$type.isNumber(absoluteFirst[key])) {\r\n\t\t\t\t\t\t\tabsoluteFirst[key] = this.getAbsoluteFirstValue(key);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// change\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, value - first[key], \"change\");\r\n\t\t\t\t\t\t// change from start percent\r\n\t\t\t\t\t\t// will fail if first value is 0\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, (value - first[key]) / first[key] * 100, \"changePercent\");\r\n\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, (value - absoluteFirst[key]), \"startChange\");\r\n\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, (value - absoluteFirst[key]) / absoluteFirst[key] * 100, \"startChangePercent\");\r\n\r\n\t\t\t\t\t\t// previous change\r\n\t\t\t\t\t\tlet prevValue: number = previous[key];\r\n\t\t\t\t\t\tif (!$type.isNumber(prevValue)) {\r\n\t\t\t\t\t\t\tprevValue = value;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, value - prevValue, \"previousChange\");\r\n\t\t\t\t\t\t// previous change percent\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, (value - prevValue) / prevValue * 100, \"previousChangePercent\");\r\n\r\n\t\t\t\t\t\t// save previous\r\n\t\t\t\t\t\tprevious[key] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this.calculatePercent) {\r\n\t\t\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\t\t\t$object.each(dataItem.values, (key) => {\r\n\t\t\t\t\t\tlet ksum: number = absoluteSum[key];\r\n\r\n\t\t\t\t\t\tlet value: number = dataItem.getActualWorkingValue(key);\r\n\r\n\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\tif (ksum > 0) {\r\n\t\t\t\t\t\t\t\tif (this.usePercentHack) {\r\n\t\t\t\t\t\t\t\t\t// this hack is made in order to make it possible to animate single slice to 0\r\n\t\t\t\t\t\t\t\t\t// if there is only one slice left, percent value is always 100%, so it won't animate\r\n\t\t\t\t\t\t\t\t\t// so we use real value of a slice instead of current value\r\n\t\t\t\t\t\t\t\t\tif (value == ksum) {\r\n\t\t\t\t\t\t\t\t\t\tksum = dataItem.values[key].value;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet percent = value / ksum * 100;\r\n\r\n\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(key, percent, \"percent\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(key, 0, \"percent\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// calculate one before first (cant do that in cycle, as we don't know open yet\r\n\t\t\t// when drawing line chart we should draw line to the invisible data point to the left, otherwise the line will always look like it starts from the selected point\r\n\t\t\t// so we do startIndex - 1\r\n\t\t\tif (startIndex > 0) {\r\n\t\t\t\tlet zeroItem: this[\"_dataItem\"] = dataItems.getIndex(startIndex - 1);\r\n\r\n\t\t\t\t$object.each(zeroItem.values, (key) => {\r\n\t\t\t\t\tlet value = zeroItem.values[key].value;\r\n\t\t\t\t\t// change\r\n\t\t\t\t\tzeroItem.setCalculatedValue(key, value - open[key], \"change\");\r\n\t\t\t\t\t// change percent\r\n\t\t\t\t\tzeroItem.setCalculatedValue(key, (value - open[key]) / open[key] * 100, \"changePercent\");\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t// we save various data like sum, average to dataPoint of the series\r\n\t\t\tlet dataItem: DataItem = this.dataItem;\r\n\t\t\t$object.each(dataItem.values, (key) => {\r\n\t\t\t\tdataItem.setCalculatedValue(key, sum[key], \"sum\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, absoluteSum[key], \"absoluteSum\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, sum[key] / count[key], \"average\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, open[key], \"open\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, close[key], \"close\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, low[key], \"low\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, high[key], \"high\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, count[key], \"count\");\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tif ($utils.isIE()) {\r\n\t\t\tthis.filters.clear();\r\n\t\t}\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t//axisRange.contents.disposeChildren(); // not good for columns, as they are reused\r\n\t\t\t//\t\t\taxisRange.appendChildren();\r\n\t\t\taxisRange.validate();\r\n\t\t});\r\n\r\n\t\tsuper.validate();\r\n\t\tlet bulletsContainer = this.bulletsContainer;\r\n\t\tbulletsContainer.fill = this.fill;\r\n\t\tbulletsContainer.stroke = this.stroke;\r\n\t\tbulletsContainer.x = this.pixelX;\r\n\t\tbulletsContainer.y = this.pixelY;\r\n\r\n\t\tif (this.bulletsContainer.children.length > 0) {\r\n\t\t\tif (this._showBullets) {\r\n\r\n\r\n\t\t\t\tfor (let i = 0; i < this.startIndex; i++) {\r\n\t\t\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tdataItem.bullets.each((key, bullet) => {\r\n\t\t\t\t\t\t\tbullet.__disabled = true;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (let i = this.dataItems.length - 1; i > this.endIndex; i--) {\r\n\t\t\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tdataItem.bullets.each((key, bullet) => {\r\n\t\t\t\t\t\t\tbullet.__disabled = true;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.bulletsContainer.children.each((bullet) => {\r\n\t\t\t\t\tbullet.__disabled = true;\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.updateTooltipBounds();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateTooltipBounds() {\r\n\t\tif (this.topParent) {\r\n\t\t\tlet x = 0;\r\n\t\t\tlet y = 0;\r\n\t\t\tlet w = this.topParent.maxWidth;\r\n\t\t\tlet h = this.topParent.maxHeight;\r\n\t\t\tlet rect = { x: x, y: y, width: w, height: h };\r\n\r\n\t\t\tthis.tooltip.setBounds(rect);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected shouldCreateBullet(dataItem: this[\"_dataItem\"], bulletTemplate: Sprite): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tif (this._showBullets) {\r\n\t\t\tif (!this.isHidden) {\r\n\t\t\t\tthis.bulletsContainer.visible = true;\r\n\t\t\t}\r\n\t\t\tthis.bullets.each((bulletTemplate) => {\r\n\t\t\t\t// always better to use the same, this helps to avoid redrawing\r\n\t\t\t\tlet bullet: Sprite = <Sprite>dataItem.bullets.getKey(bulletTemplate.uid);\r\n\r\n\t\t\t\tif (this.shouldCreateBullet(dataItem, bulletTemplate)) {\r\n\t\t\t\t\tif (!bullet) {\r\n\r\n\t\t\t\t\t\tlet disabledField = bulletTemplate.propertyFields.disabled;\r\n\t\t\t\t\t\tlet dataContext = <any>dataItem.dataContext;\r\n\t\t\t\t\t\tif (disabledField && dataContext && dataContext[disabledField] === false) {\r\n\t\t\t\t\t\t\tbulletTemplate.applyOnClones = false;\r\n\t\t\t\t\t\t\tbulletTemplate.disabled = false;\r\n\t\t\t\t\t\t\tbullet = bulletTemplate.clone();\r\n\t\t\t\t\t\t\tbulletTemplate.disabled = true;\r\n\t\t\t\t\t\t\tbulletTemplate.applyOnClones = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tbullet = bulletTemplate.clone();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbullet.shouldClone = false;\r\n\t\t\t\t\t\tdataItem.addSprite(bullet);\r\n\r\n\t\t\t\t\t\tif (!this.visible || this.isHiding) {\r\n\t\t\t\t\t\t\tbullet.hide(0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet currentDataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\t\t\t\tif (currentDataItem != dataItem) {\r\n\t\t\t\t\t\t// set to undefined in order not to reuse\r\n\t\t\t\t\t\tif (currentDataItem) {\r\n\t\t\t\t\t\t\tcurrentDataItem.bullets.setKey(bulletTemplate.uid, undefined);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet readerText = this.itemReaderText;\r\n\r\n\t\t\t\t\t\tif (bullet instanceof Bullet) {\r\n\t\t\t\t\t\t\tif (!readerText) {\r\n\t\t\t\t\t\t\t\treaderText = (\"{\" + bullet.xField + \"}: {\" + bullet.yField + \"}\");\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (bullet.isDynamic) {\r\n\t\t\t\t\t\t\t\tdataItem.events.on(\"workingvaluechanged\", bullet.deepInvalidate, bullet, false);\r\n\t\t\t\t\t\t\t\t//dataItem.events.on(\"calculatedvaluechanged\", bullet.deepInvalidate, bullet, false);\r\n\t\t\t\t\t\t\t\tthis.dataItem.events.on(\"workingvaluechanged\", bullet.deepInvalidate, bullet, false);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbullet.deepInvalidate();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Add accessibility to bullet\r\n\t\t\t\t\t\tif (bullet.focusable) {\r\n\t\t\t\t\t\t\tbullet.events.on(\"focus\", (ev) => {\r\n\t\t\t\t\t\t\t\tbullet.readerTitle = this.populateString(readerText, bullet.dataItem);\r\n\t\t\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\t\t\tbullet.events.on(\"blur\", (ev) => {\r\n\t\t\t\t\t\t\t\tbullet.readerTitle = \"\";\r\n\t\t\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (bullet.hoverable) {\r\n\t\t\t\t\t\t\tbullet.events.on(\"over\", (ev) => {\r\n\t\t\t\t\t\t\t\tbullet.readerTitle = this.populateString(readerText, bullet.dataItem);\r\n\t\t\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\t\t\tbullet.events.on(\"out\", (ev) => {\r\n\t\t\t\t\t\t\t\tbullet.readerTitle = \"\";\r\n\t\t\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbullet.parent = this.bulletsContainer;\r\n\t\t\t\t\tdataItem.bullets.setKey(bulletTemplate.uid, bullet);\r\n\r\n\t\t\t\t\t// pass max w/h so we'd know if we should show/hide somethings\r\n\t\t\t\t\tbullet.maxWidth = dataItem.itemWidth;\r\n\t\t\t\t\tbullet.maxHeight = dataItem.itemHeight;\r\n\t\t\t\t\tbullet.__disabled = false;\r\n\r\n\t\t\t\t\tthis.positionBullet(bullet);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (bullet) {\r\n\t\t\t\t\t\tbullet.__disabled = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.bulletsContainer.visible = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (!this.dataRangeInvalid) {\r\n\t\t\tthis.invalidateProcessedData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Should this series excluded from the axis scale calculations?\r\n\t *\r\n\t * @default false\r\n\t * @param value  Exclude from calculations?\r\n\t */\r\n\tpublic set ignoreMinMax(value: boolean) {\r\n\t\tthis._ignoreMinMax = value;\r\n\t\tthis.invalidateDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Exclude from calculations?\r\n\t */\r\n\tpublic get ignoreMinMax(): boolean {\r\n\t\treturn this._ignoreMinMax;\r\n\t}\r\n\r\n\t/**\r\n\t * Create a mask for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createMask(): void {\r\n\r\n\t\t// A placeholder method for extending classes to override.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Process axis range after it has been added to the list.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected processAxisRange(event: IListEvents<AxisDataItem>[\"inserted\"]): void {\r\n\t\t// create container if not existing\r\n\t\tif (!this.rangesContainer) {\r\n\t\t\tthis.rangesContainer = this.createChild(Container);\r\n\t\t\tthis.rangesContainer.shouldClone = false;\r\n\t\t\tthis.rangesContainer.isMeasured = false;\r\n\t\t}\r\n\r\n\t\tlet axisRange: AxisDataItem = event.newValue;\r\n\t\tif (axisRange) {\r\n\t\t\taxisRange.contents.parent = this.rangesContainer;\r\n\t\t\taxisRange.isRange = true;\r\n\t\t\taxisRange.events.on(\"valuechanged\", this.invalidateDataItems, this, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getAxisField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param axis  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getAxisField(axis: Axis): string {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the tooltip at specific position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param xPosition  X\r\n\t * @param yPosition  Y\r\n\t */\r\n\tpublic showTooltipAtPosition(xPosition: number, yPosition: number): void {\r\n\r\n\t\t// Placeholder method for extending classes to override.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Minimal distance between data points in pixels.\r\n\t *\r\n\t * If distance gets smaller than this, bullets are turned off to avoid\r\n\t * overlapping.\r\n\t *\r\n\t * `0` (zero) disables this behavior.\r\n\t *\r\n\t * IMPORTANT: This setting will work only when Series' base axis\r\n\t * is [[CategoryAxis]] or [[DateAxis]]. If base axis is [[ValueAxis]] the\r\n\t * setting will be ignored, because it would be a huge overhead to measure\r\n\t * distance between each and every bullet.\r\n\t *\r\n\t * @default 0\r\n\t * @param value  Distance (px)\r\n\t */\r\n\tpublic set minBulletDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"minBulletDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Distance (px)\r\n\t */\r\n\tpublic get minBulletDistance(): number {\r\n\t\treturn this.getPropertyValue(\"minBulletDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of bullets that will be added to each and every items in the\r\n\t * series.\r\n\t *\r\n\t * You can push any object that is a descendant of a [[Sprite]] here. All\r\n\t * items added to this list will be copied and used as a bullet on all data\r\n\t * items, including their properties, events, etc.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/bullets/} for more info about the concept of Bullets\r\n\t * @return List of bullets.\r\n\t */\r\n\tpublic get bullets(): ListTemplate<Sprite> {\r\n\t\tif (!this._bullets) {\r\n\t\t\tthis._bullets = new ListTemplate<Sprite>(new Bullet());\r\n\t\t\tthis._bullets.template.virtualParent = this;\r\n\t\t\tthis._bullets.events.on(\"inserted\", this.processBullet, this, false);\r\n\t\t\tthis._bullets.events.on(\"removed\", this.removeBullet, this, false);\r\n\r\n\t\t\tthis._disposers.push(new ListDisposer(this._bullets));\r\n\t\t\tthis._disposers.push(this._bullets.template);\r\n\t\t}\r\n\t\treturn this._bullets;\r\n\t}\r\n\r\n\t/**\r\n\t * Binds related legend data item's visual settings to this series' visual\r\n\t * settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Should the series be hidden in legend?\r\n\t *\r\n\t * @param value Hidden in legend?\r\n\t */\r\n\tpublic set hiddenInLegend(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"hiddenInLegend\", value)) {\r\n\t\t\tif (this.chart) {\r\n\t\t\t\tthis.chart.feedLegend();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hidden in legend?\r\n\t */\r\n\tpublic get hiddenInLegend(): boolean {\r\n\t\treturn this.getPropertyValue(\"hiddenInLegend\");\r\n\t}\r\n\r\n\t/**\r\n\t * Series' name.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setPropertyValue(\"name\", value);\r\n\r\n\t\tlet legendDataItem = this.legendDataItem;\r\n\t\tif (legendDataItem) {\r\n\t\t\tlegendDataItem.component.invalidate();\r\n\t\t\tlegendDataItem.component.invalidateRawData();\r\n\t\t}\r\n\r\n\t\tthis.readerTitle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.getPropertyValue(\"name\");\r\n\t}\r\n\r\n\t/**\r\n\t * Screen reader text to be applied to each individual data item, such\r\n\t * as bullets, columns or slices.\r\n\t *\r\n\t * The template can contain field reference meta codes, i.e. `{dateX}`,\r\n\t * `{valueY}`, etc.\r\n\t *\r\n\t * Any text formatting options, e.g. `[bold]` will be ignored.\r\n\t *\r\n\t * @param value Screen reader text template\r\n\t */\r\n\tpublic set itemReaderText(value: string) {\r\n\t\tthis._itemReaderText = value;\r\n\t\tthis._itemReaderTextChanged = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Screen reader text template\r\n\t */\r\n\tpublic get itemReaderText(): string {\r\n\r\n\t\t// Get explicitly set reader text\r\n\t\tlet readerText = this._itemReaderText;\r\n\r\n\t\t// Not set? Let's try something else\r\n\t\tif (!readerText) {\r\n\r\n\t\t\t// Tooltip text?\r\n\t\t\tif (this.tooltipText) {\r\n\t\t\t\treaderText = $utils.plainText(this.tooltipText);\r\n\t\t\t}\r\n\t\t\telse if (this.tooltipHTML) {\r\n\t\t\t\treaderText = $utils.plainText(this.tooltipHTML);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn readerText;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"itemReaderText\", readerText);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if number of data items in the series are beyond non-focusable\r\n\t * count and should not be available for TAB-through.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Items focusable?\r\n\t */\r\n\tpublic itemsFocusable(): boolean {\r\n\t\treturn this.dataItems.length >= this.skipFocusThreshold ? false : true;\r\n\t}\r\n\r\n\t/**\r\n\t * Legend data item that corresponds to this series.\r\n\t *\r\n\t * @param value  Data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tthis._legendDataItem.itemContainer.deepInvalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates corresponding legend data item with current values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"], notRange?: boolean) {\r\n\t\t// if this series has legend item\r\n\t\tif (this.legendDataItem) {\r\n\r\n\t\t\tlet legendSettings: LegendSettings = this.legendSettings;\r\n\t\t\tlet legendDataItem = this.legendDataItem;\r\n\t\t\tlet label: Label = legendDataItem.label;\r\n\t\t\tlet valueLabel: Label = legendDataItem.valueLabel;\r\n\r\n\t\t\t// update legend\r\n\t\t\tif (dataItem || notRange) {\r\n\t\t\t\tif (valueLabel) {\r\n\t\t\t\t\tif (legendSettings.itemValueText) {\r\n\t\t\t\t\t\tvalueLabel.text = legendSettings.itemValueText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvalueLabel.dataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t\tif (label) {\r\n\t\t\t\t\tif (legendSettings.itemLabelText) {\r\n\t\t\t\t\t\tlabel.text = legendSettings.itemLabelText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlabel.dataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (label) {\r\n\t\t\t\t\t// if itemLabelText is set, means we have to reset label even if labelText is not set\r\n\t\t\t\t\tif (legendSettings.labelText || legendSettings.itemLabelText != undefined) {\r\n\t\t\t\t\t\tlabel.text = legendSettings.labelText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlabel.dataItem = this.dataItem;\r\n\t\t\t\t}\r\n\t\t\t\tif (valueLabel) {\r\n\t\t\t\t\tif (legendSettings.valueText || legendSettings.itemValueText != undefined) {\r\n\t\t\t\t\t\tvalueLabel.text = legendSettings.valueText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvalueLabel.dataItem = this.dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.bullets.copyFrom(source.bullets);\r\n\t\tthis.bulletsContainer.copyFrom(source.bulletsContainer);\r\n\t\tthis.calculatePercent = source.calculatePercent;\r\n\t\tthis.usePercentHack = source.usePercentHack;\r\n\t\tthis.simplifiedProcessing = source.simplifiedProcessing;\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n\t/**\r\n\t * Displays a modal or console message with error, and halts any further\r\n\t * processing of this element.\r\n\t *\r\n\t * @param e Error\r\n\t */\r\n\tpublic raiseCriticalError(e: Error) {\r\n\t\tif (this._chart && this._chart.modal) {\r\n\t\t\tthis._chart.modal.content = this._chart.adapter.apply(\"criticalError\", e).message;\r\n\t\t\tthis._chart.modal.closable = false;\r\n\t\t\tif (!options.suppressErrors) {\r\n\t\t\t\tthis._chart.modal.open();\r\n\t\t\t}\r\n\t\t\tthis._chart.disabled = true;\r\n\t\t}\r\n\r\n\t\tif (options.verbose) {\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Applies filters to the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected applyFilters() {\r\n\t\tsuper.applyFilters();\r\n\t\tthis.bulletsContainer.filters.clear();\r\n\r\n\t\t// copyFrom of a list copies, does not clone\r\n\t\t$iter.each(this.filters.iterator(), (filter) => {\r\n\t\t\tthis.bulletsContainer.filters.push(filter.clone());\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * A list of heat rules to apply to series' elements based on the value\r\n\t * of the data item.\r\n\t *\r\n\t * Heat rules can be any \"numeric\" (including `Color`) property, and can also\r\n\t * be applied to child objects of series, like columns, bullets, etc.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.heatRules.push({\r\n\t *  \"target\": series.columns.template,\r\n\t *  \"property\": \"fill\",\r\n\t *  \"min\": am4core.color(\"#F5DBCB\"),\r\n\t *  \"max\": am4core.color(\"#ED7B84\"),\r\n\t *  \"dataField\": \"valueY\"\r\n\t *});\r\n\t *```\r\n\t * ```Javacript\r\n\t * series.heatRules.push({\r\n\t *  \"target\": series.columns.template,\r\n\t *  \"property\": \"fill\",\r\n\t *  \"min\": am4core.color(\"#F5DBCB\"),\r\n\t *  \"max\": am4core.color(\"#ED7B84\"),\r\n\t *  \"dataField\": \"valueY\"\r\n\t *});\r\n\t *```\r\n\t *```JSON\r\n\t *{\r\n\t *  // ...\r\n\t *  \"series\": [{\r\n\t *    \"type\": \"ColumnSeries\",\r\n\t *    \"heatRules\": [{\r\n\t *      \"target\": \"columns.template\",\r\n\t *      \"property\": \"fill\",\r\n\t *      \"min\": \"#F5DBCB\",\r\n\t *      \"max\": \"#ED7B84\",\r\n\t *      \"dataField\": \"valueY\"\r\n\t *    }]\r\n\t *  }]\r\n\t *}\r\n\t *```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/series/#Heat_maps} for more about heat rules\r\n\t * @return  Heat rules\r\n\t */\r\n\r\n\tpublic get heatRules(): List<IHeatRule> {\r\n\t\tif (!this._heatRules) {\r\n\t\t\tthis._heatRules = new List<IHeatRule>();\r\n\t\t\tthis._heatRules.events.on(\"inserted\", (event) => {\r\n\t\t\t\tlet heatRule = event.newValue;\r\n\t\t\t\tlet target = heatRule.target;\r\n\r\n\t\t\t\tif (target) {\r\n\t\t\t\t\tlet dataField = heatRule.dataField;\r\n\r\n\t\t\t\t\tif (!$type.hasValue(dataField)) {\r\n\t\t\t\t\t\tdataField = \"value\";\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet seriesDataItem = this.dataItem;\r\n\t\t\t\t\tlet property = heatRule.property;\r\n\r\n\t\t\t\t\tlet minValue = $type.toNumber(heatRule.minValue);\r\n\t\t\t\t\tlet maxValue = $type.toNumber(heatRule.maxValue);\r\n\r\n\t\t\t\t\tif (!$type.isNumber(minValue) && !$type.isNumber(maxValue)) {\r\n\t\t\t\t\t\tthis.dataItem.events.on(\"calculatedvaluechanged\", (event) => {\r\n\t\t\t\t\t\t\tif (event.property == dataField) {\r\n\t\t\t\t\t\t\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\t\t\t\t\tlet foundSprite = false;\r\n\t\t\t\t\t\t\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\t\t\t\t\t\t\tif (sprite.clonedFrom == target) {\r\n\t\t\t\t\t\t\t\t\t\t\tlet anySprite = <any>sprite;\r\n\t\t\t\t\t\t\t\t\t\t\tanySprite[property] = anySprite[property];\r\n\t\t\t\t\t\t\t\t\t\t\tfoundSprite = true;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\t\tif (!foundSprite) {\r\n\t\t\t\t\t\t\t\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\t\t\t\t\t\t\t\tif (sprite instanceof Container) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t$iter.each(sprite.children.iterator(), (child) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (child.className == target.className) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet anyChild = <any>child;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tanyChild[property] = anyChild[property];\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// giveup here\r\n\t\t\t\t\t\t\t\t\t\t\t\t\telse if (child instanceof Container) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tchild.deepInvalidate();\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.dataItems.template.events.on(\"workingvaluechanged\", (event) => {\r\n\t\t\t\t\t\tif (event.property == dataField) {\r\n\t\t\t\t\t\t\tlet dataItem = event.target;\r\n\t\t\t\t\t\t\tlet foundSprite = false;\r\n\t\t\t\t\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\t\t\t\t\tif (sprite.clonedFrom == target) {\r\n\t\t\t\t\t\t\t\t\tlet anySprite = <any>sprite;\r\n\t\t\t\t\t\t\t\t\tanySprite[property] = anySprite[property];\r\n\t\t\t\t\t\t\t\t\tfoundSprite = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tif (!foundSprite) {\r\n\t\t\t\t\t\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\t\t\t\t\t\tif (sprite instanceof Container) {\r\n\t\t\t\t\t\t\t\t\t\t$iter.each(sprite.children.iterator(), (child) => {\r\n\t\t\t\t\t\t\t\t\t\t\tif (child.className == target.className) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet anyChild = <any>child;\r\n\t\t\t\t\t\t\t\t\t\t\t\tanyChild[property] = anyChild[property];\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t// givup here\r\n\t\t\t\t\t\t\t\t\t\t\telse if (child instanceof Container) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tchild.deepInvalidate();\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\r\n\r\n\t\t\t\t\ttarget.adapter.add(<any>property, (value, ruleTarget, property) => {\r\n\r\n\t\t\t\t\t\tlet minValue = $type.toNumber(heatRule.minValue);\r\n\t\t\t\t\t\tlet maxValue = $type.toNumber(heatRule.maxValue);\r\n\r\n\t\t\t\t\t\tlet min = heatRule.min;\r\n\t\t\t\t\t\tlet max = heatRule.max;\r\n\r\n\t\t\t\t\t\tif (ruleTarget instanceof Sprite) {\r\n\t\t\t\t\t\t\tlet anySprite = <any>ruleTarget;\r\n\t\t\t\t\t\t\tlet propertyField = anySprite.propertyFields[property];\r\n\t\t\t\t\t\t\tif (propertyField && ruleTarget.dataItem) {\r\n\t\t\t\t\t\t\t\tlet dataContext = <any>ruleTarget.dataItem.dataContext;\r\n\t\t\t\t\t\t\t\tif (dataContext && $type.hasValue(dataContext[propertyField])) {\r\n\t\t\t\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet dataItem: SeriesDataItem = <SeriesDataItem>ruleTarget.dataItem;\r\n\r\n\t\t\t\t\t\tif (!$type.isNumber(minValue)) {\r\n\t\t\t\t\t\t\tminValue = seriesDataItem.values[dataField].low;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!$type.isNumber(maxValue)) {\r\n\t\t\t\t\t\t\tmaxValue = seriesDataItem.values[dataField].high;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\t\tlet fieldValues = dataItem.values[dataField];\r\n\t\t\t\t\t\t\tif (fieldValues) {\r\n\t\t\t\t\t\t\t\tlet workingValue = dataItem.getActualWorkingValue(dataField);\r\n\t\t\t\t\t\t\t\tif ($type.hasValue(min) && $type.hasValue(max) && $type.isNumber(minValue) && $type.isNumber(maxValue) && $type.isNumber(workingValue)) {\r\n\r\n\t\t\t\t\t\t\t\t\tlet percent: number;\r\n\t\t\t\t\t\t\t\t\tif (heatRule.logarithmic) {\r\n\t\t\t\t\t\t\t\t\t\tpercent = (Math.log(workingValue) * Math.LOG10E - Math.log(minValue) * Math.LOG10E) / ((Math.log(maxValue) * Math.LOG10E - Math.log(minValue) * Math.LOG10E));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tpercent = (workingValue - minValue) / (maxValue - minValue);\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tif ($type.isNumber(workingValue) && !$type.isNumber(percent)) {\r\n\t\t\t\t\t\t\t\t\t\tpercent = 0.5;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t// fixes problems if all values are the same\r\n\t\t\t\t\t\t\t\t\tif ($type.isNumber(min)) {\r\n\t\t\t\t\t\t\t\t\t\treturn min + (max - min) * percent;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (min instanceof Color) {\r\n\t\t\t\t\t\t\t\t\t\treturn new Color($colors.interpolate(min.rgb, max.rgb, percent));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn this._heatRules;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tlet heatRules;\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up bullets\r\n\t\t\tif ($type.hasValue(config.bullets) && $type.isArray(config.bullets)) {\r\n\t\t\t\tfor (let i = 0, len = config.bullets.length; i < len; i++) {\r\n\t\t\t\t\tlet bullets = config.bullets[i];\r\n\t\t\t\t\tif (!$type.hasValue(bullets.type)) {\r\n\t\t\t\t\t\tbullets.type = \"Bullet\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Let's take heatRules out of the config, so that we can process\r\n\t\t\t// them later, when bullets are already there\r\n\t\t\tif ($type.hasValue(config.heatRules) && $type.isArray(config.heatRules)) {\r\n\t\t\t\theatRules = config.heatRules;\r\n\t\t\t\tdelete config.heatRules;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t\t// Process heat rules again, when all other elements are ready\r\n\t\tif (heatRules) {\r\n\t\t\tfor (let i = 0, len = heatRules.length; i < len; i++) {\r\n\t\t\t\tlet rule = heatRules[i];\r\n\r\n\t\t\t\t// Resolve target\r\n\t\t\t\tlet target: any = this;\r\n\t\t\t\tif ($type.hasValue(rule.target) && $type.isString(rule.target)) {\r\n\r\n\r\n\t\t\t\t\t// Check if we can find this element by id\r\n\t\t\t\t\tif (this.map.hasKey(rule.target)) {\r\n\t\t\t\t\t\ttarget = this.map.getKey(rule.target);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlet parts = rule.target.split(\".\");\r\n\t\t\t\t\t\tfor (let x = 0; x < parts.length; x++) {\r\n\t\t\t\t\t\t\tif (target instanceof List) {\r\n\t\t\t\t\t\t\t\tlet listitem = target.getIndex($type.toNumber(parts[x]));\r\n\t\t\t\t\t\t\t\tif (!listitem) {\r\n\t\t\t\t\t\t\t\t\ttarget = (<any>target)[parts[x]];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\ttarget = listitem;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tconst maybeIndex = parts[x].match(/^(.*)\\[([0-9]+)\\]/);\r\n\t\t\t\t\t\t\t\tif (maybeIndex) {\r\n\t\t\t\t\t\t\t\t\tif (target[maybeIndex[1]] instanceof List) {\r\n\t\t\t\t\t\t\t\t\t\ttarget = target[maybeIndex[1]].getIndex($type.toNumber(maybeIndex[2]));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\ttarget = target[maybeIndex[1]][$type.toNumber(maybeIndex[2])];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\ttarget = target[parts[x]];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\trule.target = target;\r\n\r\n\t\t\t\t// Resolve colors and percents\r\n\t\t\t\tif ($type.hasValue(rule.min)) {\r\n\t\t\t\t\trule.min = this.maybeColorOrPercent(rule.min);\r\n\t\t\t\t}\r\n\t\t\t\tif ($type.hasValue(rule.max)) {\r\n\t\t\t\t\trule.max = this.maybeColorOrPercent(rule.max);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig({\r\n\t\t\t\theatRules: heatRules\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns visibility value\r\n\t * @ignore\r\n\t */\r\n\t/*\r\n\t\tprotected getVisibility(): boolean {\r\n\t\t\tlet hidden = this.getPropertyValue(\"hidden\");\r\n\t\t\tif (hidden) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn super.getVisibility();\r\n\t\t\t}\r\n\t\t}*/\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param a  Element 1\r\n\t * @param b  Element 2\r\n\t * @return Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"heatRules\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"heatRules\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets `visibility` property:\r\n\t *\r\n\t * * `true` - visible\r\n\t * * `false` - hidden\r\n\t *\r\n\t * @param value  true - visible, false - hidden\r\n\t * @return Current visibility\r\n\t */\r\n\tpublic setVisibility(value: boolean) {\r\n\t\tsuper.setVisibility(value);\r\n\t\tthis.bulletsContainer.visible = value;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Series\"] = Series;\r\nregistry.registeredClasses[\"SeriesDataItem\"] = SeriesDataItem;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}