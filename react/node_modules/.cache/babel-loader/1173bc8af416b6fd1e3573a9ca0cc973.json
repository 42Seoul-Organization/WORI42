{"ast":null,"code":"/**\r\n * Slice module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../Container\";\nimport { Sprite } from \"../Sprite\";\nimport { registry } from \"../Registry\";\nimport * as $math from \"../utils/Math\";\nimport * as $path from \"../rendering/Path\";\nimport * as $type from \"../utils/Type\";\nimport * as $utils from \"../utils/Utils\";\nimport { Percent } from \"../utils/Percent\";\nimport { RadialGradient } from \"../rendering/fills/RadialGradient\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Draws a wedged semi-circle - slice. Usually used for Pie/Donut charts.\r\n *\r\n * @see {@link ISliceEvents} for a list of available events\r\n * @see {@link ISliceAdapters} for a list of available Adapters\r\n */\n\nvar Slice =\n/** @class */\nfunction (_super) {\n  __extends(Slice, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Slice() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"Slice\"; // Set defaults\n\n    _this.setPropertyValue(\"cornerRadius\", 0);\n\n    _this.setPropertyValue(\"startAngle\", 0);\n\n    _this.setPercentProperty(\"innerRadius\", 0);\n\n    _this.setPercentProperty(\"radius\", 0);\n\n    _this.setPropertyValue(\"arc\", 0);\n\n    _this.setPropertyValue(\"shiftRadius\", 0);\n\n    _this.strokeOpacity = 1;\n\n    _this.setPropertyValue(\"layout\", \"none\"); // Create a slice wedge element\n\n\n    _this.slice = _this.createChild(Sprite);\n    _this.slice.isMeasured = false;\n\n    _this._disposers.push(_this.slice); //this.element.attr({ \"stroke-linejoin\": \"round\" });\n    //this.element.attr({ \"stroke-linecap\": \"round\" });\n    // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Slice.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    var radiusY = this.radiusY;\n\n    if (this.radius > 0 && radiusY == 0) {\n      radiusY = 0.01;\n    }\n\n    this.slice.path = $path.arc(this.startAngle, this.arc, this.radius, this.pixelInnerRadius, radiusY, this.cornerRadius, this.innerCornerRadius);\n    this.slice.invalidate();\n    this.shiftRadius = this.shiftRadius;\n\n    if (this.realFill instanceof RadialGradient) {\n      this.updateGradient(this.realFill);\n    }\n\n    if (this.realStroke instanceof RadialGradient) {\n      this.updateGradient(this.realStroke);\n    }\n  };\n\n  Slice.prototype.updateGradient = function (gradient) {\n    gradient.element.attr({\n      \"gradientUnits\": \"userSpaceOnUse\"\n    });\n    gradient.element.attr({\n      \"r\": this.radius\n    });\n    gradient.cx = 0;\n    gradient.cy = 0;\n    gradient.element.attr({\n      radius: this.radius\n    });\n  };\n\n  Object.defineProperty(Slice.prototype, \"bbox\", {\n    /**\r\n     * Returns bounding box (square) for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    get: function get() {\n      if (this.definedBBox) {\n        return this.definedBBox;\n      }\n\n      if (this.isMeasured) {\n        var innerRect = $math.getArcRect(this.startAngle, this.startAngle + this.arc, this.pixelInnerRadius);\n        var outerRect = $math.getArcRect(this.startAngle, this.startAngle + this.arc, this.radius);\n        return $math.getCommonRectangle([innerRect, outerRect]);\n      } else {\n        return {\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        };\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"startAngle\", {\n    /**\r\n     * @return Angle (0-360)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"startAngle\");\n    },\n\n    /**\r\n     * The angle at which left edge of the slice is drawn. (0-360)\r\n     *\r\n     * 0 is to the right of the center.\r\n     *\r\n     * @param value  Angle (0-360)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"arc\", {\n    /**\r\n     * @return [description]\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"arc\");\n    },\n\n    /**\r\n     * [arc description]\r\n     *\r\n     * @todo Description\r\n     * @param value [description]\r\n     */\n    set: function set(value) {\n      if (!$type.isNumber(value)) {\n        value = 0;\n      }\n\n      this.setPropertyValue(\"arc\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"radius\", {\n    /**\r\n     * @return Radius (px)\r\n     */\n    get: function get() {\n      var radius = this.getPropertyValue(\"radius\");\n\n      if (!$type.isNumber(radius)) {\n        radius = 0;\n      }\n\n      return radius;\n    },\n\n    /**\r\n     * Radius of the slice in pixels.\r\n     *\r\n     * @param value  Radius (px)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"radius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"radiusY\", {\n    /**\r\n     * @return Vertical radius (0-1)\r\n     */\n    get: function get() {\n      var value = this.getPropertyValue(\"radiusY\");\n\n      if (!$type.isNumber(value)) {\n        value = this.radius;\n      }\n\n      return value;\n    },\n\n    /**\r\n     * Vertical radius for creating skewed slices.\r\n     *\r\n     * This is relevant to `radius`, e.g. 0.5 will set vertical radius to half\r\n     * the `radius`.\r\n     *\r\n     * @param value Vertical radius (0-1)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"radiusY\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"innerRadius\", {\n    /**\r\n     * @return Radius (px or %)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n\n    /**\r\n     * Inner radius of the slice for creating cut out (donut) slices.\r\n     *\r\n     * @default 0\r\n     * @param value  Radius (px or %)\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"pixelInnerRadius\", {\n    /**\r\n     * @return Radius px\r\n     */\n    get: function get() {\n      return $utils.relativeToValue(this.innerRadius, this.radius);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"cornerRadius\", {\n    /**\r\n     * @return Radius (px)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"cornerRadius\");\n    },\n\n    /**\r\n     * Radius of slice's outer corners in pixels.\r\n     *\r\n     * @default 0\r\n     * @param value  Radius (px)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"cornerRadius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"innerCornerRadius\", {\n    /**\r\n     * @return Radius (px)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"innerCornerRadius\");\n    },\n\n    /**\r\n     * Radius of slice's inner corners in pixels.\r\n     *\r\n     * @default 0\r\n     * @param value  Radius (px)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"innerCornerRadius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"shiftRadius\", {\n    /**\r\n     * @return Radius shift\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"shiftRadius\");\n    },\n\n    /**\r\n     * Indicates how far (relatively to center) a slice should be moved.\r\n     *\r\n     * The value is relative to the radius of the slice. Meaning 0 no shift,\r\n     * 1 - slice shifted outside by whole of its radius.\r\n     *\r\n     * @param  value  Radius shift\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"shiftRadius\", value);\n      this.dx = value * this.radius * this.ix;\n      this.dy = value * this.radiusY * this.iy;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"ix\", {\n    /**\r\n     * [ix description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @return [description]\r\n     */\n    get: function get() {\n      return $math.cos(this.middleAngle);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"iy\", {\n    /**\r\n     * [iy description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @return [description]\r\n     */\n    get: function get() {\n      if (this.radius > 0) {\n        return $math.sin(this.middleAngle);\n      } else {\n        return $math.sin(this.middleAngle);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"middleAngle\", {\n    /**\r\n     * An angle of the slice's middle.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Angle\r\n     */\n    get: function get() {\n      return this.startAngle + this.arc / 2;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * X coordinate for the slice tooltip.\r\n   *\r\n   * @return X\r\n   */\n\n  Slice.prototype.getTooltipX = function () {\n    var value = this.getPropertyValue(\"tooltipX\");\n\n    if ($type.isNumber(value)) {\n      return value;\n    }\n\n    var p = 0.5;\n\n    if (value instanceof Percent) {\n      p = value.value;\n    }\n\n    var innerRadius = $utils.relativeToValue(this.innerRadius, this.radius);\n    return this.ix * (innerRadius + (this.radius - innerRadius) * p);\n  };\n  /**\r\n   * Y coordinate for the slice tooltip.\r\n   *\r\n   * @return Y\r\n   */\n\n\n  Slice.prototype.getTooltipY = function () {\n    var value = this.getPropertyValue(\"tooltipY\");\n\n    if ($type.isNumber(value)) {\n      return value;\n    }\n\n    var p = 0.5;\n\n    if (value instanceof Percent) {\n      p = value.value;\n    }\n\n    var innerRadius = $utils.relativeToValue(this.innerRadius, this.radius);\n    return this.iy * (innerRadius + (this.radius - innerRadius) * p) + this.slice.dy;\n  };\n\n  return Slice;\n}(Container);\n\nexport { Slice };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Slice\"] = Slice;","map":{"version":3,"sources":["../../../../../src/.internal/core/elements/Slice.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Slice module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../Container\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport { Percent } from \"../utils/Percent\";\r\nimport { IRectangle } from \"../defs/IRectangle\";\r\nimport { RadialGradient } from \"../rendering/fills/RadialGradient\";\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Slice]].\r\n */\r\nexport interface ISliceProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Radius of the slice in pixels.\r\n\t */\r\n\tradius?: number;\r\n\r\n\t/**\r\n\t * Vertical radius for creating skewed slices.\r\n\t *\r\n\t * This is relevant to `radius`, e.g. 0.5 will set vertical radius to half\r\n\t * the `radius`.\r\n\t */\r\n\tradiusY?: number;\r\n\r\n\t/**\r\n\t * Inner radius of the slice for creating cut out (donut) slices, in px or %\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * The angle at which left edge of the slice is drawn. (0-360)\r\n\t *\r\n\t * 0 is to the right of the center.\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tarc?: number;\r\n\r\n\t/**\r\n\t * [shiftRadius description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tshiftRadius?: number;\r\n\r\n\t/**\r\n\t * Radius of slice's outer corners in pixels.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n\t/**\r\n\t * Radius of slice's inner corners in pixels.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tinnerCornerRadius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Slice]].\r\n */\r\nexport interface ISliceEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Slice]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISliceAdapters extends IContainerAdapters, ISliceProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a wedged semi-circle - slice. Usually used for Pie/Donut charts.\r\n *\r\n * @see {@link ISliceEvents} for a list of available events\r\n * @see {@link ISliceAdapters} for a list of available Adapters\r\n */\r\nexport class Slice extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISliceProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISliceAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISliceEvents;\r\n\r\n\t/**\r\n\t * Main slice element.\r\n\t *\r\n\t * Slice itself is a [[Container]] so that [[Slice3D]] could extend it and\r\n\t * add 3D elements to it.\r\n\t */\r\n\tpublic slice: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Slice\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.setPropertyValue(\"cornerRadius\", 0);\r\n\t\tthis.setPropertyValue(\"startAngle\", 0);\r\n\t\tthis.setPercentProperty(\"innerRadius\", 0);\r\n\t\tthis.setPercentProperty(\"radius\", 0);\r\n\t\tthis.setPropertyValue(\"arc\", 0);\r\n\t\tthis.setPropertyValue(\"shiftRadius\", 0);\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.setPropertyValue(\"layout\", \"none\");\r\n\r\n\t\t// Create a slice wedge element\r\n\t\tthis.slice = this.createChild(Sprite);\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tthis._disposers.push(this.slice);\r\n\r\n\t\t//this.element.attr({ \"stroke-linejoin\": \"round\" });\r\n\t\t//this.element.attr({ \"stroke-linecap\": \"round\" });\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tlet radiusY = this.radiusY;\r\n\t\tif(this.radius > 0 && radiusY == 0){\r\n\t\t\tradiusY = 0.01;\r\n\t\t}\r\n\t\tthis.slice.path = $path.arc(this.startAngle, this.arc, this.radius, this.pixelInnerRadius, radiusY, this.cornerRadius, this.innerCornerRadius);\r\n\t\tthis.slice.invalidate();\r\n\t\tthis.shiftRadius = this.shiftRadius;\r\n\r\n\t\tif (this.realFill instanceof RadialGradient) {\r\n\t\t\tthis.updateGradient(this.realFill);\r\n\t\t}\r\n\t\tif (this.realStroke instanceof RadialGradient) {\r\n\t\t\tthis.updateGradient(this.realStroke);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected updateGradient(gradient: RadialGradient) {\r\n\t\tgradient.element.attr({ \"gradientUnits\": \"userSpaceOnUse\" });\r\n\t\tgradient.element.attr({ \"r\": this.radius });\r\n\t\tgradient.cx = 0;\r\n\t\tgradient.cy = 0;\r\n\t\tgradient.element.attr({ radius: this.radius });\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\tif (this.definedBBox) {\r\n\t\t\treturn this.definedBBox;\r\n\t\t}\r\n\r\n\t\tif (this.isMeasured) {\r\n\t\t\tlet innerRect = $math.getArcRect(this.startAngle, this.startAngle + this.arc, this.pixelInnerRadius);\r\n\t\t\tlet outerRect = $math.getArcRect(this.startAngle, this.startAngle + this.arc, this.radius);\r\n\t\t\treturn $math.getCommonRectangle([innerRect, outerRect]);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: 0, y: 0, width: 0, height: 0 };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The angle at which left edge of the slice is drawn. (0-360)\r\n\t *\r\n\t * 0 is to the right of the center.\r\n\t *\r\n\t * @param value  Angle (0-360)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle (0-360)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set arc(value: number) {\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t}\r\n\t\tthis.setPropertyValue(\"arc\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get arc(): number {\r\n\t\treturn this.getPropertyValue(\"arc\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the slice in pixels.\r\n\t *\r\n\t * @param value  Radius (px)\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px)\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\tlet radius: number = this.getPropertyValue(\"radius\");\r\n\t\tif (!$type.isNumber(radius)) {\r\n\t\t\tradius = 0;\r\n\t\t}\r\n\t\treturn radius;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical radius for creating skewed slices.\r\n\t *\r\n\t * This is relevant to `radius`, e.g. 0.5 will set vertical radius to half\r\n\t * the `radius`.\r\n\t *\r\n\t * @param value Vertical radius (0-1)\r\n\t */\r\n\tpublic set radiusY(value: number) {\r\n\t\tthis.setPropertyValue(\"radiusY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical radius (0-1)\r\n\t */\r\n\tpublic get radiusY(): number {\r\n\t\tlet value: number = this.getPropertyValue(\"radiusY\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radius;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the slice for creating cut out (donut) slices.\r\n\t *\r\n\t * @default 0\r\n\t * @param value  Radius (px or %)\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px or %)\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius px\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeToValue(this.innerRadius, this.radius);\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of slice's outer corners in pixels.\r\n\t *\r\n\t * @default 0\r\n\t * @param value  Radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of slice's inner corners in pixels.\r\n\t *\r\n\t * @default 0\r\n\t * @param value  Radius (px)\r\n\t */\r\n\tpublic set innerCornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"innerCornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px)\r\n\t */\r\n\tpublic get innerCornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"innerCornerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates how far (relatively to center) a slice should be moved.\r\n\t *\r\n\t * The value is relative to the radius of the slice. Meaning 0 no shift,\r\n\t * 1 - slice shifted outside by whole of its radius.\r\n\t *\r\n\t * @param  value  Radius shift\r\n\t */\r\n\tpublic set shiftRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"shiftRadius\", value);\r\n\t\tthis.dx = value * this.radius * this.ix;\r\n\t\tthis.dy = value * this.radiusY * this.iy;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius shift\r\n\t */\r\n\tpublic get shiftRadius(): number {\r\n\t\treturn this.getPropertyValue(\"shiftRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [ix description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get ix(): number {\r\n\t\treturn $math.cos(this.middleAngle);\r\n\t}\r\n\r\n\t/**\r\n\t * [iy description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get iy(): number {\r\n\t\tif (this.radius > 0) {\r\n\t\t\treturn $math.sin(this.middleAngle);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn $math.sin(this.middleAngle);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * An angle of the slice's middle.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Angle\r\n\t */\r\n\tpublic get middleAngle(): number {\r\n\t\treturn this.startAngle + this.arc / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @return X\r\n\t */\r\n\tpublic getTooltipX(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\r\n\t\tif($type.isNumber(value)){\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\tlet p = 0.5;\r\n\t\tif(value instanceof Percent){\r\n\t\t\tp = value.value;\r\n\t\t}\r\n\t\tlet innerRadius = $utils.relativeToValue(this.innerRadius, this.radius);\r\n\t\treturn this.ix * (innerRadius + (this.radius - innerRadius) * p);\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @return Y\r\n\t */\r\n\tpublic getTooltipY(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipY\");\r\n\r\n\t\tif($type.isNumber(value)){\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\tlet p = 0.5;\r\n\t\tif(value instanceof Percent){\r\n\t\t\tp = value.value;\r\n\t\t}\r\n\t\tlet innerRadius = $utils.relativeToValue(this.innerRadius, this.radius);\r\n\t\treturn this.iy * (innerRadius + (this.radius - innerRadius) * p) + this.slice.dy;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Slice\"] = Slice;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}