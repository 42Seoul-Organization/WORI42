{"ast":null,"code":"/**\r\n * DateAxis module\r\n */\nimport { __assign, __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { ValueAxis, ValueAxisDataItem } from \"./ValueAxis\";\nimport { List } from \"../../core/utils/List\";\nimport { Dictionary } from \"../../core/utils/Dictionary\";\nimport { DateAxisBreak } from \"./DateAxisBreak\";\nimport { registry } from \"../../core/Registry\";\nimport * as $time from \"../../core/utils/Time\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $object from \"../../core/utils/Object\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines data item for [[DateAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar DateAxisDataItem =\n/** @class */\nfunction (_super) {\n  __extends(DateAxisDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function DateAxisDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"DateAxisDataItem\";\n\n    _this.applyTheme();\n\n    _this.values.date = {};\n    _this.values.endDate = {};\n    return _this;\n  }\n\n  Object.defineProperty(DateAxisDataItem.prototype, \"date\", {\n    /**\r\n     * @return Date\r\n     */\n    get: function get() {\n      return this.dates[\"date\"];\n    },\n\n    /**\r\n     * Date position of the data item.\r\n     *\r\n     * @param date  Date\r\n     */\n    set: function set(date) {\n      this.setDate(\"date\", date);\n      this.value = date.getTime();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateAxisDataItem.prototype, \"endDate\", {\n    /**\r\n     * @return End date\r\n     */\n    get: function get() {\n      return this.dates[\"endDate\"];\n    },\n\n    /**\r\n     * End date for data item.\r\n     *\r\n     * @param date End date\r\n     */\n    set: function set(date) {\n      this.setDate(\"endDate\", date);\n      this.endValue = date.getTime();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return DateAxisDataItem;\n}(ValueAxisDataItem);\n\nexport { DateAxisDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Used to create a date/time-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DateAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IDateAxisEvents} for a list of available Events\r\n * @see {@link IDateAxisAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/date-axis/} got `DateAxis` documention\r\n * @important\r\n */\n\nvar DateAxis =\n/** @class */\nfunction (_super) {\n  __extends(DateAxis, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function DateAxis() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this._gapBreaks = false;\n    /**\r\n     * A list of date/time intervals for Date axis.\r\n     *\r\n     * This define various granularities available for the axis. For example\r\n     * if you have an axis spanning an hour, and space for 6 grid lines / labels\r\n     * the axis will choose the granularity of 10 minutes, displaying a label\r\n     * every 10 minutes.\r\n     *\r\n     * Default intervals:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *  { timeUnit: \"millisecond\", count: 1 },\r\n     *  { timeUnit: \"millisecond\", count: 5 },\r\n     *  { timeUnit: \"millisecond\", count: 10 },\r\n     *  { timeUnit: \"millisecond\", count: 50 },\r\n     *  { timeUnit: \"millisecond\", count: 100 },\r\n     *  { timeUnit: \"millisecond\", count: 500 },\r\n     *  { timeUnit: \"second\", count: 1 },\r\n     *  { timeUnit: \"second\", count: 5 },\r\n     *  { timeUnit: \"second\", count: 10 },\r\n     *  { timeUnit: \"second\", count: 30 },\r\n     *  { timeUnit: \"minute\", count: 1 },\r\n     *  { timeUnit: \"minute\", count: 5 },\r\n     *  { timeUnit: \"minute\", count: 10 },\r\n     *  { timeUnit: \"minute\", count: 30 },\r\n     *  { timeUnit: \"hour\", count: 1 },\r\n     *  { timeUnit: \"hour\", count: 3 },\r\n     *  { timeUnit: \"hour\", count: 6 },\r\n     *  { timeUnit: \"hour\", count: 12 },\r\n     *  { timeUnit: \"day\", count: 1 },\r\n     *  { timeUnit: \"day\", count: 2 },\r\n     *  { timeUnit: \"day\", count: 3 },\r\n     *  { timeUnit: \"day\", count: 4 },\r\n     *  { timeUnit: \"day\", count: 5 },\r\n     *  { timeUnit: \"week\", count: 1 },\r\n     *  { timeUnit: \"month\", count: 1 },\r\n     *  { timeUnit: \"month\", count: 2 },\r\n     *  { timeUnit: \"month\", count: 3 },\r\n     *  { timeUnit: \"month\", count: 6 },\r\n     *  { timeUnit: \"year\", count: 1 },\r\n     *  { timeUnit: \"year\", count: 2 },\r\n     *  { timeUnit: \"year\", count: 5 },\r\n     *  { timeUnit: \"year\", count: 10 },\r\n     *  { timeUnit: \"year\", count: 50 },\r\n     *  { timeUnit: \"year\", count: 100 }\r\n     * ]\r\n     * ```\r\n     */\n\n    _this.gridIntervals = new List();\n    /**\r\n     * If data aggregation is enabled by setting Axis' `groupData = true`, the\r\n     * chart will try to aggregate data items into grouped data items.\r\n     *\r\n     * If there are more data items in selected period than `groupCount`, it will\r\n     * group data items into bigger period.\r\n     *\r\n     * For example seconds might be grouped into 10-second aggregate data items.\r\n     *\r\n     * This setting indicates what group intervals can the chart group to.\r\n     *\r\n     * Default intervals:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   { timeUnit: \"millisecond\", count: 1},\r\n     *   { timeUnit: \"millisecond\", count: 10 },\r\n     *   { timeUnit: \"millisecond\", count: 100 },\r\n     *   { timeUnit: \"second\", count: 1 },\r\n     *   { timeUnit: \"second\", count: 10 },\r\n     *   { timeUnit: \"minute\", count: 1 },\r\n     *   { timeUnit: \"minute\", count: 10 },\r\n     *   { timeUnit: \"hour\", count: 1 },\r\n     *   { timeUnit: \"day\", count: 1 },\r\n     *   { timeUnit: \"week\", count: 1 },\r\n     *   { timeUnit: \"month\", count: 1 },\r\n     *   { timeUnit: \"year\", count: 1 }\r\n     * ]\r\n     * ```\r\n     * `groupData = true` does not work in combination with `skipEmptyPeriods = true`.\r\n     *\r\n     * @since 4.7.0\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/date-axis/#Dynamic_data_item_grouping} for more information about dynamic data item grouping.\r\n     */\n\n    _this.groupIntervals = new List();\n    /**\r\n     * A collection of date formats to use when formatting different time units\r\n     * on Date/time axis.\r\n     *\r\n     * Actual defaults will depend on the language locale set for the chart.\r\n     *\r\n     * To override format for a specific time unit, say days, you need to set\r\n     * the appropriate key to a format string. E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n     * ```\r\n     * ```JavaScript\r\n     * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n     * ```\r\n     * ```JSON\r\n     * \"xAxes\": [{\r\n     *   \"type\": \"DateAxis\",\r\n     *   \"dateFormats\": {\r\n     *     \"day\": \"MMMM d, yyyy\"\r\n     *   }\r\n     * }]\r\n     * ```\r\n     *\r\n     * @see {@link DateFormatter}\r\n     */\n\n    _this.dateFormats = new Dictionary();\n    /**\r\n     * These formats are applied to labels that are first in a larger unit.\r\n     *\r\n     * For example, if we have a DateAxis with days on it, the first day of month\r\n     * indicates a break in month - a start of the bigger period.\r\n     *\r\n     * For those labels, `periodChangeDateFormats` are applied instead of\r\n     * `dateFormats`.\r\n     *\r\n     * This allows us implement convenient structures, like instead of:\r\n     *\r\n     * `Jan 1 - Jan 2 - Jan 3 - ...`\r\n     *\r\n     * We can have:\r\n     *\r\n     * `Jan - 1 - 2 - 3 - ...`\r\n     *\r\n     * This can be disabled by setting `markUnitChange = false`.\r\n     */\n\n    _this.periodChangeDateFormats = new Dictionary();\n    /**\r\n     * Actual interval (granularity) derived from the actual data.\r\n     */\n\n    _this._baseIntervalReal = {\n      timeUnit: \"day\",\n      count: 1\n    };\n    /**\r\n     */\n\n    _this._prevSeriesTime = {};\n    /**\r\n     * [_minDifference description]\r\n     *\r\n     * @todo Description\r\n     */\n\n    _this._minDifference = {};\n    /**\r\n     * @ignore\r\n     */\n\n    _this._firstWeekDay = 1;\n    /**\r\n     * A collection of start timestamps to use as axis' min timestamp for\r\n     * particular data item item periods.\r\n     *\r\n     * @since 4.7.0\r\n     * @readonly\r\n     */\n\n    _this.groupMin = {};\n    /**\r\n     * A collection of start timestamps to use as axis' max timestamp for\r\n     * particular data item item periods.\r\n     *\r\n     * @since 4.7.0\r\n     * @readonly\r\n     */\n\n    _this.groupMax = {};\n    _this.className = \"DateAxis\";\n\n    _this.setPropertyValue(\"markUnitChange\", true);\n\n    _this.snapTooltip = true;\n    _this.tooltipPosition = \"pointer\";\n\n    _this.setPropertyValue(\"groupData\", false);\n\n    _this.groupCount = 200;\n\n    _this.events.on(\"parentset\", _this.getDFFormatter, _this, false); // Translatable defaults are applied in `applyInternalDefaults()`\n    // ...\n    // Define default intervals\n\n\n    _this.gridIntervals.pushAll([{\n      timeUnit: \"millisecond\",\n      count: 1\n    }, {\n      timeUnit: \"millisecond\",\n      count: 5\n    }, {\n      timeUnit: \"millisecond\",\n      count: 10\n    }, {\n      timeUnit: \"millisecond\",\n      count: 50\n    }, {\n      timeUnit: \"millisecond\",\n      count: 100\n    }, {\n      timeUnit: \"millisecond\",\n      count: 500\n    }, {\n      timeUnit: \"second\",\n      count: 1\n    }, {\n      timeUnit: \"second\",\n      count: 5\n    }, {\n      timeUnit: \"second\",\n      count: 10\n    }, {\n      timeUnit: \"second\",\n      count: 30\n    }, {\n      timeUnit: \"minute\",\n      count: 1\n    }, {\n      timeUnit: \"minute\",\n      count: 5\n    }, {\n      timeUnit: \"minute\",\n      count: 10\n    }, {\n      timeUnit: \"minute\",\n      count: 15\n    }, {\n      timeUnit: \"minute\",\n      count: 30\n    }, {\n      timeUnit: \"hour\",\n      count: 1\n    }, {\n      timeUnit: \"hour\",\n      count: 3\n    }, {\n      timeUnit: \"hour\",\n      count: 6\n    }, {\n      timeUnit: \"hour\",\n      count: 12\n    }, {\n      timeUnit: \"day\",\n      count: 1\n    }, {\n      timeUnit: \"day\",\n      count: 2\n    }, {\n      timeUnit: \"day\",\n      count: 3\n    }, {\n      timeUnit: \"day\",\n      count: 4\n    }, {\n      timeUnit: \"day\",\n      count: 5\n    }, {\n      timeUnit: \"week\",\n      count: 1\n    }, {\n      timeUnit: \"month\",\n      count: 1\n    }, {\n      timeUnit: \"month\",\n      count: 2\n    }, {\n      timeUnit: \"month\",\n      count: 3\n    }, {\n      timeUnit: \"month\",\n      count: 6\n    }, {\n      timeUnit: \"year\",\n      count: 1\n    }, {\n      timeUnit: \"year\",\n      count: 2\n    }, {\n      timeUnit: \"year\",\n      count: 5\n    }, {\n      timeUnit: \"year\",\n      count: 10\n    }, {\n      timeUnit: \"year\",\n      count: 50\n    }, {\n      timeUnit: \"year\",\n      count: 100\n    }, {\n      timeUnit: \"year\",\n      count: 200\n    }, {\n      timeUnit: \"year\",\n      count: 500\n    }, {\n      timeUnit: \"year\",\n      count: 1000\n    }, {\n      timeUnit: \"year\",\n      count: 2000\n    }, {\n      timeUnit: \"year\",\n      count: 5000\n    }, {\n      timeUnit: \"year\",\n      count: 10000\n    }, {\n      timeUnit: \"year\",\n      count: 100000\n    }]);\n\n    _this.groupIntervals.pushAll([{\n      timeUnit: \"millisecond\",\n      count: 1\n    }, {\n      timeUnit: \"millisecond\",\n      count: 10\n    }, {\n      timeUnit: \"millisecond\",\n      count: 100\n    }, {\n      timeUnit: \"second\",\n      count: 1\n    }, {\n      timeUnit: \"second\",\n      count: 10\n    }, {\n      timeUnit: \"minute\",\n      count: 1\n    }, {\n      timeUnit: \"minute\",\n      count: 10\n    }, {\n      timeUnit: \"hour\",\n      count: 1\n    }, {\n      timeUnit: \"day\",\n      count: 1\n    }, {\n      timeUnit: \"week\",\n      count: 1\n    }, {\n      timeUnit: \"month\",\n      count: 1\n    }, {\n      timeUnit: \"year\",\n      count: 1\n    }]); // Set field name\n\n\n    _this.axisFieldName = \"date\"; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * A function which applies fills to axis cells.\r\n   *\r\n   * Default function fills every second fill. You can set this to a function\r\n   * that follows some other logic.\r\n   *\r\n   * Function should accept a [[DateAxisDataItem]] and modify its `axisFill`\r\n   * property accordingly.\r\n   */\n\n\n  DateAxis.prototype.fillRule = function (dataItem) {\n    var value = dataItem.value;\n    var axis = dataItem.component;\n    var gridInterval = axis._gridInterval;\n    var gridDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\n\n    if (Math.round((value - axis.min) / gridDuration) / 2 == Math.round(Math.round((value - axis.min) / gridDuration) / 2)) {\n      dataItem.axisFill.__disabled = true;\n    } else {\n      dataItem.axisFill.__disabled = false;\n    }\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  DateAxis.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this); // Set default date formats\n\n\n    if (!this.dateFormats.hasKey(\"millisecond\")) {\n      this.dateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\n    }\n\n    if (!this.dateFormats.hasKey(\"second\")) {\n      this.dateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\n    }\n\n    if (!this.dateFormats.hasKey(\"minute\")) {\n      this.dateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\n    }\n\n    if (!this.dateFormats.hasKey(\"hour\")) {\n      this.dateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\n    }\n\n    if (!this.dateFormats.hasKey(\"day\")) {\n      this.dateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\n    }\n\n    if (!this.dateFormats.hasKey(\"week\")) {\n      this.dateFormats.setKey(\"week\", this.language.translate(\"_date_day\")); // not a mistake\n    }\n\n    if (!this.dateFormats.hasKey(\"month\")) {\n      this.dateFormats.setKey(\"month\", this.language.translate(\"_date_month\"));\n    }\n\n    if (!this.dateFormats.hasKey(\"year\")) {\n      this.dateFormats.setKey(\"year\", this.language.translate(\"_date_year\"));\n    }\n\n    if (!this.periodChangeDateFormats.hasKey(\"millisecond\")) {\n      this.periodChangeDateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\n    }\n\n    if (!this.periodChangeDateFormats.hasKey(\"second\")) {\n      this.periodChangeDateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\n    }\n\n    if (!this.periodChangeDateFormats.hasKey(\"minute\")) {\n      this.periodChangeDateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\n    }\n\n    if (!this.periodChangeDateFormats.hasKey(\"hour\")) {\n      this.periodChangeDateFormats.setKey(\"hour\", this.language.translate(\"_date_day\"));\n    }\n\n    if (!this.periodChangeDateFormats.hasKey(\"day\")) {\n      this.periodChangeDateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\n    }\n\n    if (!this.periodChangeDateFormats.hasKey(\"week\")) {\n      this.periodChangeDateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\n    }\n\n    if (!this.periodChangeDateFormats.hasKey(\"month\")) {\n      this.periodChangeDateFormats.setKey(\"month\", this.language.translate(\"_date_month\") + \" \" + this.language.translate(\"_date_year\"));\n    }\n  };\n  /**\r\n   * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  DateAxis.prototype.createDataItem = function () {\n    return new DateAxisDataItem();\n  };\n  /**\r\n   * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n   *\r\n   * @return Axis break\r\n   */\n\n\n  DateAxis.prototype.createAxisBreak = function () {\n    return new DateAxisBreak();\n  };\n  /**\r\n   * Validates Axis' data items.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  DateAxis.prototype.validateDataItems = function () {\n    // allows to keep selection of the same size\n    var start = this.start;\n    var end = this.end;\n    var baseDuration = this.baseDuration;\n    var periodCount = (this.max - this.min) / baseDuration;\n    this._firstWeekDay = this.getFirstWeekDay();\n    this.getDFFormatter();\n\n    _super.prototype.validateDataItems.call(this);\n\n    var mainBaseDuration = $time.getDuration(this.mainBaseInterval.timeUnit, this.mainBaseInterval.count);\n    this.maxZoomFactor = (this.max - this.min) / mainBaseDuration;\n    this._deltaMinMax = this.baseDuration / 2; // allows to keep selection of the same size\n\n    var newPeriodCount = (this.max - this.min) / baseDuration;\n    start = start + (end - start) * (1 - periodCount / newPeriodCount);\n    this.zoom({\n      start: start,\n      end: end\n    }, false, true); // added instantlyto solve zoomout problem when we have axes gaps. @todo: check how this affects maxZoomFactor\n  };\n  /**\r\n   * Handles process after zoom.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Does nothing?\r\n   */\n\n\n  DateAxis.prototype.handleSelectionExtremesChange = function () {};\n  /**\r\n   * Calculates all positions, related to axis as per current zoom.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  DateAxis.prototype.calculateZoom = function () {\n    var _this = this;\n\n    _super.prototype.calculateZoom.call(this);\n\n    var difference = this.adjustDifference(this._minZoomed, this._maxZoomed);\n    var dataSetChanged = false; // if data has to be grouped, choose interval and set dataset\n\n    if (this.groupData && $type.hasValue(difference)) {\n      var mainBaseInterval = this.mainBaseInterval;\n      var modifiedDifference = difference + this.startLocation + (1 - this.endLocation) * this.baseDuration;\n      var groupInterval = void 0;\n\n      if (this.groupInterval) {\n        groupInterval = __assign({}, this.groupInterval);\n      } else {\n        groupInterval = this.chooseInterval(0, modifiedDifference, this.groupCount, this.groupIntervals);\n\n        if ($time.getDuration(groupInterval.timeUnit, groupInterval.count) < $time.getDuration(mainBaseInterval.timeUnit, mainBaseInterval.count)) {\n          groupInterval = __assign({}, mainBaseInterval);\n        }\n      }\n\n      this._groupInterval = groupInterval;\n      var newId = groupInterval.timeUnit + groupInterval.count;\n\n      if (this._currentDataSetId != newId) {\n        this._currentDataSetId = newId;\n        this.dispatch(\"groupperiodchanged\");\n      }\n\n      this.series.each(function (series) {\n        if (series.baseAxis == _this) {\n          if (series.setDataSet(_this._currentDataSetId)) {\n            dataSetChanged = true;\n          }\n        }\n      });\n    }\n\n    var gridInterval = this.chooseInterval(0, difference, this._gridCount);\n\n    if ($time.getDuration(gridInterval.timeUnit, gridInterval.count) < this.baseDuration) {\n      gridInterval = __assign({}, this.baseInterval);\n    }\n\n    this._gridInterval = gridInterval;\n    this._nextGridUnit = $time.getNextUnit(gridInterval.timeUnit); // the following is needed to avoid grid flickering while scrolling\n\n    this._intervalDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\n    this._gridDate = $time.round(new Date(this.minZoomed - $time.getDuration(gridInterval.timeUnit, gridInterval.count)), gridInterval.timeUnit, gridInterval.count, this._firstWeekDay, this._df.utc, new Date(this.min)); // tell series start/end\n\n    $iter.each(this.series.iterator(), function (series) {\n      if (series.baseAxis == _this) {\n        var field_1 = series.getAxisField(_this);\n        var minZoomed = $time.round(new Date(_this._minZoomed + _this.baseDuration * 0.05), _this.baseInterval.timeUnit, _this.baseInterval.count, _this._firstWeekDay, _this._df.utc).getTime();\n        var minZoomedStr = minZoomed.toString();\n        var startDataItem = series.dataItemsByAxis.getKey(_this.uid).getKey(minZoomedStr + series.currentDataSetId);\n        var startIndex = 0;\n\n        if (_this.start != 0) {\n          if (startDataItem) {\n            startDataItem = _this.findFirst(startDataItem, minZoomed, field_1);\n            startIndex = startDataItem.index;\n          } else {\n            startIndex = series.dataItems.findClosestIndex(_this._minZoomed, function (x) {\n              return x[field_1];\n            }, \"left\");\n          }\n        } // 1 millisecond is removed so that if only first item is selected, it would not count in the second.\n\n\n        var baseInterval = _this.baseInterval;\n        var maxZoomed = $time.add($time.round(new Date(_this._maxZoomed), baseInterval.timeUnit, baseInterval.count, _this._firstWeekDay, _this._df.utc), baseInterval.timeUnit, baseInterval.count, _this._df.utc).getTime();\n        var maxZoomedStr = maxZoomed.toString();\n        var endDataItem = series.dataItemsByAxis.getKey(_this.uid).getKey(maxZoomedStr + series.currentDataSetId);\n        var endIndex = series.dataItems.length;\n\n        if (_this.end != 1) {\n          if (endDataItem) {\n            endIndex = endDataItem.index;\n          } else {\n            maxZoomed -= 1;\n            endIndex = series.dataItems.findClosestIndex(maxZoomed, function (x) {\n              return x[field_1];\n            }, \"right\"); // not good - if end is in the gap, indexes go like 5,4,3,4,2,1\n            //if (endIndex < series.dataItems.length) {\n\n            endIndex++; //}\n          }\n        }\n\n        series.startIndex = startIndex;\n        series.endIndex = endIndex;\n\n        if (!dataSetChanged && series.dataRangeInvalid) {\n          series.validateDataRange();\n        }\n      }\n    });\n  };\n\n  DateAxis.prototype.findFirst = function (dataItem, time, key) {\n    var index = dataItem.index;\n\n    if (index > 0) {\n      var series = dataItem.component;\n      var previousDataItem = series.dataItems.getIndex(index - 1);\n      var previousDate = previousDataItem[key];\n\n      if (!previousDate || previousDate.getTime() < time) {\n        return dataItem;\n      } else {\n        return this.findFirst(previousDataItem, time, key);\n      }\n    } else {\n      return dataItem;\n    }\n  };\n  /**\r\n   * (Re)validates data.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  DateAxis.prototype.validateData = function () {\n    _super.prototype.validateData.call(this);\n\n    if (!$type.isNumber(this.baseInterval.count)) {\n      this.baseInterval.count = 1;\n    }\n  };\n\n  Object.defineProperty(DateAxis.prototype, \"minDifference\", {\n    /**\r\n     * @ignore\r\n     */\n    get: function get() {\n      var _this = this;\n\n      var minDifference = Number.MAX_VALUE;\n      this.series.each(function (series) {\n        if (minDifference > _this._minDifference[series.uid]) {\n          minDifference = _this._minDifference[series.uid];\n        }\n      });\n\n      if (minDifference == Number.MAX_VALUE || minDifference == 0) {\n        minDifference = $time.getDuration(\"day\");\n      }\n\n      return minDifference;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * [dataChangeUpdate description]\r\n   *\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n\n  DateAxis.prototype.seriesDataChangeUpdate = function (series) {\n    this._minDifference[series.uid] = Number.MAX_VALUE;\n  };\n  /**\r\n   * [postProcessSeriesDataItems description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n\n\n  DateAxis.prototype.postProcessSeriesDataItems = function (series) {\n    var _this = this;\n\n    if (series) {\n      this.seriesGroupUpdate(series);\n    } else {\n      this.series.each(function (series) {\n        _this.seriesGroupUpdate(series);\n      });\n    }\n\n    this.addEmptyUnitsBreaks();\n  };\n\n  DateAxis.prototype.seriesGroupUpdate = function (series) {\n    var _this = this;\n\n    if (JSON.stringify(series._baseInterval[this.uid]) != JSON.stringify(this.mainBaseInterval)) {\n      series._baseInterval[this.uid] = this.mainBaseInterval;\n      series.mainDataSet.each(function (dataItem) {\n        _this.postProcessSeriesDataItem(dataItem);\n      });\n\n      if (this.groupData) {\n        this.groupSeriesData(series);\n      }\n    }\n  };\n  /**\r\n   * Calculates series group data.\r\n   *\r\n   * @param  series  Series\r\n   * @ignore\r\n   */\n\n\n  DateAxis.prototype.groupSeriesData = function (series) {\n    var _this = this;\n\n    if (series.baseAxis == this && series.dataItems.length > 0 && !series.dataGrouped) {\n      // make array of intervals which will be used;\n      var intervals_1 = [];\n      var mainBaseInterval = this.mainBaseInterval;\n      var mainIntervalDuration_1 = $time.getDuration(mainBaseInterval.timeUnit, mainBaseInterval.count);\n      this.groupIntervals.each(function (interval) {\n        var intervalDuration = $time.getDuration(interval.timeUnit, interval.count);\n\n        if (intervalDuration > mainIntervalDuration_1 && intervalDuration < _this.max - _this.min || _this.groupInterval) {\n          intervals_1.push(interval);\n        }\n      });\n\n      if (series._dataSets) {\n        series._dataSets.each(function (key, dataItems) {\n          dataItems.each(function (dataItem) {\n            dataItem.dispose();\n          });\n          dataItems.clear();\n        });\n\n        series._dataSets.clear();\n      }\n\n      $array.each(intervals_1, function (interval) {\n        //let mainBaseInterval = this._mainBaseInterval;\n        var key = \"date\" + _this.axisLetter; // create data set\n\n        var dataSetId = interval.timeUnit + interval.count; // todo: check where this clone goes\n\n        var dataSet = new OrderedListTemplate(series.mainDataSet.template.clone());\n        series.dataSets.setKey(dataSetId, dataSet);\n        series.dataGrouped = true;\n        var dataItems = series.mainDataSet;\n        var previousTime = Number.NEGATIVE_INFINITY;\n        var i = 0;\n        var newDataItem;\n        var dataFields = [];\n        $object.each(series.dataFields, function (dfkey, df) {\n          var dfk = dfkey;\n\n          if (dfk != key && dfk.indexOf(\"Show\") == -1) {\n            dataFields.push(dfk);\n          }\n        });\n        dataItems.each(function (dataItem) {\n          var date = dataItem.getDate(key);\n\n          if (date) {\n            var time = date.getTime();\n            var roundedDate = $time.round(new Date(time), interval.timeUnit, interval.count, _this._df.firstDayOfWeek, _this._df.utc);\n            var currentTime = roundedDate.getTime(); // changed period\t\t\t\t\t\t\t\t\n\n            if (previousTime < currentTime) {\n              newDataItem = dataSet.create();\n              newDataItem.dataContext = {};\n              newDataItem.setWorkingLocation(\"dateX\", series.dataItems.template.locations.dateX, 0);\n              newDataItem.setWorkingLocation(\"openDateX\", series.dataItems.template.locations.openDateX, 0);\n              newDataItem.setWorkingLocation(\"dateY\", series.dataItems.template.locations.dateY, 0);\n              newDataItem.setWorkingLocation(\"openDateY\", series.dataItems.template.locations.openDateY, 0);\n              newDataItem.component = series; // other Dates?\n\n              newDataItem.setDate(key, roundedDate);\n              newDataItem._index = i;\n              i++;\n              $array.each(dataFields, function (vkey) {\n                //let groupFieldName = vkey + \"Group\";\n                var dvalues = dataItem.values[vkey];\n\n                if (dvalues) {\n                  var value = dvalues.value;\n                  var values = newDataItem.values[vkey];\n\n                  if ($type.isNumber(value)) {\n                    values.value = value;\n                    values.workingValue = value;\n                    values.open = value;\n                    values.close = value;\n                    values.low = value;\n                    values.high = value;\n                    values.sum = value;\n                    values.average = value;\n                    values.count = 1;\n                  } else {\n                    values.count = 0;\n                  }\n                }\n              });\n\n              _this.postProcessSeriesDataItem(newDataItem, interval);\n\n              $object.each(series.propertyFields, function (key, fieldValue) {\n                var f = key;\n                var value = dataItem.properties[key];\n\n                if ($type.hasValue(value)) {\n                  newDataItem.hasProperties = true;\n                  newDataItem.setProperty(f, value);\n                }\n              });\n              newDataItem.groupDataItems = [dataItem];\n              previousTime = currentTime;\n            } else {\n              if (newDataItem) {\n                $array.each(dataFields, function (vkey) {\n                  var groupFieldName = series.groupFields[vkey];\n                  var dvalues = dataItem.values[vkey];\n\n                  if (dvalues) {\n                    var value = dvalues.value;\n\n                    if ($type.isNumber(value)) {\n                      var values = newDataItem.values[vkey];\n\n                      if (!$type.isNumber(values.open)) {\n                        values.open = value;\n                      }\n\n                      values.close = value;\n\n                      if (values.low > value || !$type.isNumber(values.low)) {\n                        values.low = value;\n                      }\n\n                      if (values.high < value || !$type.isNumber(values.high)) {\n                        values.high = value;\n                      }\n\n                      if ($type.isNumber(values.sum)) {\n                        values.sum += value;\n                      } else {\n                        values.sum = value;\n                      }\n\n                      values.count++;\n                      values.average = values.sum / values.count;\n\n                      if ($type.isNumber(values[groupFieldName])) {\n                        values.value = values[groupFieldName];\n                        values.workingValue = values.value;\n                      }\n                    }\n                  }\n                });\n                $utils.copyProperties(dataItem.properties, newDataItem.properties);\n                $object.each(series.propertyFields, function (key, fieldValue) {\n                  var f = key;\n                  var value = dataItem.properties[key];\n\n                  if ($type.hasValue(value)) {\n                    newDataItem.hasProperties = true;\n                    newDataItem.setProperty(f, value);\n                  }\n                });\n                newDataItem.groupDataItems.push(dataItem);\n              }\n            }\n          }\n\n          if (newDataItem) {\n            $utils.copyProperties(dataItem.dataContext, newDataItem.dataContext);\n          }\n        });\n      });\n      this.calculateZoom();\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  DateAxis.prototype.getDFFormatter = function () {\n    this._df = this.dateFormatter;\n  };\n  /**\r\n   * [postProcessSeriesDataItem description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param dataItem Data item\r\n   */\n\n\n  DateAxis.prototype.postProcessSeriesDataItem = function (dataItem, interval) {\n    var _this = this; // we need to do this for all series data items not only added recently, as baseInterval might change\n\n\n    var intervalID = \"\";\n\n    if (interval) {\n      intervalID = interval.timeUnit + interval.count;\n    } else {\n      interval = this.mainBaseInterval;\n    }\n\n    var series = dataItem.component;\n    var dataItemsByAxis = series.dataItemsByAxis.getKey(this.uid);\n    $object.each(dataItem.dates, function (key) {\n      var date = dataItem.getDate(key);\n      var time = date.getTime();\n      var startDate = $time.round(new Date(time), interval.timeUnit, interval.count, _this._firstWeekDay, _this._df.utc);\n      var startTime = startDate.getTime();\n      var endDate = $time.add(new Date(startTime), interval.timeUnit, interval.count, _this._df.utc);\n      dataItem.setCalculatedValue(key, startTime, \"open\");\n      dataItem.setCalculatedValue(key, endDate.getTime(), \"close\");\n      dataItemsByAxis.setKey(startTime + intervalID, dataItem);\n    });\n  };\n  /**\r\n   * Collapses empty stretches of date/time scale by creating [[AxisBreak]]\r\n   * elements for them.\r\n   *\r\n   * Can be used to automatically remove strethes without data, like weekends.\r\n   *\r\n   * No, need to call this manually. It will automatically be done if\r\n   * `skipEmptyPeriods = true`.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  DateAxis.prototype.addEmptyUnitsBreaks = function () {\n    var _this = this;\n\n    if (this.skipEmptyPeriods && $type.isNumber(this.min) && $type.isNumber(this.max)) {\n      var timeUnit = this.baseInterval.timeUnit;\n      var count = this.baseInterval.count;\n\n      if (this._axisBreaks) {\n        this._axisBreaks.clear(); // TODO: what about breaks added by user?\n\n      }\n\n      var date = $time.round(new Date(this.min), timeUnit, count, this._firstWeekDay, this._df.utc);\n      var axisBreak = void 0;\n\n      var _loop_1 = function _loop_1() {\n        $time.add(date, timeUnit, count, this_1._df.utc);\n        var startTime = date.getTime();\n        var startTimeStr = startTime.toString();\n        var hasData = $iter.contains(this_1.series.iterator(), function (series) {\n          return !!series.dataItemsByAxis.getKey(_this.uid).getKey(startTimeStr + series.currentDataSetId);\n        }); // open break if not yet opened\n\n        if (!hasData) {\n          if (!axisBreak) {\n            axisBreak = this_1.axisBreaks.create();\n            axisBreak.startDate = new Date(startTime);\n            this_1._gapBreaks = true;\n          }\n        } else {\n          // close if already opened\n          if (axisBreak) {\n            // close at end time minus one millisecond\n            axisBreak.endDate = new Date(startTime - 1);\n            axisBreak = undefined;\n          }\n        }\n      };\n\n      var this_1 = this;\n\n      while (date.getTime() < this.max - this.baseDuration) {\n        _loop_1();\n      }\n    }\n  };\n  /**\r\n   * Updates positioning of Axis breaks after something changes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  DateAxis.prototype.fixAxisBreaks = function () {\n    var _this = this;\n\n    _super.prototype.fixAxisBreaks.call(this);\n\n    var axisBreaks = this._axisBreaks;\n\n    if (axisBreaks) {\n      if (axisBreaks.length > 0) {\n        // process breaks\n        axisBreaks.each(function (axisBreak) {\n          var breakGridCount = Math.ceil(_this._gridCount * (Math.min(_this.end, axisBreak.endPosition) - Math.max(_this.start, axisBreak.startPosition)) / (_this.end - _this.start));\n          axisBreak.gridInterval = _this.chooseInterval(0, axisBreak.adjustedEndValue - axisBreak.adjustedStartValue, breakGridCount);\n          var gridDate = $time.round(new Date(axisBreak.adjustedStartValue), axisBreak.gridInterval.timeUnit, axisBreak.gridInterval.count, _this._firstWeekDay, _this._df.utc);\n\n          if (gridDate.getTime() > axisBreak.startDate.getTime()) {\n            $time.add(gridDate, axisBreak.gridInterval.timeUnit, axisBreak.gridInterval.count, _this._df.utc);\n          }\n\n          axisBreak.gridDate = gridDate;\n        });\n      }\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  DateAxis.prototype.getFirstWeekDay = function () {\n    if (this._df) {\n      return this._df.firstDayOfWeek;\n    }\n\n    return 1;\n  };\n  /**\r\n   * [getGridDate description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param date           [description]\r\n   * @param intervalCount  [description]\r\n   * @return [description]\r\n   */\n\n\n  DateAxis.prototype.getGridDate = function (date, intervalCount) {\n    var timeUnit = this._gridInterval.timeUnit;\n    var realIntervalCount = this._gridInterval.count; // round date\n\n    $time.round(date, timeUnit, 1, this._firstWeekDay, this._df.utc);\n    var prevTimestamp = date.getTime();\n    var newDate = $time.copy(date); // modify date by adding intervalcount\n\n    var timestamp = $time.add(newDate, timeUnit, intervalCount, this._df.utc).getTime(); // if it's axis break, get first rounded date which is not in a break\n\n    var axisBreak = this.isInBreak(timestamp);\n\n    if (axisBreak && axisBreak.endDate) {\n      newDate = new Date(axisBreak.endDate.getTime());\n      $time.round(newDate, timeUnit, realIntervalCount, this._firstWeekDay, this._df.utc);\n\n      if (newDate.getTime() < axisBreak.endDate.getTime()) {\n        $time.add(newDate, timeUnit, realIntervalCount, this._df.utc);\n      }\n\n      timestamp = newDate.getTime();\n    } // get duration between grid lines with break duration removed\n\n\n    var durationBreaksRemoved = this.adjustDifference(prevTimestamp, timestamp); // calculate how many time units fit to this duration\n\n    var countBreaksRemoved = Math.round(durationBreaksRemoved / $time.getDuration(timeUnit)); // if less units fit, add one and repeat\n\n    if (countBreaksRemoved < realIntervalCount) {\n      return this.getGridDate(date, intervalCount + realIntervalCount);\n    }\n\n    return newDate;\n  };\n  /**\r\n   * [getBreaklessDate description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param axisBreak  [description]\r\n   * @param timeUnit   [description]\r\n   * @param count      [description]\r\n   * @return [description]\r\n   */\n\n\n  DateAxis.prototype.getBreaklessDate = function (axisBreak, timeUnit, count) {\n    var date = new Date(axisBreak.endValue);\n    $time.round(date, timeUnit, count, this._firstWeekDay, this._df.utc);\n    $time.add(date, timeUnit, count, this._df.utc);\n    var timestamp = date.getTime();\n    axisBreak = this.isInBreak(timestamp);\n\n    if (axisBreak) {\n      return this.getBreaklessDate(axisBreak, timeUnit, count);\n    }\n\n    return date;\n  };\n  /**\r\n   * (Re)validates all Axis elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   */\n\n\n  DateAxis.prototype.validateAxisElements = function () {\n    var _this = this;\n\n    if ($type.isNumber(this.max) && $type.isNumber(this.min)) {\n      this.calculateZoom(); // first regular items\n\n      var timestamp = this._gridDate.getTime();\n\n      var timeUnit = this._gridInterval.timeUnit;\n      var intervalCount = this._gridInterval.count;\n      var prevGridDate = $time.copy(this._gridDate);\n      var dataItemsIterator_1 = this._dataItemsIterator;\n      this.resetIterators();\n\n      var _loop_2 = function _loop_2() {\n        var date = this_2.getGridDate($time.copy(prevGridDate), intervalCount);\n        timestamp = date.getTime();\n        var endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\n\n        endDate = $time.add(endDate, timeUnit, intervalCount, this_2._df.utc);\n        var format = this_2.dateFormats.getKey(timeUnit);\n\n        if (this_2.markUnitChange && prevGridDate) {\n          if ($time.checkChange(date, prevGridDate, this_2._nextGridUnit, this_2._df.utc)) {\n            if (timeUnit !== \"year\") {\n              format = this_2.periodChangeDateFormats.getKey(timeUnit);\n            }\n          }\n        }\n\n        var text = this_2._df.format(date, format);\n\n        var dataItem = dataItemsIterator_1.find(function (x) {\n          return x.text === text;\n        });\n\n        if (dataItem.__disabled) {\n          dataItem.__disabled = false;\n        }\n\n        this_2.appendDataItem(dataItem);\n        dataItem.axisBreak = undefined;\n        dataItem.date = date;\n        dataItem.endDate = endDate;\n        dataItem.text = text;\n        this_2.validateDataElement(dataItem);\n        prevGridDate = date;\n      };\n\n      var this_2 = this;\n\n      while (timestamp <= this._maxZoomed) {\n        _loop_2();\n      } // breaks later\n\n\n      var renderer_1 = this.renderer;\n\n      if (this._axisBreaks) {\n        $iter.each(this._axisBreaks.iterator(), function (axisBreak) {\n          if (axisBreak.breakSize > 0) {\n            var timeUnit_1 = axisBreak.gridInterval.timeUnit;\n            var intervalCount_1 = axisBreak.gridInterval.count; // only add grid if gap is bigger then minGridDistance\n\n            if ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer_1.minGridDistance * 4) {\n              var timestamp_1 = axisBreak.gridDate.getTime();\n              var prevGridDate_1;\n              var count = 0;\n\n              var _loop_3 = function _loop_3() {\n                var date = $time.copy(axisBreak.gridDate);\n                timestamp_1 = $time.add(date, timeUnit_1, intervalCount_1 * count, _this._df.utc).getTime();\n                count++;\n\n                if (timestamp_1 > axisBreak.adjustedStartValue && timestamp_1 < axisBreak.adjustedEndValue) {\n                  var endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\n\n                  endDate = $time.add(endDate, timeUnit_1, intervalCount_1, _this._df.utc);\n\n                  var format = _this.dateFormats.getKey(timeUnit_1);\n\n                  if (_this.markUnitChange && prevGridDate_1) {\n                    if ($time.checkChange(date, prevGridDate_1, _this._nextGridUnit, _this._df.utc)) {\n                      if (timeUnit_1 !== \"year\") {\n                        format = _this.periodChangeDateFormats.getKey(timeUnit_1);\n                      }\n                    }\n                  }\n\n                  var text_1 = _this._df.format(date, format);\n\n                  var dataItem = dataItemsIterator_1.find(function (x) {\n                    return x.text === text_1;\n                  });\n\n                  if (dataItem.__disabled) {\n                    dataItem.__disabled = false;\n                  } //this.processDataItem(dataItem);\n\n\n                  _this.appendDataItem(dataItem);\n\n                  dataItem.axisBreak = axisBreak;\n                  axisBreak.dataItems.moveValue(dataItem);\n                  dataItem.date = date;\n                  dataItem.endDate = endDate;\n                  dataItem.text = text_1;\n                  prevGridDate_1 = date;\n\n                  _this.validateDataElement(dataItem);\n                }\n              };\n\n              while (timestamp_1 <= axisBreak.adjustedMax) {\n                _loop_3();\n              }\n            }\n          }\n        });\n      }\n    }\n  };\n  /**\r\n   * Validates Axis data item.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem Data item\r\n   */\n\n\n  DateAxis.prototype.validateDataElement = function (dataItem) {\n    dataItem.itemIndex = this._axisItemCount;\n    this._axisItemCount++;\n\n    if ($type.isNumber(this.max) && $type.isNumber(this.min)) {\n      var renderer = this.renderer;\n      var timestamp = dataItem.value;\n      var endTimestamp = dataItem.endValue;\n\n      if (!$type.isNumber(endTimestamp)) {\n        endTimestamp = timestamp;\n      }\n\n      var position = this.valueToPosition(timestamp);\n      var endPosition = this.valueToPosition(endTimestamp);\n      var fillEndPosition = endPosition;\n\n      if (!dataItem.isRange && this._gridInterval.count > this.baseInterval.count) {\n        endPosition = position + (endPosition - position) / (this._gridInterval.count / this.baseInterval.count);\n      }\n\n      dataItem.position = position;\n      var tick = dataItem.tick;\n\n      if (tick && !tick.disabled) {\n        renderer.updateTickElement(tick, position, endPosition);\n      }\n\n      var grid = dataItem.grid;\n\n      if (grid && !grid.disabled) {\n        renderer.updateGridElement(grid, position, endPosition);\n      }\n\n      var fill = dataItem.axisFill;\n\n      if (fill && !fill.disabled) {\n        renderer.updateFillElement(fill, position, fillEndPosition);\n\n        if (!dataItem.isRange) {\n          this.fillRule(dataItem);\n        }\n      }\n\n      var mask = dataItem.mask;\n\n      if (mask) {\n        renderer.updateFillElement(mask, position, endPosition);\n      }\n\n      if (dataItem.bullet) {\n        renderer.updateBullet(dataItem.bullet, position, endPosition);\n      }\n\n      var label = dataItem.label;\n\n      if (label && !label.disabled) {\n        var location_1 = label.location;\n\n        if (location_1 == 0) {\n          if (this._gridInterval.count == 1 && this._gridInterval.timeUnit != \"week\" && !dataItem.isRange) {\n            location_1 = 0.5;\n          } else {\n            location_1 = 0;\n          }\n        }\n\n        renderer.updateLabelElement(label, position, endPosition, location_1);\n      }\n    }\n  };\n\n  Object.defineProperty(DateAxis.prototype, \"baseDuration\", {\n    /**\r\n     * A duration in milliseconds of the `baseInterval`.\r\n     *\r\n     * @return Duration (ms)\r\n     */\n    get: function get() {\n      return $time.getDuration(this.baseInterval.timeUnit, this.baseInterval.count);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Adjusts min/max values.\r\n   *\r\n   * @ignore Exclude from docs.\r\n   * @todo Description (review)\r\n   * @param min  Min timestamp\r\n   * @param max  Max timestamp\r\n   * @return Adjusted min/max step\r\n   */\n\n  DateAxis.prototype.adjustMinMax = function (min, max) {\n    return {\n      min: min,\n      max: max,\n      step: this.baseDuration\n    };\n  };\n  /**\r\n   * Adjusts the minimum timestamp as per cell start location.\r\n   *\r\n   * @param value  Value\r\n   * @return Adjusted value\r\n   */\n\n\n  DateAxis.prototype.fixMin = function (value) {\n    // like this because months are not equal\n    var interval = this.baseInterval;\n    var startTime = $time.round(new Date(value), interval.timeUnit, interval.count, this._firstWeekDay, this._df.utc).getTime();\n    var endTime = $time.add(new Date(startTime), interval.timeUnit, interval.count, this._df.utc).getTime();\n    return startTime + (endTime - startTime) * this.startLocation;\n  };\n  /**\r\n   * Adjusts the maximum timestamp as per cell start location.\r\n   *\r\n   * @param value  Value\r\n   * @return Adjusted value\r\n   */\n\n\n  DateAxis.prototype.fixMax = function (value) {\n    // like this because months are not equal\n    var interval = this.baseInterval;\n    var startTime = $time.round(new Date(value), interval.timeUnit, interval.count, this._firstWeekDay, this._df.utc).getTime();\n    var endTime = $time.add(new Date(startTime), interval.timeUnit, interval.count, this._df.utc).getTime();\n    return startTime + (endTime - startTime) * this.endLocation;\n  };\n  /**\r\n   * [chooseInterval description]\r\n   *\r\n   * @ignore Exclude from docs.\r\n   * @todo Description\r\n   * @param index      [description]\r\n   * @param duration   [description]\r\n   * @param gridCount  [description]\r\n   * @return [description]\r\n   */\n\n\n  DateAxis.prototype.chooseInterval = function (index, duration, gridCount, intervals) {\n    if (!intervals) {\n      intervals = this.gridIntervals;\n    }\n\n    var gridInterval = intervals.getIndex(index);\n    var intervalDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\n    var lastIndex = intervals.length - 1;\n\n    if (index >= lastIndex) {\n      return __assign({}, intervals.getIndex(lastIndex));\n    }\n\n    var count = Math.ceil(duration / intervalDuration);\n\n    if (duration < intervalDuration && index > 0) {\n      return __assign({}, intervals.getIndex(index - 1));\n    }\n\n    if (count <= gridCount) {\n      return __assign({}, intervals.getIndex(index));\n    } else {\n      if (index + 1 < intervals.length) {\n        return this.chooseInterval(index + 1, duration, gridCount, intervals);\n      } else {\n        return __assign({}, intervals.getIndex(index));\n      }\n    }\n  };\n  /**\r\n   * Formats the value according to axis' own [[DateFormatter]].\r\n   *\r\n   * @param value  Source value\r\n   * @return Formatted value\r\n   */\n\n\n  DateAxis.prototype.formatLabel = function (value) {\n    return this._df.format(value);\n  };\n  /**\r\n   * Converts a Date to an asbolute pixel position within Axis.\r\n   *\r\n   * @param date  Date\r\n   * @return Position (px)\r\n   */\n\n\n  DateAxis.prototype.dateToPosition = function (date) {\n    return this.valueToPosition(date.getTime());\n  };\n  /**\r\n   * Converts a numeric timestamp or a `Date` to a relative position on axis.\r\n   *\r\n   * @param date  Date or a timestamp\r\n   * @return Relative position\r\n   */\n\n\n  DateAxis.prototype.anyToPosition = function (date) {\n    if (date instanceof Date) {\n      return this.dateToPosition(date);\n    } else {\n      return this.valueToPosition(date);\n    }\n  };\n  /**\r\n   * Converts date to orientation point (x, y, angle) on axis\r\n   *\r\n   * @param date Date\r\n   * @return IOrientationPoint\r\n   */\n\n\n  DateAxis.prototype.dateToPoint = function (date) {\n    var position = this.dateToPosition(date);\n    var point = this.renderer.positionToPoint(position);\n    var angle = this.renderer.positionToAngle(position);\n    return {\n      x: point.x,\n      y: point.y,\n      angle: angle\n    };\n  };\n  /**\r\n   * Converts a numeric value to orientation (x, y, angle) point on axis\r\n   *\r\n   * @param value  Value\r\n   * @return Orientation point\r\n   */\n\n\n  DateAxis.prototype.anyToPoint = function (date) {\n    if (date instanceof Date) {\n      return this.dateToPoint(date);\n    } else {\n      return this.valueToPoint(date);\n    }\n  };\n  /**\r\n   * Converts pixel position within Axis to a corresponding Date.\r\n   *\r\n   * @param position  Position (px)\r\n   * @return Date\r\n   */\n\n\n  DateAxis.prototype.positionToDate = function (position) {\n    return new Date(this.positionToValue(position));\n  };\n  /**\r\n   * Returns the relative position on axis for series' data item's value.\r\n   *\r\n   * @since 4.5.14\r\n   * @param  dataItem  Data item\r\n   * @param  key       Data field to get value from\r\n   * @param  location  Location (0-1)\r\n   * @return           Relative position\r\n   */\n\n\n  DateAxis.prototype.getPositionX = function (dataItem, key, location, stackKey, range) {\n    var value = this.getTimeByLocation(dataItem, key, location); //let stack: number = dataItem.getValue(\"valueX\", \"stack\");\n\n    if (!$type.isNumber(value)) {\n      value = this.baseValue;\n    }\n\n    var position = this.valueToPosition(value);\n\n    if (range) {\n      position = $math.fitToRange(position, range.start, range.end);\n    }\n\n    return position;\n  };\n  /**\r\n   * Returns relative position on axis for series' data item's value.\r\n   *\r\n   * @since 4.5.14\r\n   * @param  dataItem  Data item\r\n   * @param  key       Data field to get value from\r\n   * @param  location  Location (0-1)\r\n   * @return           Relative position\r\n   */\n\n\n  DateAxis.prototype.getPositionY = function (dataItem, key, location, stackKey, range) {\n    var value = this.getTimeByLocation(dataItem, key, location);\n    var stack = dataItem.getValue(\"valueX\", \"stack\");\n\n    if (!$type.isNumber(value)) {\n      value = this.baseValue;\n    }\n\n    var position = this.valueToPosition(value + stack);\n\n    if (range) {\n      position = $math.fitToRange(position, range.start, range.end);\n    }\n\n    return position;\n  };\n  /**\r\n   * Returns an angle for series data item.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   * @param dataItem  Data item\r\n   * @param key       Data field to get value from\r\n   * @param location  Location (0-1)\r\n   * @param stackKey  Stack ID\r\n   * @param range Range to fit in\r\n   * @return Angle\r\n   */\n\n\n  DateAxis.prototype.getAngle = function (dataItem, key, location, stackKey, range) {\n    var value = this.getTimeByLocation(dataItem, key, location);\n    var stack = dataItem.getValue(stackKey, \"stack\");\n\n    if (!$type.isNumber(value)) {\n      value = this.baseValue;\n    }\n\n    var position = this.valueToPosition(value + stack);\n\n    if (range) {\n      position = $math.fitToRange(position, range.start, range.end);\n    }\n\n    return this.positionToAngle(position);\n  };\n  /**\r\n   * [getTimeByLocation description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param dataItem  [description]\r\n   * @param key       [description]\r\n   * @param location  [description]\r\n   * @return [description]\r\n   */\n\n\n  DateAxis.prototype.getTimeByLocation = function (dataItem, key, location) {\n    if (!$type.hasValue(key)) {\n      return;\n    }\n\n    if (!$type.isNumber(location)) {\n      location = dataItem.workingLocations[key];\n\n      if (!$type.isNumber(location)) {\n        location = 0;\n      }\n    }\n\n    var startTime = dataItem.values[key][\"open\"];\n    var endTime = dataItem.values[key][\"close\"];\n    var workingValue = dataItem.values[key].workingValue;\n    var value = dataItem.values[key].value;\n    var difference = value - workingValue;\n    startTime -= difference;\n    endTime -= difference;\n\n    if ($type.isNumber(startTime) && $type.isNumber(endTime)) {\n      return startTime + (endTime - startTime) * location;\n    }\n  };\n  /**\r\n   * Processes a related series' data item.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param dataItem  Data item\r\n   */\n\n\n  DateAxis.prototype.processSeriesDataItem = function (dataItem, axisLetter) {\n    var series = dataItem.component;\n    var time;\n    var date = dataItem[\"date\" + axisLetter];\n\n    if ($type.isNumber(this.timezoneOffset)) {\n      date.setTime(date.getTime() + (date.getTimezoneOffset() - this.timezoneOffset) * 60000);\n      dataItem.setValue(\"date\" + axisLetter, date.getTime(), 0);\n    }\n\n    if (date) {\n      time = date.getTime();\n    } else {\n      return;\n    }\n\n    var openDate = dataItem[\"openDate\" + axisLetter];\n    var prevSeriesTime = this._prevSeriesTime[series.uid];\n    var openTime;\n\n    if (openDate) {\n      openTime = openDate.getTime();\n    }\n\n    if ($type.isNumber(openTime)) {\n      var difference = Math.abs(time - openTime);\n\n      if (this._minDifference[series.uid] > difference) {\n        this._minDifference[series.uid] = difference;\n      }\n    }\n\n    var differece = time - prevSeriesTime;\n\n    if (differece > 0) {\n      if (this._minDifference[series.uid] > differece) {\n        this._minDifference[series.uid] = differece;\n      }\n    }\n\n    this._prevSeriesTime[series.uid] = time;\n\n    if (series._baseInterval[this.uid]) {\n      this.postProcessSeriesDataItem(dataItem);\n    }\n  };\n  /**\r\n   * [updateAxisBySeries description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n\n\n  DateAxis.prototype.updateAxisBySeries = function () {\n    _super.prototype.updateAxisBySeries.call(this);\n\n    var baseInterval = this.chooseInterval(0, this.minDifference, 1); // handle short months\n\n    if (this.minDifference >= $time.getDuration(\"day\", 27) && baseInterval.timeUnit == \"week\") {\n      baseInterval.timeUnit = \"month\";\n      baseInterval.count = 1;\n    }\n\n    if (baseInterval.timeUnit == \"month\") {\n      if (this.minDifference >= $time.getDuration(\"day\", 29 * 2) && baseInterval.count == 1) {\n        baseInterval.count = 2;\n      }\n\n      if (this.minDifference >= $time.getDuration(\"day\", 29 * 3) && baseInterval.count == 2) {\n        baseInterval.count = 3;\n      }\n\n      if (this.minDifference >= $time.getDuration(\"day\", 29 * 6) && baseInterval.count == 5) {\n        baseInterval.count = 6;\n      }\n    } // handle daylight saving\n\n\n    if (this.minDifference >= $time.getDuration(\"hour\", 23) && baseInterval.timeUnit == \"hour\") {\n      baseInterval.timeUnit = \"day\";\n      baseInterval.count = 1;\n    }\n\n    if (this.minDifference >= $time.getDuration(\"week\", 1) - $time.getDuration(\"hour\", 1) && baseInterval.timeUnit == \"day\") {\n      baseInterval.timeUnit = \"week\";\n      baseInterval.count = 1;\n    }\n\n    if (this.minDifference >= $time.getDuration(\"year\", 1) - $time.getDuration(\"day\", 1.01) && baseInterval.timeUnit == \"month\") {\n      baseInterval.timeUnit = \"year\";\n      baseInterval.count = 1;\n    }\n\n    this._baseIntervalReal = baseInterval;\n    this._mainBaseInterval = baseInterval; // no need to invalidate\n  };\n\n  Object.defineProperty(DateAxis.prototype, \"baseInterval\", {\n    /**\r\n     * @return Base interval\r\n     */\n    get: function get() {\n      if (this._groupInterval) {\n        return this._groupInterval;\n      } else if (this._baseInterval) {\n        return this._baseInterval;\n      } else {\n        return this._baseIntervalReal;\n      }\n    },\n\n    /**\r\n     * A base interval (granularity) of data.\r\n     *\r\n     * Used to indicate what are the base units of your data.\r\n     *\r\n     * For example, if you have a data set that has a data point every 5 minutes,\r\n     * you may want to set this to `{ timeUnit: \"minute\", count: 5 }`.\r\n     *\r\n     * If not set, the Axis will try to determine the setting by its own, looking\r\n     * at actual data.\r\n     *\r\n     * For best results, try to follow these values for `count`:\r\n     *\r\n     * When unit is \"month\", use 12 / count = round number\r\n     * When unit is \"hour\", use 24 / count = round number\r\n     * When unit is \"second\" and \"minute\", use 60 / count = round number\r\n     *\r\n     * @param timeInterval base interval\r\n     */\n    set: function set(timeInterval) {\n      if (JSON.stringify(this._baseInterval) != JSON.stringify(timeInterval)) {\n        this._baseInterval = timeInterval;\n        this._mainBaseInterval = timeInterval;\n\n        if (!$type.isNumber(timeInterval.count)) {\n          timeInterval.count = 1;\n        }\n\n        this.invalidate();\n        this.postProcessSeriesDataItems();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateAxis.prototype, \"mainBaseInterval\", {\n    /**\r\n     * Indicates granularity of the data of source (unaggregated) data.\r\n     *\r\n     * @since 4.7.0\r\n     * @return Granularity of the main data set\r\n     */\n    get: function get() {\n      if (this._baseInterval) {\n        return this._baseInterval;\n      } else if (this._mainBaseInterval) {\n        return this._mainBaseInterval;\n      } else {\n        return this._baseIntervalReal;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateAxis.prototype, \"skipEmptyPeriods\", {\n    /**\r\n     * @return Remove empty stretches of time?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"skipEmptyPeriods\");\n    },\n\n    /**\r\n     * If enabled, axis will automatically collapse empty (without data points)\r\n     * periods of time, i.e. weekends.\r\n     *\r\n     * An \"empty\" period is considered a stretch of time in the length of current\r\n     * `baseInterval` without a single data point in it.\r\n     *\r\n     * For each such empty period, axis will automatically create an\r\n     * [[AxisBreak]]. By default they will be invisible. You can still configure\r\n     * them by accessing `axis.breaks.template`.\r\n     *\r\n     * [More info about breaks](https://www.amcharts.com/docs/v4/concepts/axes/#Breaks).\r\n     *\r\n     * Important notes:\r\n     * * If you set this property to `true`, you can not add your custom axis breaks to this axis anymore.\r\n     * * Using this feature affects performance. Use only if you need it.\r\n     * * Setting this to `true` will reset appearance of breaks. If you want to modify appearance, do it *after* you set `skipEmptyPeriods`.\r\n     * * Some axis label overlapping might happen.\r\n     * * This setting is not compatible with `groupData = true`.\r\n     *\r\n     * @default false\r\n     * @param value  Remove empty stretches of time?\r\n     */\n    set: function set(value) {\n      if (value) {\n        var breakTemplate = this.axisBreaks.template;\n        breakTemplate.startLine.disabled = true;\n        breakTemplate.endLine.disabled = true;\n        breakTemplate.fillShape.disabled = true;\n        breakTemplate.breakSize = 0;\n      } else {\n        if (this._gapBreaks) {\n          this.axisBreaks.clear();\n          this._gapBreaks = false;\n        }\n      }\n\n      if (this.setPropertyValue(\"skipEmptyPeriods\", value)) {\n        this.invalidate();\n        this.postProcessSeriesDataItems();\n        this.invalidateSeries();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateAxis.prototype, \"tooltipDateFormat\", {\n    /**\r\n     * @return Date format\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"tooltipDateFormat\");\n    },\n\n    /**\r\n     * A special date format to apply axis tooltips.\r\n     *\r\n     * Will use same format as for labels, if not set.\r\n     *\r\n     * @param value  Date format\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"tooltipDateFormat\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateAxis.prototype, \"markUnitChange\", {\n    /**\r\n     * @return Use different format for period beginning?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"markUnitChange\");\n    },\n\n    /**\r\n     * Use `periodChangeDateFormats` to apply different formats to the first\r\n     * label in bigger time unit.\r\n     *\r\n     * @default true\r\n     * @param value  Use different format for period beginning?\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"markUnitChange\", value)) {\n        this.invalidateData();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns text to show in a tooltip, based on specific relative position\r\n   * within axis.\r\n   *\r\n   * The label will be formatted as per [[DateFormatter]] set for the whole\r\n   * chart, or explicitly for this Axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param position  Position\r\n   * @return Label (formatted date)\r\n   */\n\n  DateAxis.prototype.getTooltipText = function (position) {\n    var text;\n    var date = this.positionToDate(position);\n    date = $time.round(date, this.baseInterval.timeUnit, this.baseInterval.count, this._firstWeekDay, this._df.utc, new Date(this.min));\n    this.tooltipDate = date;\n\n    if ($type.hasValue(this.tooltipDateFormat)) {\n      text = this._df.format(date, this.tooltipDateFormat);\n    } else {\n      var dateFormat = this.dateFormats.getKey(this.baseInterval.timeUnit);\n\n      if (dateFormat) {\n        text = this._df.format(date, dateFormat);\n      } else {\n        text = this.getPositionLabel(position);\n      }\n    }\n\n    if (!this._adapterO) {\n      return text;\n    } else {\n      return this._adapterO.apply(\"getTooltipText\", text);\n    }\n  };\n  /**\r\n   * Takes an absolute position within axis and adjust it to a specific position within base interval. (cell)\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param position Source position\r\n   * @param location  Location in the cell\r\n   * @return Adjusted position\r\n   */\n\n\n  DateAxis.prototype.roundPosition = function (position, location, axisLocation) {\n    var baseInterval = this.baseInterval;\n    var timeUnit = baseInterval.timeUnit;\n    var count = baseInterval.count;\n    var date = this.positionToDate(position);\n    $time.round(date, timeUnit, count, this._firstWeekDay, this._df.utc);\n\n    if (location > 0) {\n      $time.add(date, timeUnit, location * count, this._df.utc);\n    }\n\n    if (axisLocation > 0 && axisLocation < 1) {\n      date.setTime(date.getTime() + this.baseDuration * axisLocation);\n    }\n\n    if (this.isInBreak(date.getTime())) {\n      while (date.getTime() < this.max) {\n        $time.add(date, timeUnit, count, this._df.utc);\n\n        if (!this.isInBreak(date.getTime())) {\n          break;\n        }\n      }\n    }\n\n    return this.dateToPosition(date);\n  };\n  /**\r\n   * Returns an relative position of the start of the cell (period), that specific position value falls into.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   * @param position  Relative position\r\n   * @return Cell start relative position\r\n   */\n\n\n  DateAxis.prototype.getCellStartPosition = function (position) {\n    return this.roundPosition(position, 0);\n  };\n  /**\r\n   * Returns an relative position of the end of the cell (period), that specific position value falls into.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   * @param position  Relative position\r\n   * @return Cell end relative position\r\n   */\n\n\n  DateAxis.prototype.getCellEndPosition = function (position) {\n    return this.roundPosition(position, 1); //return this.dateToPosition($time.add(this.positionToDate(this.roundPosition(position, 1)), this.baseInterval.timeUnit, this.baseInterval.count));\n  };\n  /**\r\n   * Returns a Series data item that corresponds to the specific pixel position\r\n   * of the Axis.\r\n   *\r\n   * If `findNearest` (third parameter) is set to `true`, the method will try\r\n   * to locate nearest available data item if none is found directly under\r\n   * `position`.\r\n   *\r\n   * @param series       Series\r\n   * @param position     Position (px)\r\n   * @param findNearest  Should axis try to find nearest tooltip if there is no data item at exact position\r\n   * @return Data item\r\n   */\n\n\n  DateAxis.prototype.getSeriesDataItem = function (series, position, findNearest) {\n    var value = this.positionToValue(position);\n    var date = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count, this._firstWeekDay, this._df.utc);\n    var dataItemsByAxis = series.dataItemsByAxis.getKey(this.uid);\n    var dataItem = dataItemsByAxis.getKey(date.getTime().toString()); // todo:  alternatively we can find closiest here\n\n    if (!dataItem && findNearest) {\n      var key_1;\n\n      if (this.axisLetter == \"Y\") {\n        key_1 = \"dateY\";\n      } else {\n        key_1 = \"dateX\";\n      }\n\n      dataItem = series.dataItems.getIndex(series.dataItems.findClosestIndex(date.getTime(), function (x) {\n        if (x[key_1]) {\n          return x[key_1].getTime();\n        } else {\n          return -Infinity;\n        }\n      }, \"any\"));\n    }\n\n    return dataItem;\n  };\n  /**\r\n   * Returns a formatted date based on position in axis scale.\r\n   *\r\n   * Please note that `position` represents position within axis which may be\r\n   * zoomed and not correspond to Cursor's `position`.\r\n   *\r\n   * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n   * @param position  Relative position on axis (0-1)\r\n   * @return Position label\r\n   */\n\n\n  DateAxis.prototype.getPositionLabel = function (position) {\n    // @todo Better format recognition\n    var date = this.positionToDate(position);\n    return this._df.format(date, this.getCurrentLabelFormat());\n  };\n  /**\r\n   * Returns label date format based on currently used time units\r\n   *\r\n   * @return Format\r\n   */\n\n\n  DateAxis.prototype.getCurrentLabelFormat = function () {\n    return this.dateFormats.getKey(this._gridInterval ? this._gridInterval.timeUnit : \"day\");\n  };\n  /**\r\n   * Initializes an Axis renderer.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  DateAxis.prototype.initRenderer = function () {\n    _super.prototype.initRenderer.call(this);\n\n    var renderer = this.renderer;\n\n    if (renderer) {\n      // Set defaults\n      renderer.ticks.template.location = 0;\n      renderer.grid.template.location = 0;\n      renderer.labels.template.location = 0;\n      renderer.baseGrid.disabled = true;\n    }\n  };\n\n  Object.defineProperty(DateAxis.prototype, \"basePoint\", {\n    /**\r\n     * Coordinates of the actual axis start.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Base point\r\n     */\n    get: function get() {\n      return {\n        x: 0,\n        y: 0\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  DateAxis.prototype.animateMinMax = function (min, max) {\n    var _this = this;\n\n    var animation = this.animate([{\n      property: \"_minAdjusted\",\n      from: this._minAdjusted,\n      to: min\n    }, {\n      property: \"_maxAdjusted\",\n      from: this._maxAdjusted,\n      to: max\n    }], this.rangeChangeDuration, this.rangeChangeEasing);\n    animation.events.on(\"animationprogress\", function () {\n      _this.dispatch(\"extremeschanged\");\n    });\n    return animation;\n  };\n  /**\r\n   * Invalidates axis data items when series extremes change\r\n   */\n\n\n  DateAxis.prototype.handleExtremesChange = function () {\n    _super.prototype.handleExtremesChange.call(this);\n\n    if (this.groupData) {\n      var id = this.baseInterval.timeUnit + this.baseInterval.count;\n      this.groupMin[id] = this._finalMin;\n      this.groupMax[id] = this._finalMax;\n    }\n  };\n  /**\r\n   * Zooms axis to specific Dates.\r\n   *\r\n   * @param startDate       Start date\r\n   * @param endValue        End date\r\n   * @param skipRangeEvent  Do not invoke events\r\n   * @param instantly       Do not play zoom animations\r\n   */\n\n\n  DateAxis.prototype.zoomToDates = function (startDate, endDate, skipRangeEvent, instantly, adjust) {\n    startDate = this._df.parse(startDate);\n    endDate = this._df.parse(endDate);\n    this.zoomToValues(startDate.getTime(), endDate.getTime(), skipRangeEvent, instantly, adjust);\n  };\n  /**\r\n   * Zooms axis to specific values.\r\n   *\r\n   * @param startValue      Start value\r\n   * @param endValue        End value\r\n   * @param skipRangeEvent  Do not invoke events\r\n   * @param instantly       Do not play zoom animations\r\n   */\n\n\n  DateAxis.prototype.zoomToValues = function (startValue, endValue, skipRangeEvent, instantly, adjust) {\n    var _this = this;\n\n    if (!this.groupData) {\n      var start = (startValue - this.min) / (this.max - this.min);\n      var end = (endValue - this.min) / (this.max - this.min);\n      this.zoom({\n        start: start,\n        end: end\n      }, skipRangeEvent, instantly);\n    } else {\n      var difference = this.adjustDifference(startValue, endValue);\n      var isEnd = false;\n\n      if (endValue == this.max) {\n        isEnd = true;\n      }\n\n      var isStart = false;\n\n      if (startValue == this.min) {\n        isStart = true;\n      }\n\n      if ($type.hasValue(difference)) {\n        var mainBaseInterval = this.mainBaseInterval;\n        var groupInterval_1 = this.chooseInterval(0, difference, this.groupCount, this.groupIntervals);\n\n        if (groupInterval_1.timeUnit == mainBaseInterval.timeUnit && groupInterval_1.count < mainBaseInterval.count || $time.getDuration(groupInterval_1.timeUnit, 1) < $time.getDuration(mainBaseInterval.timeUnit, 1)) {\n          groupInterval_1 = __assign({}, mainBaseInterval);\n        }\n\n        var id = groupInterval_1.timeUnit + groupInterval_1.count;\n        var min_1 = this.groupMin[id];\n        var max_1 = this.groupMax[id];\n\n        if (!$type.isNumber(min_1) || !$type.isNumber(max_1)) {\n          min_1 = Number.POSITIVE_INFINITY;\n          max_1 = Number.NEGATIVE_INFINITY;\n          this.series.each(function (series) {\n            var seriesMin = series.min(_this);\n            var seriesMax = series.max(_this);\n\n            if (series._dataSets) {\n              var ds = series._dataSets.getKey(groupInterval_1.timeUnit + groupInterval_1.count);\n\n              if (ds) {\n                var mindi = ds.getIndex(0);\n                var maxdi = ds.getIndex(ds.length - 1);\n\n                if (mindi) {\n                  if (series.xAxis == _this) {\n                    seriesMin = mindi.dateX.getTime();\n                  } else if (series.yAxis == _this) {\n                    seriesMin = mindi.dateY.getTime();\n                  }\n                }\n\n                if (maxdi) {\n                  if (series.xAxis == _this) {\n                    seriesMax = maxdi.dateX.getTime();\n                  } else if (series.yAxis == _this) {\n                    seriesMax = maxdi.dateY.getTime();\n                  }\n                }\n              }\n            }\n\n            seriesMax = $time.round($time.add(new Date(seriesMax), groupInterval_1.timeUnit, 1, _this._df.utc), groupInterval_1.timeUnit, 1, _this._df.firstDayOfWeek, _this._df.utc).getTime();\n\n            if (seriesMin < min_1) {\n              min_1 = seriesMin;\n            }\n\n            if (seriesMax > max_1) {\n              max_1 = seriesMax;\n            }\n          });\n          this.groupMin[id] = min_1;\n          this.groupMax[id] = max_1;\n        }\n\n        startValue = $math.fitToRange(startValue, min_1, max_1);\n        endValue = $math.fitToRange(endValue, min_1, max_1);\n\n        if (adjust) {\n          if (isEnd) {\n            startValue = endValue - difference;\n            startValue = $math.fitToRange(startValue, min_1, max_1);\n          }\n\n          if (isStart) {\n            endValue = startValue + difference;\n            endValue = $math.fitToRange(endValue, min_1, max_1);\n          }\n        }\n\n        var start = (startValue - min_1) / (max_1 - min_1);\n        var end = (endValue - min_1) / (max_1 - min_1);\n        this.zoom({\n          start: start,\n          end: end\n        }, skipRangeEvent, instantly);\n      }\n    }\n  };\n  /**\r\n   * Adds `baseInterval` to \"as is\" fields.\r\n   *\r\n   * @param field  Field name\r\n   * @return Assign as is?\r\n   */\n\n\n  DateAxis.prototype.asIs = function (field) {\n    return field == \"baseInterval\" || _super.prototype.asIs.call(this, field);\n  };\n  /**\r\n   * Copies all properties and related data from a different instance of Axis.\r\n   *\r\n   * @param source Source Axis\r\n   */\n\n\n  DateAxis.prototype.copyFrom = function (source) {\n    var _this = this;\n\n    _super.prototype.copyFrom.call(this, source);\n\n    this.dateFormats = source.dateFormats;\n    this.periodChangeDateFormats = source.periodChangeDateFormats;\n    this.groupIntervals.clear();\n    source.groupIntervals.each(function (interval) {\n      _this.groupIntervals.push(__assign({}, interval));\n    });\n    this.gridIntervals.clear();\n    source.gridIntervals.each(function (interval) {\n      _this.gridIntervals.push(__assign({}, interval));\n    });\n\n    if (source._baseInterval) {\n      this.baseInterval = source._baseInterval;\n    }\n  };\n  /**\r\n   * Shows Axis tooltip at specific relative position within Axis. (0-1)\r\n   *\r\n   * @param position Position (0-1)\r\n   * @param local or global position\r\n   */\n\n\n  DateAxis.prototype.showTooltipAtPosition = function (position, local) {\n    var _this = this;\n\n    if (!local) {\n      position = this.toAxisPosition(position);\n    }\n\n    if (this.snapTooltip) {\n      // rounding is not good, pen/aac4e7f66f019d36b2447f050c600c13 (no last tootltip shown)\n      var actualDate = this.positionToDate(position); //$time.round(this.positionToDate(position), this.baseInterval.timeUnit, 1, this.getFirstWeekDay(), this.dateFormatter.utc);\n\n      var actualTime_1 = actualDate.getTime();\n      var closestDate_1;\n      this.series.each(function (series) {\n        if (series.baseAxis == _this) {\n          var dataItem = _this.getSeriesDataItem(series, position, true);\n\n          if (dataItem) {\n            var date = void 0;\n\n            if (series.xAxis == _this) {\n              date = dataItem.dateX;\n            }\n\n            if (series.yAxis == _this) {\n              date = dataItem.dateY;\n            }\n\n            if (!closestDate_1) {\n              closestDate_1 = date;\n            } else {\n              if (Math.abs(closestDate_1.getTime() - actualTime_1) > Math.abs(date.getTime() - actualTime_1)) {\n                closestDate_1 = date;\n              }\n            }\n          }\n        }\n      });\n\n      if (closestDate_1) {\n        var closestTime_1 = closestDate_1.getTime();\n        closestDate_1 = $time.round(new Date(closestTime_1), this.baseInterval.timeUnit, this.baseInterval.count, this._firstWeekDay, this._df.utc);\n        closestTime_1 = closestDate_1.getTime();\n        var tooltipLocation = this.renderer.tooltipLocation;\n\n        if (tooltipLocation == 0) {\n          tooltipLocation = 0.0001;\n        }\n\n        closestDate_1 = new Date(closestDate_1.getTime() + this.baseDuration * tooltipLocation);\n        position = this.dateToPosition(closestDate_1);\n\n        if (this.chart.cursor && this.chart.cursor.snapToSeries) {//void\n        } else {\n          this.series.each(function (series) {\n            var dataItem = series.dataItemsByAxis.getKey(_this.uid).getKey(closestTime_1 + series.currentDataSetId);\n            var point = series.showTooltipAtDataItem(dataItem);\n\n            if (point) {\n              _this.chart._seriesPoints.push({\n                series: series,\n                point: point\n              });\n            } else {\n              // check, otherwise column tooltip will be hidden\n              if (series.tooltipText || series.tooltipHTML) {\n                series.hideTooltip();\n              }\n            }\n          });\n        } //this.chart.sortSeriesTooltips(seriesPoints);\n\n      }\n    }\n\n    _super.prototype.showTooltipAtPosition.call(this, position, true);\n  };\n\n  Object.defineProperty(DateAxis.prototype, \"snapTooltip\", {\n    /**\r\n     * @return Should snap?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"snapTooltip\");\n    },\n\n    /**\r\n     * Should the nearest tooltip be shown if no data item is found on the\r\n     * current cursor position.\r\n     *\r\n     * @default true\r\n     * @param value  Should snap?\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"snapTooltip\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateAxis.prototype, \"groupData\", {\n    /**\r\n     * @return Group data points?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"groupData\");\n    },\n\n    /**\r\n     * Indicates if data should be aggregated to composide data items if there\r\n     * are more data items in selected range than `groupCount`.\r\n     *\r\n     * Grouping will occur automatically, based on current selection range, and\r\n     * will change dynamically when user zooms in/out the chart.\r\n     *\r\n     * NOTE: This works only if [[DateAxis]] is base axis of an [[XYSeries]].\r\n     *\r\n     * The related [[XYSeries]] also needs to be set up to take advantage of, by\r\n     * setting its [`groupFields`](https://www.amcharts.com/docs/v4/reference/xyseries/#groupFields_property).\r\n     *\r\n     * The group intervals to aggregate data to is defined by `groupIntervals`\r\n     * property.\r\n     *\r\n     * ```TypeScript\r\n     * let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n     * dateAxis.groupData = true;\r\n     *\r\n     * let valueAxis = chart.xAxes.push(new am4charts.valueAxis());\r\n     *\r\n     * let series = chart.series.push(new am4charts.LineSeries());\r\n     * series.dataFields.dateX = \"date\";\r\n     * series.dataFields.valueY = \"value\";\r\n     * series.groupFields.valueY = \"average\";\r\n     * ```\r\n     * ```JavaScript\r\n     * var dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n     * dateAxis.groupData = true;\r\n     *\r\n     * var valueAxis = chart.xAxes.push(new am4charts.valueAxis());\r\n     *\r\n     * var series = chart.series.push(new am4charts.LineSeries());\r\n     * series.dataFields.dateX = \"date\";\r\n     * series.dataFields.valueY = \"value\";\r\n     * series.groupFields.valueY = \"average\";\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"xAxes\": [{\r\n     *     \"type\": \"DateAxis\",\r\n     *     \"groupData\": true\r\n     *   }],\r\n     *   \"yAxes\": [{\r\n     *     \"type\": \"ValueAxis\"\r\n     *   }],\r\n     *   \"series\": [{\r\n     *     \"type\": \"LineSeries\",\r\n     *     \"dataFields\": {\r\n     *       \"dateX\": \"date\",\r\n     *       \"valueY\": \"value\"\r\n     *     },\r\n     *     \"groupFields\": {\r\n     *       \"valueY\": \"average\"\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @default false\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/date-axis/#Dynamic_data_item_grouping} for more information about dynamic data item grouping.\r\n     * @since 4.7.0\r\n     * @param  value  Group data points?\r\n     */\n    set: function set(value) {\n      var _this = this;\n\n      if (this.setPropertyValue(\"groupData\", value)) {\n        this.series.each(function (series) {\n          series.setDataSet(\"\");\n\n          if (value && !series.dataGrouped && series.inited) {\n            series._baseInterval[_this.uid] = _this.mainBaseInterval;\n\n            _this.groupSeriesData(series);\n          }\n        });\n        this._currentDataSetId = \"\";\n        this._groupInterval = undefined;\n        this.invalidate();\n        this.invalidateSeries();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateAxis.prototype, \"groupInterval\", {\n    /**\r\n     * @return Interval\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"groupInterval\");\n    },\n\n    /**\r\n     * Disables automatic selection of data grouping intervals and always uses\r\n     * `groupInterval` if set. Works only if `groupData = true`.\r\n     *\r\n     * @since 4.9.24\r\n     * @param  value  Interval\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"groupInterval\", value)) {\n        this.invalidate();\n        this.invalidateSeries();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateAxis.prototype, \"groupCount\", {\n    /**\r\n     * @return Number of data items\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"groupCount\");\n    },\n\n    /**\r\n     * Indicates threshold of data items in selected range at which to start\r\n     * aggregating data items if `groupData = true`.\r\n     *\r\n     * @default 200\r\n     * @since 4.7.0\r\n     * @param  value  Number of data items\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"groupCount\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateAxis.prototype, \"timezoneOffset\", {\n    /**\r\n     * @todo Timezone offset in minutes\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"timezoneOffset\");\n    },\n\n    /**\r\n     *\r\n     * Indicates by how many minutes the timestamps in your data are offset from GMT.\r\n     * This is useful when you have timestamps as your data and you want all the users to see\r\n     * the same result and not the time which was at users's location at the given timestamp.\r\n     * Note, you do not need to set timezoneOffset both here and on DateFormatter, as this will\r\n     * distort the result.\r\n     *\r\n     * @default undefined\r\n     * @since 4.8.5\r\n     * @param  value Time zone offset in minutes\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"timezoneOffset\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateAxis.prototype, \"gridInterval\", {\n    /**\r\n     * Current grid interval.\r\n     *\r\n     * @return Grid interval\r\n     */\n    get: function get() {\n      return this._gridInterval;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  DateAxis.prototype.makeGap = function (dataItem, previous) {\n    var series = dataItem.component;\n\n    if (dataItem && previous) {\n      if (!series.connect && $type.isNumber(series.autoGapCount)) {\n        if (series.baseAxis == this) {\n          var date = dataItem.dates[\"date\" + this.axisLetter];\n          var prevDate = previous.dates[\"date\" + this.axisLetter];\n\n          if (date && prevDate) {\n            var time = date.getTime();\n            var prevTime = prevDate.getTime();\n\n            if (time - prevTime > series.autoGapCount * this.baseDuration) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  };\n\n  Object.defineProperty(DateAxis.prototype, \"baseValue\", {\n    /**\r\n     * @return base value\r\n     */\n    get: function get() {\n      return this.min;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return DateAxis;\n}(ValueAxis);\n\nexport { DateAxis };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"DateAxis\"] = DateAxis;\nregistry.registeredClasses[\"DateAxisDataItem\"] = DateAxisDataItem;","map":{"version":3,"sources":["../../../../../src/.internal/charts/axes/DateAxis.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * DateAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { AxisItemLocation } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { LineSeriesDataItem } from \"../series/LineSeries\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { DateAxisBreak } from \"./DateAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { DateFormatter } from \"../../core/formatters/DateFormatter\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DateAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DateAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: DateAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.values.date = {};\r\n\t\tthis.values.endDate = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Date position of the data item.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set date(date: Date) {\r\n\t\tthis.setDate(\"date\", date);\r\n\t\tthis.value = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get date(): Date {\r\n\t\treturn this.dates[\"date\"];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * End date for data item.\r\n\t *\r\n\t * @param date End date\r\n\t */\r\n\tpublic set endDate(date: Date) {\r\n\t\tthis.setDate(\"endDate\", date);\r\n\t\tthis.endValue = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.dates[\"endDate\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DateAxis]].\r\n */\r\nexport interface IDateAxisDataFields extends IValueAxisDataFields {\r\n\r\n\t/**\r\n\t * Date.\r\n\t */\r\n\tdate?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[DateAxis]].\r\n */\r\nexport interface IDateAxisProperties extends IValueAxisProperties {\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tskipEmptyPeriods?: boolean;\r\n\r\n\t/**\r\n\t * Use `periodChangeDateFormats` to apply different formats to the first\r\n\t * label in bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Use different format for period beginning?\r\n\t */\r\n\tmarkUnitChange?: boolean;\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tsnapTooltip?: boolean;\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t */\r\n\ttooltipDateFormat?: string | Intl.DateTimeFormatOptions;\r\n\r\n\t/**\r\n\t * Indicates if data should be aggregated to composide data items if there\r\n\t * are more data items in selected range than `groupCount`.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.7.0\r\n\t */\r\n\tgroupData?: boolean;\r\n\r\n\t/**\r\n\t * Indicates threshold of data items in selected range at which to start\r\n\t * aggregating data items if `groupData = true`.\r\n\t * \r\n\t * @default 200\r\n\t * @since 4.7.0\r\n\t */\r\n\tgroupCount?: number;\r\n\r\n\t/**\r\n\t * Disables automatic selection of data grouping intervals and always uses\r\n\t * `groupInterval` if set. Works only if `groupData = true`.\r\n\t * \r\n\t * @since 4.9.24\r\n\t */\r\n\tgroupInterval?: ITimeInterval;\r\n\r\n\t/**\r\n\t * \r\n\t * Indicates by how many minutes the timestamps in your data are offset from GMT. \r\n\t * This is useful when you have timestamps as your data and you want all the users to see \r\n\t * the same result and not the time which was at users's location at the given timestamp.\r\n\t * Note, you do not need to set timezoneOffset both here and on DateFormatter, as this will \r\n\t * distort the result.\r\n\t *\r\n\t * @default undefined\r\n\t * @since 4.8.5\r\n\t */\r\n\ttimezoneOffset?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxis]].\r\n */\r\nexport interface IDateAxisEvents extends IValueAxisEvents {\r\n\t/**\r\n\t * Invoked when data grouping is on and grouping period is changed. You can find our the period via dateAxis.currentDataSetId property.\r\n\t */\r\n\tgroupperiodchanged: IDateAxisEvents;\r\n}\r\n\r\n/**\r\n * Defines adapters for [[DateAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisAdapters extends IValueAxisAdapters, IDateAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a date/time-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DateAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IDateAxisEvents} for a list of available Events\r\n * @see {@link IDateAxisAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/date-axis/} got `DateAxis` documention\r\n * @important\r\n */\r\nexport class DateAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: IDateAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IDateAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDateAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IDateAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: DateAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t */\r\n\tpublic _axisBreak: DateAxisBreak;\r\n\r\n\tprotected _gapBreaks: boolean = false;\r\n\r\n\t/**\r\n\t * A list of date/time intervals for Date axis.\r\n\t *\r\n\t * This define various granularities available for the axis. For example\r\n\t * if you have an axis spanning an hour, and space for 6 grid lines / labels\r\n\t * the axis will choose the granularity of 10 minutes, displaying a label\r\n\t * every 10 minutes.\r\n\t *\r\n\t * Default intervals:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *  { timeUnit: \"millisecond\", count: 1 },\r\n\t *  { timeUnit: \"millisecond\", count: 5 },\r\n\t *  { timeUnit: \"millisecond\", count: 10 },\r\n\t *  { timeUnit: \"millisecond\", count: 50 },\r\n\t *  { timeUnit: \"millisecond\", count: 100 },\r\n\t *  { timeUnit: \"millisecond\", count: 500 },\r\n\t *  { timeUnit: \"second\", count: 1 },\r\n\t *  { timeUnit: \"second\", count: 5 },\r\n\t *  { timeUnit: \"second\", count: 10 },\r\n\t *  { timeUnit: \"second\", count: 30 },\r\n\t *  { timeUnit: \"minute\", count: 1 },\r\n\t *  { timeUnit: \"minute\", count: 5 },\r\n\t *  { timeUnit: \"minute\", count: 10 },\r\n\t *  { timeUnit: \"minute\", count: 30 },\r\n\t *  { timeUnit: \"hour\", count: 1 },\r\n\t *  { timeUnit: \"hour\", count: 3 },\r\n\t *  { timeUnit: \"hour\", count: 6 },\r\n\t *  { timeUnit: \"hour\", count: 12 },\r\n\t *  { timeUnit: \"day\", count: 1 },\r\n\t *  { timeUnit: \"day\", count: 2 },\r\n\t *  { timeUnit: \"day\", count: 3 },\r\n\t *  { timeUnit: \"day\", count: 4 },\r\n\t *  { timeUnit: \"day\", count: 5 },\r\n\t *  { timeUnit: \"week\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 2 },\r\n\t *  { timeUnit: \"month\", count: 3 },\r\n\t *  { timeUnit: \"month\", count: 6 },\r\n\t *  { timeUnit: \"year\", count: 1 },\r\n\t *  { timeUnit: \"year\", count: 2 },\r\n\t *  { timeUnit: \"year\", count: 5 },\r\n\t *  { timeUnit: \"year\", count: 10 },\r\n\t *  { timeUnit: \"year\", count: 50 },\r\n\t *  { timeUnit: \"year\", count: 100 }\r\n\t * ]\r\n\t * ```\r\n\t */\r\n\tpublic gridIntervals: List<ITimeInterval> = new List<ITimeInterval>();\r\n\r\n\t/**\r\n\t * If data aggregation is enabled by setting Axis' `groupData = true`, the\r\n\t * chart will try to aggregate data items into grouped data items.\r\n\t *\r\n\t * If there are more data items in selected period than `groupCount`, it will\r\n\t * group data items into bigger period.\r\n\t *\r\n\t * For example seconds might be grouped into 10-second aggregate data items.\r\n\t *\r\n\t * This setting indicates what group intervals can the chart group to.\r\n\t *\r\n\t * Default intervals:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   { timeUnit: \"millisecond\", count: 1},\r\n\t *   { timeUnit: \"millisecond\", count: 10 },\r\n\t *   { timeUnit: \"millisecond\", count: 100 },\r\n\t *   { timeUnit: \"second\", count: 1 },\r\n\t *   { timeUnit: \"second\", count: 10 },\r\n\t *   { timeUnit: \"minute\", count: 1 },\r\n\t *   { timeUnit: \"minute\", count: 10 },\r\n\t *   { timeUnit: \"hour\", count: 1 },\r\n\t *   { timeUnit: \"day\", count: 1 },\r\n\t *   { timeUnit: \"week\", count: 1 },\r\n\t *   { timeUnit: \"month\", count: 1 },\r\n\t *   { timeUnit: \"year\", count: 1 }\r\n\t * ]\r\n\t * ```\r\n\t * `groupData = true` does not work in combination with `skipEmptyPeriods = true`.\r\n\t * \r\n\t * @since 4.7.0\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/date-axis/#Dynamic_data_item_grouping} for more information about dynamic data item grouping.\r\n\t */\r\n\tpublic groupIntervals: List<ITimeInterval> = new List<ITimeInterval>();\r\n\r\n\t/**\r\n\t * A collection of date formats to use when formatting different time units\r\n\t * on Date/time axis.\r\n\t *\r\n\t * Actual defaults will depend on the language locale set for the chart.\r\n\t *\r\n\t * To override format for a specific time unit, say days, you need to set\r\n\t * the appropriate key to a format string. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * \"xAxes\": [{\r\n\t *   \"type\": \"DateAxis\",\r\n\t *   \"dateFormats\": {\r\n\t *     \"day\": \"MMMM d, yyyy\"\r\n\t *   }\r\n\t * }]\r\n\t * ```\r\n\t *\r\n\t * @see {@link DateFormatter}\r\n\t */\r\n\tpublic dateFormats: Dictionary<TimeUnit, string | Intl.DateTimeFormatOptions> = new Dictionary<TimeUnit, string | Intl.DateTimeFormatOptions>();\r\n\r\n\t/**\r\n\t * These formats are applied to labels that are first in a larger unit.\r\n\t *\r\n\t * For example, if we have a DateAxis with days on it, the first day of month\r\n\t * indicates a break in month - a start of the bigger period.\r\n\t *\r\n\t * For those labels, `periodChangeDateFormats` are applied instead of\r\n\t * `dateFormats`.\r\n\t *\r\n\t * This allows us implement convenient structures, like instead of:\r\n\t *\r\n\t * `Jan 1 - Jan 2 - Jan 3 - ...`\r\n\t *\r\n\t * We can have:\r\n\t *\r\n\t * `Jan - 1 - 2 - 3 - ...`\r\n\t *\r\n\t * This can be disabled by setting `markUnitChange = false`.\r\n\t */\r\n\tpublic periodChangeDateFormats: Dictionary<TimeUnit, string | Intl.DateTimeFormatOptions> = new Dictionary<TimeUnit, string | Intl.DateTimeFormatOptions>();\r\n\r\n\t/**\r\n\t * At which intervals grid elements are displayed.\r\n\t */\r\n\tprotected _gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [_intervalDuration description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _intervalDuration: number;\r\n\r\n\t/**\r\n\t * [_gridDate description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _gridDate: Date;\r\n\r\n\t/**\r\n\t * [_nextGridUnit description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _nextGridUnit: TimeUnit;\r\n\r\n\t/**\r\n\t * User-defined granularity of data.\r\n\t */\r\n\tprotected _baseInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * This is base interval of the main data set.\r\n\t */\r\n\tprotected _mainBaseInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * This is base interval of the currently selected data set.\r\n\t */\r\n\tprotected _groupInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * Actual interval (granularity) derived from the actual data.\r\n\t */\r\n\tprotected _baseIntervalReal: ITimeInterval = { timeUnit: \"day\", count: 1 };\r\n\r\n\t/**\r\n\t */\r\n\tprotected _prevSeriesTime: { [index: string]: number } = {};\r\n\r\n\t/**\r\n\t * [_minDifference description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _minDifference: { [index: string]: number } = {};\r\n\r\n\t/**\r\n\t * A function which applies fills to axis cells.\r\n\t *\r\n\t * Default function fills every second fill. You can set this to a function\r\n\t * that follows some other logic.\r\n\t *\r\n\t * Function should accept a [[DateAxisDataItem]] and modify its `axisFill`\r\n\t * property accordingly.\r\n\t */\r\n\tpublic fillRule(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet value = dataItem.value;\r\n\t\tlet axis = dataItem.component;\r\n\t\tlet gridInterval = axis._gridInterval;\r\n\t\tlet gridDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tif (Math.round((value - axis.min) / gridDuration) / 2 == Math.round(Math.round((value - axis.min) / gridDuration) / 2)) {\r\n\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _firstWeekDay: number = 1;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _df: DateFormatter;\r\n\r\n\t/**\r\n\t * A collection of start timestamps to use as axis' min timestamp for\r\n\t * particular data item item periods.\r\n\t *\r\n\t * @since 4.7.0\r\n\t * @readonly\r\n\t */\r\n\tpublic groupMin: { [index: string]: number } = {};\r\n\r\n\t/**\r\n\t * A collection of start timestamps to use as axis' max timestamp for\r\n\t * particular data item item periods.\r\n\t *\r\n\t * @since 4.7.0\r\n\t * @readonly\r\n\t */\r\n\tpublic groupMax: { [index: string]: number } = {};\r\n\r\n\t/**\r\n\t * Date of the last shown axis tooltip.\r\n\t *\r\n\t * @since 4.9.7\r\n\t * @readonly\r\n\t */\r\n\tpublic tooltipDate: Date;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"markUnitChange\", true);\r\n\t\tthis.snapTooltip = true;\r\n\t\tthis.tooltipPosition = \"pointer\";\r\n\r\n\t\tthis.setPropertyValue(\"groupData\", false);\r\n\t\tthis.groupCount = 200;\r\n\r\n\t\tthis.events.on(\"parentset\", this.getDFFormatter, this, false);\r\n\r\n\t\t// Translatable defaults are applied in `applyInternalDefaults()`\r\n\t\t// ...\r\n\r\n\t\t// Define default intervals\r\n\t\tthis.gridIntervals.pushAll([\r\n\t\t\t{ timeUnit: \"millisecond\", count: 1 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 5 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 10 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 50 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 100 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 500 },\r\n\t\t\t{ timeUnit: \"second\", count: 1 },\r\n\t\t\t{ timeUnit: \"second\", count: 5 },\r\n\t\t\t{ timeUnit: \"second\", count: 10 },\r\n\t\t\t{ timeUnit: \"second\", count: 30 },\r\n\t\t\t{ timeUnit: \"minute\", count: 1 },\r\n\t\t\t{ timeUnit: \"minute\", count: 5 },\r\n\t\t\t{ timeUnit: \"minute\", count: 10 },\r\n\t\t\t{ timeUnit: \"minute\", count: 15 },\r\n\t\t\t{ timeUnit: \"minute\", count: 30 },\r\n\t\t\t{ timeUnit: \"hour\", count: 1 },\r\n\t\t\t{ timeUnit: \"hour\", count: 3 },\r\n\t\t\t{ timeUnit: \"hour\", count: 6 },\r\n\t\t\t{ timeUnit: \"hour\", count: 12 },\r\n\t\t\t{ timeUnit: \"day\", count: 1 },\r\n\t\t\t{ timeUnit: \"day\", count: 2 },\r\n\t\t\t{ timeUnit: \"day\", count: 3 },\r\n\t\t\t{ timeUnit: \"day\", count: 4 },\r\n\t\t\t{ timeUnit: \"day\", count: 5 },\r\n\t\t\t{ timeUnit: \"week\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 2 },\r\n\t\t\t{ timeUnit: \"month\", count: 3 },\r\n\t\t\t{ timeUnit: \"month\", count: 6 },\r\n\t\t\t{ timeUnit: \"year\", count: 1 },\r\n\t\t\t{ timeUnit: \"year\", count: 2 },\r\n\t\t\t{ timeUnit: \"year\", count: 5 },\r\n\t\t\t{ timeUnit: \"year\", count: 10 },\r\n\t\t\t{ timeUnit: \"year\", count: 50 },\r\n\t\t\t{ timeUnit: \"year\", count: 100 },\r\n\t\t\t{ timeUnit: \"year\", count: 200 },\r\n\t\t\t{ timeUnit: \"year\", count: 500 },\r\n\t\t\t{ timeUnit: \"year\", count: 1000 },\r\n\t\t\t{ timeUnit: \"year\", count: 2000 },\r\n\t\t\t{ timeUnit: \"year\", count: 5000 },\r\n\t\t\t{ timeUnit: \"year\", count: 10000 },\r\n\t\t\t{ timeUnit: \"year\", count: 100000 }\r\n\t\t]);\r\n\r\n\t\tthis.groupIntervals.pushAll([\r\n\t\t\t{ timeUnit: \"millisecond\", count: 1 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 10 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 100 },\r\n\t\t\t{ timeUnit: \"second\", count: 1 },\r\n\t\t\t{ timeUnit: \"second\", count: 10 },\r\n\t\t\t{ timeUnit: \"minute\", count: 1 },\r\n\t\t\t{ timeUnit: \"minute\", count: 10 },\r\n\t\t\t{ timeUnit: \"hour\", count: 1 },\r\n\t\t\t{ timeUnit: \"day\", count: 1 },\r\n\t\t\t{ timeUnit: \"week\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 1 },\r\n\t\t\t{ timeUnit: \"year\", count: 1 }\r\n\t\t]);\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"date\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Set default date formats\r\n\t\tif (!this.dateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.dateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.dateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.dateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.dateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.dateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.dateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\t // not a mistake\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.dateFormats.setKey(\"month\", this.language.translate(\"_date_month\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"year\")) {\r\n\t\t\tthis.dateFormats.setKey(\"year\", this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"hour\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"month\", this.language.translate(\"_date_month\") + \" \" + this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new DateAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new DateAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis' data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet start: number = this.start;\r\n\t\tlet end: number = this.end;\r\n\t\tlet baseDuration = this.baseDuration;\r\n\t\tlet periodCount: number = (this.max - this.min) / baseDuration;\r\n\r\n\t\tthis._firstWeekDay = this.getFirstWeekDay();\r\n\t\tthis.getDFFormatter();\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tlet mainBaseDuration = $time.getDuration(this.mainBaseInterval.timeUnit, this.mainBaseInterval.count)\r\n\r\n\t\tthis.maxZoomFactor = (this.max - this.min) / mainBaseDuration;\r\n\r\n\t\tthis._deltaMinMax = this.baseDuration / 2;\r\n\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet newPeriodCount: number = (this.max - this.min) / baseDuration;\r\n\t\tstart = start + (end - start) * (1 - periodCount / newPeriodCount);\r\n\t\tthis.zoom({ start: start, end: end }, false, true); // added instantlyto solve zoomout problem when we have axes gaps. @todo: check how this affects maxZoomFactor\r\n\t}\r\n\r\n\t/**\r\n\t * Handles process after zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Does nothing?\r\n\t */\r\n\tpublic handleSelectionExtremesChange(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates all positions, related to axis as per current zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic calculateZoom(): void {\r\n\t\tsuper.calculateZoom();\r\n\r\n\t\tlet difference = this.adjustDifference(this._minZoomed, this._maxZoomed);\r\n\t\tlet dataSetChanged = false;\r\n\r\n\t\t// if data has to be grouped, choose interval and set dataset\r\n\t\tif (this.groupData && $type.hasValue(difference)) {\r\n\t\t\tlet mainBaseInterval = this.mainBaseInterval;\r\n\r\n\t\t\tlet modifiedDifference = difference + this.startLocation + (1 - this.endLocation) * this.baseDuration;\r\n\t\t\tlet groupInterval: ITimeInterval;\r\n\t\t\tif (this.groupInterval) {\r\n\t\t\t\tgroupInterval = { ...this.groupInterval }\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tgroupInterval = this.chooseInterval(0, modifiedDifference, this.groupCount, this.groupIntervals);\r\n\t\t\t\tif ($time.getDuration(groupInterval.timeUnit, groupInterval.count) < $time.getDuration(mainBaseInterval.timeUnit, mainBaseInterval.count)) {\r\n\t\t\t\t\tgroupInterval = { ...mainBaseInterval };\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\tthis._groupInterval = groupInterval;\r\n\t\t\tlet newId = groupInterval.timeUnit + groupInterval.count;\r\n\t\t\tif (this._currentDataSetId != newId) {\r\n\t\t\t\tthis._currentDataSetId = newId;\r\n\t\t\t\tthis.dispatch(\"groupperiodchanged\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\t\tif (series.setDataSet(this._currentDataSetId)) {\r\n\t\t\t\t\t\tdataSetChanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tlet gridInterval: ITimeInterval = this.chooseInterval(0, difference, this._gridCount);\r\n\r\n\t\tif ($time.getDuration(gridInterval.timeUnit, gridInterval.count) < this.baseDuration) {\r\n\t\t\tgridInterval = { ...this.baseInterval };\r\n\t\t}\r\n\r\n\t\tthis._gridInterval = gridInterval;\r\n\t\tthis._nextGridUnit = $time.getNextUnit(gridInterval.timeUnit);\r\n\r\n\t\t// the following is needed to avoid grid flickering while scrolling\r\n\t\tthis._intervalDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\t\tthis._gridDate = $time.round(new Date(this.minZoomed - $time.getDuration(gridInterval.timeUnit, gridInterval.count)), gridInterval.timeUnit, gridInterval.count, this._firstWeekDay, this._df.utc, new Date(this.min));\r\n\r\n\t\t// tell series start/end\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\tlet field = <keyof XYSeriesDataItem>series.getAxisField(this);\r\n\r\n\t\t\t\tlet minZoomed = $time.round(new Date(this._minZoomed + this.baseDuration * 0.05), this.baseInterval.timeUnit, this.baseInterval.count, this._firstWeekDay, this._df.utc).getTime();\r\n\t\t\t\tlet minZoomedStr = minZoomed.toString();\r\n\t\t\t\tlet startDataItem = series.dataItemsByAxis.getKey(this.uid).getKey(minZoomedStr + series.currentDataSetId);\r\n\r\n\t\t\t\tlet startIndex: number = 0;\r\n\t\t\t\tif (this.start != 0) {\r\n\t\t\t\t\tif (startDataItem) {\r\n\t\t\t\t\t\tstartDataItem = this.findFirst(startDataItem, minZoomed, field);\r\n\t\t\t\t\t\tstartIndex = startDataItem.index;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tstartIndex = series.dataItems.findClosestIndex(this._minZoomed, (x) => <number>x[field], \"left\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// 1 millisecond is removed so that if only first item is selected, it would not count in the second.\r\n\t\t\t\tlet baseInterval = this.baseInterval;\r\n\t\t\t\tlet maxZoomed = $time.add($time.round(new Date(this._maxZoomed), baseInterval.timeUnit, baseInterval.count, this._firstWeekDay, this._df.utc), baseInterval.timeUnit, baseInterval.count, this._df.utc).getTime();\r\n\r\n\t\t\t\tlet maxZoomedStr = maxZoomed.toString();\r\n\t\t\t\tlet endDataItem = series.dataItemsByAxis.getKey(this.uid).getKey(maxZoomedStr + series.currentDataSetId);\r\n\t\t\t\tlet endIndex: number = series.dataItems.length;\r\n\t\t\t\tif (this.end != 1) {\r\n\t\t\t\t\tif (endDataItem) {\r\n\t\t\t\t\t\tendIndex = endDataItem.index;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tmaxZoomed -= 1;\r\n\t\t\t\t\t\tendIndex = series.dataItems.findClosestIndex(maxZoomed, (x) => <number>x[field], \"right\");\r\n\t\t\t\t\t\t// not good - if end is in the gap, indexes go like 5,4,3,4,2,1\r\n\t\t\t\t\t\t//if (endIndex < series.dataItems.length) {\r\n\t\t\t\t\t\t\tendIndex++;\r\n\t\t\t\t\t\t//}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.startIndex = startIndex;\r\n\t\t\t\tseries.endIndex = endIndex;\r\n\r\n\t\t\t\tif (!dataSetChanged && series.dataRangeInvalid) {\r\n\t\t\t\t\tseries.validateDataRange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tprotected findFirst(dataItem: XYSeriesDataItem, time: number, key: string): XYSeriesDataItem {\r\n\t\tlet index = dataItem.index;\r\n\r\n\t\tif (index > 0) {\r\n\t\t\tlet series = dataItem.component;\r\n\t\t\tlet previousDataItem = series.dataItems.getIndex(index - 1);\r\n\r\n\t\t\tlet previousDate = (<any>previousDataItem)[key];\r\n\r\n\t\t\tif (!previousDate || previousDate.getTime() < time) {\r\n\t\t\t\treturn dataItem;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this.findFirst(previousDataItem, time, key);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn dataItem;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tif (!$type.isNumber(this.baseInterval.count)) {\r\n\t\t\tthis.baseInterval.count = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get minDifference(): number {\r\n\t\tlet minDifference = Number.MAX_VALUE;\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (minDifference > this._minDifference[series.uid]) {\r\n\t\t\t\tminDifference = this._minDifference[series.uid];\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (minDifference == Number.MAX_VALUE || minDifference == 0) {\r\n\t\t\tminDifference = $time.getDuration(\"day\");\r\n\t\t}\r\n\r\n\t\treturn minDifference;\r\n\t}\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic seriesDataChangeUpdate(series: XYSeries): void {\r\n\t\tthis._minDifference[series.uid] = Number.MAX_VALUE;\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItems description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic postProcessSeriesDataItems(series?: XYSeries): void {\r\n\t\tif (series) {\r\n\t\t\tthis.seriesGroupUpdate(series);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tthis.seriesGroupUpdate(series);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.addEmptyUnitsBreaks();\r\n\t}\r\n\r\n\tprotected seriesGroupUpdate(series: XYSeries) {\r\n\t\tif (JSON.stringify(series._baseInterval[this.uid]) != JSON.stringify(this.mainBaseInterval)) {\r\n\r\n\t\t\tseries._baseInterval[this.uid] = this.mainBaseInterval;\r\n\r\n\t\t\tseries.mainDataSet.each((dataItem) => {\r\n\t\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t\t});\r\n\r\n\t\t\tif (this.groupData) {\r\n\t\t\t\tthis.groupSeriesData(series);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates series group data.\r\n\t * \r\n\t * @param  series  Series\r\n\t * @ignore\r\n\t */\r\n\tpublic groupSeriesData(series: XYSeries): void {\r\n\t\tif (series.baseAxis == this && series.dataItems.length > 0 && !series.dataGrouped) {\r\n\t\t\t// make array of intervals which will be used;\r\n\t\t\tlet intervals: ITimeInterval[] = [];\r\n\t\t\tlet mainBaseInterval = this.mainBaseInterval;\r\n\t\t\tlet mainIntervalDuration = $time.getDuration(mainBaseInterval.timeUnit, mainBaseInterval.count);\r\n\r\n\t\t\tthis.groupIntervals.each((interval) => {\r\n\t\t\t\tlet intervalDuration = $time.getDuration(interval.timeUnit, interval.count);\r\n\t\t\t\tif ((intervalDuration > mainIntervalDuration && intervalDuration < (this.max - this.min)) || this.groupInterval) {\r\n\t\t\t\t\tintervals.push(interval);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tif (series._dataSets) {\r\n\t\t\t\tseries._dataSets.each((key, dataItems) => {\r\n\t\t\t\t\tdataItems.each((dataItem) => {\r\n\t\t\t\t\t\tdataItem.dispose();\r\n\t\t\t\t\t})\r\n\t\t\t\t\tdataItems.clear();\r\n\t\t\t\t})\r\n\t\t\t\tseries._dataSets.clear();\r\n\t\t\t}\r\n\r\n\t\t\t$array.each(intervals, (interval) => {\r\n\t\t\t\t//let mainBaseInterval = this._mainBaseInterval;\r\n\t\t\t\tlet key = \"date\" + this.axisLetter;\r\n\r\n\t\t\t\t// create data set\r\n\t\t\t\tlet dataSetId = interval.timeUnit + interval.count;\r\n\t\t\t\t// todo: check where this clone goes\r\n\t\t\t\tlet dataSet = new OrderedListTemplate(series.mainDataSet.template.clone());\r\n\r\n\t\t\t\tseries.dataSets.setKey(dataSetId, dataSet);\r\n\t\t\t\tseries.dataGrouped = true;\r\n\r\n\t\t\t\tlet dataItems = series.mainDataSet;\r\n\t\t\t\tlet previousTime: number = Number.NEGATIVE_INFINITY;\r\n\t\t\t\tlet i = 0;\r\n\t\t\t\tlet newDataItem: XYSeriesDataItem;\r\n\r\n\t\t\t\tlet dataFields: string[] = [];\r\n\r\n\t\t\t\t$object.each(series.dataFields, (dfkey, df) => {\r\n\t\t\t\t\tlet dfk = <string>dfkey;\r\n\t\t\t\t\tif (dfk != key && dfk.indexOf(\"Show\") == -1) {\r\n\t\t\t\t\t\tdataFields.push(dfk);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\r\n\t\t\t\tdataItems.each((dataItem) => {\r\n\t\t\t\t\tlet date = dataItem.getDate(key);\r\n\t\t\t\t\tif (date) {\r\n\t\t\t\t\t\tlet time = date.getTime();\r\n\t\t\t\t\t\tlet roundedDate = $time.round(new Date(time), interval.timeUnit, interval.count, this._df.firstDayOfWeek, this._df.utc);\r\n\t\t\t\t\t\tlet currentTime = roundedDate.getTime();\r\n\t\t\t\t\t\t// changed period\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (previousTime < currentTime) {\r\n\t\t\t\t\t\t\tnewDataItem = dataSet.create();\r\n\r\n\t\t\t\t\t\t\tnewDataItem.dataContext = {};\r\n\r\n\t\t\t\t\t\t\tnewDataItem.setWorkingLocation(\"dateX\", series.dataItems.template.locations.dateX, 0);\r\n\t\t\t\t\t\t\tnewDataItem.setWorkingLocation(\"openDateX\", series.dataItems.template.locations.openDateX, 0);\r\n\t\t\t\t\t\t\tnewDataItem.setWorkingLocation(\"dateY\", series.dataItems.template.locations.dateY, 0);\r\n\t\t\t\t\t\t\tnewDataItem.setWorkingLocation(\"openDateY\", series.dataItems.template.locations.openDateY, 0);\r\n\r\n\t\t\t\t\t\t\tnewDataItem.component = series;\r\n\t\t\t\t\t\t\t// other Dates?\r\n\t\t\t\t\t\t\tnewDataItem.setDate(key, roundedDate);\r\n\t\t\t\t\t\t\tnewDataItem._index = i;\r\n\t\t\t\t\t\t\ti++;\r\n\r\n\t\t\t\t\t\t\t$array.each(dataFields, (vkey) => {\r\n\t\t\t\t\t\t\t\t//let groupFieldName = vkey + \"Group\";\r\n\t\t\t\t\t\t\t\tlet dvalues = dataItem.values[vkey];\r\n\t\t\t\t\t\t\t\tif (dvalues) {\r\n\t\t\t\t\t\t\t\t\tlet value = dvalues.value;\r\n\t\t\t\t\t\t\t\t\tlet values = newDataItem.values[vkey];\r\n\t\t\t\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t\t\t\t\t\t\t\tvalues.value = value;\r\n\t\t\t\t\t\t\t\t\t\tvalues.workingValue = value;\r\n\r\n\t\t\t\t\t\t\t\t\t\tvalues.open = value;\r\n\t\t\t\t\t\t\t\t\t\tvalues.close = value;\r\n\t\t\t\t\t\t\t\t\t\tvalues.low = value;\r\n\t\t\t\t\t\t\t\t\t\tvalues.high = value;\r\n\t\t\t\t\t\t\t\t\t\tvalues.sum = value;\r\n\t\t\t\t\t\t\t\t\t\tvalues.average = value;\r\n\t\t\t\t\t\t\t\t\t\tvalues.count = 1;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tvalues.count = 0;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t\t\tthis.postProcessSeriesDataItem(newDataItem, interval);\r\n\r\n\t\t\t\t\t\t\t$object.each(series.propertyFields, (key, fieldValue) => {\r\n\t\t\t\t\t\t\t\tconst f: string = <string>key;\r\n\t\t\t\t\t\t\t\tlet value: any = (<any>dataItem.properties)[key];\r\n\r\n\t\t\t\t\t\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\t\t\t\t\t\tnewDataItem.hasProperties = true;\r\n\t\t\t\t\t\t\t\t\tnewDataItem.setProperty(f, value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tnewDataItem.groupDataItems = [dataItem];\r\n\t\t\t\t\t\t\tpreviousTime = currentTime;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (newDataItem) {\r\n\t\t\t\t\t\t\t\t$array.each(dataFields, (vkey) => {\r\n\t\t\t\t\t\t\t\t\tlet groupFieldName = (<any>series.groupFields)[vkey];\r\n\t\t\t\t\t\t\t\t\tlet dvalues = dataItem.values[vkey];\r\n\t\t\t\t\t\t\t\t\tif (dvalues) {\r\n\t\t\t\t\t\t\t\t\t\tlet value = dvalues.value;\r\n\r\n\t\t\t\t\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\t\t\t\t\tlet values = newDataItem.values[vkey];\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tif (!$type.isNumber(values.open)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalues.open = value;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tvalues.close = value;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tif (values.low > value || !$type.isNumber(values.low)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalues.low = value;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tif (values.high < value || !$type.isNumber(values.high)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalues.high = value;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tif ($type.isNumber(values.sum)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalues.sum += value;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalues.sum = value;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tvalues.count++;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tvalues.average = values.sum / values.count;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tif ($type.isNumber(values[groupFieldName])) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalues.value = values[groupFieldName];\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalues.workingValue = values.value;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t$utils.copyProperties(dataItem.properties, newDataItem.properties);\r\n\r\n\t\t\t\t\t\t\t\t$object.each(series.propertyFields, (key, fieldValue) => {\r\n\t\t\t\t\t\t\t\t\tconst f: string = <string>key;\r\n\t\t\t\t\t\t\t\t\tlet value: any = (<any>dataItem.properties)[key];\r\n\t\t\t\t\t\t\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\t\t\t\t\t\t\tnewDataItem.hasProperties = true;\r\n\t\t\t\t\t\t\t\t\t\tnewDataItem.setProperty(f, value);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tnewDataItem.groupDataItems.push(dataItem);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (newDataItem) {\r\n\t\t\t\t\t\t$utils.copyProperties(dataItem.dataContext, newDataItem.dataContext);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t})\r\n\r\n\t\t\tthis.calculateZoom();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected getDFFormatter() {\r\n\t\tthis._df = this.dateFormatter;\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItem description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic postProcessSeriesDataItem(dataItem: XYSeriesDataItem, interval?: ITimeInterval): void {\r\n\t\t// we need to do this for all series data items not only added recently, as baseInterval might change\r\n\t\tlet intervalID = \"\";\r\n\t\tif (interval) {\r\n\t\t\tintervalID = interval.timeUnit + interval.count;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tinterval = this.mainBaseInterval;\r\n\t\t}\r\n\r\n\t\tlet series: XYSeries = dataItem.component;\r\n\t\tlet dataItemsByAxis = series.dataItemsByAxis.getKey(this.uid);\r\n\r\n\t\t$object.each(dataItem.dates, (key) => {\r\n\t\t\tlet date: Date = dataItem.getDate(key);\r\n\t\t\tlet time = date.getTime();\r\n\r\n\t\t\tlet startDate: Date = $time.round(new Date(time), interval.timeUnit, interval.count, this._firstWeekDay, this._df.utc);\r\n\t\t\tlet startTime = startDate.getTime();\r\n\t\t\tlet endDate: Date = $time.add(new Date(startTime), interval.timeUnit, interval.count, this._df.utc);\r\n\r\n\t\t\tdataItem.setCalculatedValue(key, startTime, \"open\");\r\n\t\t\tdataItem.setCalculatedValue(key, endDate.getTime(), \"close\");\r\n\r\n\t\t\tdataItemsByAxis.setKey(startTime + intervalID, dataItem);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Collapses empty stretches of date/time scale by creating [[AxisBreak]]\r\n\t * elements for them.\r\n\t *\r\n\t * Can be used to automatically remove strethes without data, like weekends.\r\n\t *\r\n\t * No, need to call this manually. It will automatically be done if\r\n\t * `skipEmptyPeriods = true`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected addEmptyUnitsBreaks(): void {\r\n\r\n\t\tif (this.skipEmptyPeriods && $type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n\t\t\tlet timeUnit: TimeUnit = this.baseInterval.timeUnit;\r\n\t\t\tlet count: number = this.baseInterval.count;\r\n\r\n\t\t\tif (this._axisBreaks) {\r\n\t\t\t\tthis._axisBreaks.clear(); // TODO: what about breaks added by user?\r\n\t\t\t}\r\n\r\n\t\t\tlet date: Date = $time.round(new Date(this.min), timeUnit, count, this._firstWeekDay, this._df.utc);\r\n\t\t\tlet axisBreak: DateAxisBreak;\r\n\r\n\t\t\twhile (date.getTime() < this.max - this.baseDuration) {\r\n\t\t\t\t$time.add(date, timeUnit, count, this._df.utc);\r\n\r\n\t\t\t\tlet startTime: number = date.getTime();\r\n\t\t\t\tlet startTimeStr: string = startTime.toString();\r\n\r\n\t\t\t\tlet hasData = $iter.contains(this.series.iterator(), (series) => {\r\n\t\t\t\t\treturn !!series.dataItemsByAxis.getKey(this.uid).getKey(startTimeStr + series.currentDataSetId);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// open break if not yet opened\r\n\t\t\t\tif (!hasData) {\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\taxisBreak = <DateAxisBreak>this.axisBreaks.create();\r\n\t\t\t\t\t\taxisBreak.startDate = new Date(startTime);\r\n\t\t\t\t\t\tthis._gapBreaks = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// close if already opened\r\n\t\t\t\t\tif (axisBreak) {\r\n\t\t\t\t\t\t// close at end time minus one millisecond\r\n\t\t\t\t\t\taxisBreak.endDate = new Date(startTime - 1);\r\n\t\t\t\t\t\taxisBreak = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positioning of Axis breaks after something changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fixAxisBreaks(): void {\r\n\t\tsuper.fixAxisBreaks();\r\n\t\tlet axisBreaks = this._axisBreaks;\r\n\t\tif (axisBreaks) {\r\n\t\t\tif (axisBreaks.length > 0) {\r\n\t\t\t\t// process breaks\r\n\t\t\t\taxisBreaks.each((axisBreak) => {\r\n\t\t\t\t\tlet breakGridCount: number = Math.ceil(this._gridCount * (Math.min(this.end, axisBreak.endPosition) - Math.max(this.start, axisBreak.startPosition)) / (this.end - this.start));\r\n\t\t\t\t\taxisBreak.gridInterval = this.chooseInterval(0, axisBreak.adjustedEndValue - axisBreak.adjustedStartValue, breakGridCount);\r\n\t\t\t\t\tlet gridDate = $time.round(new Date(axisBreak.adjustedStartValue), axisBreak.gridInterval.timeUnit, axisBreak.gridInterval.count, this._firstWeekDay, this._df.utc);\r\n\t\t\t\t\tif (gridDate.getTime() > axisBreak.startDate.getTime()) {\r\n\t\t\t\t\t\t$time.add(gridDate, axisBreak.gridInterval.timeUnit, axisBreak.gridInterval.count, this._df.utc);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\taxisBreak.gridDate = gridDate;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected getFirstWeekDay(): number {\r\n\t\tif (this._df) {\r\n\t\t\treturn this._df.firstDayOfWeek;\r\n\t\t}\r\n\t\treturn 1;\r\n\t}\r\n\r\n\t/**\r\n\t * [getGridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param date           [description]\r\n\t * @param intervalCount  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getGridDate(date: Date, intervalCount: number): Date {\r\n\t\tlet timeUnit: TimeUnit = this._gridInterval.timeUnit;\r\n\t\tlet realIntervalCount: number = this._gridInterval.count;\r\n\t\t// round date\r\n\t\t$time.round(date, timeUnit, 1, this._firstWeekDay, this._df.utc);\r\n\r\n\t\tlet prevTimestamp: number = date.getTime();\r\n\r\n\t\tlet newDate: Date = $time.copy(date);\r\n\t\t// modify date by adding intervalcount\r\n\t\tlet timestamp: number = $time.add(newDate, timeUnit, intervalCount, this._df.utc).getTime();\r\n\r\n\t\t// if it's axis break, get first rounded date which is not in a break\r\n\t\tlet axisBreak: DateAxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak && axisBreak.endDate) {\r\n\t\t\tnewDate = new Date(axisBreak.endDate.getTime());\r\n\t\t\t$time.round(newDate, timeUnit, realIntervalCount, this._firstWeekDay, this._df.utc);\r\n\t\t\tif (newDate.getTime() < axisBreak.endDate.getTime()) {\r\n\t\t\t\t$time.add(newDate, timeUnit, realIntervalCount, this._df.utc);\r\n\t\t\t}\r\n\t\t\ttimestamp = newDate.getTime();\r\n\t\t}\r\n\r\n\t\t// get duration between grid lines with break duration removed\r\n\t\tlet durationBreaksRemoved: number = this.adjustDifference(prevTimestamp, timestamp);\r\n\t\t// calculate how many time units fit to this duration\r\n\t\tlet countBreaksRemoved: number = Math.round(durationBreaksRemoved / $time.getDuration(timeUnit));\r\n\r\n\t\t// if less units fit, add one and repeat\r\n\t\tif (countBreaksRemoved < realIntervalCount) {\r\n\t\t\treturn this.getGridDate(date, intervalCount + realIntervalCount);\r\n\t\t}\r\n\r\n\t\treturn newDate;\r\n\t}\r\n\r\n\t/**\r\n\t * [getBreaklessDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param axisBreak  [description]\r\n\t * @param timeUnit   [description]\r\n\t * @param count      [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getBreaklessDate(axisBreak: DateAxisBreak, timeUnit: TimeUnit, count: number): Date {\r\n\t\tlet date = new Date(axisBreak.endValue);\r\n\t\t$time.round(date, timeUnit, count, this._firstWeekDay, this._df.utc);\r\n\t\t$time.add(date, timeUnit, count, this._df.utc);\r\n\r\n\t\tlet timestamp = date.getTime();\r\n\r\n\t\taxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\treturn this.getBreaklessDate(axisBreak, timeUnit, count);\r\n\t\t}\r\n\t\treturn date;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates all Axis elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateAxisElements(): void {\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\r\n\t\t\tthis.calculateZoom();\r\n\r\n\t\t\t// first regular items\r\n\t\t\tlet timestamp = this._gridDate.getTime();\r\n\t\t\tlet timeUnit = this._gridInterval.timeUnit;\r\n\t\t\tlet intervalCount = this._gridInterval.count;\r\n\t\t\tlet prevGridDate = $time.copy(this._gridDate);\r\n\r\n\t\t\tlet dataItemsIterator = this._dataItemsIterator;\r\n\t\t\tthis.resetIterators();\r\n\r\n\t\t\twhile (timestamp <= this._maxZoomed) {\r\n\t\t\t\tlet date = this.getGridDate($time.copy(prevGridDate), intervalCount);\r\n\t\t\t\ttimestamp = date.getTime();\r\n\r\n\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount, this._df.utc);\r\n\r\n\t\t\t\tlet format = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\tif (this.markUnitChange && prevGridDate) {\r\n\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit, this._df.utc)) {\r\n\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet text = this._df.format(date, format);\r\n\r\n\t\t\t\tlet dataItem = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t}\r\n\t\t\t\tthis.appendDataItem(dataItem);\r\n\r\n\t\t\t\tdataItem.axisBreak = undefined;\r\n\t\t\t\tdataItem.date = date;\r\n\t\t\t\tdataItem.endDate = endDate;\r\n\r\n\t\t\t\tdataItem.text = text;\r\n\r\n\t\t\t\tthis.validateDataElement(dataItem);\r\n\r\n\t\t\t\tprevGridDate = date;\r\n\t\t\t}\r\n\r\n\t\t\t// breaks later\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\tif (this._axisBreaks) {\r\n\t\t\t\t$iter.each(this._axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\t\tlet timeUnit: TimeUnit = axisBreak.gridInterval.timeUnit;\r\n\t\t\t\t\t\tlet intervalCount: number = axisBreak.gridInterval.count;\r\n\r\n\t\t\t\t\t\t// only add grid if gap is bigger then minGridDistance\r\n\t\t\t\t\t\tif ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer.minGridDistance * 4) {\r\n\t\t\t\t\t\t\tlet timestamp: number = axisBreak.gridDate.getTime();\r\n\r\n\t\t\t\t\t\t\tlet prevGridDate;\r\n\t\t\t\t\t\t\tlet count: number = 0;\r\n\t\t\t\t\t\t\twhile (timestamp <= axisBreak.adjustedMax) {\r\n\t\t\t\t\t\t\t\tlet date: Date = $time.copy(axisBreak.gridDate);\r\n\t\t\t\t\t\t\t\ttimestamp = $time.add(date, timeUnit, intervalCount * count, this._df.utc).getTime();\r\n\t\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\t\tif (timestamp > axisBreak.adjustedStartValue && timestamp < axisBreak.adjustedEndValue) {\r\n\t\t\t\t\t\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\t\t\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount, this._df.utc);\r\n\r\n\t\t\t\t\t\t\t\t\tlet format = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\t\t\t\t\t\tif (this.markUnitChange && prevGridDate) {\r\n\t\t\t\t\t\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit, this._df.utc)) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tlet text: string = this._df.format(date, format);\r\n\r\n\t\t\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\t\t\t\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\t\t\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\t\t\tdataItem.axisBreak = axisBreak;\r\n\t\t\t\t\t\t\t\t\taxisBreak.dataItems.moveValue(dataItem);\r\n\r\n\t\t\t\t\t\t\t\t\tdataItem.date = date;\r\n\t\t\t\t\t\t\t\t\tdataItem.endDate = endDate;\r\n\t\t\t\t\t\t\t\t\tdataItem.text = text;\r\n\t\t\t\t\t\t\t\t\tprevGridDate = date;\r\n\t\t\t\t\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\tdataItem.itemIndex = this._axisItemCount;\r\n\t\tthis._axisItemCount++;\r\n\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\tlet timestamp = dataItem.value;\r\n\t\t\tlet endTimestamp = dataItem.endValue;\r\n\r\n\t\t\tif (!$type.isNumber(endTimestamp)) {\r\n\t\t\t\tendTimestamp = timestamp;\r\n\t\t\t}\r\n\r\n\t\t\tlet position: number = this.valueToPosition(timestamp);\r\n\t\t\tlet endPosition: number = this.valueToPosition(endTimestamp);\r\n\t\t\tlet fillEndPosition = endPosition;\r\n\r\n\t\t\tif (!dataItem.isRange && this._gridInterval.count > this.baseInterval.count) {\r\n\t\t\t\tendPosition = position + (endPosition - position) / (this._gridInterval.count / this.baseInterval.count);\r\n\t\t\t}\r\n\r\n\t\t\tdataItem.position = position;\r\n\r\n\t\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\t\tif (tick && !tick.disabled) {\r\n\t\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet grid: Grid = dataItem.grid;\r\n\t\t\tif (grid && !grid.disabled) {\r\n\t\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\t\tif (fill && !fill.disabled) {\r\n\t\t\t\trenderer.updateFillElement(fill, position, fillEndPosition);\r\n\t\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\t\tthis.fillRule(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\t\tif (mask) {\r\n\t\t\t\trenderer.updateFillElement(mask, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.bullet) {\r\n\t\t\t\trenderer.updateBullet(dataItem.bullet, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet label: AxisLabel = dataItem.label;\r\n\t\t\tif (label && !label.disabled) {\r\n\t\t\t\tlet location = label.location;\r\n\r\n\r\n\r\n\t\t\t\tif (location == 0) {\r\n\t\t\t\t\tif (this._gridInterval.count == 1 && this._gridInterval.timeUnit != \"week\" && !dataItem.isRange) {\r\n\t\t\t\t\t\tlocation = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlocation = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\trenderer.updateLabelElement(label, position, endPosition, location);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A duration in milliseconds of the `baseInterval`.\r\n\t *\r\n\t * @return Duration (ms)\r\n\t */\r\n\tpublic get baseDuration(): number {\r\n\t\treturn $time.getDuration(this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts min/max values.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description (review)\r\n\t * @param min  Min timestamp\r\n\t * @param max  Max timestamp\r\n\t * @return Adjusted min/max step\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number): IMinMaxStep {\r\n\t\treturn { min: min, max: max, step: this.baseDuration };\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the minimum timestamp as per cell start location.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Adjusted value\r\n\t */\r\n\tprotected fixMin(value: number) {\r\n\t\t// like this because months are not equal\r\n\t\tlet interval = this.baseInterval;\r\n\r\n\t\tlet startTime = $time.round(new Date(value), interval.timeUnit, interval.count, this._firstWeekDay, this._df.utc).getTime();\r\n\t\tlet endTime = $time.add(new Date(startTime), interval.timeUnit, interval.count, this._df.utc).getTime();\r\n\r\n\t\treturn startTime + (endTime - startTime) * this.startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the maximum timestamp as per cell start location.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Adjusted value\r\n\t */\r\n\tprotected fixMax(value: number) {\r\n\t\t// like this because months are not equal\r\n\t\tlet interval = this.baseInterval;\r\n\r\n\t\tlet startTime = $time.round(new Date(value), interval.timeUnit, interval.count, this._firstWeekDay, this._df.utc).getTime();\r\n\t\tlet endTime = $time.add(new Date(startTime), interval.timeUnit, interval.count, this._df.utc).getTime();\r\n\r\n\t\treturn startTime + (endTime - startTime) * this.endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [chooseInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description\r\n\t * @param index      [description]\r\n\t * @param duration   [description]\r\n\t * @param gridCount  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic chooseInterval(index: number, duration: number, gridCount: number, intervals?: List<ITimeInterval>): ITimeInterval {\r\n\t\tif (!intervals) {\r\n\t\t\tintervals = this.gridIntervals;\r\n\t\t}\r\n\r\n\t\tlet gridInterval: ITimeInterval = intervals.getIndex(index);\r\n\r\n\t\tlet intervalDuration: number = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tlet lastIndex: number = intervals.length - 1;\r\n\t\tif (index >= lastIndex) {\r\n\t\t\treturn { ...intervals.getIndex(lastIndex) };\r\n\t\t}\r\n\r\n\t\tlet count: number = Math.ceil(duration / intervalDuration);\r\n\r\n\t\tif (duration < intervalDuration && index > 0) {\r\n\t\t\treturn { ...intervals.getIndex(index - 1) };\r\n\t\t}\r\n\t\tif (count <= gridCount) {\r\n\t\t\treturn { ...intervals.getIndex(index) };\r\n\t\t} else {\r\n\t\t\tif (index + 1 < intervals.length) {\r\n\t\t\t\treturn this.chooseInterval(index + 1, duration, gridCount, intervals);\r\n\t\t\t} else {\r\n\t\t\t\treturn { ...intervals.getIndex(index) };\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DateFormatter]].\r\n\t *\r\n\t * @param value  Source value\r\n\t * @return Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number): string {\r\n\t\treturn this._df.format(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a Date to an asbolute pixel position within Axis.\r\n\t *\r\n\t * @param date  Date\r\n\t * @return Position (px)\r\n\t */\r\n\tpublic dateToPosition(date: Date): number {\r\n\t\treturn this.valueToPosition(date.getTime());\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric timestamp or a `Date` to a relative position on axis.\r\n\t *\r\n\t * @param date  Date or a timestamp\r\n\t * @return Relative position\r\n\t */\r\n\tpublic anyToPosition(date: Date | number): number {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPosition(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPosition(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts date to orientation point (x, y, angle) on axis\r\n\t *\r\n\t * @param date Date\r\n\t * @return IOrientationPoint\r\n\t */\r\n\tpublic dateToPoint(date: Date): IOrientationPoint {\r\n\t\tlet position = this.dateToPosition(date);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation (x, y, angle) point on axis\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic anyToPoint(date: Date | number): IOrientationPoint {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPoint(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPoint(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts pixel position within Axis to a corresponding Date.\r\n\t *\r\n\t * @param position  Position (px)\r\n\t * @return Date\r\n\t */\r\n\tpublic positionToDate(position: number): Date {\r\n\t\treturn new Date(this.positionToValue(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the relative position on axis for series' data item's value.\r\n\t *\r\n\t * @since 4.5.14\r\n\t * @param  dataItem  Data item\r\n\t * @param  key       Data field to get value from\r\n\t * @param  location  Location (0-1)\r\n\t * @return           Relative position\r\n\t */\r\n\tpublic getPositionX(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\t//let stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\tlet position = this.valueToPosition(value);\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns relative position on axis for series' data item's value.\r\n\t *\r\n\t * @since 4.5.14\r\n\t * @param  dataItem  Data item\r\n\t * @param  key       Data field to get value from\r\n\t * @param  location  Location (0-1)\r\n\t * @return           Relative position\r\n\t */\r\n\tpublic getPositionY(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\tlet position = this.valueToPosition(value + stack);\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  Stack ID\r\n\t * @param range Range to fit in\r\n\t * @return Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\tlet position = this.valueToPosition(value + stack);\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(position);\r\n\t}\r\n\r\n\t/**\r\n\t * [getTimeByLocation description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  [description]\r\n\t * @param key       [description]\r\n\t * @param location  [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getTimeByLocation(dataItem: XYSeriesDataItem, key: string, location: number): number {\r\n\r\n\t\tif (!$type.hasValue(key)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = dataItem.workingLocations[key];\r\n\r\n\t\t\tif (!$type.isNumber(location)) {\r\n\t\t\t\tlocation = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet startTime: number = dataItem.values[key][\"open\"];\r\n\t\tlet endTime: number = dataItem.values[key][\"close\"];\r\n\r\n\t\tlet workingValue = dataItem.values[key].workingValue;\r\n\t\tlet value = dataItem.values[key].value;\r\n\r\n\t\tlet difference = value - workingValue;\r\n\t\tstartTime -= difference;\r\n\t\tendTime -= difference;\r\n\r\n\t\tif ($type.isNumber(startTime) && $type.isNumber(endTime)) {\r\n\t\t\treturn startTime + (endTime - startTime) * location;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes a related series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem, axisLetter?: string): void {\r\n\t\tlet series = dataItem.component;\r\n\t\tlet time: number;\r\n\r\n\t\tlet date: Date = (<any>dataItem)[\"date\" + axisLetter];\r\n\r\n\t\tif ($type.isNumber(this.timezoneOffset)) {\r\n\t\t\tdate.setTime(date.getTime() + (date.getTimezoneOffset() - this.timezoneOffset) * 60000)\r\n\t\t\tdataItem.setValue(\"date\" + axisLetter, date.getTime(), 0);\r\n\t\t}\r\n\r\n\t\tif (date) {\r\n\t\t\ttime = date.getTime();\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet openDate: Date = (<any>dataItem)[\"openDate\" + axisLetter];\r\n\t\tlet prevSeriesTime: number = this._prevSeriesTime[series.uid];\r\n\r\n\r\n\t\tlet openTime: number;\r\n\t\tif (openDate) {\r\n\t\t\topenTime = openDate.getTime();\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(openTime)) {\r\n\t\t\tlet difference = Math.abs(time - openTime);\r\n\r\n\t\t\tif (this._minDifference[series.uid] > difference) {\r\n\t\t\t\tthis._minDifference[series.uid] = difference;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet differece: number = time - prevSeriesTime;\r\n\r\n\t\tif (differece > 0) {\r\n\t\t\tif (this._minDifference[series.uid] > differece) {\r\n\t\t\t\tthis._minDifference[series.uid] = differece;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._prevSeriesTime[series.uid] = time;\r\n\r\n\t\tif (series._baseInterval[this.uid]) {\r\n\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [updateAxisBySeries description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic updateAxisBySeries() {\r\n\t\tsuper.updateAxisBySeries();\r\n\r\n\t\tlet baseInterval: ITimeInterval = this.chooseInterval(0, this.minDifference, 1);\r\n\r\n\t\t// handle short months\r\n\r\n\t\tif (this.minDifference >= $time.getDuration(\"day\", 27) && baseInterval.timeUnit == \"week\") {\r\n\t\t\tbaseInterval.timeUnit = \"month\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\t\tif (baseInterval.timeUnit == \"month\") {\r\n\t\t\tif (this.minDifference >= $time.getDuration(\"day\", 29 * 2) && baseInterval.count == 1) {\r\n\t\t\t\tbaseInterval.count = 2;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.minDifference >= $time.getDuration(\"day\", 29 * 3) && baseInterval.count == 2) {\r\n\t\t\t\tbaseInterval.count = 3;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.minDifference >= $time.getDuration(\"day\", 29 * 6) && baseInterval.count == 5) {\r\n\t\t\t\tbaseInterval.count = 6;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// handle daylight saving\r\n\t\tif (this.minDifference >= $time.getDuration(\"hour\", 23) && baseInterval.timeUnit == \"hour\") {\r\n\t\t\tbaseInterval.timeUnit = \"day\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\r\n\t\tif (this.minDifference >= $time.getDuration(\"week\", 1) - $time.getDuration(\"hour\", 1) && baseInterval.timeUnit == \"day\") {\r\n\t\t\tbaseInterval.timeUnit = \"week\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\r\n\t\tif (this.minDifference >= $time.getDuration(\"year\", 1) - $time.getDuration(\"day\", 1.01) && baseInterval.timeUnit == \"month\") {\r\n\t\t\tbaseInterval.timeUnit = \"year\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\r\n\t\tthis._baseIntervalReal = baseInterval;\r\n\t\tthis._mainBaseInterval = baseInterval;\r\n\r\n\t\t// no need to invalidate\r\n\t}\r\n\r\n\t/**\r\n\t * A base interval (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * For example, if you have a data set that has a data point every 5 minutes,\r\n\t * you may want to set this to `{ timeUnit: \"minute\", count: 5 }`.\r\n\t *\r\n\t * If not set, the Axis will try to determine the setting by its own, looking\r\n\t * at actual data.\r\n\t *\r\n\t * For best results, try to follow these values for `count`:\r\n\t *\r\n\t * When unit is \"month\", use 12 / count = round number\r\n\t * When unit is \"hour\", use 24 / count = round number\r\n\t * When unit is \"second\" and \"minute\", use 60 / count = round number\r\n\t *\r\n\t * @param timeInterval base interval\r\n\t */\r\n\tpublic set baseInterval(timeInterval: ITimeInterval) {\r\n\t\tif (JSON.stringify(this._baseInterval) != JSON.stringify(timeInterval)) {\r\n\t\t\tthis._baseInterval = timeInterval;\r\n\t\t\tthis._mainBaseInterval = timeInterval;\r\n\t\t\tif (!$type.isNumber(timeInterval.count)) {\r\n\t\t\t\ttimeInterval.count = 1;\r\n\t\t\t}\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.postProcessSeriesDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Base interval\r\n\t */\r\n\tpublic get baseInterval(): ITimeInterval {\r\n\t\tif (this._groupInterval) {\r\n\t\t\treturn this._groupInterval;\r\n\t\t}\r\n\t\telse if (this._baseInterval) {\r\n\t\t\treturn this._baseInterval;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._baseIntervalReal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates granularity of the data of source (unaggregated) data.\r\n\t *\r\n\t * @since 4.7.0\r\n\t * @return Granularity of the main data set\r\n\t */\r\n\tpublic get mainBaseInterval(): ITimeInterval {\r\n\t\tif (this._baseInterval) {\r\n\t\t\treturn this._baseInterval;\r\n\t\t}\r\n\t\telse if (this._mainBaseInterval) {\r\n\t\t\treturn this._mainBaseInterval;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._baseIntervalReal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * An \"empty\" period is considered a stretch of time in the length of current\r\n\t * `baseInterval` without a single data point in it.\r\n\t *\r\n\t * For each such empty period, axis will automatically create an\r\n\t * [[AxisBreak]]. By default they will be invisible. You can still configure\r\n\t * them by accessing `axis.breaks.template`.\r\n\t *\r\n\t * [More info about breaks](https://www.amcharts.com/docs/v4/concepts/axes/#Breaks).\r\n\t *\r\n\t * Important notes:\r\n\t * * If you set this property to `true`, you can not add your custom axis breaks to this axis anymore.\r\n\t * * Using this feature affects performance. Use only if you need it.\r\n\t * * Setting this to `true` will reset appearance of breaks. If you want to modify appearance, do it *after* you set `skipEmptyPeriods`.\r\n\t * * Some axis label overlapping might happen.\r\n\t * * This setting is not compatible with `groupData = true`.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Remove empty stretches of time?\r\n\t */\r\n\tpublic set skipEmptyPeriods(value: boolean) {\r\n\r\n\t\tif (value) {\r\n\t\t\tlet breakTemplate = this.axisBreaks.template;\r\n\t\t\tbreakTemplate.startLine.disabled = true;\r\n\t\t\tbreakTemplate.endLine.disabled = true;\r\n\t\t\tbreakTemplate.fillShape.disabled = true;\r\n\t\t\tbreakTemplate.breakSize = 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._gapBreaks) {\r\n\t\t\t\tthis.axisBreaks.clear();\r\n\t\t\t\tthis._gapBreaks = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.setPropertyValue(\"skipEmptyPeriods\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.postProcessSeriesDataItems();\r\n\t\t\tthis.invalidateSeries();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Remove empty stretches of time?\r\n\t */\r\n\tpublic get skipEmptyPeriods(): boolean {\r\n\t\treturn this.getPropertyValue(\"skipEmptyPeriods\");\r\n\t}\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @param value  Date format\r\n\t */\r\n\tpublic set tooltipDateFormat(value: string | Intl.DateTimeFormatOptions) {\r\n\t\tthis.setPropertyValue(\"tooltipDateFormat\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date format\r\n\t */\r\n\tpublic get tooltipDateFormat(): string | Intl.DateTimeFormatOptions {\r\n\t\treturn this.getPropertyValue(\"tooltipDateFormat\");\r\n\t}\r\n\r\n\t/**\r\n\t * Use `periodChangeDateFormats` to apply different formats to the first\r\n\t * label in bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Use different format for period beginning?\r\n\t */\r\n\tpublic set markUnitChange(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"markUnitChange\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use different format for period beginning?\r\n\t */\r\n\tpublic get markUnitChange(): boolean {\r\n\t\treturn this.getPropertyValue(\"markUnitChange\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a tooltip, based on specific relative position\r\n\t * within axis.\r\n\t *\r\n\t * The label will be formatted as per [[DateFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position\r\n\t * @return Label (formatted date)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet text: string;\r\n\t\tlet date = this.positionToDate(position);\r\n\t\tdate = $time.round(date, this.baseInterval.timeUnit, this.baseInterval.count, this._firstWeekDay, this._df.utc, new Date(this.min));\r\n\r\n\t\tthis.tooltipDate = date;\r\n\r\n\t\tif ($type.hasValue(this.tooltipDateFormat)) {\r\n\t\t\ttext = this._df.format(date, this.tooltipDateFormat);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet dateFormat = this.dateFormats.getKey(this.baseInterval.timeUnit);\r\n\t\t\tif (dateFormat) {\r\n\t\t\t\ttext = this._df.format(date, dateFormat);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttext = this.getPositionLabel(position);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn text;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"getTooltipText\", text);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position within axis and adjust it to a specific position within base interval. (cell)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position Source position\r\n\t * @param location  Location in the cell\r\n\t * @return Adjusted position\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation, axisLocation?: number): number {\r\n\t\tlet baseInterval = this.baseInterval;\r\n\t\tlet timeUnit = baseInterval.timeUnit;\r\n\t\tlet count = baseInterval.count;\r\n\r\n\t\tlet date: Date = this.positionToDate(position);\r\n\r\n\t\t$time.round(date, timeUnit, count, this._firstWeekDay, this._df.utc);\r\n\r\n\t\tif (location > 0) {\r\n\t\t\t$time.add(date, timeUnit, location * count, this._df.utc);\r\n\t\t}\r\n\r\n\t\tif (axisLocation > 0 && axisLocation < 1) {\r\n\t\t\tdate.setTime(date.getTime() + this.baseDuration * axisLocation);\r\n\t\t}\r\n\r\n\t\tif (this.isInBreak(date.getTime())) {\r\n\t\t\twhile (date.getTime() < this.max) {\r\n\t\t\t\t$time.add(date, timeUnit, count, this._df.utc);\r\n\t\t\t\tif (!this.isInBreak(date.getTime())) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.dateToPosition(date);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the start of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Relative position\r\n\t * @return Cell start relative position\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the end of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Relative position\r\n\t * @return Cell end relative position\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t\t//return this.dateToPosition($time.add(this.positionToDate(this.roundPosition(position, 1)), this.baseInterval.timeUnit, this.baseInterval.count));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Series data item that corresponds to the specific pixel position\r\n\t * of the Axis.\r\n\t *\r\n\t * If `findNearest` (third parameter) is set to `true`, the method will try\r\n\t * to locate nearest available data item if none is found directly under\r\n\t * `position`.\r\n\t *\r\n\t * @param series       Series\r\n\t * @param position     Position (px)\r\n\t * @param findNearest  Should axis try to find nearest tooltip if there is no data item at exact position\r\n\t * @return Data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number, findNearest?: boolean): XYSeriesDataItem {\r\n\r\n\t\tlet value: number = this.positionToValue(position);\r\n\t\tlet date: Date = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count, this._firstWeekDay, this._df.utc);\r\n\r\n\r\n\t\tlet dataItemsByAxis = series.dataItemsByAxis.getKey(this.uid);\r\n\r\n\t\tlet dataItem = dataItemsByAxis.getKey(date.getTime().toString());\r\n\r\n\t\t// todo:  alternatively we can find closiest here\r\n\t\tif (!dataItem && findNearest) {\r\n\r\n\t\t\tlet key: \"dateX\" | \"dateY\";\r\n\r\n\t\t\tif (this.axisLetter == \"Y\") {\r\n\t\t\t\tkey = \"dateY\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tkey = \"dateX\";\r\n\t\t\t}\r\n\r\n\t\t\tdataItem = series.dataItems.getIndex(series.dataItems.findClosestIndex(date.getTime(), (x) => {\r\n\t\t\t\tif (x[key]) {\r\n\t\t\t\t\treturn <number>x[key].getTime();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn -Infinity;\r\n\t\t\t\t}\r\n\t\t\t}, \"any\"));\r\n\t\t}\r\n\r\n\t\treturn dataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a formatted date based on position in axis scale.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\t// @todo Better format recognition\r\n\t\tlet date = this.positionToDate(position);\r\n\t\treturn this._df.format(date, this.getCurrentLabelFormat());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label date format based on currently used time units\r\n\t *\r\n\t * @return Format\r\n\t */\r\n\tprotected getCurrentLabelFormat(): string | Intl.DateTimeFormatOptions {\r\n\t\treturn this.dateFormats.getKey(this._gridInterval ? this._gridInterval.timeUnit : \"day\");\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes an Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\t\tlet renderer = this.renderer;\r\n\t\tif (renderer) {\r\n\t\t\t// Set defaults\r\n\t\t\trenderer.ticks.template.location = 0;\r\n\t\t\trenderer.grid.template.location = 0;\r\n\t\t\trenderer.labels.template.location = 0;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected animateMinMax(min: number, max: number): Animation {\r\n\t\tlet animation = this.animate([{ property: \"_minAdjusted\", from: this._minAdjusted, to: min }, { property: \"_maxAdjusted\", from: this._maxAdjusted, to: max }], this.rangeChangeDuration, this.rangeChangeEasing);\r\n\t\tanimation.events.on(\"animationprogress\", () => {\r\n\t\t\tthis.dispatch(\"extremeschanged\");\r\n\t\t})\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates axis data items when series extremes change\r\n\t */\r\n\tprotected handleExtremesChange() {\r\n\t\tsuper.handleExtremesChange();\r\n\r\n\t\tif (this.groupData) {\r\n\t\t\tlet id = this.baseInterval.timeUnit + this.baseInterval.count;\r\n\t\t\tthis.groupMin[id] = this._finalMin;\r\n\t\t\tthis.groupMax[id] = this._finalMax;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Zooms axis to specific Dates.\r\n\t *\r\n\t * @param startDate       Start date\r\n\t * @param endValue        End date\r\n\t * @param skipRangeEvent  Do not invoke events\r\n\t * @param instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToDates(startDate: Date, endDate: Date, skipRangeEvent?: boolean, instantly?: boolean, adjust?: boolean): void {\r\n\t\tstartDate = this._df.parse(startDate);\r\n\t\tendDate = this._df.parse(endDate);\r\n\t\tthis.zoomToValues(startDate.getTime(), endDate.getTime(), skipRangeEvent, instantly, adjust);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axis to specific values.\r\n\t *\r\n\t * @param startValue      Start value\r\n\t * @param endValue        End value\r\n\t * @param skipRangeEvent  Do not invoke events\r\n\t * @param instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToValues(startValue: number, endValue: number, skipRangeEvent?: boolean, instantly?: boolean, adjust?: boolean): void {\r\n\t\tif (!this.groupData) {\r\n\t\t\tlet start: number = (startValue - this.min) / (this.max - this.min);\r\n\t\t\tlet end: number = (endValue - this.min) / (this.max - this.min);\r\n\r\n\t\t\tthis.zoom({ start: start, end: end }, skipRangeEvent, instantly);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet difference = this.adjustDifference(startValue, endValue);\r\n\t\t\tlet isEnd = false;\r\n\t\t\tif (endValue == this.max) {\r\n\t\t\t\tisEnd = true;\r\n\t\t\t}\r\n\t\t\tlet isStart = false;\r\n\t\t\tif (startValue == this.min) {\r\n\t\t\t\tisStart = true;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(difference)) {\r\n\t\t\t\tlet mainBaseInterval = this.mainBaseInterval;\r\n\t\t\t\tlet groupInterval = this.chooseInterval(0, difference, this.groupCount, this.groupIntervals);\r\n\r\n\t\t\t\tif ((groupInterval.timeUnit == mainBaseInterval.timeUnit && groupInterval.count < mainBaseInterval.count) || $time.getDuration(groupInterval.timeUnit, 1) < $time.getDuration(mainBaseInterval.timeUnit, 1)) {\r\n\t\t\t\t\tgroupInterval = { ...mainBaseInterval };\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet id = groupInterval.timeUnit + groupInterval.count;\r\n\t\t\t\tlet min = this.groupMin[id];\r\n\t\t\t\tlet max = this.groupMax[id];\r\n\r\n\t\t\t\tif (!$type.isNumber(min) || !$type.isNumber(max)) {\r\n\t\t\t\t\tmin = Number.POSITIVE_INFINITY;\r\n\t\t\t\t\tmax = Number.NEGATIVE_INFINITY;\r\n\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\tlet seriesMin = series.min(this);\r\n\t\t\t\t\t\tlet seriesMax = series.max(this);\r\n\r\n\t\t\t\t\t\tif (series._dataSets) {\r\n\t\t\t\t\t\t\tlet ds = series._dataSets.getKey(groupInterval.timeUnit + groupInterval.count);\r\n\r\n\t\t\t\t\t\t\tif (ds) {\r\n\t\t\t\t\t\t\t\tlet mindi = ds.getIndex(0);\r\n\t\t\t\t\t\t\t\tlet maxdi = ds.getIndex(ds.length - 1);\r\n\r\n\t\t\t\t\t\t\t\tif (mindi) {\r\n\t\t\t\t\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\t\t\t\t\tseriesMin = mindi.dateX.getTime();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (series.yAxis == this) {\r\n\t\t\t\t\t\t\t\t\t\tseriesMin = mindi.dateY.getTime();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif (maxdi) {\r\n\t\t\t\t\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\t\t\t\t\tseriesMax = maxdi.dateX.getTime();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (series.yAxis == this) {\r\n\t\t\t\t\t\t\t\t\t\tseriesMax = maxdi.dateY.getTime();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tseriesMax = $time.round($time.add(new Date(seriesMax), groupInterval.timeUnit, 1, this._df.utc), groupInterval.timeUnit, 1, this._df.firstDayOfWeek, this._df.utc).getTime();\r\n\r\n\t\t\t\t\t\tif (seriesMin < min) {\r\n\t\t\t\t\t\t\tmin = seriesMin;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (seriesMax > max) {\r\n\t\t\t\t\t\t\tmax = seriesMax;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t\tthis.groupMin[id] = min;\r\n\t\t\t\t\tthis.groupMax[id] = max;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstartValue = $math.fitToRange(startValue, min, max);\r\n\t\t\t\tendValue = $math.fitToRange(endValue, min, max);\r\n\r\n\t\t\t\tif (adjust) {\r\n\t\t\t\t\tif (isEnd) {\r\n\t\t\t\t\t\tstartValue = endValue - difference;\r\n\t\t\t\t\t\tstartValue = $math.fitToRange(startValue, min, max);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (isStart) {\r\n\t\t\t\t\t\tendValue = startValue + difference;\r\n\t\t\t\t\t\tendValue = $math.fitToRange(endValue, min, max);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet start: number = (startValue - min) / (max - min);\r\n\t\t\t\tlet end: number = (endValue - min) / (max - min);\r\n\r\n\t\t\t\tthis.zoom({ start: start, end: end }, skipRangeEvent, instantly);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds `baseInterval` to \"as is\" fields.\r\n\t *\r\n\t * @param field  Field name\r\n\t * @return Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn field == \"baseInterval\" || super.asIs(field);\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.dateFormats = source.dateFormats;\r\n\t\tthis.periodChangeDateFormats = source.periodChangeDateFormats;\r\n\t\tthis.groupIntervals.clear();\r\n\t\tsource.groupIntervals.each((interval) => {\r\n\t\t\tthis.groupIntervals.push({ ...interval });\r\n\t\t})\r\n\r\n\t\tthis.gridIntervals.clear();\r\n\t\tsource.gridIntervals.each((interval) => {\r\n\t\t\tthis.gridIntervals.push({ ...interval });\r\n\t\t})\r\n\r\n\t\tif (source._baseInterval) {\r\n\t\t\tthis.baseInterval = source._baseInterval;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows Axis tooltip at specific relative position within Axis. (0-1)\r\n\t *\r\n\t * @param position Position (0-1)\r\n\t * @param local or global position\r\n\t */\r\n\tpublic showTooltipAtPosition(position: number, local?: boolean) {\r\n\r\n\t\tif (!local) {\r\n\t\t\tposition = this.toAxisPosition(position);\r\n\t\t}\r\n\r\n\t\tif (this.snapTooltip) {\r\n\t\t\t// rounding is not good, pen/aac4e7f66f019d36b2447f050c600c13 (no last tootltip shown)\r\n\t\t\tlet actualDate = this.positionToDate(position) //$time.round(this.positionToDate(position), this.baseInterval.timeUnit, 1, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\r\n\t\t\tlet actualTime = actualDate.getTime();\r\n\t\t\tlet closestDate: Date;\r\n\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\t\tlet dataItem = this.getSeriesDataItem(series, position, true);\r\n\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tlet date: Date;\r\n\t\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\t\tdate = dataItem.dateX;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (series.yAxis == this) {\r\n\t\t\t\t\t\t\tdate = dataItem.dateY;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!closestDate) {\r\n\t\t\t\t\t\t\tclosestDate = date;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (Math.abs(closestDate.getTime() - actualTime) > Math.abs(date.getTime() - actualTime)) {\r\n\t\t\t\t\t\t\t\tclosestDate = date;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tif (closestDate) {\r\n\t\t\t\tlet closestTime = closestDate.getTime();\r\n\t\t\t\tclosestDate = $time.round(new Date(closestTime), this.baseInterval.timeUnit, this.baseInterval.count, this._firstWeekDay, this._df.utc);\r\n\t\t\t\tclosestTime = closestDate.getTime();\r\n\r\n\t\t\t\tlet tooltipLocation = this.renderer.tooltipLocation;\r\n\t\t\t\tif (tooltipLocation == 0) {\r\n\t\t\t\t\ttooltipLocation = 0.0001;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tclosestDate = new Date(closestDate.getTime() + this.baseDuration * tooltipLocation);\r\n\t\t\t\tposition = this.dateToPosition(closestDate);\r\n\r\n\t\t\t\tif (this.chart.cursor && this.chart.cursor.snapToSeries) {\r\n\t\t\t\t\t//void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.series.each((series) => {\r\n\r\n\t\t\t\t\t\tlet dataItem = series.dataItemsByAxis.getKey(this.uid).getKey(closestTime + series.currentDataSetId);\r\n\t\t\t\t\t\tlet point = series.showTooltipAtDataItem(dataItem);\r\n\t\t\t\t\t\tif (point) {\r\n\t\t\t\t\t\t\tthis.chart._seriesPoints.push({ series: series, point: point });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t// check, otherwise column tooltip will be hidden\r\n\t\t\t\t\t\t\tif (series.tooltipText || series.tooltipHTML) {\r\n\t\t\t\t\t\t\t\tseries.hideTooltip();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//this.chart.sortSeriesTooltips(seriesPoints);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.showTooltipAtPosition(position, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Should snap?\r\n\t */\r\n\tpublic set snapTooltip(value: boolean) {\r\n\t\tthis.setPropertyValue(\"snapTooltip\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Should snap?\r\n\t */\r\n\tpublic get snapTooltip(): boolean {\r\n\t\treturn this.getPropertyValue(\"snapTooltip\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if data should be aggregated to composide data items if there\r\n\t * are more data items in selected range than `groupCount`.\r\n\t *\r\n\t * Grouping will occur automatically, based on current selection range, and\r\n\t * will change dynamically when user zooms in/out the chart.\r\n\t *\r\n\t * NOTE: This works only if [[DateAxis]] is base axis of an [[XYSeries]].\r\n\t *\r\n\t * The related [[XYSeries]] also needs to be set up to take advantage of, by\r\n\t * setting its [`groupFields`](https://www.amcharts.com/docs/v4/reference/xyseries/#groupFields_property).\r\n\t *\r\n\t * The group intervals to aggregate data to is defined by `groupIntervals`\r\n\t * property.\r\n\t *\r\n\t * ```TypeScript\r\n\t * let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n\t * dateAxis.groupData = true;\r\n\t * \r\n\t * let valueAxis = chart.xAxes.push(new am4charts.valueAxis());\r\n\t * \r\n\t * let series = chart.series.push(new am4charts.LineSeries());\r\n\t * series.dataFields.dateX = \"date\";\r\n\t * series.dataFields.valueY = \"value\";\r\n\t * series.groupFields.valueY = \"average\";\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * var dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n\t * dateAxis.groupData = true;\r\n\t * \r\n\t * var valueAxis = chart.xAxes.push(new am4charts.valueAxis());\r\n\t * \r\n\t * var series = chart.series.push(new am4charts.LineSeries());\r\n\t * series.dataFields.dateX = \"date\";\r\n\t * series.dataFields.valueY = \"value\";\r\n\t * series.groupFields.valueY = \"average\";\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     \"type\": \"DateAxis\",\r\n\t *     \"groupData\": true\r\n\t *   }],\r\n\t *   \"yAxes\": [{\r\n\t *     \"type\": \"ValueAxis\"\r\n\t *   }],\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"LineSeries\",\r\n\t *     \"dataFields\": {\r\n\t *       \"dateX\": \"date\",\r\n\t *       \"valueY\": \"value\"\r\n\t *     },\r\n\t *     \"groupFields\": {\r\n\t *       \"valueY\": \"average\"\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default false\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/date-axis/#Dynamic_data_item_grouping} for more information about dynamic data item grouping.\r\n\t * @since 4.7.0\r\n\t * @param  value  Group data points?\r\n\t */\r\n\tpublic set groupData(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"groupData\", value)) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.setDataSet(\"\");\r\n\r\n\t\t\t\tif (value && !series.dataGrouped && series.inited) {\r\n\t\t\t\t\tseries._baseInterval[this.uid] = this.mainBaseInterval;\r\n\t\t\t\t\tthis.groupSeriesData(series);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tthis._currentDataSetId = \"\"\r\n\t\t\tthis._groupInterval = undefined;\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.invalidateSeries();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Group data points?\r\n\t */\r\n\tpublic get groupData(): boolean {\r\n\t\treturn this.getPropertyValue(\"groupData\");\r\n\t}\r\n\r\n\t/**\r\n\t * Disables automatic selection of data grouping intervals and always uses\r\n\t * `groupInterval` if set. Works only if `groupData = true`.\r\n\t * \r\n\t * @since 4.9.24\r\n\t * @param  value  Interval\r\n\t */\r\n\tpublic set groupInterval(value: ITimeInterval) {\r\n\t\tif (this.setPropertyValue(\"groupInterval\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.invalidateSeries();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Interval\r\n\t */\r\n\tpublic get groupInterval(): ITimeInterval {\r\n\t\treturn this.getPropertyValue(\"groupInterval\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates threshold of data items in selected range at which to start\r\n\t * aggregating data items if `groupData = true`.\r\n\t * \r\n\t * @default 200\r\n\t * @since 4.7.0\r\n\t * @param  value  Number of data items\r\n\t */\r\n\tpublic set groupCount(value: number) {\r\n\t\tthis.setPropertyValue(\"groupCount\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Number of data items\r\n\t */\r\n\tpublic get groupCount(): number {\r\n\t\treturn this.getPropertyValue(\"groupCount\");\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t * Indicates by how many minutes the timestamps in your data are offset from GMT. \r\n\t * This is useful when you have timestamps as your data and you want all the users to see \r\n\t * the same result and not the time which was at users's location at the given timestamp.\r\n\t * Note, you do not need to set timezoneOffset both here and on DateFormatter, as this will \r\n\t * distort the result.\r\n\t *\r\n\t * @default undefined\r\n\t * @since 4.8.5\r\n\t * @param  value Time zone offset in minutes\r\n\t */\r\n\tpublic set timezoneOffset(value: number) {\r\n\t\tthis.setPropertyValue(\"timezoneOffset\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @todo Timezone offset in minutes\r\n\t */\r\n\tpublic get timezoneOffset(): number {\r\n\t\treturn this.getPropertyValue(\"timezoneOffset\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current grid interval.\r\n\t *\r\n\t * @return Grid interval\r\n\t */\r\n\tpublic get gridInterval(): ITimeInterval {\r\n\t\treturn this._gridInterval;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic makeGap(dataItem: LineSeriesDataItem, previous: LineSeriesDataItem): boolean {\r\n\t\tlet series = dataItem.component;\r\n\t\tif (dataItem && previous) {\r\n\t\t\tif (!series.connect && $type.isNumber(series.autoGapCount)) {\r\n\t\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\t\tlet date = dataItem.dates[\"date\" + this.axisLetter];\r\n\t\t\t\t\tlet prevDate = previous.dates[\"date\" + this.axisLetter];\r\n\r\n\t\t\t\t\tif (date && prevDate) {\r\n\t\t\t\t\t\tlet time = date.getTime();\r\n\t\t\t\t\t\tlet prevTime = prevDate.getTime();\r\n\r\n\t\t\t\t\t\tif (time - prevTime > series.autoGapCount * this.baseDuration) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @return base value\r\n\t */\r\n\tpublic get baseValue(): number {\r\n\t\treturn this.min;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxis\"] = DateAxis;\r\nregistry.registeredClasses[\"DateAxisDataItem\"] = DateAxisDataItem;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}