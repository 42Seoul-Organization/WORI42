{"ast":null,"code":"/**\r\n * ChordLink module\r\n */\nimport { __extends } from \"tslib\";\nimport { FlowDiagramLink } from \"./FlowDiagramLink\";\nimport { registry } from \"../../core/Registry\";\nimport { QuadraticCurve } from \"../../core/elements/QuadraticCurve\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Chord Diagram.\r\n *\r\n * @see {@link IChordLinkEvents} for a list of available events\r\n * @see {@link IChordLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar ChordLink =\n/** @class */\nfunction (_super) {\n  __extends(ChordLink, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ChordLink() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"ChordLink\";\n    _this.middleLine = _this.createChild(QuadraticCurve);\n    _this.middleLine.shouldClone = false;\n    _this.middleLine.strokeOpacity = 0;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * (Re)validates (redraws) the link.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ChordLink.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n\n    if (!this.isTemplate) {\n      var startAngle = this.startAngle;\n      var endAngle = this.endAngle;\n      var arc = this.arc;\n      var radius = this.radius;\n      var fromNode = this.dataItem.fromNode;\n      var toNode = this.dataItem.toNode;\n      var fromX = 0;\n      var fromY = 0;\n\n      if (fromNode) {\n        fromX = fromNode.pixelX + fromNode.dx;\n        fromY = fromNode.pixelY + fromNode.dy;\n      }\n\n      var toX = 0;\n      var toY = 0;\n\n      if (toNode) {\n        toX = toNode.pixelX + toNode.dx;\n        toY = toNode.pixelY + toNode.dy;\n      }\n\n      if (radius > 0) {\n        var x1 = radius * $math.cos(startAngle) + fromX;\n        var y1 = radius * $math.sin(startAngle) + fromY;\n        var x2 = radius * $math.cos(endAngle) + toX;\n        var y2 = radius * $math.sin(endAngle) + toY; //let cpAngle = startAngle + arc + (endAngle - startAngle - arc) / 2;\n        //let arcWidth = $math.getDistance({x:x1, y:y1}, {x:x4, y:y4});\n        //let cpx = (arcWidth) * $math.cos(cpAngle);\n        //let cpy = (arcWidth) * $math.sin(cpAngle);\n\n        var cp = {\n          x: 0,\n          y: 0\n        };\n        var path = $path.moveTo({\n          x: x1,\n          y: y1\n        });\n        path += $path.arcTo(startAngle, arc, radius);\n        path += $path.quadraticCurveTo({\n          x: x2,\n          y: y2\n        }, cp);\n        path += $path.arcTo(endAngle, arc, radius);\n        path += $path.quadraticCurveTo({\n          x: x1,\n          y: y1\n        }, cp);\n\n        if (arc > 0) {\n          this.link.path = path;\n        } else {\n          this.link.path = \"\";\n        }\n\n        if (this.maskBullets) {\n          this.bulletsMask.path = path;\n          this.bulletsContainer.mask = this.bulletsMask;\n        }\n\n        var mAngle1 = startAngle + arc / 2;\n        var mAngle2 = endAngle + arc / 2;\n        var middleLine = this.middleLine;\n        middleLine.x1 = radius * $math.cos(mAngle1) + fromX;\n        middleLine.y1 = radius * $math.sin(mAngle1) + fromY;\n        middleLine.x2 = radius * $math.cos(mAngle2) + toX;\n        middleLine.y2 = radius * $math.sin(mAngle2) + toY;\n        middleLine.cpx = 0;\n        middleLine.cpy = 0;\n        middleLine.stroke = this.fill;\n        this.positionBullets();\n      }\n    }\n  };\n\n  Object.defineProperty(ChordLink.prototype, \"radius\", {\n    /**\r\n     * @return End Y\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n\n    /**\r\n     * [radius description]\r\n     *\r\n     * @todo Description\r\n     * @param value End Y\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"radius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ChordLink.prototype, \"arc\", {\n    /**\r\n     * @return [description]\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"arc\");\n    },\n\n    /**\r\n     * [arc description]\r\n     *\r\n     * @todo Description\r\n     * @param value [description]\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"arc\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ChordLink;\n}(FlowDiagramLink);\n\nexport { ChordLink };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"ChordLink\"] = ChordLink;","map":{"version":3,"sources":["../../../../../src/.internal/charts/elements/ChordLink.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ChordLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { QuadraticCurve } from \"../../core/elements/QuadraticCurve\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordLink]].\r\n */\r\nexport interface IChordLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tradius?: number;\r\n\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tarc?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordLink]].\r\n */\r\nexport interface IChordLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordLinkAdapters extends IFlowDiagramLinkAdapters, IChordLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Chord Diagram.\r\n *\r\n * @see {@link IChordLinkEvents} for a list of available events\r\n * @see {@link IChordLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChordLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChordLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChordLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n     */\r\n\tpublic middleLine: QuadraticCurve;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordLink\";\r\n\r\n\t\tthis.middleLine = this.createChild(QuadraticCurve);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\r\n\t\t\tlet arc = this.arc;\r\n\t\t\tlet radius = this.radius;\r\n\r\n\t\t\tlet fromNode = this.dataItem.fromNode;\r\n\t\t\tlet toNode = this.dataItem.toNode;\r\n\r\n\t\t\tlet fromX = 0;\r\n\t\t\tlet fromY = 0;\r\n\r\n\t\t\tif (fromNode) {\r\n\t\t\t\tfromX = fromNode.pixelX + fromNode.dx;\r\n\t\t\t\tfromY = fromNode.pixelY + fromNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tlet toX = 0;\r\n\t\t\tlet toY = 0;\r\n\r\n\t\t\tif (toNode) {\r\n\t\t\t\ttoX = toNode.pixelX + toNode.dx;\r\n\t\t\t\ttoY = toNode.pixelY + toNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tif (radius > 0) {\r\n\t\t\t\tlet x1 = radius * $math.cos(startAngle) + fromX;\r\n\t\t\t\tlet y1 = radius * $math.sin(startAngle) + fromY;\r\n\t\t\t\tlet x2 = radius * $math.cos(endAngle) + toX;\r\n\t\t\t\tlet y2 = radius * $math.sin(endAngle) + toY;\r\n\r\n\t\t\t\t//let cpAngle = startAngle + arc + (endAngle - startAngle - arc) / 2;\r\n\t\t\t\t//let arcWidth = $math.getDistance({x:x1, y:y1}, {x:x4, y:y4});\r\n\r\n\t\t\t\t//let cpx = (arcWidth) * $math.cos(cpAngle);\r\n\t\t\t\t//let cpy = (arcWidth) * $math.sin(cpAngle);\r\n\r\n\t\t\t\tlet cp = { x: 0, y: 0 };\r\n\t\t\t\tlet path = $path.moveTo({ x: x1, y: y1 });\r\n\r\n\t\t\t\tpath += $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x2, y: y2 }, cp);\r\n\t\t\t\tpath += $path.arcTo(endAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x1, y: y1 }, cp);\r\n\r\n\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\tthis.link.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.link.path = \"\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.maskBullets) {\r\n\t\t\t\t\tthis.bulletsMask.path = path;\r\n\t\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet mAngle1 = startAngle + arc / 2;\r\n\t\t\t\tlet mAngle2 = endAngle + arc / 2;\r\n\r\n\t\t\t\tlet middleLine = this.middleLine;\r\n\r\n\t\t\t\tmiddleLine.x1 = radius * $math.cos(mAngle1) + fromX;\r\n\t\t\t\tmiddleLine.y1 = radius * $math.sin(mAngle1) + fromY;\r\n\t\t\t\tmiddleLine.x2 = radius * $math.cos(mAngle2) + toX;\r\n\t\t\t\tmiddleLine.y2 = radius * $math.sin(mAngle2) + toY;\r\n\r\n\t\t\t\tmiddleLine.cpx = 0;\r\n\t\t\t\tmiddleLine.cpy = 0;\r\n\r\n\t\t\t\tmiddleLine.stroke = this.fill;\r\n\r\n\t\t\t\tthis.positionBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value End Y\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End Y\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set arc(value: number) {\r\n\t\tthis.setPropertyValue(\"arc\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get arc(): number {\r\n\t\treturn this.getPropertyValue(\"arc\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordLink\"] = ChordLink;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}