{"ast":null,"code":"var _jsxFileName = \"/Users/jaemin/Desktop/work/working/react/wori42/react/src/Component/Example/Compose/Compose.js\";\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport MapGL, { FlyToInterpolator } from \"react-map-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport request from \"../Axios/request\";\nimport InputBox from \"./InputBoxGrid\";\nimport Marker from \"./Marker/Marker\";\nimport Sliderbar from \"./Slidebar/Sliderbar\";\nimport Footer from \"./Footer/Footer\";\nimport SideBar from \"./SideBar/SideBar\";\nimport Pin from \"../Marker/Pin\";\nimport \"./compose.scss\"; // import Chart from \"../Chart/Chart\";\n\nimport dotenv from \"dotenv\";\ndotenv.config();\n\nfunction Compose() {\n  const [info, setInfo] = useState({\n    longitude: 127.024612,\n    latitude: 37.5326,\n    zoom: 5.5,\n    pitch: 0,\n    bearing: 0,\n    transitionInterpolator: new FlyToInterpolator({\n      speed: 1.2\n    }),\n    transitionDuration: 1000,\n    searchInfo: \"\",\n    isMain: true\n  });\n  const [userData, setUserData] = useState([]);\n  const [convertedData, setConvertedData] = useState([]);\n  const mainSearchInput = useCallback(vp => {\n    setInfo({ ...info,\n      searchInfo: vp.target.value\n    });\n  }, [info]);\n\n  const getAddress = data => {\n    data.map(data => request(\"get\", `https://maps.googleapis.com/maps/api/geocode/json`, {\n      latlng: data[0] + \",\" + data[1],\n      key: process.env.REACT_APP_Google_Token\n    }).then(res => {\n      let result = {\n        province: res.data.results[0].address_components[1].long_name,\n        city: res.data.results[0].address_components[2].long_name,\n        group: \"TRUE\",\n        infection_case: \"User_data\",\n        confirmed: 1,\n        latitude: data[1],\n        longitude: data[0],\n        time: \"UTF로 해주세요\",\n        name: \"hochan\"\n      };\n      setConvertedData([...convertedData, result]);\n    }).catch(res => {\n      console.log(res);\n    }));\n  };\n\n  const goToViewPort = useCallback(() => {\n    request(\"get\", `https://maps.googleapis.com/maps/api/geocode/json`, {\n      address: info.searchInfo,\n      key: process.env.REACT_APP_Google_Token\n    }).then(res => {\n      setInfo({ ...info,\n        isMain: false,\n        latitude: res.data.results[0].geometry.location.lat,\n        longitude: res.data.results[0].geometry.location.lng,\n        zoom: 14,\n        transitionInterpolator: new FlyToInterpolator(),\n        transitionDuration: 1000\n      });\n    }).catch(res => {\n      console.log(res);\n    });\n  }, [info]);\n  useEffect(() => {\n    if (info.isMain && info.longitude <= 128) {\n      const interval = setInterval(() => {\n        setInfo({ ...info,\n          latitude: info.latitude + 0.005,\n          longitude: info.longitude + 0.005\n        });\n      }, 50);\n      return () => clearInterval(interval);\n    }\n\n    return;\n  }, [info]);\n  useEffect(() => {\n    request(\"post\", `http://localhost:3013/covid19/data/user`, {\n      user_data: [{\n        province: \"Seoul\",\n        city: \"Yongsan-gu\",\n        group: \"TRUE\",\n        infection_case: \"Itaewon Clubs\",\n        confirmed: 139,\n        latitude: 37.538621,\n        longitude: 126.992652,\n        time: \"UTF로 해주세요\",\n        name: \"hochan\"\n      }, {\n        province: \"Seoul\",\n        city: \"Gwanak-gu\",\n        group: \"TRUE\",\n        infection_case: \"Richway\",\n        confirmed: 119,\n        latitude: 37.48208,\n        longitude: 126.901384,\n        time: \"UTF로 해주세요\",\n        name: \"Jamin\"\n      }]\n    }).then(res => {\n      setUserData(res.data);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []);\n  const [markerList, setMarkerList] = useState([]);\n\n  const func_create = name => {\n    if (markerList.length <= 6) {\n      setMarkerList(markerList.concat([[37.5326, 127.024612, name]])); // 현재 지도에서 보고 있는 좌표의 정 가운데 좌표를 넣어줘야 함\n    }\n\n    console.log(markerList);\n  };\n\n  const func_submit = () => {\n    let temp;\n    console.log(markerList);\n    getAddress(markerList);\n    console.log(convertedData);\n  };\n\n  const func_revise = (idx, latitude, longitude) => {\n    let revised = markerList.slice();\n    revised[idx][0] = latitude;\n    revised[idx][1] = longitude;\n    setMarkerList(revised);\n  };\n\n  return /*#__PURE__*/React.createElement(MapGL, Object.assign({}, info, {\n    width: \"100vw\",\n    height: \"100vh\" // mapStyle=\"mapbox://styles/holee/ckcmzzc5y24hb1ip8lnkdt8sq\"\n    ,\n    mapboxApiAccessToken: process.env.REACT_APP_MAPBOX_THEME,\n    onViewportChange: info.isMain ? () => {\n      \"\";\n    } : nextViewport => setInfo({ ...info,\n      ...nextViewport\n    }) // mapStyle=\"mapbox://styles/mapbox/streets-v11\"\n    // mapStyle=\"mapbox://styles/mapbox/dark-v9\"\n    ,\n    mapStyle: \"mapbox://styles/holee/ckd0isb0511wr1iqvi1347ng8\" // mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Marker, {\n    userData: userData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }\n  }), markerList.map((data, index) => /*#__PURE__*/React.createElement(Pin, {\n    key: index,\n    num: index,\n    latitude: data[0],\n    longitude: data[1],\n    func_revise: func_revise,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InputBox, {\n    info: info,\n    setInfo: setInfo,\n    mainSearchInput: mainSearchInput,\n    goToViewPort: goToViewPort,\n    isMain: info.isMain,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 11\n    }\n  })), info.isMain ? () => {\n    \"\";\n  } : /*#__PURE__*/React.createElement(Sliderbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(SideBar, {\n    func_create: func_create,\n    func_submit: func_submit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default Compose;","map":{"version":3,"sources":["/Users/jaemin/Desktop/work/working/react/wori42/react/src/Component/Example/Compose/Compose.js"],"names":["React","useState","useCallback","useEffect","MapGL","FlyToInterpolator","request","InputBox","Marker","Sliderbar","Footer","SideBar","Pin","dotenv","config","Compose","info","setInfo","longitude","latitude","zoom","pitch","bearing","transitionInterpolator","speed","transitionDuration","searchInfo","isMain","userData","setUserData","convertedData","setConvertedData","mainSearchInput","vp","target","value","getAddress","data","map","latlng","key","process","env","REACT_APP_Google_Token","then","res","result","province","results","address_components","long_name","city","group","infection_case","confirmed","time","name","catch","console","log","goToViewPort","address","geometry","location","lat","lng","interval","setInterval","clearInterval","user_data","err","markerList","setMarkerList","func_create","length","concat","func_submit","temp","func_revise","idx","revised","slice","REACT_APP_MAPBOX_THEME","nextViewport","index"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\nimport MapGL, { FlyToInterpolator } from \"react-map-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\nimport request from \"../Axios/request\";\nimport InputBox from \"./InputBoxGrid\";\nimport Marker from \"./Marker/Marker\";\nimport Sliderbar from \"./Slidebar/Sliderbar\";\nimport Footer from \"./Footer/Footer\";\nimport SideBar from \"./SideBar/SideBar\";\nimport Pin from \"../Marker/Pin\";\nimport \"./compose.scss\";\n\n// import Chart from \"../Chart/Chart\";\nimport dotenv from \"dotenv\";\ndotenv.config();\n\nfunction Compose() {\n  const [info, setInfo] = useState({\n    longitude: 127.024612,\n    latitude: 37.5326,\n    zoom: 5.5,\n    pitch: 0,\n    bearing: 0,\n    transitionInterpolator: new FlyToInterpolator({ speed: 1.2 }),\n    transitionDuration: 1000,\n    searchInfo: \"\",\n    isMain: true,\n  });\n  const [userData, setUserData] = useState([]);\n  const [convertedData, setConvertedData] = useState([]);\n\n  const mainSearchInput = useCallback(\n    (vp) => {\n      setInfo({\n        ...info,\n        searchInfo: vp.target.value,\n      });\n    },\n    [info]\n  );\n\n  const getAddress = (data) => {\n    data.map((data) =>\n      request(\"get\", `https://maps.googleapis.com/maps/api/geocode/json`, {\n        latlng: data[0] + \",\" + data[1],\n        key: process.env.REACT_APP_Google_Token,\n      })\n        .then((res) => {\n          let result = {\n            province: res.data.results[0].address_components[1].long_name,\n            city: res.data.results[0].address_components[2].long_name,\n            group: \"TRUE\",\n            infection_case: \"User_data\",\n            confirmed: 1,\n            latitude: data[1],\n            longitude: data[0],\n            time: \"UTF로 해주세요\",\n            name: \"hochan\",\n          };\n          setConvertedData([...convertedData, result]);\n        })\n        .catch((res) => {\n          console.log(res);\n        })\n    );\n  };\n\n  const goToViewPort = useCallback(() => {\n    request(\"get\", `https://maps.googleapis.com/maps/api/geocode/json`, {\n      address: info.searchInfo,\n      key: process.env.REACT_APP_Google_Token,\n    })\n      .then((res) => {\n        setInfo({\n          ...info,\n          isMain: false,\n          latitude: res.data.results[0].geometry.location.lat,\n          longitude: res.data.results[0].geometry.location.lng,\n          zoom: 14,\n          transitionInterpolator: new FlyToInterpolator(),\n          transitionDuration: 1000,\n        });\n      })\n      .catch((res) => {\n        console.log(res);\n      });\n  }, [info]);\n\n  useEffect(() => {\n    if (info.isMain && info.longitude <= 128) {\n      const interval = setInterval(() => {\n        setInfo({\n          ...info,\n          latitude: info.latitude + 0.005,\n          longitude: info.longitude + 0.005,\n        });\n      }, 50);\n      return () => clearInterval(interval);\n    }\n    return;\n  }, [info]);\n\n  useEffect(() => {\n    request(\"post\", `http://localhost:3013/covid19/data/user`, {\n      user_data: [\n        {\n          province: \"Seoul\",\n          city: \"Yongsan-gu\",\n          group: \"TRUE\",\n          infection_case: \"Itaewon Clubs\",\n          confirmed: 139,\n          latitude: 37.538621,\n          longitude: 126.992652,\n          time: \"UTF로 해주세요\",\n          name: \"hochan\",\n        },\n        {\n          province: \"Seoul\",\n          city: \"Gwanak-gu\",\n          group: \"TRUE\",\n          infection_case: \"Richway\",\n          confirmed: 119,\n          latitude: 37.48208,\n          longitude: 126.901384,\n          time: \"UTF로 해주세요\",\n          name: \"Jamin\",\n        },\n      ],\n    })\n      .then((res) => {\n        setUserData(res.data);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, []);\n\n  const [markerList, setMarkerList] = useState([]);\n\n  const func_create = (name) => {\n    if (markerList.length <= 6) {\n      setMarkerList(markerList.concat([[37.5326, 127.024612, name]])); // 현재 지도에서 보고 있는 좌표의 정 가운데 좌표를 넣어줘야 함\n    }\n    console.log(markerList);\n  };\n\n  const func_submit = () => {\n    let temp;\n    console.log(markerList);\n    getAddress(markerList);\n    console.log(convertedData);\n  };\n\n  const func_revise = (idx, latitude, longitude) => {\n    let revised = markerList.slice();\n    revised[idx][0] = latitude;\n    revised[idx][1] = longitude;\n    setMarkerList(revised);\n  };\n\n  return (\n    <MapGL\n      {...info}\n      width=\"100vw\"\n      height=\"100vh\"\n      // mapStyle=\"mapbox://styles/holee/ckcmzzc5y24hb1ip8lnkdt8sq\"\n      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_THEME}\n      onViewportChange={\n        info.isMain\n          ? () => {\n              \"\";\n            }\n          : (nextViewport) => setInfo({ ...info, ...nextViewport })\n      }\n      // mapStyle=\"mapbox://styles/mapbox/streets-v11\"\n      // mapStyle=\"mapbox://styles/mapbox/dark-v9\"\n      mapStyle=\"mapbox://styles/holee/ckd0isb0511wr1iqvi1347ng8\"\n      // mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n    >\n      <Marker userData={userData} />\n\n      {markerList.map((data, index) => (\n        <Pin\n          key={index}\n          num={index}\n          latitude={data[0]}\n          longitude={data[1]}\n          func_revise={func_revise}\n        />\n      ))}\n\n      <div className=\"container\">\n        <div className=\"item\">\n          <InputBox\n            info={info}\n            setInfo={setInfo}\n            mainSearchInput={mainSearchInput}\n            goToViewPort={goToViewPort}\n            isMain={info.isMain}\n          />\n        </div>\n        {info.isMain ? (\n          () => {\n            \"\";\n          }\n        ) : (\n          <Sliderbar />\n        )}\n        <SideBar func_create={func_create} func_submit={func_submit} />\n        <Footer />\n        {/* <Chart /> */}\n      </div>\n    </MapGL>\n  );\n}\n\nexport default Compose;\n"]},"metadata":{},"sourceType":"module"}