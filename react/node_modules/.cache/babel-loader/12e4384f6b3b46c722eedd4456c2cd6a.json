{"ast":null,"code":"/**\r\n * Contains code and logic for generating linear gradients.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { BaseObject } from \"../../Base\";\nimport { List } from \"../../utils/List\";\nimport { getGhostPaper } from \"../Paper\";\nimport { registry } from \"../../Registry\";\nimport * as $iter from \"../../utils/Iterator\";\nimport * as $math from \"../../utils/Math\";\nimport * as $type from \"../../utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Linear gradient class.\r\n */\n\nvar LinearGradient =\n/** @class */\nfunction (_super) {\n  __extends(LinearGradient, _super);\n  /**\r\n   * Constructor.\r\n   */\n\n\n  function LinearGradient() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * List of colors switch definitions in a gradient.\r\n     */\n\n\n    _this._stops = new List();\n    /**\r\n     * Gradient direction.\r\n     */\n\n    _this._rotation = 0;\n    _this.className = \"LinearGradient\";\n\n    _this._stops.events.on(\"setIndex\", _this.validate, _this);\n\n    _this._stops.events.on(\"inserted\", _this.validate, _this); // Create element\n\n\n    _this.element = _this.paper.addGroup(\"linearGradient\");\n    _this.id = \"gradient-\" + registry.getUniqueId();\n\n    _this.element.attr({\n      \"id\": _this.id\n    });\n\n    _this._disposers.push(_this.element); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws gradient.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  LinearGradient.prototype.validate = function () {\n    var _this = this;\n\n    var rotation = (this._rotation + 90) * $math.RADIANS;\n    var x1 = Math.round(50 + Math.sin(rotation + Math.PI) * 50) + '%';\n    var y1 = Math.round(50 + Math.cos(rotation) * 50) + '%';\n    var x2 = Math.round(50 + Math.sin(rotation) * 50) + '%';\n    var y2 = Math.round(50 + Math.cos(rotation + Math.PI) * 50) + '%';\n    var gradientElement = this.element;\n    gradientElement.removeChildNodes();\n    gradientElement.attr({\n      \"x1\": x1,\n      \"x2\": x2,\n      \"y1\": y1,\n      \"y2\": y2\n    });\n    $iter.each($iter.indexed(this._stops.iterator()), function (a) {\n      var i = a[0];\n      var stop = a[1];\n      var offset = stop.offset;\n\n      if (!$type.isNumber(offset)) {\n        offset = i / (_this._stops.length - 1);\n      }\n\n      var gradientStop = _this.paper.add(\"stop\");\n\n      if ($type.hasValue(stop.color)) {\n        gradientStop.attr({\n          \"stop-color\": stop.color.toString()\n        });\n      }\n\n      if ($type.isNumber(stop.opacity)) {\n        gradientStop.attr({\n          \"stop-opacity\": stop.opacity\n        });\n      }\n\n      if ($type.isNumber(offset)) {\n        gradientStop.attr({\n          \"offset\": offset\n        });\n      }\n\n      gradientElement.add(gradientStop);\n    });\n  };\n  /**\r\n   * Clears the gradient.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  LinearGradient.prototype.clear = function () {\n    this._stops.clear();\n  };\n  /**\r\n   * Adds a color step to the gradient.\r\n   *\r\n   * @param color    Color (hex code or named color)\r\n   * @param opacity  Opacity (value from 0 to 1; 0 completely transaprent, 1 fully opaque)\r\n   * @param offset   Position of color in the gradient (value 0 to 1; 0 meaning start of the gradient and 1 end)\r\n   */\n\n\n  LinearGradient.prototype.addColor = function (color, opacity, offset) {\n    this._stops.push({\n      color: color,\n      opacity: opacity,\n      offset: offset\n    });\n  };\n\n  Object.defineProperty(LinearGradient.prototype, \"stops\", {\n    /**\r\n     * A list of color stops in the gradient.\r\n     *\r\n     * @return Stops\r\n     */\n    get: function get() {\n      return this._stops;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LinearGradient.prototype, \"paper\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Paper\r\n     */\n    get: function get() {\n      if (this._paper) {\n        return this._paper;\n      }\n\n      return getGhostPaper();\n    },\n\n    /**\r\n     * [[Paper]] instace to use for the gradient.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param paper  Paper\r\n     */\n    set: function set(paper) {\n      if (this._paper != paper) {\n        this._paper = paper;\n        this.validate();\n        paper.appendDef(this.element);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LinearGradient.prototype, \"rotation\", {\n    /**\r\n     * @return Rotation\r\n     */\n    get: function get() {\n      return this._rotation;\n    },\n\n    /**\r\n     * Rotation (direction) of the gradient in degrees.\r\n     *\r\n     * @param value  Rotation\r\n     */\n    set: function set(value) {\n      //this.element.attr({ \"gradientTransform\": \"rotate(\" + value + \" 10 100)\" });\n      this._rotation = value;\n      this.validate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  LinearGradient.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.stops.copyFrom(source.stops);\n    this._rotation = source.rotation;\n  };\n\n  Object.defineProperty(LinearGradient.prototype, \"gradientUnits\", {\n    /**\r\n     * Which units are used when drawing gradient filter.\r\n     *\r\n     * Use `\"userSpaceOnUse\"` when applying gradient on a perfectly straight line.\r\n     *\r\n     * @since 4.9.17\r\n     * @default objectBoundingBox\r\n     * @param value Filter units\r\n     */\n    set: function set(value) {\n      this.element.attr({\n        gradientUnits: value\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return LinearGradient;\n}(BaseObject);\n\nexport { LinearGradient };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"LinearGradient\"] = LinearGradient;","map":{"version":3,"sources":["../../../../../../src/.internal/core/rendering/fills/LinearGradient.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Contains code and logic for generating linear gradients.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../../Base\";\r\nimport { List } from \"../../utils/List\";\r\nimport { Group } from \"../Group\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { Paper, getGhostPaper } from \"../Paper\";\r\nimport { Color } from \"../../utils/Color\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $iter from \"../../utils/Iterator\";\r\nimport * as $math from \"../../utils/Math\";\r\nimport * as $type from \"../../utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents an object describing color switching point in a gradiend.\r\n */\r\nexport interface IGradientStop {\r\n\r\n\t/**\r\n\t * Color.\r\n\t */\r\n\tcolor: Color;\r\n\r\n\t/**\r\n\t * Offset defines where in the gradient the color should kick in. Values\r\n\t * from 0 to 1 are possible with 0 meaning start, 0.5 half-way through the\r\n\t * gradient, etc.\r\n\t */\r\n\toffset?: number;\r\n\r\n\t/**\r\n\t * Transparency of the color. 0 - completely transparent, 1 - fully opaque.\r\n\t */\r\n\topacity?: number;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Linear gradient class.\r\n */\r\nexport class LinearGradient extends BaseObject {\r\n\r\n\t/**\r\n\t * List of colors switch definitions in a gradient.\r\n\t */\r\n\tprotected _stops: List<IGradientStop> = new List<IGradientStop>();\r\n\r\n\t/**\r\n\t * An SVG `<group>` element used to draw gradient.\r\n\t */\r\n\tpublic element: Group;\r\n\r\n\t/**\r\n\t * Reference to Paper to add element to.\r\n\t */\r\n\tprotected _paper: $type.Optional<Paper>;\r\n\r\n\t/**\r\n\t * Gradient direction.\r\n\t */\r\n\tprotected _rotation: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"LinearGradient\";\r\n\r\n\t\tthis._stops.events.on(\"setIndex\", this.validate, this);\r\n\t\tthis._stops.events.on(\"inserted\", this.validate, this);\r\n\t\t// Create element\r\n\t\tthis.element = this.paper.addGroup(\"linearGradient\");\r\n\t\tthis.id = \"gradient-\" + registry.getUniqueId();\r\n\t\tthis.element.attr({ \"id\": this.id });\r\n\t\tthis._disposers.push(this.element);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Draws gradient.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tlet rotation = (this._rotation + 90) * $math.RADIANS;\r\n\r\n\t\tlet x1: string = Math.round(50 + Math.sin(rotation + Math.PI) * 50) + '%';\r\n\t\tlet y1: string = Math.round(50 + Math.cos(rotation) * 50) + '%';\r\n\r\n\t\tlet x2: string = Math.round(50 + Math.sin(rotation) * 50) + '%';\r\n\t\tlet y2: string = Math.round(50 + Math.cos(rotation + Math.PI) * 50) + '%';\r\n\r\n\r\n\t\tlet gradientElement: Group = this.element;\r\n\t\tgradientElement.removeChildNodes();\r\n\t\tgradientElement.attr({\"x1\": x1, \"x2\":x2, \"y1\": y1, \"y2\":y2});\r\n\r\n\t\t$iter.each($iter.indexed(this._stops.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet stop = a[1];\r\n\t\t\tlet offset: $type.Optional<number> = stop.offset;\r\n\r\n\t\t\tif (!$type.isNumber(offset)) {\r\n\t\t\t\toffset = i / (this._stops.length - 1)\r\n\t\t\t}\r\n\r\n\t\t\tlet gradientStop: AMElement = this.paper.add(\"stop\");\r\n\t\t\tif ($type.hasValue(stop.color)) {\r\n\t\t\t\tgradientStop.attr({ \"stop-color\": stop.color.toString() });\r\n\t\t\t}\r\n\t\t\tif ($type.isNumber(stop.opacity)) {\r\n\t\t\t\tgradientStop.attr({ \"stop-opacity\": stop.opacity });\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(offset)) {\r\n\t\t\t\tgradientStop.attr({ \"offset\": offset });\r\n\t\t\t}\r\n\r\n\t\t\tgradientElement.add(gradientStop);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Clears the gradient.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic clear(): void {\r\n\t\tthis._stops.clear();\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a color step to the gradient.\r\n\t *\r\n\t * @param color    Color (hex code or named color)\r\n\t * @param opacity  Opacity (value from 0 to 1; 0 completely transaprent, 1 fully opaque)\r\n\t * @param offset   Position of color in the gradient (value 0 to 1; 0 meaning start of the gradient and 1 end)\r\n\t */\r\n\tpublic addColor(color: Color, opacity?: number, offset?: number): void {\r\n\t\tthis._stops.push({ color: color, opacity: opacity, offset: offset });\r\n\t}\r\n\r\n\t/**\r\n\t * A list of color stops in the gradient.\r\n\t *\r\n\t * @return Stops\r\n\t */\r\n\tpublic get stops(): List<IGradientStop> {\r\n\t\treturn this._stops;\r\n\t}\r\n\r\n\t/**\r\n\t * [[Paper]] instace to use for the gradient.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param paper  Paper\r\n\t */\r\n\tpublic set paper(paper: Paper) {\r\n\t\tif (this._paper != paper) {\r\n\t\t\tthis._paper = paper;\r\n\t\t\tthis.validate();\r\n\t\t\tpaper.appendDef(this.element);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Paper\r\n\t */\r\n\tpublic get paper(): Paper {\r\n\t\tif (this._paper) {\r\n\t\t\treturn this._paper;\r\n\t\t}\r\n\t\treturn getGhostPaper();\r\n\t}\r\n\r\n\t/**\r\n\t * Rotation (direction) of the gradient in degrees.\r\n\t *\r\n\t * @param value  Rotation\r\n\t */\r\n\tpublic set rotation(value: number) {\r\n\t\t//this.element.attr({ \"gradientTransform\": \"rotate(\" + value + \" 10 100)\" });\r\n\t\tthis._rotation = value;\r\n\t\tthis.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Rotation\r\n\t */\r\n\tpublic get rotation(): number {\r\n\t\treturn this._rotation;\r\n\t}\r\n\r\n\r\n\tpublic copyFrom(source:this){\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\tthis.stops.copyFrom(source.stops);\r\n\r\n\t\tthis._rotation = source.rotation;\r\n\t}\r\n\r\n\t/**\r\n\t * Which units are used when drawing gradient filter.\r\n\t *\r\n\t * Use `\"userSpaceOnUse\"` when applying gradient on a perfectly straight line.\r\n\t *\r\n\t * @since 4.9.17\r\n\t * @default objectBoundingBox\r\n\t * @param value Filter units\r\n\t */\r\n\tpublic set gradientUnits(value: \"objectBoundingBox\" | \"userSpaceOnUse\") {\r\n\t\tthis.element.attr({gradientUnits:value});\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LinearGradient\"] = LinearGradient;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}