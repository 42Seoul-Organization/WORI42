{"ast":null,"code":"/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { XYChart, XYChartDataItem } from \"./XYChart\";\nimport { registry } from \"../../core/Registry\";\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\nimport { ValueAxis } from \"../axes/ValueAxis\";\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\nimport { ColorSet } from \"../../core/utils/ColorSet\";\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $array from \"../../core/utils/Array\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar TreeMapDataItem =\n/** @class */\nfunction (_super) {\n  __extends(TreeMapDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function TreeMapDataItem() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Required for squarify functionality.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n\n    _this.rows = [];\n    _this.className = \"TreeMapDataItem\";\n    _this.values.value = {};\n    _this.values.x0 = {};\n    _this.values.y0 = {};\n    _this.values.x1 = {};\n    _this.values.y1 = {};\n    _this.hasChildren.children = true;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(TreeMapDataItem.prototype, \"legendDataItem\", {\n    /**\r\n     * @return Legend data item\r\n     */\n    get: function get() {\n      return this._legendDataItem;\n    },\n\n    /**\r\n     * A legend's data item, that corresponds to this data item.\r\n     *\r\n     * @param value  Legend data item\r\n     */\n    set: function set(value) {\n      this._legendDataItem = value;\n\n      if (value.label) {\n        value.label.dataItem = this;\n      }\n\n      if (value.valueLabel) {\n        value.valueLabel.dataItem = this;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a duration (ms) the Data Item should take to animate from one\r\n   * value to another.\r\n   *\r\n   * If the duration is not specified via parameter, this method will try to\r\n   * request a default duration from the related `Component`.\r\n   *\r\n   * @param duration  Default duration (ms)\r\n   * @return Duration (ms)\r\n   */\n\n  TreeMapDataItem.prototype.getDuration = function () {\n    return 0;\n  };\n\n  Object.defineProperty(TreeMapDataItem.prototype, \"value\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function get() {\n      var value = 0;\n\n      if (!this.children || this.children.length == 0) {\n        value = this.values[\"value\"].workingValue;\n      } else {\n        $iter.each(this.children.iterator(), function (child) {\n          var childValue = child.value;\n\n          if ($type.isNumber(childValue)) {\n            value += childValue;\n          }\n        });\n      }\n\n      return value;\n      /*\r\n      let value = this.values[\"value\"].workingValue;\r\n            if (!$type.isNumber(value)) {\r\n          value = 0;\r\n          if (this.children) {\r\n              $iter.each(this.children.iterator(), (child) => {\r\n                  if ($type.isNumber(child.value)) {\r\n                      value += child.value;\r\n                  }\r\n              });\r\n          }\r\n      }\r\n      return value;*/\n    },\n\n    /**\r\n     * Numeric value of the item.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function set(value) {\n      this.setValue(\"value\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"percent\", {\n    /**\r\n     * Percent value of a node\r\n     */\n    get: function get() {\n      if (this.parent) {\n        return this.value / this.parent.value * 100;\n      }\n\n      return 100;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"x0\", {\n    /**\r\n     * @return X\r\n     */\n    get: function get() {\n      return this.values.x0.value;\n    },\n\n    /**\r\n     * Item's X position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param value  X\r\n     */\n    set: function set(value) {\n      this.setValue(\"x0\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"x1\", {\n    /**\r\n     * @return X\r\n     */\n    get: function get() {\n      return this.values.x1.value;\n    },\n\n    /**\r\n     * Item's X position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param value  X\r\n     */\n    set: function set(value) {\n      this.setValue(\"x1\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"y0\", {\n    /**\r\n     * @return Y\r\n     */\n    get: function get() {\n      return this.values.y0.value;\n    },\n\n    /**\r\n     * Item's Y position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param value  Y\r\n     */\n    set: function set(value) {\n      this.setValue(\"y0\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"y1\", {\n    /**\r\n     * @return Y\r\n     */\n    get: function get() {\n      return this.values.y1.value;\n    },\n\n    /**\r\n     * Item's Y position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param value  Y\r\n     */\n    set: function set(value) {\n      this.setValue(\"y1\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"name\", {\n    /**\r\n     * @return Name\r\n     */\n    get: function get() {\n      return this.properties.name;\n    },\n\n    /**\r\n     * Item's name.\r\n     *\r\n     * @param name  Name\r\n     */\n    set: function set(name) {\n      this.setProperty(\"name\", name);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"children\", {\n    /**\r\n     * @return Item's children\r\n     */\n    get: function get() {\n      return this.properties.children;\n    },\n\n    /**\r\n     * A list of item's sub-children.\r\n     *\r\n     * Having children means that the TreeMap chat will automatically be\r\n     * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n     * display its children.\r\n     *\r\n     * Treemap can have any level of nesting.\r\n     *\r\n     * @param children  Item's children\r\n     */\n    set: function set(children) {\n      this.setProperty(\"children\", children);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"level\", {\n    /**\r\n     * Depth level in the treemap hierarchy.\r\n     *\r\n     * The top-level item will have level set at 0. Its children will have\r\n     * level 1, and so on.\r\n     *\r\n     * @readonly\r\n     * @return Level\r\n     */\n    get: function get() {\n      if (!this.parent) {\n        return 0;\n      } else {\n        return this.parent.level + 1;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"color\", {\n    /**\r\n     * @return Color\r\n     */\n    get: function get() {\n      var color = this.properties.color;\n\n      if (color == undefined) {\n        if (this.parent) {\n          color = this.parent.color;\n        }\n      }\n\n      if (color == undefined) {\n        if (this.component) {\n          color = this.component.colors.getIndex(this.component.colors.step * this.index);\n        }\n      }\n\n      return color;\n    },\n\n    /**\r\n     * Item's color.\r\n     *\r\n     * If not set, will use parent's color, or, if that is not set either,\r\n     * automatically assigned color from chart's color set. (`chart.colors`)\r\n     *\r\n     * @param value  Color\r\n     */\n    set: function set(value) {\n      this.setProperty(\"color\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"fill\", {\n    /**\r\n     * @ignore\r\n     * For the legend to work properly\r\n     */\n    get: function get() {\n      return this.color;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"series\", {\n    get: function get() {\n      return this._series;\n    },\n\n    /**\r\n     * Series of children data items\r\n     * @todo: proper descrition\r\n     */\n    set: function set(series) {\n      if (series != this._series) {\n        if (this._series) {\n          this.component.series.removeValue(this._series);\n\n          this._series.dispose();\n        }\n\n        this._series = series;\n\n        this._disposers.push(series);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Hides the Data Item and related visual elements.\r\n   *\r\n   * @param duration  Animation duration (ms)\r\n   * @param delay     Delay animation (ms)\r\n   * @param toValue   A value to set to `fields` when hiding\r\n   * @param fields    A list of data fields to set value to `toValue`\r\n   */\n\n  TreeMapDataItem.prototype.hide = function (duration, delay, toValue, fields) {\n    this.setWorkingValue(\"value\", 0);\n\n    if (this.children) {\n      this.children.each(function (child) {\n        child.hide(duration, delay, toValue, fields);\n      });\n    }\n\n    var seriesDataItem = this.seriesDataItem;\n\n    if (seriesDataItem) {\n      seriesDataItem.bullets.each(function (key, value) {\n        value.hide();\n        value.preventShow = true;\n      });\n    }\n\n    return _super.prototype.hide.call(this, duration, delay, toValue, fields);\n  };\n  /**\r\n   * Shows the Data Item and related visual elements.\r\n   *\r\n   * @param duration  Animation duration (ms)\r\n   * @param delay     Delay animation (ms)\r\n   * @param fields    A list of fields to set values of\r\n   */\n\n\n  TreeMapDataItem.prototype.show = function (duration, delay, fields) {\n    this.setWorkingValue(\"value\", this.values.value.value);\n\n    if (this.children) {\n      this.children.each(function (child) {\n        child.show(duration, delay, fields);\n      });\n    }\n\n    var seriesDataItem = this.seriesDataItem;\n\n    if (seriesDataItem) {\n      seriesDataItem.bullets.each(function (key, value) {\n        value.preventShow = false;\n      });\n    }\n\n    return _super.prototype.show.call(this, duration, delay, fields);\n  };\n\n  return TreeMapDataItem;\n}(XYChartDataItem);\n\nexport { TreeMapDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/} for documentation\r\n */\n\nvar TreeMap =\n/** @class */\nfunction (_super) {\n  __extends(TreeMap, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function TreeMap() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * An algorithm used to divide area into squares based on their value.\r\n     *\r\n     * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n     *\r\n     * ```TypeScript\r\n     * chart.layoutAlgorithm = chart.sliceDice;\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.layoutAlgorithm = chart.sliceDice;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"layoutAlgorithm\": \"sliceDice\",\r\n     *   // ...\r\n     * }\r\n     * ```\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/#Area_division_methods} For more info and examples.\r\n     * @default squarify\r\n     */\n\n\n    _this.layoutAlgorithm = _this.squarify;\n    /**\r\n     * Is the chart zoomable?\r\n     *\r\n     * If the chart is `zoomable`, and items have sub-items, the chart will\r\n     * drill-down to sub-items when click on their parent item.\r\n     *\r\n     * @default true\r\n     */\n\n    _this.zoomable = true;\n    _this.className = \"TreeMap\";\n    _this._usesData = true;\n    _this.maxLevels = 2;\n    _this.currentLevel = 0;\n    _this.hideParentColumns = false;\n    _this.colors = new ColorSet();\n    _this.sorting = \"descending\"; // create two value axes for the chart\n\n    var xAxis = _this.xAxes.push(new ValueAxis());\n\n    xAxis.title.disabled = true;\n    xAxis.strictMinMax = true;\n    var xRenderer = xAxis.renderer;\n    xRenderer.inside = true;\n    xRenderer.labels.template.disabled = true;\n    xRenderer.ticks.template.disabled = true;\n    xRenderer.grid.template.disabled = true;\n    xRenderer.axisFills.template.disabled = true;\n    xRenderer.minGridDistance = 100;\n    xRenderer.line.disabled = true;\n    xRenderer.baseGrid.disabled = true; //xRenderer.inversed = true;\n\n    var yAxis = _this.yAxes.push(new ValueAxis());\n\n    yAxis.title.disabled = true;\n    yAxis.strictMinMax = true;\n    var yRenderer = yAxis.renderer;\n    yRenderer.inside = true;\n    yRenderer.labels.template.disabled = true;\n    yRenderer.ticks.template.disabled = true;\n    yRenderer.grid.template.disabled = true;\n    yRenderer.axisFills.template.disabled = true;\n    yRenderer.minGridDistance = 100;\n    yRenderer.line.disabled = true;\n    yRenderer.baseGrid.disabled = true;\n    yRenderer.inversed = true; // shortcuts\n\n    _this.xAxis = xAxis;\n    _this.yAxis = yAxis;\n    var template = new TreeMapSeries();\n    _this.seriesTemplates = new DictionaryTemplate(template);\n    template.virtualParent = _this;\n\n    _this._disposers.push(new DictionaryDisposer(_this.seriesTemplates));\n\n    _this._disposers.push(template);\n\n    _this.zoomOutButton.events.on(\"hit\", function () {\n      _this.zoomToChartDataItem(_this._homeDataItem);\n    }, undefined, false);\n\n    _this.seriesTemplates.events.on(\"insertKey\", function (event) {\n      event.newValue.isTemplate = true;\n    }, undefined, false); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(TreeMap.prototype, \"navigationBar\", {\n    /**\r\n     * Returns navigationBar if it is added to a chart\r\n     */\n    get: function get() {\n      return this._navigationBar;\n    },\n\n    /**\r\n     * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n     * drill-down path.\r\n     */\n    set: function set(navigationBar) {\n      var _this = this;\n\n      if (this._navigationBar != navigationBar) {\n        this._navigationBar = navigationBar;\n        navigationBar.parent = this;\n        navigationBar.toBack();\n        navigationBar.links.template.events.on(\"hit\", function (event) {\n          var dataItem = event.target.dataItem.dataContext;\n\n          if (!dataItem.isDisposed()) {\n            _this.zoomToChartDataItem(dataItem);\n\n            _this.createTreeSeries(dataItem);\n          }\n        }, undefined, true);\n\n        this._disposers.push(navigationBar);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * (Re)validates chart's data.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  TreeMap.prototype.validateData = function () {\n    this.series.clear();\n    this._tempSeries = [];\n\n    _super.prototype.validateData.call(this);\n\n    if (this._homeDataItem) {\n      this._homeDataItem.dispose();\n    }\n\n    var homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\n\n    this._homeDataItem = homeDataItem;\n    $iter.each(this.dataItems.iterator(), function (dataItem) {\n      dataItem.parent = homeDataItem;\n    });\n    homeDataItem.children = this.dataItems;\n    homeDataItem.x0 = 0;\n    homeDataItem.y0 = 0;\n    homeDataItem.name = this._homeText;\n    var maxX = 1000;\n    var maxY = Math.round(maxX * this.pixelHeight / this.pixelWidth / 10) * 10 || 1000;\n    homeDataItem.x1 = maxX;\n    homeDataItem.y1 = maxY;\n    this.xAxis.min = 0;\n    this.xAxis.max = maxX;\n    this.xAxis.getMinMax();\n    this.yAxis.min = 0;\n    this.yAxis.max = maxY;\n    this.yAxis.getMinMax();\n    this.layoutItems(homeDataItem);\n    this.createTreeSeries(homeDataItem);\n    this.feedLegend();\n  };\n  /**\r\n   * Layouts and sizes all items according to their value and\r\n   * `layoutAlgorithm`.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param parent  Parent data item\r\n   */\n\n\n  TreeMap.prototype.layoutItems = function (parent, sorting) {\n    if (parent) {\n      var children = parent.children;\n\n      if (!sorting) {\n        sorting = this.sorting;\n      }\n\n      if (sorting == \"ascending\") {\n        children.values.sort(function (a, b) {\n          return a.value - b.value;\n        });\n      }\n\n      if (sorting == \"descending\") {\n        children.values.sort(function (a, b) {\n          return b.value - a.value;\n        });\n      }\n\n      this._updateDataItemIndexes(0);\n\n      this.layoutAlgorithm(parent);\n\n      for (var i = 0, len = children.length; i < len; i++) {\n        var node = children.getIndex(i);\n\n        if (node.children) {\n          this.layoutItems(node);\n        }\n      }\n    }\n  };\n  /**\r\n   * Creates and returns a new treemap series.\r\n   *\r\n   * @todo Description\r\n   * @param dataItem  Data item to create series out of\r\n   */\n\n\n  TreeMap.prototype.createTreeSeries = function (dataItem) {\n    var _this = this;\n\n    this._tempSeries = [];\n    var navigationData = [dataItem]; // create parent series and navigation data\n\n    var parentDataItem = dataItem.parent;\n\n    while (parentDataItem != undefined) {\n      this.initSeries(parentDataItem);\n      navigationData.push(parentDataItem);\n      parentDataItem = parentDataItem.parent;\n    }\n\n    navigationData.reverse();\n\n    if (this.navigationBar) {\n      this.navigationBar.data = navigationData;\n    } // create series and children series\n\n\n    this.createTreeSeriesReal(dataItem); // add those which are not in the list\n\n    $array.each(this._tempSeries, function (series) {\n      if (_this.series.indexOf(series) == -1) {\n        _this.series.push(series);\n      }\n\n      series.zIndex = series.level;\n    });\n  };\n  /**\r\n   * [createTreeSeriesReal description]\r\n   *\r\n   * @todo Description\r\n   * @param dataItem [description]\r\n   */\n\n\n  TreeMap.prototype.createTreeSeriesReal = function (dataItem) {\n    if (dataItem.children) {\n      var level = dataItem.level;\n\n      if (level < this.currentLevel + this.maxLevels) {\n        this.initSeries(dataItem);\n\n        for (var i = 0; i < dataItem.children.length; i++) {\n          var child = dataItem.children.getIndex(i);\n\n          if (child.children) {\n            this.createTreeSeriesReal(child);\n          }\n        }\n      }\n    }\n  };\n\n  TreeMap.prototype.setData = function (value) {\n    this.currentLevel = 0;\n    this.currentlyZoomed = undefined;\n    this.xAxis.start = 0;\n    this.xAxis.end = 1;\n    this.yAxis.start = 0;\n    this.yAxis.end = 1;\n\n    _super.prototype.setData.call(this, value);\n  };\n  /**\r\n   * @ignore\r\n   * Overriding, as tree map series are created on the fly all the time\r\n   */\n\n\n  TreeMap.prototype.seriesAppeared = function () {\n    return true;\n  };\n  /**\r\n   * Initializes the treemap series.\r\n   *\r\n   * @todo Description\r\n   * @param dataItem  Chart data item\r\n   */\n\n\n  TreeMap.prototype.initSeries = function (dataItem) {\n    var _this = this;\n\n    if (!dataItem.series) {\n      var series = void 0;\n      var template = this.seriesTemplates.getKey(dataItem.level.toString());\n\n      if (template) {\n        series = template.clone();\n      } else {\n        series = this.series.create();\n      } // for the legend to get {value}\n\n\n      series.dataItem.dataContext = dataItem;\n      series.name = dataItem.name;\n      series.parentDataItem = dataItem;\n      dataItem.series = series;\n      var level = dataItem.level;\n      series.level = level;\n      var dataContext = dataItem.dataContext;\n\n      if (dataContext) {\n        series.config = dataContext.config;\n      }\n\n      this.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\n\n      series.data = dataItem.children.values;\n      series.fill = dataItem.color;\n      series.columnsContainer.hide(0);\n      series.bulletsContainer.hide(0);\n      series.columns.template.adapter.add(\"fill\", function (fill, target) {\n        var dataItem = target.dataItem;\n\n        if (dataItem) {\n          var treeMapDataItem = dataItem.treeMapDataItem;\n\n          if (treeMapDataItem) {\n            target.fill = treeMapDataItem.color;\n            target.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\n\n            return treeMapDataItem.color;\n          }\n        }\n      });\n\n      if (this.zoomable && (dataItem.level > this.currentLevel || dataItem.children && dataItem.children.length > 0)) {\n        series.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\n\n        if (this.zoomable) {\n          series.columns.template.events.on(\"hit\", function (event) {\n            var seriesDataItem = event.target.dataItem;\n\n            if (dataItem.level > _this.currentLevel) {\n              _this.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\n            } else {\n              _this.zoomToSeriesDataItem(seriesDataItem);\n            }\n          }, this, undefined);\n        }\n      }\n    }\n\n    this._tempSeries.push(dataItem.series);\n  };\n  /**\r\n   * Toggles bullets so that labels that belong to current drill level are\r\n   * shown.\r\n   *\r\n   * @param duration  Animation duration (ms)\r\n   */\n\n\n  TreeMap.prototype.toggleBullets = function (duration) {\n    var _this = this; // hide all series which are not in tempSeries\n\n\n    $iter.each(this.series.iterator(), function (series) {\n      if (_this._tempSeries.indexOf(series) == -1) {\n        //series.hideReal(duration);\n        series.columnsContainer.hide();\n        series.bulletsContainer.hide(duration);\n      } else {\n        //series.showReal(duration);\n        series.columnsContainer.show();\n        series.bulletsContainer.show(duration);\n        series.dataItems.each(function (dataItem) {\n          dataItem.bullets.each(function (key, bullet) {\n            bullet.show();\n          });\n        });\n\n        if (series.level < _this.currentLevel) {\n          if (_this.hideParentColumns) {\n            series.columnsContainer.hide();\n          }\n\n          series.bulletsContainer.hide(duration);\n        } else if (series.level == _this.currentLevel) {\n          if (_this.maxLevels > 1) {\n            series.dataItems.each(function (dataItem) {\n              if (dataItem.treeMapDataItem.children) {\n                dataItem.bullets.each(function (key, bullet) {\n                  bullet.hide();\n                });\n              }\n            });\n          }\n        }\n      }\n    });\n  };\n  /**\r\n   * Zooms to particular item in series.\r\n   *\r\n   * @param dataItem  Data item\r\n   */\n\n\n  TreeMap.prototype.zoomToSeriesDataItem = function (dataItem) {\n    this.zoomToChartDataItem(dataItem.treeMapDataItem);\n  };\n  /**\r\n   * Zooms to particular item. If dataItem is not specified, the chart will zoom-out.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n\n  TreeMap.prototype.zoomToChartDataItem = function (dataItem) {\n    var _this = this;\n\n    if (!dataItem) {\n      dataItem = this._homeDataItem;\n    }\n\n    var zoomOutButton = this.zoomOutButton; // this is needed because if there is only one fist level, it wont' be shown\n\n    if (zoomOutButton) {\n      if (dataItem != this._homeDataItem) {\n        zoomOutButton.show();\n      } else {\n        zoomOutButton.hide();\n      }\n    }\n\n    if (dataItem && dataItem.children) {\n      this.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\n      this.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\n      this.currentLevel = dataItem.level;\n      this.currentlyZoomed = dataItem;\n      this.createTreeSeries(dataItem);\n      var rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\n\n      if (rangeChangeAnimation && !rangeChangeAnimation.isDisposed() && !rangeChangeAnimation.isFinished()) {\n        this._dataDisposers.push(rangeChangeAnimation);\n\n        rangeChangeAnimation.events.once(\"animationended\", function () {\n          _this.toggleBullets();\n        });\n      } else {\n        this.toggleBullets();\n      }\n    }\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  TreeMap.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this); // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"TreeMap chart\");\n    } //this.homeText = this.language.translate(\"Home\");\n\n  };\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  TreeMap.prototype.createDataItem = function () {\n    return new TreeMapDataItem();\n  };\n\n  Object.defineProperty(TreeMap.prototype, \"maxLevels\", {\n    /**\r\n     * @return Maximum drill-down level\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"maxLevels\");\n    },\n\n    /**\r\n     * Maximum number of levels the chart will display initially.\r\n     *\r\n     * @default 2\r\n     * @param value  Maximum drill-down level\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"maxLevels\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMap.prototype, \"currentLevel\", {\n    /**\r\n     * @return Current level\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"currentLevel\");\n    },\n\n    /**\r\n     * Current drill-down level the chart is at.\r\n     *\r\n     * @param value  Current level\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"currentLevel\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMap.prototype, \"hideParentColumns\", {\n    /**\r\n     * @return Hide?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"hideParentColumns\");\n    },\n\n    /**\r\n     * If set to `true`, columns of parent nodes will be hidden when user\r\n     * drills-down into deeper levels.\r\n     *\r\n     * @sice 4.7.4\r\n     * @default false\r\n     * @param  value  Hide?\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"hideParentColumns\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMap.prototype, \"sorting\", {\n    get: function get() {\n      return this.getPropertyValue(\"sorting\");\n    },\n\n    /**\r\n     * Sorting direction of treemap items.\r\n     *\r\n     * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n     *\r\n     * @default \"descending\"\r\n     * @param value [description]\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"sorting\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates and returns a new series of the suitable type.\r\n   *\r\n   * @return new series\r\n   */\n\n  TreeMap.prototype.createSeries = function () {\n    return new TreeMapSeries();\n  };\n\n  Object.defineProperty(TreeMap.prototype, \"homeText\", {\n    /**\r\n     * @return Home text\r\n     */\n    get: function get() {\n      return this._homeText;\n    },\n\n    /**\r\n     * A text displayed on the \"home\" button which is used to go back to level 0\r\n     * after drill into sub-items.\r\n     *\r\n     * @param value  Home text\r\n     */\n    set: function set(value) {\n      this._homeText = value;\n\n      if (this._homeDataItem) {\n        this._homeDataItem.name = this._homeText;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n  TreeMap.prototype.processConfig = function (config) {\n    if (config) {\n      // Instantiate layout algorithm\n      if ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\n        switch (config[\"layoutAlgorithm\"]) {\n          case \"squarify\":\n            config[\"layoutAlgorithm\"] = this.squarify;\n            break;\n\n          case \"binaryTree\":\n            config[\"layoutAlgorithm\"] = this.binaryTree;\n            break;\n\n          case \"slice\":\n            config[\"layoutAlgorithm\"] = this.slice;\n            break;\n\n          case \"dice\":\n            config[\"layoutAlgorithm\"] = this.dice;\n            break;\n\n          case \"sliceDice\":\n            config[\"layoutAlgorithm\"] = this.sliceDice;\n            break;\n\n          default:\n            delete config[\"layoutAlgorithm\"];\n            break;\n        }\n      } // Set type for navigation bar\n\n\n      if ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\n        config.navigationBar.type = \"NavigationBar\";\n      }\n\n      _super.prototype.processConfig.call(this, config);\n    }\n  };\n  /**\r\n   * Measures the size of container and informs its children of how much size\r\n   * they can occupy, by setting their relative `maxWidth` and `maxHeight`\r\n   * properties.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  TreeMap.prototype.validateLayout = function () {\n    _super.prototype.validateLayout.call(this);\n\n    this.layoutItems(this.currentlyZoomed);\n  };\n  /**\r\n   * Validates (processes) data items.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  TreeMap.prototype.validateDataItems = function () {\n    _super.prototype.validateDataItems.call(this);\n\n    this.layoutItems(this._homeDataItem);\n    $iter.each(this.series.iterator(), function (series) {\n      series.validateRawData();\n    });\n    this.zoomToChartDataItem(this._homeDataItem);\n  };\n  /**\r\n   * ==========================================================================\r\n   * TREEMAP LAYOUT FUNCTIONS\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * The functions below are from D3.js library (https://d3js.org/)\r\n   *\r\n   * --------------------------------------------------------------------------\r\n   * Copyright 2017 Mike Bostock\r\n   *\r\n   * Redistribution and use in source and binary forms, with or without\r\n   * modification, are permitted provided that the following conditions are met:\r\n   *\r\n   * 1. Redistributions of source code must retain the above copyright notice,\r\n   *    this list of conditions and the following disclaimer.\r\n   *\r\n   * 2. Redistributions in binary form must reproduce the above copyright\r\n   *    notice,this list of conditions and the following disclaimer in the\r\n   *    documentation and/or other materials provided with the distribution.\r\n   *\r\n   * 3. Neither the name of the copyright holder nor the names of its\r\n   *    contributors may be used to endorse or promote products derived from\r\n   *    this software without specific prior written permission.\r\n   *\r\n   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n   * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n   * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n   * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n   * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n   * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n   * POSSIBILITY OF SUCH DAMAGE.\r\n   * --------------------------------------------------------------------------\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Treemap layout algorithm: binaryTree.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param parent  Data item\r\n   */\n\n\n  TreeMap.prototype.binaryTree = function (parent) {\n    var nodes = parent.children,\n        i,\n        n = nodes.length,\n        sum,\n        sums = new Array(n + 1);\n\n    for (sums[0] = sum = i = 0; i < n; ++i) {\n      sums[i + 1] = sum += nodes.getIndex(i).value;\n    }\n\n    partition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\n\n    function partition(i, j, value, x0, y0, x1, y1) {\n      if (i >= j - 1) {\n        var node = nodes.getIndex(i);\n        node.x0 = x0;\n        node.y0 = y0;\n        node.x1 = x1;\n        node.y1 = y1;\n        return;\n      }\n\n      var valueOffset = sums[i],\n          valueTarget = value / 2 + valueOffset,\n          k = i + 1,\n          hi = j - 1;\n\n      while (k < hi) {\n        var mid = k + hi >>> 1;\n\n        if (sums[mid] < valueTarget) {\n          k = mid + 1;\n        } else {\n          hi = mid;\n        }\n      }\n\n      if (valueTarget - sums[k - 1] < sums[k] - valueTarget && i + 1 < k) {\n        --k;\n      }\n\n      var valueLeft = sums[k] - valueOffset,\n          valueRight = value - valueLeft;\n\n      if (x1 - x0 > y1 - y0) {\n        var xk = (x0 * valueRight + x1 * valueLeft) / value;\n        partition(i, k, valueLeft, x0, y0, xk, y1);\n        partition(k, j, valueRight, xk, y0, x1, y1);\n      } else {\n        var yk = (y0 * valueRight + y1 * valueLeft) / value;\n        partition(i, k, valueLeft, x0, y0, x1, yk);\n        partition(k, j, valueRight, x0, yk, x1, y1);\n      }\n    }\n  };\n  /**\r\n   * Treemap layout algorithm: slice.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param parent  Data item\r\n   */\n\n\n  TreeMap.prototype.slice = function (parent) {\n    var x0 = parent.x0;\n    var x1 = parent.x1;\n    var y0 = parent.y0;\n    var y1 = parent.y1;\n    var nodes = parent.children;\n    var node;\n    var i = -1;\n    var n = nodes.length;\n    var k = parent.value && (y1 - y0) / parent.value;\n\n    while (++i < n) {\n      node = nodes.getIndex(i);\n      node.x0 = x0;\n      node.x1 = x1;\n      node.y0 = y0;\n      y0 += node.value * k;\n      node.y1 = y0;\n    }\n  };\n  /**\r\n   * Treemap layout algorithm: dice.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param parent  Data item\r\n   */\n\n\n  TreeMap.prototype.dice = function (parent) {\n    var x0 = parent.x0;\n    var x1 = parent.x1;\n    var y0 = parent.y0;\n    var y1 = parent.y1;\n    var nodes = parent.children,\n        node,\n        i = -1,\n        n = nodes.length,\n        k = parent.value && (x1 - x0) / parent.value;\n\n    while (++i < n) {\n      node = nodes.getIndex(i);\n      node.y0 = y0;\n      node.y1 = y1;\n      node.x0 = x0;\n      x0 += node.value * k;\n      node.x1 = x0;\n    }\n  };\n  /**\r\n   * Treemap layout algorithm: slideDice.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param parent  Data item\r\n   */\n\n\n  TreeMap.prototype.sliceDice = function (parent) {\n    if (parent.level & 1) {\n      this.slice(parent);\n    } else {\n      this.dice(parent);\n    }\n  };\n  /**\r\n   * Treemap layout algorithm: squarify.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param parent  Data item\r\n   */\n\n\n  TreeMap.prototype.squarify = function (parent) {\n    var ratio = (1 + Math.sqrt(5)) / 2;\n    var x0 = parent.x0;\n    var x1 = parent.x1;\n    var y0 = parent.y0;\n    var y1 = parent.y1;\n    var nodes = parent.children;\n    var nodeValue;\n    var i0 = 0;\n    var i1 = 0;\n    var n = nodes.length;\n    var dx;\n    var dy;\n    var value = parent.value;\n    var sumValue;\n    var minValue;\n    var maxValue;\n    var newRatio;\n    var minRatio;\n    var alpha;\n    var beta;\n\n    while (i0 < n) {\n      dx = x1 - x0;\n      dy = y1 - y0; // Find the next non-empty node.\n\n      do {\n        sumValue = nodes.getIndex(i1++).value;\n      } while (!sumValue && i1 < n);\n\n      minValue = maxValue = sumValue;\n      alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n      beta = sumValue * sumValue * alpha;\n      minRatio = Math.max(maxValue / beta, beta / minValue); // Keep adding nodes while the aspect ratio maintains or improves.\n\n      for (; i1 < n; ++i1) {\n        sumValue += nodeValue = nodes.getIndex(i1).value;\n\n        if (nodeValue < minValue) {\n          minValue = nodeValue;\n        }\n\n        if (nodeValue > maxValue) {\n          maxValue = nodeValue;\n        }\n\n        beta = sumValue * sumValue * alpha;\n        newRatio = Math.max(maxValue / beta, beta / minValue);\n\n        if (newRatio > minRatio) {\n          sumValue -= nodeValue;\n          break;\n        }\n\n        minRatio = newRatio;\n      } // Position and record the row orientation.\n\n\n      var row = this.dataItems.template.clone();\n      row.value = sumValue;\n      row.dice = dx < dy;\n      row.children = nodes.slice(i0, i1);\n      row.x0 = x0;\n      row.y0 = y0;\n      row.x1 = x1;\n      row.y1 = y1;\n\n      if (row.dice) {\n        row.y1 = value ? y0 += dy * sumValue / value : y1;\n        this.dice(row);\n      } else {\n        row.x1 = value ? x0 += dx * sumValue / value : x1;\n        this.slice(row);\n      }\n\n      value -= sumValue;\n      i0 = i1;\n    }\n  };\n\n  TreeMap.prototype.handleSeriesAdded2 = function () {// void\n  };\n  /**\r\n   * [handleDataItemValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n\n\n  TreeMap.prototype.handleDataItemValueChange = function (dataItem, name) {\n    if (name == \"value\") {\n      this.invalidateDataItems();\n    }\n  };\n\n  TreeMap.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {\n    if (name == \"value\") {\n      this.invalidateDataItems();\n    }\n  };\n\n  TreeMap.prototype.getLegendLevel = function (dataItem) {\n    if (!dataItem) {\n      return;\n    }\n\n    if (!dataItem.children) {\n      return;\n    }\n\n    if (dataItem.children.length > 1) {\n      return dataItem;\n    } else if (dataItem.children.length == 1) {\n      return this.getLegendLevel(dataItem.children.getIndex(0));\n    } else {\n      return dataItem;\n    }\n  };\n\n  Object.defineProperty(TreeMap.prototype, \"homeDataItem\", {\n    /**\r\n     * A data item associated with top node.\r\n     *\r\n     * @since 4.8.2\r\n     */\n    get: function get() {\n      return this._homeDataItem;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Setups the legend to use the chart's data.\r\n   * @ignore\r\n   */\n\n  TreeMap.prototype.feedLegend = function () {\n    var legend = this.legend;\n\n    if (legend) {\n      legend.dataFields.name = \"name\";\n      var legendParent = this.getLegendLevel(this._homeDataItem);\n\n      if (legendParent) {\n        var legendData_1 = [];\n        legendParent.children.each(function (dataItem) {\n          //if (!dataItem.hiddenInLegend) {\n          legendData_1.push(dataItem); //}\n        });\n        legend.data = legendData_1;\n      }\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  TreeMap.prototype.disposeData = function () {\n    _super.prototype.disposeData.call(this);\n\n    this._homeDataItem = undefined;\n    this.series.clear();\n\n    if (this.navigationBar) {\n      this.navigationBar.disposeData();\n    }\n\n    this.xAxis.disposeData();\n    this.yAxis.disposeData();\n  };\n  /**\r\n   * Since this chart uses hierarchical data, we need to remove childrent\r\n   * dataField from export of non-hierarchical formats such as CSV and XSLX.\r\n   *\r\n   * @return Export\r\n   */\n\n\n  TreeMap.prototype.getExporting = function () {\n    var _this = this;\n\n    var exporting = _super.prototype.getExporting.call(this);\n\n    exporting.adapter.add(\"formatDataFields\", function (info) {\n      if (info.format == \"csv\" || info.format == \"xlsx\") {\n        if ($type.hasValue(_this.dataFields.children)) {\n          delete info.dataFields[_this.dataFields.children];\n        }\n      }\n\n      return info;\n    });\n    return exporting;\n  };\n\n  return TreeMap;\n}(XYChart);\n\nexport { TreeMap };\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;","map":{"version":3,"sources":["../../../../../src/.internal/charts/types/TreeMap.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { TreeMapSeriesDataItem } from \"../series/TreeMapSeries\";\r\nimport { NavigationBar } from \"../elements/NavigationBar\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport { Export } from \"../../core/export/Export\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: TreeMap;\r\n\r\n\t/**\r\n\t * A treemap level this data item is displayed at.\r\n\t */\r\n\tprotected _level: number;\r\n\r\n\t/**\r\n\t * Series of children data items.\r\n\t */\r\n\tprotected _series: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Related series data item.\r\n\t */\r\n\tpublic seriesDataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rows: TreeMapDataItem[] = [];\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rowsRatio: number;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic dice: boolean;\r\n\r\n\t/**\r\n\t * A reference to a corresponding legend data item.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.values.x0 = {};\r\n\r\n\t\tthis.values.y0 = {};\r\n\r\n\t\tthis.values.x1 = {};\r\n\r\n\t\tthis.values.y1 = {};\r\n\r\n\t\tthis.hasChildren.children = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A legend's data item, that corresponds to this data item.\r\n\t *\r\n\t * @param value  Legend data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tif (value.label) {\r\n\t\t\tvalue.label.dataItem = this;\r\n\t\t}\r\n\t\tif (value.valueLabel) {\r\n\t\t\tvalue.valueLabel.dataItem = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Legend data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a duration (ms) the Data Item should take to animate from one\r\n\t * value to another.\r\n\t *\r\n\t * If the duration is not specified via parameter, this method will try to\r\n\t * request a default duration from the related `Component`.\r\n\t *\r\n\t * @param duration  Default duration (ms)\r\n\t * @return Duration (ms)\r\n\t */\r\n\tpublic getDuration(): number {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the item.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\r\n\t\tlet value = 0;\r\n\t\tif (!this.children || this.children.length == 0) {\r\n\t\t\tvalue = this.values[\"value\"].workingValue;\r\n\t\t}\r\n\r\n\t\telse {\r\n\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\tlet childValue = child.value;\r\n\t\t\t\tif ($type.isNumber(childValue)) {\r\n\t\t\t\t\tvalue += childValue;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t\t/*\r\n\t\tlet value = this.values[\"value\"].workingValue;\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t\tif (this.children) {\r\n\t\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\t\tif ($type.isNumber(child.value)) {\r\n\t\t\t\t\t\tvalue += child.value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;*/\r\n\t}\r\n\r\n\t/**\r\n\t * Percent value of a node\r\n\t */\r\n\tpublic get percent(): number {\r\n\t\tif (this.parent) {\r\n\t\t\treturn this.value / this.parent.value * 100;\r\n\t\t}\r\n\t\treturn 100;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  X\r\n\t */\r\n\tpublic set x0(value: number) {\r\n\t\tthis.setValue(\"x0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get x0(): number {\r\n\t\treturn this.values.x0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  X\r\n\t */\r\n\tpublic set x1(value: number) {\r\n\t\tthis.setValue(\"x1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get x1(): number {\r\n\t\treturn this.values.x1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  Y\r\n\t */\r\n\tpublic set y0(value: number) {\r\n\t\tthis.setValue(\"y0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get y0(): number {\r\n\t\treturn this.values.y0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  Y\r\n\t */\r\n\tpublic set y1(value: number) {\r\n\t\tthis.setValue(\"y1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get y1(): number {\r\n\t\treturn this.values.y1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's name.\r\n\t *\r\n\t * @param name  Name\r\n\t */\r\n\tpublic set name(name: string) {\r\n\t\tthis.setProperty(\"name\", name);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties.name;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of item's sub-children.\r\n\t *\r\n\t * Having children means that the TreeMap chat will automatically be\r\n\t * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n\t * display its children.\r\n\t *\r\n\t * Treemap can have any level of nesting.\r\n\t *\r\n\t * @param children  Item's children\r\n\t */\r\n\tpublic set children(children: OrderedListTemplate<TreeMapDataItem>) {\r\n\t\tthis.setProperty(\"children\", children);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Item's children\r\n\t */\r\n\tpublic get children(): OrderedListTemplate<TreeMapDataItem> {\r\n\t\treturn this.properties.children;\r\n\t}\r\n\r\n\t/**\r\n\t * Depth level in the treemap hierarchy.\r\n\t *\r\n\t * The top-level item will have level set at 0. Its children will have\r\n\t * level 1, and so on.\r\n\t *\r\n\t * @readonly\r\n\t * @return Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.parent.level + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's color.\r\n\t *\r\n\t * If not set, will use parent's color, or, if that is not set either,\r\n\t * automatically assigned color from chart's color set. (`chart.colors`)\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * For the legend to work properly\r\n\t */\r\n\tpublic get fill(): Color {\r\n\t\treturn this.color;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\tlet color = this.properties.color;\r\n\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\tcolor = this.parent.color;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tcolor = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\r\n\t/**\r\n\t * Series of children data items\r\n\t * @todo: proper descrition\r\n\t */\r\n\tpublic set series(series: TreeMapSeries) {\r\n\t\tif (series != this._series) {\r\n\t\t\tif (this._series) {\r\n\t\t\t\tthis.component.series.removeValue(this._series);\r\n\t\t\t\tthis._series.dispose();\r\n\t\t\t}\r\n\t\t\tthis._series = series;\r\n\t\t\tthis._disposers.push(series);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get series(): TreeMapSeries {\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param toValue   A value to set to `fields` when hiding\r\n\t * @param fields    A list of data fields to set value to `toValue`\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tthis.setWorkingValue(\"value\", 0);\r\n\r\n\t\tif (this.children) {\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tchild.hide(duration, delay, toValue, fields);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tlet seriesDataItem = this.seriesDataItem;\r\n\t\tif(seriesDataItem){\r\n\t\t\tseriesDataItem.bullets.each((key, value)=>{\r\n\t\t\t\tvalue.hide();\r\n\t\t\t\tvalue.preventShow = true;\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\treturn super.hide(duration, delay, toValue, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param fields    A list of fields to set values of\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tthis.setWorkingValue(\"value\", this.values.value.value);\r\n\t\tif (this.children) {\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tchild.show(duration, delay, fields);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tlet seriesDataItem = this.seriesDataItem;\r\n\t\tif(seriesDataItem){\r\n\t\t\tseriesDataItem.bullets.each((key, value)=>{\r\n\t\t\t\tvalue.preventShow = false;\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\treturn super.show(duration, delay, fields);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMap]].\r\n */\r\nexport interface ITreeMapDataFields extends IXYChartDataFields {\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's numeric value.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's sub-items.\r\n\t */\r\n\tchildren?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's name.\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's color.\r\n\t *\r\n\t * If not set, a new color will be automatically assigned to each item as\r\n\t * defined by theme.\r\n\t */\r\n\tcolor?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMap]].\r\n */\r\nexport interface ITreeMapProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Maximum number of levels the chart will display initially.\r\n\t *\r\n\t * @default 2\r\n\t */\r\n\tmaxLevels?: number;\r\n\r\n\t/**\r\n\t * Current drill-down level the treemap is at.\r\n\t */\r\n\tcurrentLevel?: number;\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * @default \"descending\"\r\n\t */\r\n\tsorting?: \"none\" | \"ascending\" | \"descending\";\r\n\r\n\t/**\r\n\t * If set to `true`, columns of parent nodes will be hidden when user\r\n\t * drills-down into deeper levels.\r\n\t * \r\n\t * @sice 4.7.4\r\n\t * @default false\r\n\t */\r\n\thideParentColumns?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[TreeMap]].\r\n */\r\nexport interface ITreeMapEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapAdapters extends IXYChartAdapters, ITreeMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/} for documentation\r\n */\r\nexport class TreeMap extends XYChart {\r\n\r\n\t/**\r\n\t * Defines a type of the data item used for this chart.\r\n\t */\r\n\tpublic _dataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ITreeMapDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITreeMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITreeMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITreeMapEvents;\r\n\r\n\t/**\r\n\t * A horizontal value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t */\r\n\tpublic xAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * A vertical value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t */\r\n\tpublic yAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * An algorithm used to divide area into squares based on their value.\r\n\t *\r\n\t * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"layoutAlgorithm\": \"sliceDice\",\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/#Area_division_methods} For more info and examples.\r\n\t * @default squarify\r\n\t */\r\n\tpublic layoutAlgorithm: (parent: TreeMapDataItem) => void = this.squarify;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: TreeMapSeries;\r\n\r\n\t/**\r\n\t * [_homeDataItem description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _homeDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * [_tempSeries description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _tempSeries: TreeMapSeries[];\r\n\r\n\t/**\r\n\t * A text dispalyed on the home button in breadcurmb nav control.\r\n\t */\r\n\tprotected _homeText: string;\r\n\r\n\t/**\r\n\t * A set of colors to be applied automatically to each new chart item, if\r\n\t * not explicitly set.\r\n\t */\r\n\tpublic colors: ColorSet;\r\n\r\n\t/**\r\n\t * Holds series object for each TreeMap level.\r\n\t *\r\n\t * \"0\" is the top-level series.\r\n\t * \"1\" is the second level.\r\n\t * Etc.\r\n\t *\r\n\t * @todo Description\r\n\t * @param Templates for each level\r\n\t */\r\n\tpublic seriesTemplates: DictionaryTemplate<string, this[\"_seriesType\"]>;\r\n\r\n\t/**\r\n\t * Is the chart zoomable?\r\n\t *\r\n\t * If the chart is `zoomable`, and items have sub-items, the chart will\r\n\t * drill-down to sub-items when click on their parent item.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tpublic zoomable: boolean = true;\r\n\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t */\r\n\tprotected _navigationBar: NavigationBar;\r\n\r\n\t/**\r\n\t * Currently selected data item.\r\n\t * @readonly\r\n\t */\r\n\tpublic currentlyZoomed: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMap\";\r\n\r\n\t\tthis._usesData = true;\r\n\r\n\t\tthis.maxLevels = 2;\r\n\t\tthis.currentLevel = 0;\r\n\t\tthis.hideParentColumns = false;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.sorting = \"descending\";\r\n\r\n\t\t// create two value axes for the chart\r\n\t\tlet xAxis = this.xAxes.push(new ValueAxis<any>());\r\n\t\txAxis.title.disabled = true;\r\n\t\txAxis.strictMinMax = true;\r\n\r\n\t\tlet xRenderer = xAxis.renderer;\r\n\t\txRenderer.inside = true;\r\n\t\txRenderer.labels.template.disabled = true;\r\n\t\txRenderer.ticks.template.disabled = true;\r\n\t\txRenderer.grid.template.disabled = true;\r\n\t\txRenderer.axisFills.template.disabled = true;\r\n\t\txRenderer.minGridDistance = 100;\r\n\t\txRenderer.line.disabled = true;\r\n\t\txRenderer.baseGrid.disabled = true;\r\n\t\t//xRenderer.inversed = true;\r\n\r\n\t\tlet yAxis = this.yAxes.push(new ValueAxis<any>());\r\n\t\tyAxis.title.disabled = true;\r\n\t\tyAxis.strictMinMax = true;\r\n\r\n\t\tlet yRenderer = yAxis.renderer;\r\n\t\tyRenderer.inside = true;\r\n\t\tyRenderer.labels.template.disabled = true;\r\n\t\tyRenderer.ticks.template.disabled = true;\r\n\t\tyRenderer.grid.template.disabled = true;\r\n\t\tyRenderer.axisFills.template.disabled = true;\r\n\t\tyRenderer.minGridDistance = 100;\r\n\t\tyRenderer.line.disabled = true;\r\n\t\tyRenderer.baseGrid.disabled = true;\r\n\t\tyRenderer.inversed = true;\r\n\r\n\t\t// shortcuts\r\n\t\tthis.xAxis = xAxis;\r\n\t\tthis.yAxis = yAxis;\r\n\r\n\t\tconst template = new TreeMapSeries();\r\n\t\tthis.seriesTemplates = new DictionaryTemplate<string, this[\"_seriesType\"]>(template);\r\n\t\ttemplate.virtualParent = this;\r\n\t\tthis._disposers.push(new DictionaryDisposer(this.seriesTemplates));\r\n\t\tthis._disposers.push(template);\r\n\r\n\t\tthis.zoomOutButton.events.on(\"hit\", () => {\r\n\t\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t\t}, undefined, false)\r\n\r\n\t\tthis.seriesTemplates.events.on(\"insertKey\", (event) => {\r\n\t\t\tevent.newValue.isTemplate = true;\r\n\t\t}, undefined, false)\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t */\r\n\tpublic set navigationBar(navigationBar: NavigationBar) {\r\n\t\tif (this._navigationBar != navigationBar) {\r\n\t\t\tthis._navigationBar = navigationBar;\r\n\t\t\tnavigationBar.parent = this;\r\n\t\t\tnavigationBar.toBack();\r\n\t\t\tnavigationBar.links.template.events.on(\"hit\", (event) => {\r\n\t\t\t\tlet dataItem = <TreeMapDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tif (!dataItem.isDisposed()) {\r\n\t\t\t\t\tthis.zoomToChartDataItem(dataItem);\r\n\t\t\t\t\tthis.createTreeSeries(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}, undefined, true);\r\n\r\n\t\t\tthis._disposers.push(navigationBar);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns navigationBar if it is added to a chart\r\n\t */\r\n\tpublic get navigationBar(): NavigationBar {\r\n\t\treturn this._navigationBar;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates chart's data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\tthis.series.clear();\r\n\t\tthis._tempSeries = [];\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.dispose();\r\n\t\t}\r\n\r\n\t\tlet homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\r\n\r\n\t\tthis._homeDataItem = homeDataItem;\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tdataItem.parent = homeDataItem;\r\n\t\t});\r\n\r\n\t\thomeDataItem.children = this.dataItems;\r\n\r\n\t\thomeDataItem.x0 = 0;\r\n\t\thomeDataItem.y0 = 0;\r\n\t\thomeDataItem.name = this._homeText;\r\n\r\n\t\tlet maxX = 1000;\r\n\t\tlet maxY = Math.round((maxX * this.pixelHeight / this.pixelWidth) / 10) * 10 || 1000;\r\n\r\n\t\thomeDataItem.x1 = maxX;\r\n\t\thomeDataItem.y1 = maxY;\r\n\r\n\t\tthis.xAxis.min = 0;\r\n\t\tthis.xAxis.max = maxX;\r\n\t\tthis.xAxis.getMinMax();\r\n\r\n\t\tthis.yAxis.min = 0;\r\n\t\tthis.yAxis.max = maxY;\r\n\t\tthis.yAxis.getMinMax();\r\n\r\n\t\tthis.layoutItems(homeDataItem);\r\n\r\n\t\tthis.createTreeSeries(homeDataItem);\r\n\r\n\t\tthis.feedLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Layouts and sizes all items according to their value and\r\n\t * `layoutAlgorithm`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Parent data item\r\n\t */\r\n\tpublic layoutItems(parent: TreeMapDataItem, sorting?: \"none\" | \"ascending\" | \"descending\"): void {\r\n\t\tif (parent) {\r\n\t\t\tlet children = parent.children;\r\n\r\n\t\t\tif (!sorting) {\r\n\t\t\t\tsorting = this.sorting;\r\n\t\t\t}\r\n\r\n\t\t\tif (sorting == \"ascending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn a.value - b.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (sorting == \"descending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn b.value - a.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._updateDataItemIndexes(0);\r\n\r\n\t\t\tthis.layoutAlgorithm(parent);\r\n\r\n\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\r\n\t\t\t\tlet node = children.getIndex(i);\r\n\r\n\t\t\t\tif (node.children) {\r\n\t\t\t\t\tthis.layoutItems(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates and returns a new treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  Data item to create series out of\r\n\t */\r\n\tprotected createTreeSeries(dataItem: TreeMapDataItem) {\r\n\t\tthis._tempSeries = [];\r\n\r\n\t\tlet navigationData = [dataItem];\r\n\r\n\t\t// create parent series and navigation data\r\n\t\tlet parentDataItem = dataItem.parent;\r\n\t\twhile (parentDataItem != undefined) {\r\n\t\t\tthis.initSeries(parentDataItem);\r\n\t\t\tnavigationData.push(parentDataItem);\r\n\t\t\tparentDataItem = parentDataItem.parent;\r\n\t\t}\r\n\r\n\t\tnavigationData.reverse();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.data = navigationData;\r\n\t\t}\r\n\r\n\t\t// create series and children series\r\n\t\tthis.createTreeSeriesReal(dataItem);\r\n\r\n\t\t// add those which are not in the list\r\n\t\t$array.each(this._tempSeries, (series) => {\r\n\t\t\tif (this.series.indexOf(series) == -1) {\r\n\t\t\t\tthis.series.push(series);\r\n\t\t\t}\r\n\t\t\tseries.zIndex = series.level;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * [createTreeSeriesReal description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected createTreeSeriesReal(dataItem: TreeMapDataItem) {\r\n\t\tif (dataItem.children) {\r\n\t\t\tlet level = dataItem.level;\r\n\r\n\t\t\tif (level < this.currentLevel + this.maxLevels) {\r\n\r\n\t\t\t\tthis.initSeries(dataItem);\r\n\r\n\t\t\t\tfor (let i = 0; i < dataItem.children.length; i++) {\r\n\t\t\t\t\tlet child = dataItem.children.getIndex(i);\r\n\t\t\t\t\tif (child.children) {\r\n\t\t\t\t\t\tthis.createTreeSeriesReal(child);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected setData(value: any[]) {\r\n\t\tthis.currentLevel = 0;\r\n\t\tthis.currentlyZoomed = undefined;\r\n\t\tthis.xAxis.start = 0;\r\n\t\tthis.xAxis.end = 1;\r\n\t\tthis.yAxis.start = 0;\r\n\t\tthis.yAxis.end = 1;\r\n\t\tsuper.setData(value);\r\n\t}\r\n\t/**\r\n\t * @ignore\r\n\t * Overriding, as tree map series are created on the fly all the time\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Initializes the treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  Chart data item\r\n\t */\r\n\tprotected initSeries(dataItem: TreeMapDataItem) {\r\n\t\tif (!dataItem.series) {\r\n\t\t\tlet series: TreeMapSeries;\r\n\r\n\t\t\tlet template = this.seriesTemplates.getKey(dataItem.level.toString());\r\n\t\t\tif (template) {\r\n\t\t\t\tseries = template.clone();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries = this.series.create();\r\n\t\t\t}\r\n\t\t\t// for the legend to get {value}\r\n\t\t\tseries.dataItem.dataContext = dataItem;\r\n\r\n\t\t\tseries.name = dataItem.name;\r\n\t\t\tseries.parentDataItem = dataItem;\r\n\t\t\tdataItem.series = series;\r\n\r\n\t\t\tlet level = dataItem.level;\r\n\t\t\tseries.level = level;\r\n\r\n\t\t\tlet dataContext: any = dataItem.dataContext;\r\n\t\t\tif (dataContext) {\r\n\t\t\t\tseries.config = dataContext.config;\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\r\n\t\t\tseries.data = dataItem.children.values;\r\n\t\t\tseries.fill = dataItem.color;\r\n\r\n\t\t\tseries.columnsContainer.hide(0);\r\n\t\t\tseries.bulletsContainer.hide(0);\r\n\r\n\t\t\tseries.columns.template.adapter.add(\"fill\", (fill, target) => {\r\n\t\t\t\tlet dataItem = <TreeMapSeriesDataItem>target.dataItem;\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tlet treeMapDataItem = dataItem.treeMapDataItem;\r\n\t\t\t\t\tif (treeMapDataItem) {\r\n\t\t\t\t\t\ttarget.fill = treeMapDataItem.color;\r\n\t\t\t\t\t\ttarget.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\r\n\t\t\t\t\t\treturn treeMapDataItem.color;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (this.zoomable && (dataItem.level > this.currentLevel || (dataItem.children && dataItem.children.length > 0))) {\r\n\t\t\t\tseries.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\t\t\tif (this.zoomable) {\r\n\t\t\t\t\tseries.columns.template.events.on(\"hit\", (event) => {\r\n\t\t\t\t\t\tlet seriesDataItem = <TreeMapSeriesDataItem>event.target.dataItem;\r\n\r\n\t\t\t\t\t\tif (dataItem.level > this.currentLevel) {\r\n\t\t\t\t\t\t\tthis.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.zoomToSeriesDataItem(seriesDataItem);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}, this, undefined);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._tempSeries.push(dataItem.series);\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles bullets so that labels that belong to current drill level are\r\n\t * shown.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t */\r\n\tprotected toggleBullets(duration?: number): void {\r\n\t\t// hide all series which are not in tempSeries\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (this._tempSeries.indexOf(series) == - 1) {\r\n\t\t\t\t//series.hideReal(duration);\r\n\t\t\t\tseries.columnsContainer.hide();\r\n\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t//series.showReal(duration);\r\n\t\t\t\tseries.columnsContainer.show();\r\n\t\t\t\tseries.bulletsContainer.show(duration);\r\n\r\n\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\tdataItem.bullets.each((key, bullet) => {\r\n\t\t\t\t\t\tbullet.show();\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\r\n\t\t\t\tif (series.level < this.currentLevel) {\r\n\t\t\t\t\tif (this.hideParentColumns) {\r\n\t\t\t\t\t\tseries.columnsContainer.hide();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t\t}\r\n\t\t\t\telse if (series.level == this.currentLevel) {\r\n\t\t\t\t\tif (this.maxLevels > 1) {\r\n\t\t\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\t\t\tif (dataItem.treeMapDataItem.children) {\r\n\t\t\t\t\t\t\t\tdataItem.bullets.each((key, bullet) => {\r\n\t\t\t\t\t\t\t\t\tbullet.hide();\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item in series.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic zoomToSeriesDataItem(dataItem: TreeMapSeriesDataItem): void {\r\n\t\tthis.zoomToChartDataItem(dataItem.treeMapDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item. If dataItem is not specified, the chart will zoom-out.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic zoomToChartDataItem(dataItem?: TreeMapDataItem): void {\r\n\t\tif(!dataItem){\r\n\t\t\tdataItem = this._homeDataItem;\r\n\t\t}\r\n\r\n\t\tlet zoomOutButton = this.zoomOutButton;\r\n\t\t// this is needed because if there is only one fist level, it wont' be shown\r\n\t\tif (zoomOutButton) {\r\n\t\t\tif (dataItem != this._homeDataItem) {\r\n\t\t\t\tzoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tzoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataItem && dataItem.children) {\r\n\t\t\tthis.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\r\n\t\t\tthis.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\r\n\r\n\t\t\tthis.currentLevel = dataItem.level;\r\n\t\t\tthis.currentlyZoomed = dataItem;\r\n\r\n\t\t\tthis.createTreeSeries(dataItem);\r\n\r\n\t\t\tlet rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\r\n\r\n\t\t\tif (rangeChangeAnimation && !rangeChangeAnimation.isDisposed() && !rangeChangeAnimation.isFinished()) {\r\n\t\t\t\tthis._dataDisposers.push(rangeChangeAnimation);\r\n\r\n\t\t\t\trangeChangeAnimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tthis.toggleBullets();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.toggleBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"TreeMap chart\");\r\n\t\t}\r\n\t\t//this.homeText = this.language.translate(\"Home\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum number of levels the chart will display initially.\r\n\t *\r\n\t * @default 2\r\n\t * @param value  Maximum drill-down level\r\n\t */\r\n\tpublic set maxLevels(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLevels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Maximum drill-down level\r\n\t */\r\n\tpublic get maxLevels(): number {\r\n\t\treturn this.getPropertyValue(\"maxLevels\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current drill-down level the chart is at.\r\n\t *\r\n\t * @param value  Current level\r\n\t */\r\n\tpublic set currentLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"currentLevel\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Current level\r\n\t */\r\n\tpublic get currentLevel(): number {\r\n\t\treturn this.getPropertyValue(\"currentLevel\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true`, columns of parent nodes will be hidden when user\r\n\t * drills-down into deeper levels.\r\n\t * \r\n\t * @sice 4.7.4\r\n\t * @default false\r\n\t * @param  value  Hide?\r\n\t */\r\n\tpublic set hideParentColumns(value: boolean) {\r\n\t\tthis.setPropertyValue(\"hideParentColumns\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hide?\r\n\t */\r\n\tpublic get hideParentColumns(): boolean {\r\n\t\treturn this.getPropertyValue(\"hideParentColumns\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set sorting(value: \"none\" | \"ascending\" | \"descending\") {\r\n\t\tthis.setPropertyValue(\"sorting\", value, true);\r\n\t}\r\n\r\n\tpublic get sorting(): \"none\" | \"ascending\" | \"descending\" {\r\n\t\treturn this.getPropertyValue(\"sorting\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new series of the suitable type.\r\n\t *\r\n\t * @return new series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new TreeMapSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A text displayed on the \"home\" button which is used to go back to level 0\r\n\t * after drill into sub-items.\r\n\t *\r\n\t * @param value  Home text\r\n\t */\r\n\tpublic set homeText(value: string) {\r\n\t\tthis._homeText = value;\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.name = this._homeText;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Home text\r\n\t */\r\n\tpublic get homeText(): string {\r\n\t\treturn this._homeText;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Instantiate layout algorithm\r\n\t\t\tif ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\r\n\t\t\t\tswitch (config[\"layoutAlgorithm\"]) {\r\n\t\t\t\t\tcase \"squarify\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.squarify;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"binaryTree\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.binaryTree;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"slice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.slice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"dice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.dice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"sliceDice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.sliceDice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tdelete config[\"layoutAlgorithm\"];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Set type for navigation bar\r\n\t\t\tif ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\r\n\t\t\t\tconfig.navigationBar.type = \"NavigationBar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the size of container and informs its children of how much size\r\n\t * they can occupy, by setting their relative `maxWidth` and `maxHeight`\r\n\t * properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout() {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.layoutItems(this.currentlyZoomed);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.layoutItems(this._homeDataItem);\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.validateRawData();\r\n\t\t});\r\n\r\n\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * TREEMAP LAYOUT FUNCTIONS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * The functions below are from D3.js library (https://d3js.org/)\r\n\t *\r\n\t * --------------------------------------------------------------------------\r\n\t * Copyright 2017 Mike Bostock\r\n\t *\r\n\t * Redistribution and use in source and binary forms, with or without\r\n\t * modification, are permitted provided that the following conditions are met:\r\n\t *\r\n\t * 1. Redistributions of source code must retain the above copyright notice,\r\n\t *    this list of conditions and the following disclaimer.\r\n\t *\r\n\t * 2. Redistributions in binary form must reproduce the above copyright\r\n\t *    notice,this list of conditions and the following disclaimer in the\r\n\t *    documentation and/or other materials provided with the distribution.\r\n\t *\r\n\t * 3. Neither the name of the copyright holder nor the names of its\r\n\t *    contributors may be used to endorse or promote products derived from\r\n\t *    this software without specific prior written permission.\r\n\t *\r\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n\t * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n\t * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n\t * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n\t * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n\t * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n\t * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n\t * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n\t * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n\t * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n\t * POSSIBILITY OF SUCH DAMAGE.\r\n\t * --------------------------------------------------------------------------\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: binaryTree.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic binaryTree(parent: TreeMapDataItem): void {\r\n\t\tlet nodes = parent.children,\r\n\t\t\ti, n = nodes.length,\r\n\t\t\tsum, sums = new Array(n + 1);\r\n\r\n\t\tfor (sums[0] = sum = i = 0; i < n; ++i) {\r\n\t\t\tsums[i + 1] = sum += nodes.getIndex(i).value;\r\n\t\t}\r\n\r\n\t\tpartition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\r\n\r\n\t\tfunction partition(i: number, j: number, value: number, x0: number, y0: number, x1: number, y1: number) {\r\n\t\t\tif (i >= j - 1) {\r\n\t\t\t\tlet node = nodes.getIndex(i);\r\n\t\t\t\tnode.x0 = x0;\r\n\t\t\t\tnode.y0 = y0;\r\n\t\t\t\tnode.x1 = x1;\r\n\t\t\t\tnode.y1 = y1;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueOffset = sums[i],\r\n\t\t\t\tvalueTarget = (value / 2) + valueOffset,\r\n\t\t\t\tk = i + 1,\r\n\t\t\t\thi = j - 1;\r\n\r\n\t\t\twhile (k < hi) {\r\n\t\t\t\tlet mid = k + hi >>> 1;\r\n\t\t\t\tif (sums[mid] < valueTarget) {\r\n\t\t\t\t\tk = mid + 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\thi = mid;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) {\r\n\t\t\t\t--k;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueLeft = sums[k] - valueOffset,\r\n\t\t\t\tvalueRight = value - valueLeft;\r\n\r\n\t\t\tif ((x1 - x0) > (y1 - y0)) {\r\n\t\t\t\tlet xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, xk, y1);\r\n\t\t\t\tpartition(k, j, valueRight, xk, y0, x1, y1);\r\n\t\t\t} else {\r\n\t\t\t\tlet yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, x1, yk);\r\n\t\t\t\tpartition(k, j, valueRight, x0, yk, x1, y1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic slice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet node;\r\n\t\tlet i = -1;\r\n\t\tlet n = nodes.length;\r\n\t\tlet k = parent.value && (y1 - y0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i);\r\n\t\t\tnode.x0 = x0;\r\n\t\t\tnode.x1 = x1;\r\n\t\t\tnode.y0 = y0;\r\n\t\t\ty0 += node.value * k;\r\n\t\t\tnode.y1 = y0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: dice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic dice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (x1 - x0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i);\r\n\t\t\tnode.y0 = y0;\r\n\t\t\tnode.y1 = y1;\r\n\t\t\tnode.x0 = x0;\r\n\t\t\tx0 += node.value * k;\r\n\t\t\tnode.x1 = x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slideDice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic sliceDice(parent: TreeMapDataItem): void {\r\n\t\tif (parent.level & 1) {\r\n\t\t\tthis.slice(parent);\r\n\t\t} else {\r\n\t\t\tthis.dice(parent);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: squarify.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic squarify(parent: TreeMapDataItem): void {\r\n\t\tlet ratio = (1 + Math.sqrt(5)) / 2;\r\n\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet nodeValue;\r\n\t\tlet i0 = 0;\r\n\t\tlet i1 = 0;\r\n\t\tlet n = nodes.length;\r\n\t\tlet dx;\r\n\t\tlet dy;\r\n\t\tlet value = parent.value;\r\n\t\tlet sumValue;\r\n\t\tlet minValue;\r\n\t\tlet maxValue;\r\n\t\tlet newRatio;\r\n\t\tlet minRatio;\r\n\t\tlet alpha;\r\n\t\tlet beta;\r\n\r\n\t\twhile (i0 < n) {\r\n\t\t\tdx = x1 - x0;\r\n\t\t\tdy = y1 - y0;\r\n\r\n\t\t\t// Find the next non-empty node.\r\n\t\t\tdo {\r\n\t\t\t\tsumValue = nodes.getIndex(i1++).value;\r\n\t\t\t} while (!sumValue && i1 < n);\r\n\r\n\t\t\tminValue = maxValue = sumValue;\r\n\t\t\talpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\tminRatio = Math.max(maxValue / beta, beta / minValue);\r\n\r\n\t\t\t// Keep adding nodes while the aspect ratio maintains or improves.\r\n\t\t\tfor (; i1 < n; ++i1) {\r\n\t\t\t\tsumValue += nodeValue = nodes.getIndex(i1).value;\r\n\t\t\t\tif (nodeValue < minValue) {\r\n\t\t\t\t\tminValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tif (nodeValue > maxValue) {\r\n\t\t\t\t\tmaxValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\t\tnewRatio = Math.max(maxValue / beta, beta / minValue);\r\n\t\t\t\tif (newRatio > minRatio) {\r\n\t\t\t\t\tsumValue -= nodeValue; break;\r\n\t\t\t\t}\r\n\t\t\t\tminRatio = newRatio;\r\n\t\t\t}\r\n\r\n\t\t\t// Position and record the row orientation.\r\n\t\t\tlet row = this.dataItems.template.clone();\r\n\t\t\trow.value = sumValue;\r\n\t\t\trow.dice = dx < dy;\r\n\t\t\trow.children = nodes.slice(i0, i1);\r\n\t\t\trow.x0 = x0;\r\n\t\t\trow.y0 = y0;\r\n\t\t\trow.x1 = x1;\r\n\t\t\trow.y1 = y1;\r\n\r\n\t\t\tif (row.dice) {\r\n\t\t\t\trow.y1 = value ? (y0 += (dy * sumValue) / value) : y1;\r\n\t\t\t\tthis.dice(row);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trow.x1 = value ? (x0 += (dx * sumValue) / value) : x1;\r\n\t\t\t\tthis.slice(row);\r\n\t\t\t}\r\n\t\t\tvalue -= sumValue;\r\n\t\t\ti0 = i1;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleSeriesAdded2() {\r\n\t\t// void\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic handleDataItemValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (name == \"value\") {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (name == \"value\") {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getLegendLevel(dataItem: TreeMapDataItem): TreeMapDataItem {\r\n\t\tif (!dataItem) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!dataItem.children) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (dataItem.children.length > 1) {\r\n\t\t\treturn dataItem;\r\n\t\t}\r\n\t\telse if (dataItem.children.length == 1) {\r\n\t\t\treturn this.getLegendLevel(dataItem.children.getIndex(0));\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn dataItem;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A data item associated with top node.\r\n\t * \r\n\t * @since 4.8.2\r\n\t */\r\n\tpublic get homeDataItem():TreeMapDataItem {\r\n\t\treturn this._homeDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\r\n\t\t\tlet legendParent = this.getLegendLevel(this._homeDataItem);\r\n\r\n\t\t\tif (legendParent) {\r\n\t\t\t\tlet legendData: Array<this[\"_dataItem\"]> = [];\r\n\r\n\t\t\t\tlegendParent.children.each((dataItem) => {\r\n\t\t\t\t\t//if (!dataItem.hiddenInLegend) {\r\n\t\t\t\t\tlegendData.push(dataItem);\r\n\t\t\t\t\t//}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tlegend.data = legendData;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\r\n\t\tsuper.disposeData();\r\n\r\n\t\tthis._homeDataItem = undefined;\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxis.disposeData();\r\n\t\tthis.yAxis.disposeData();\r\n\t}\r\n\r\n\t/**\r\n\t * Since this chart uses hierarchical data, we need to remove childrent\r\n\t * dataField from export of non-hierarchical formats such as CSV and XSLX.\r\n\t *\r\n\t * @return Export\r\n\t */\r\n\tprotected getExporting(): Export {\r\n\t\tconst exporting = super.getExporting();\r\n\t\texporting.adapter.add(\"formatDataFields\", (info) => {\r\n\t\t\tif (info.format == \"csv\" || info.format == \"xlsx\") {\r\n\t\t\t\tif ($type.hasValue(this.dataFields.children)) {\r\n\t\t\t\t\tdelete info.dataFields[this.dataFields.children];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn info;\r\n\t\t})\r\n\t\treturn exporting;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}