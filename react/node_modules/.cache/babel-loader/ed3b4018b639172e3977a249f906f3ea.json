{"ast":null,"code":"/**\r\n * FlowDiagramLink module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Sprite } from \"../../core/Sprite\";\nimport { Container } from \"../../core/Container\";\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\nimport { registry } from \"../../core/Registry\";\nimport { Bullet } from \"../elements/Bullet\";\nimport { Color } from \"../../core/utils/Color\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { Polyline } from \"../../core/elements/Polyline\";\nimport { Line } from \"../../core/elements/Line\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Flow Diagram.\r\n *\r\n * @see {@link IFlowDiagramLinkEvents} for a list of available events\r\n * @see {@link IFlowDiagramLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar FlowDiagramLink =\n/** @class */\nfunction (_super) {\n  __extends(FlowDiagramLink, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function FlowDiagramLink() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"FlowDiagramLink\";\n    var interfaceColors = new InterfaceColorSet();\n    _this.maskBullets = false;\n    _this.colorMode = \"fromNode\";\n    _this.layout = \"none\";\n    _this.isMeasured = false;\n    _this.startAngle = 0;\n    _this.endAngle = 0;\n    _this.strokeOpacity = 0; // this is very important, otherwise the container will be shifted\n\n    _this.verticalCenter = \"none\";\n    _this.horizontalCenter = \"none\";\n    _this.tooltipText = \"{fromName}â†’{toName}:{value.value}\";\n    _this.tooltipLocation = 0.5;\n    _this.link = _this.createChild(Sprite);\n    _this.link.shouldClone = false;\n\n    _this.link.setElement(_this.paper.add(\"path\"));\n\n    _this.link.isMeasured = false;\n    _this.fillOpacity = 0.2;\n    _this.fill = interfaceColors.getFor(\"alternativeBackground\");\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Positions bullets\r\n   * @ignore\r\n   */\n\n\n  FlowDiagramLink.prototype.positionBullets = function () {\n    var _this = this;\n\n    $iter.each(this.bullets.iterator(), function (bullet) {\n      bullet.parent = _this.bulletsContainer;\n      bullet.maxWidth = _this.maxWidth;\n      bullet.maxHeight = _this.maxHeight;\n\n      _this.positionBullet(bullet);\n    });\n  };\n\n  Object.defineProperty(FlowDiagramLink.prototype, \"bulletsContainer\", {\n    /**\r\n     * Bullets container\r\n     */\n    get: function () {\n      if (!this._bulletsContainer) {\n        var bulletsContainer = this.createChild(Container);\n        bulletsContainer.shouldClone = false;\n        bulletsContainer.layout = \"none\";\n        this._bulletsContainer = bulletsContainer;\n      }\n\n      return this._bulletsContainer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramLink.prototype, \"bulletsMask\", {\n    /**\r\n     * Bullets mask sprite\r\n     */\n    get: function () {\n      if (!this._bulletsMask) {\n        var bulletsMask = this.createChild(Sprite);\n        bulletsMask.shouldClone = false;\n        bulletsMask.setElement(this.paper.add(\"path\"));\n        bulletsMask.isMeasured = false;\n        this._bulletsMask = bulletsMask;\n      }\n\n      return this._bulletsMask;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Positions bullets at relative bullet.locationX position on the link.\r\n   * @ignore\r\n   */\n\n  FlowDiagramLink.prototype.positionBullet = function (bullet) {\n    var location = bullet.locationX;\n\n    if (!$type.isNumber(location)) {\n      location = bullet.locationY;\n    }\n\n    if (!$type.isNumber(location)) {\n      location = 0.5;\n    }\n\n    var point = this.middleLine.positionToPoint(location);\n    bullet.moveTo(point);\n    var rotationField = bullet.propertyFields.rotation;\n    var angle;\n\n    if (bullet.dataItem) {\n      var dataContext = bullet.dataItem.dataContext;\n      angle = dataContext[rotationField];\n    }\n\n    if (!$type.isNumber(angle)) {\n      angle = point.angle;\n    }\n\n    bullet.rotation = angle;\n  };\n\n  Object.defineProperty(FlowDiagramLink.prototype, \"startAngle\", {\n    /**\r\n     * @return Start angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startAngle\");\n    },\n\n    /**\r\n     * [startAngle description]\r\n     *\r\n     * @todo Description\r\n     * @param value  Start angle\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"startAngle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramLink.prototype, \"endAngle\", {\n    /**\r\n     * @return End angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endAngle\");\n    },\n\n    /**\r\n     * [endAngle description]\r\n     *\r\n     * @todo Description\r\n     * @param value  End angle\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"endAngle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramLink.prototype, \"colorMode\", {\n    /**\r\n     * Fill mode\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"colorMode\");\n    },\n\n    /**\r\n     * Should link be filled with a solid color, color of from node, color of toNode or gradient between node colors.\r\n     * Some of the links, like ChordLink does not support gradiens well.\r\n     *\r\n     * @param value  Fill mode\r\n     */\n    set: function (value) {\n      if (value == \"gradient\") {\n        var color = this.fill;\n        this.gradient.stops.clear();\n\n        if (color instanceof Color) {\n          this.gradient.addColor(color);\n          this.gradient.addColor(color);\n        }\n\n        this.fill = this.gradient;\n        this.stroke = this.gradient;\n      }\n\n      this.setPropertyValue(\"colorMode\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramLink.prototype, \"maskBullets\", {\n    /**\r\n     * @return mask bullets value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maskBullets\");\n    },\n\n    /**\r\n     * Should link bullets be masked or not\r\n     *\r\n     * @param value\r\n     * @default false\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"maskBullets\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramLink.prototype, \"tooltipLocation\", {\n    /**\r\n     * Tooltip location value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tooltipLocation\");\n    },\n\n    /**\r\n     * Relative location of a tooltip.\r\n     * @default 0.5\r\n     *\r\n     * @param value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tooltipLocation\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Adds color steps in the link gradient.\r\n   *\r\n   * @param value  Fill option\r\n   */\n\n  FlowDiagramLink.prototype.setFill = function (value) {\n    _super.prototype.setFill.call(this, value);\n\n    var gradient = this._gradient;\n\n    if (gradient && value instanceof Color) {\n      gradient.stops.clear();\n      gradient.addColor(value);\n      gradient.addColor(value);\n    }\n  };\n  /**\r\n   * Updates bounding box based on element dimension settings.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  FlowDiagramLink.prototype.measureElement = function () {};\n\n  Object.defineProperty(FlowDiagramLink.prototype, \"bullets\", {\n    /**\r\n     * List of bullets\r\n     *\r\n     * @return [description]\r\n     */\n    get: function () {\n      var _this = this;\n\n      if (!this._bullets) {\n        this._bullets = new ListTemplate(new Bullet());\n\n        this._disposers.push(new ListDisposer(this._bullets));\n\n        this._disposers.push(this._bullets.template);\n\n        this._bullets.events.on(\"inserted\", function (event) {\n          event.newValue.events.on(\"propertychanged\", function (event) {\n            if (event.property == \"locationX\" || event.property == \"locationY\") {\n              _this.positionBullet(event.target);\n            }\n          }, undefined, false);\n        }, undefined, false);\n      }\n\n      return this._bullets;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies properties from another [[FlowDiagramLink]].\r\n   *\r\n   * @param source  Source link\r\n   */\n\n  FlowDiagramLink.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.bullets.copyFrom(source.bullets);\n    var middleLine = this.middleLine;\n\n    if (middleLine) {\n      if (middleLine instanceof Line && source.middleLine instanceof Line) {\n        middleLine.copyFrom(source.middleLine);\n      }\n\n      if (middleLine instanceof Polyline && source.middleLine instanceof Polyline) {\n        middleLine.copyFrom(source.middleLine);\n      }\n    }\n\n    this.link.copyFrom(source.link);\n  };\n  /**\r\n   * @ignore Exclude from docs\r\n   * @return Tooltip X (px)\r\n   */\n\n\n  FlowDiagramLink.prototype.getTooltipX = function () {\n    if (this.middleLine) {\n      return this.middleLine.positionToPoint(this.tooltipLocation).x;\n    }\n  };\n  /**\r\n   * @ignore Exclude from docs\r\n   * @return Tooltip Y (px)\r\n   */\n\n\n  FlowDiagramLink.prototype.getTooltipY = function () {\n    if (this.middleLine) {\n      return this.middleLine.positionToPoint(this.tooltipLocation).y;\n    }\n  };\n\n  Object.defineProperty(FlowDiagramLink.prototype, \"gradient\", {\n    /**\r\n     * A gradiend instance that is used to provided colored gradient fills for\r\n     * the Flow link.\r\n     */\n    get: function () {\n      if (!this._gradient) {\n        this._gradient = new LinearGradient();\n      }\n\n      return this._gradient;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return FlowDiagramLink;\n}(Container);\n\nexport { FlowDiagramLink };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"FlowDiagramLink\"] = FlowDiagramLink;","map":{"version":3,"sources":["../../../../../src/.internal/charts/elements/FlowDiagramLink.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * FlowDiagramLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Container, IContainerProperties, IContainerEvents, IContainerAdapters } from \"../../core/Container\";\r\nimport { FlowDiagramDataItem } from \"../types/FlowDiagram\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\nimport { RadialGradient } from \"../../core/rendering/fills/RadialGradient\";\r\nimport { Pattern } from \"../../core/rendering/fills/Pattern\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Polyline } from \"../../core/elements/Polyline\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FlowDiagramLink]].\r\n */\r\nexport interface IFlowDiagramLinkProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * [tension description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * [startX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartX?: number;\r\n\r\n\t/**\r\n\t * [startY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartY?: number;\r\n\r\n\t/**\r\n\t * [endX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendX?: number;\r\n\r\n\t/**\r\n\t * [endY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendY?: number;\r\n\r\n\t/**\r\n\t * [linkWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tlinkWidth?: number;\r\n\r\n\t/**\r\n\t * [startAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * [endAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Should link be filled with a solid color, color of from node, color of toNode or gradient between node colors.\r\n\t */\r\n\tcolorMode?: \"solid\" | \"gradient\" | \"fromNode\" | \"toNode\";\r\n\r\n\t/**\r\n\t * [controlPointDistance description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tcontrolPointDistance?: number;\r\n\r\n\t/**\r\n\t * [maskBullets description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n\t/**\r\n\t * [tooltipLocation description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\ttooltipLocation?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[FlowDiagramLink]].\r\n */\r\nexport interface IFlowDiagramLinkEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FlowDiagramLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFlowDiagramLinkAdapters extends IContainerAdapters, IFlowDiagramLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Flow Diagram.\r\n *\r\n * @see {@link IFlowDiagramLinkEvents} for a list of available events\r\n * @see {@link IFlowDiagramLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class FlowDiagramLink extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFlowDiagramLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFlowDiagramLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFlowDiagramLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t */\r\n\tpublic _dataItem: FlowDiagramDataItem;\r\n\r\n\t/**\r\n\t * A gradiend instance that is used to provided colored gradient fills for\r\n\t * the Flow link.\r\n\t */\r\n\tprotected _gradient: LinearGradient;\r\n\r\n\r\n\t/**\r\n\t * List of bullets\r\n\t * @ignore\r\n\t */\r\n\tprotected _bullets: ListTemplate<Bullet>;\r\n\r\n\t/**\r\n\t * Link sprite\r\n\t */\r\n\tpublic link: Sprite;\r\n\r\n\t/**\r\n\t * Bullets mask spite\r\n     */\r\n\tprotected _bulletsMask: Sprite;\r\n\r\n\t/**\r\n\t * Bullets container\r\n     */\r\n\tprotected _bulletsContainer: Container;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n     */\r\n\tpublic middleLine: Line | Polyline;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagramLink\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.maskBullets = false;\r\n\r\n\t\tthis.colorMode = \"fromNode\";\r\n\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startAngle = 0;\r\n\t\tthis.endAngle = 0;\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\r\n\t\t// this is very important, otherwise the container will be shifted\r\n\t\tthis.verticalCenter = \"none\";\r\n\t\tthis.horizontalCenter = \"none\";\r\n\r\n\t\tthis.tooltipText = \"{fromName}â†’{toName}:{value.value}\";\r\n\t\tthis.tooltipLocation = 0.5;\r\n\r\n\t\tthis.link = this.createChild(Sprite);\r\n\t\tthis.link.shouldClone = false;\r\n\t\tthis.link.setElement(this.paper.add(\"path\"));\r\n\t\tthis.link.isMeasured = false;\r\n\t\tthis.fillOpacity = 0.2;\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Positions bullets\r\n\t * @ignore\r\n\t */\r\n\tprotected positionBullets() {\r\n\t\t$iter.each(this.bullets.iterator(), (bullet) => {\r\n\t\t\tbullet.parent = this.bulletsContainer;\r\n\r\n\t\t\tbullet.maxWidth = this.maxWidth;\r\n\t\t\tbullet.maxHeight = this.maxHeight;\r\n\r\n\t\t\tthis.positionBullet(bullet);\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Bullets container\r\n     */\r\n\tpublic get bulletsContainer() {\r\n\t\tif (!this._bulletsContainer) {\r\n\t\t\tlet bulletsContainer = this.createChild(Container);\r\n\t\t\tbulletsContainer.shouldClone = false;\r\n\t\t\tbulletsContainer.layout = \"none\";\r\n\t\t\tthis._bulletsContainer = bulletsContainer;\r\n\t\t}\r\n\t\treturn this._bulletsContainer;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Bullets mask sprite\r\n     */\r\n\tpublic get bulletsMask() {\r\n\t\tif (!this._bulletsMask) {\r\n\t\t\tlet bulletsMask = this.createChild(Sprite);\r\n\t\t\tbulletsMask.shouldClone = false;\r\n\t\t\tbulletsMask.setElement(this.paper.add(\"path\"));\r\n\t\t\tbulletsMask.isMeasured = false;\r\n\t\t\tthis._bulletsMask = bulletsMask;\r\n\t\t}\r\n\t\treturn this._bulletsMask;\r\n\t}\r\n\r\n\t/**\r\n\t * Positions bullets at relative bullet.locationX position on the link.\r\n\t * @ignore\r\n\t */\r\n\tprotected positionBullet(bullet: Bullet) {\r\n\r\n\t\tlet location = bullet.locationX;\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = bullet.locationY;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = 0.5;\r\n\t\t}\r\n\t\tlet point = this.middleLine.positionToPoint(location);\r\n\r\n\t\tbullet.moveTo(point);\r\n\r\n\t\tlet rotationField = bullet.propertyFields.rotation;\r\n\t\tlet angle: number;\r\n\t\tif (bullet.dataItem) {\r\n\t\t\tlet dataContext: any = bullet.dataItem.dataContext;\r\n\t\t\tangle = dataContext[rotationField];\r\n\t\t}\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = point.angle;\r\n\t\t}\r\n\r\n\t\tbullet.rotation = angle;\r\n\t}\r\n\r\n\t/**\r\n\t * [startAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * [endAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Should link be filled with a solid color, color of from node, color of toNode or gradient between node colors.\r\n\t * Some of the links, like ChordLink does not support gradiens well.\r\n\t *\r\n\t * @param value  Fill mode\r\n\t */\r\n\tpublic set colorMode(value: \"solid\" | \"gradient\" | \"fromNode\" | \"toNode\") {\r\n\t\tif (value == \"gradient\") {\r\n\t\t\tlet color = this.fill;\r\n\r\n\t\t\tthis.gradient.stops.clear();\r\n\t\t\tif (color instanceof Color) {\r\n\t\t\t\tthis.gradient.addColor(color);\r\n\t\t\t\tthis.gradient.addColor(color);\r\n\t\t\t}\r\n\t\t\tthis.fill = this.gradient;\r\n\t\t\tthis.stroke = this.gradient;\r\n\t\t}\r\n\t\tthis.setPropertyValue(\"colorMode\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Fill mode\r\n\t */\r\n\tpublic get colorMode(): \"solid\" | \"gradient\" | \"fromNode\" | \"toNode\" {\r\n\t\treturn this.getPropertyValue(\"colorMode\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Should link bullets be masked or not\r\n\t *\r\n\t * @param value\r\n\t * @default false\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return mask bullets value\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location of a tooltip.\r\n\t * @default 0.5\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set tooltipLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"tooltipLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Tooltip location value\r\n\t */\r\n\tpublic get tooltipLocation(): number {\r\n\t\treturn this.getPropertyValue(\"tooltipLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Adds color steps in the link gradient.\r\n\t *\r\n\t * @param value  Fill option\r\n\t */\r\n\tprotected setFill(value: Color | Pattern | LinearGradient | RadialGradient) {\r\n\t\tsuper.setFill(value)\r\n\t\tlet gradient = this._gradient;\r\n\r\n\t\tif (gradient && value instanceof Color) {\r\n\t\t\tgradient.stops.clear();\r\n\t\t\tgradient.addColor(value);\r\n\t\t\tgradient.addColor(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates bounding box based on element dimension settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * List of bullets\r\n\t *\r\n\t * @return [description]\r\n\t */\r\n\tpublic get bullets(): ListTemplate<Bullet> {\r\n\t\tif (!this._bullets) {\r\n\t\t\tthis._bullets = new ListTemplate<Bullet>(new Bullet());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._bullets));\r\n\t\t\tthis._disposers.push(this._bullets.template);\r\n\t\t\tthis._bullets.events.on(\"inserted\", (event) => {\r\n\t\t\t\tevent.newValue.events.on(\"propertychanged\", (event) => {\r\n\t\t\t\t\tif (event.property == \"locationX\" || event.property == \"locationY\") {\r\n\t\t\t\t\t\tthis.positionBullet(event.target);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, undefined, false)\r\n\t\t\t}, undefined, false)\r\n\t\t}\r\n\t\treturn this._bullets;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties from another [[FlowDiagramLink]].\r\n\t *\r\n\t * @param source  Source link\r\n\t */\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.bullets.copyFrom(source.bullets);\r\n\t\tlet middleLine = this.middleLine;\r\n\t\tif (middleLine) {\r\n\t\t\tif (middleLine instanceof Line && source.middleLine instanceof Line) {\r\n\t\t\t\tmiddleLine.copyFrom(source.middleLine);\r\n\t\t\t}\r\n\r\n\t\t\tif (middleLine instanceof Polyline && source.middleLine instanceof Polyline) {\r\n\t\t\t\tmiddleLine.copyFrom(source.middleLine);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.link.copyFrom(source.link);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Tooltip X (px)\r\n\t */\r\n\tpublic getTooltipX(): number {\r\n\t\tif (this.middleLine) {\r\n\t\t\treturn this.middleLine.positionToPoint(this.tooltipLocation).x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Tooltip Y (px)\r\n\t */\r\n\tpublic getTooltipY(): number {\r\n\t\tif (this.middleLine) {\r\n\t\t\treturn this.middleLine.positionToPoint(this.tooltipLocation).y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A gradiend instance that is used to provided colored gradient fills for\r\n\t * the Flow link.\r\n\t */\r\n\tpublic get gradient() {\r\n\t\tif (!this._gradient) {\r\n\t\t\tthis._gradient = new LinearGradient();\r\n\t\t}\r\n\t\treturn this._gradient;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagramLink\"] = FlowDiagramLink;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}