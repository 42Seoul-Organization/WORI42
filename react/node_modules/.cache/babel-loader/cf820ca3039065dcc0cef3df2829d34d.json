{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { TargetedEventDispatcher } from \"../utils/EventDispatcher\";\nimport { MultiDisposer, CounterDisposer } from \"../utils/Disposer\";\n/**\r\n * Represents an Event Dispatcher for [[InteractionObject]].\r\n *\r\n * Besides regular [[EventDispatcher]] functionality it adds new events with\r\n * direct application to DOM nodes. Primarily used to handle keyboard events,\r\n * but can turn into something else moving forward.\r\n */\n\nvar InteractionObjectEventDispatcher =\n/** @class */\nfunction (_super) {\n  __extends(InteractionObjectEventDispatcher, _super);\n\n  function InteractionObjectEventDispatcher() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * Holds a list of Disposers for DOM events added.\r\n     */\n\n\n    _this._domEvents = {};\n    return _this;\n  }\n  /**\r\n   * Adds a DOM event and returns Disposer.\r\n   *\r\n   * @return Disposer\r\n   */\n\n\n  InteractionObjectEventDispatcher.prototype._addDOMEvent = function (type, key, listener, context) {\n    var _this = this;\n\n    if (!this._domEvents[type]) {\n      var callback_1 = function callback_1(e) {\n        listener.call(context, key, e);\n      };\n\n      this.target.element.addEventListener(type, callback_1, false);\n      this._domEvents[type] = new CounterDisposer(function () {\n        delete _this._domEvents[type];\n\n        _this.target.element.removeEventListener(type, callback_1, false);\n      });\n    }\n\n    return this._domEvents[type].increment();\n  };\n\n  InteractionObjectEventDispatcher.prototype._dispatchKeyboardEvent = function (key, ev) {\n    // TODO use this.dispatchImmediately ?\n    if (this.target.events.isEnabled(key)) {\n      this.target.events.dispatchImmediately(key, {\n        type: key,\n        target: this.target,\n        event: ev\n      });\n    }\n  };\n\n  InteractionObjectEventDispatcher.prototype._on = function (once, type, callback, context, shouldClone, dispatch) {\n    var info = _super.prototype._on.call(this, once, type, callback, context, shouldClone, dispatch);\n\n    var disposers = [info.disposer];\n\n    switch (type) {\n      case \"hit\":\n      case \"doublehit\":\n      case \"rightclick\":\n      case \"down\":\n      case \"up\":\n        this.target.clickable = true;\n        break;\n\n      case \"drag\":\n      case \"dragstart\":\n      case \"dragstop\":\n        this.target.draggable = true;\n        break;\n\n      case \"track\":\n        this.target.trackable = true;\n        break;\n\n      case \"resize\":\n        this.target.resizable = true;\n        break;\n\n      case \"swipe\":\n      case \"swipeleft\":\n      case \"swiperight\":\n        this.target.swipeable = true;\n        break;\n\n      case \"wheel\":\n      case \"wheelup\":\n      case \"wheeldown\":\n      case \"wheelleft\":\n      case \"wheelright\":\n        this.target.wheelable = true;\n        break;\n\n      case \"over\":\n      case \"out\":\n        this.target.hoverable = true;\n        break;\n\n      case \"focus\":\n      case \"blur\":\n      case \"focusin\":\n      case \"focusout\":\n        this.target.focusable = true;\n        break;\n\n      case \"keydown\":\n        disposers.push(this._addDOMEvent(type, type, this._dispatchKeyboardEvent, this));\n        break;\n\n      case \"keyup\":\n        disposers.push(this._addDOMEvent(type, type, this._dispatchKeyboardEvent, this));\n        break;\n\n      case \"keypress\":\n        disposers.push(this._addDOMEvent(type, type, this._dispatchKeyboardEvent, this));\n        break;\n\n      case \"input\":\n        disposers.push(this._addDOMEvent(type, type, this._dispatchKeyboardEvent, this));\n        break;\n    }\n\n    info.disposer = new MultiDisposer(disposers);\n    return info;\n  };\n\n  return InteractionObjectEventDispatcher;\n}(TargetedEventDispatcher);\n\nexport { InteractionObjectEventDispatcher };","map":{"version":3,"sources":["../../../../../src/.internal/core/interaction/InteractionObjectEvents.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IBaseObjectEvents } from \"../Base\";\r\nimport { IPoint } from \"../defs/IPoint\";\r\nimport { IPointer } from \"../interaction/Pointer\";\r\nimport { InteractionObject } from \"../interaction/InteractionObject\";\r\nimport { EventListener, TargetedEventDispatcher, AMEvent } from \"../utils/EventDispatcher\";\r\nimport { MultiDisposer, IDisposer, CounterDisposer } from \"../utils/Disposer\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a type of event that has a single point of reference.\r\n */\r\nexport type PointerTypeEvent = {\r\n\r\n\t/**\r\n\t * Is event originated by touch pointer?\r\n\t */\r\n\ttouch: boolean;\r\n\r\n};\r\n\r\n/**\r\n * Defines a type of event that has a single point of reference.\r\n */\r\nexport type PointEvent = {\r\n\r\n\t/**\r\n\t * Event point in global (document) coordinates.\r\n\t */\r\n\tpoint: IPoint;\r\n\r\n};\r\n\r\n/**\r\n * Defines a type of event that has a related Pointer.\r\n */\r\nexport type PointerEvent = {\r\n\r\n\t/**\r\n\t * Coordinates of the primary cursor position.\r\n\t */\r\n\tpointer: IPointer;\r\n\r\n};\r\n\r\n/**\r\n * Defines a type of event that represents some kind of shift in coordinates,\r\n * like draging an element.\r\n */\r\nexport type ShiftEvent = {\r\n\r\n\t/**\r\n\t * Shift in coordinates after dragging.\r\n\t */\r\n\tshift: IPoint;\r\n\r\n};\r\n\r\n/**\r\n * Defines a type of event that represents change in angle, like rotation.\r\n */\r\nexport type AngleEvent = {\r\n\r\n\t/**\r\n\t * Angle to apply to the element.\r\n\t */\r\n\tangle: number;\r\n};\r\n\r\n\r\n/**\r\n * Defines a type of event that represents change in element's scale, like\r\n * resize.\r\n */\r\nexport type ScaleEvent = {\r\n\r\n\t/**\r\n\t * Scale to apply to the element.\r\n\t */\r\n\tscale: number;\r\n\r\n};\r\n\r\n/**\r\n * Defines an event that contains event center coordindates.\r\n */\r\nexport type CenterEvent = {\r\n\r\n\t/**\r\n\t * A center point for specific operation.\r\n\t */\r\n\tcenter?: IPoint;\r\n\r\n};\r\n\r\n/**\r\n * Defines an event that can be triggered either by touch device or mouse.\r\n */\r\nexport type MouseTouchEvent = {\r\n\r\n\t/**\r\n\t * An original mouse or touch event.\r\n\t */\r\n\tevent: MouseEvent | TouchEvent;\r\n\r\n};\r\n\r\n/**\r\n * Defines an event that was not generated by keyboard directly, but rather\r\n * was simulated to trigger require keyboard-related handlers.\r\n */\r\nexport type SimulatedKeyboardEvent = {\r\n\r\n\t/**\r\n\t * A keyboard event.\r\n\t */\r\n\tevent: KeyboardEvent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[InteractionObject]].\r\n */\r\nexport interface IInteractionObjectEvents extends IBaseObjectEvents {\r\n\r\n\t/**\r\n\t * Invoked when object is clicked or touched.\r\n\t */\r\n\thit: PointerTypeEvent & PointEvent & MouseTouchEvent;\r\n\r\n\t/**\r\n\t * Invoked when object is clicked or touched twice in rapid succession.\r\n\t *\r\n\t * Check [[IHitOptions]] for settings about double hit.\r\n\t */\r\n\tdoublehit: PointerTypeEvent & PointEvent & MouseTouchEvent;\r\n\r\n\t/**\r\n\t * Invoked when right mouse button is clicked on the object.\r\n\t */\r\n\trightclick: MouseTouchEvent;\r\n\r\n\t/**\r\n\t * Invoked when mouse or touch pointer is held down over object for some time.\r\n\t */\r\n\thold: PointerTypeEvent & PointerEvent & MouseTouchEvent;\r\n\r\n\t/**\r\n\t * Invoked when the mouse button is pressed or touch starts.\r\n\t */\r\n\tdown: PointerTypeEvent & PointerEvent & MouseTouchEvent;\r\n\r\n\t/**\r\n\t * Invoked when the mouse button is released or touch ends.\r\n\t */\r\n\tup: PointerTypeEvent & PointerEvent & MouseTouchEvent;\r\n\r\n\t/**\r\n\t * Invoked when `draggable` object is being dragged. (using mouse, touch or\r\n\t * keyboard)\r\n\t */\r\n\tdrag: PointerTypeEvent & ShiftEvent & PointEvent & {\r\n\r\n\t\t/**\r\n\t\t * Original coordinates of the pointer's position when the dragging started.\r\n\t\t */\r\n\t\tstartPoint: IPoint,\r\n\r\n\t\t/**\r\n\t\t * An original JavaScript event that triggered dragging.\r\n\t\t */\r\n\t\tevent?: MouseEvent | TouchEvent | KeyboardEvent\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when `draggable` object dragging starts. This event is not\r\n\t * invoked immediatelly after `down`, but only if there's a movement of the\r\n\t * pointer.\r\n\t */\r\n\tdragstart: PointerTypeEvent & {\r\n\r\n\t\t/**\r\n\t\t * An original JavaScript event that triggered dragging.\r\n\t\t */\r\n\t\tevent?: MouseEvent | TouchEvent | KeyboardEvent\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when `draggable` object is released. This event will not fire if\r\n\t * position of the object did not change.\r\n\t */\r\n\tdragstop: PointerTypeEvent & {\r\n\r\n\t\t/**\r\n\t\t * An original JavaScript event that triggered dragging.\r\n\t\t */\r\n\t\tevent?: MouseTouchEvent | KeyboardEvent\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when pointer (mouse cursor or touch point) moves over `trackable`\r\n\t * object.\r\n\t */\r\n\ttrack: PointerTypeEvent & PointEvent & PointerEvent & MouseTouchEvent;\r\n\r\n\t/**\r\n\t * Invoked when `resizable` object is being resized either by mouse or touch\r\n\t * pinch gesture.\r\n\t */\r\n\tresize: PointerTypeEvent & ScaleEvent & MouseTouchEvent & {\r\n\r\n\t\t/**\r\n\t\t * The starting coordinates of the first reference point.\r\n\t\t */\r\n\t\tstartPoint1: IPoint,\r\n\r\n\t\t/**\r\n\t\t * Current coordinates of the first reference point.\r\n\t\t */\r\n\t\tpoint1: IPoint,\r\n\r\n\t\t/**\r\n\t\t * The starting coordinates of the second reference point.\r\n\t\t */\r\n\t\tstartPoint2: IPoint,\r\n\r\n\t\t/**\r\n\t\t * Current coordinates of the second reference point.\r\n\t\t */\r\n\t\tpoint2: IPoint\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when user performs \"swiping\" gesture (quick horizontal movement)\r\n\t * on the object, either using mouse or touch.\r\n\t */\r\n\tswipe: PointerTypeEvent & MouseTouchEvent;\r\n\r\n\t/**\r\n\t * Invoked when user performs \"swiping\" gesture towards left.\r\n\t */\r\n\tswipeleft: PointerTypeEvent & MouseTouchEvent;\r\n\r\n\t/**\r\n\t * Invoked when user performs \"swiping\" gesture towards right.\r\n\t */\r\n\tswiperight: PointerTypeEvent & MouseTouchEvent;\r\n\r\n\t/**\r\n\t * Invoked when user turns mouse wheel while over the object.\r\n\t */\r\n\twheel: PointEvent & ShiftEvent & {\r\n\r\n\t\t/**\r\n\t\t * Original JavaScript event.\r\n\t\t */\r\n\t\tevent: WheelEvent\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when user turns mouse wheel upwards while over the object.\r\n\t */\r\n\twheelup: PointEvent & ShiftEvent & {\r\n\r\n\t\t/**\r\n\t\t * Original JavaScript event.\r\n\t\t */\r\n\t\tevent: WheelEvent\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when user turns mouse wheel downwards while over the object.\r\n\t */\r\n\twheeldown: PointEvent & ShiftEvent & {\r\n\r\n\t\t/**\r\n\t\t * Original JavaScript event.\r\n\t\t */\r\n\t\tevent: WheelEvent\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when user turns mouse wheel leftwards while over the object.\r\n\t */\r\n\twheelleft: PointEvent & ShiftEvent & {\r\n\r\n\t\t/**\r\n\t\t * Original JavaScript event.\r\n\t\t */\r\n\t\tevent: WheelEvent\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when user turns mouse wheel rightwards while over the object.\r\n\t */\r\n\twheelright: PointEvent & ShiftEvent & {\r\n\r\n\t\t/**\r\n\t\t * Original JavaScript event.\r\n\t\t */\r\n\t\tevent: WheelEvent\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when mouse cursor moves over `hoverable` object or it is touched.\r\n\t */\r\n\tover: PointerTypeEvent & MouseTouchEvent & PointerEvent;\r\n\r\n\t/**\r\n\t * Invoked when mouse cursor moves out of `hoverable` object or it is no\r\n\t * longer touched.\r\n\t */\r\n\tout: PointerTypeEvent & MouseTouchEvent & PointerEvent;\r\n\r\n\t/**\r\n\t * Invoked when `focusable` object gains focus, e.g. by using TAB button.\r\n\t */\r\n\tfocus: {\r\n\r\n\t\t/**\r\n\t\t * Original JavaScript `FocusEvent`.\r\n\t\t */\r\n\t\tevent: FocusEvent\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when `focusable` object loses focus, e.g. by clicking outside\r\n\t * it or pressing TAB button to focus on the next focusable object.\r\n\t */\r\n\tblur: {\r\n\r\n\t\t/**\r\n\t\t * Original JavaScript `FocusEvent`.\r\n\t\t */\r\n\t\tevent: FocusEvent\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when the key is pressed on the keyboard.\r\n\t */\r\n\tkeydown: {\r\n\r\n\t\t/**\r\n\t\t * Orginal JavaScript `KeyboardEvent`.\r\n\t\t */\r\n\t\tevent: KeyboardEvent\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when the key is released on the keyboard.\r\n\t */\r\n\tkeyup: {\r\n\r\n\t\t/**\r\n\t\t * Orginal JavaScript `KeyboardEvent`.\r\n\t\t */\r\n\t\tevent: KeyboardEvent\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when the key generates a \"press\", e.g. pressing and holding a\r\n\t * letter key will generate repeated \"keypress\" events.\r\n\t */\r\n\tkeypress: {\r\n\r\n\t\t/**\r\n\t\t * Orginal JavaScript `KeyboardEvent`.\r\n\t\t */\r\n\t\tevent: KeyboardEvent\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked whenever information changes in the textual input elements, like\r\n\t * `<input>`, `<textarea>`, etc.\r\n\t */\r\n\tinput: {\r\n\r\n\t\t/**\r\n\t\t * Orginal JavaScript `KeyboardEvent`.\r\n\t\t */\r\n\t\tevent: KeyboardEvent\r\n\r\n\t};\r\n}\r\n\r\n/**\r\n * Represents an Event Dispatcher for [[InteractionObject]].\r\n *\r\n * Besides regular [[EventDispatcher]] functionality it adds new events with\r\n * direct application to DOM nodes. Primarily used to handle keyboard events,\r\n * but can turn into something else moving forward.\r\n */\r\nexport class InteractionObjectEventDispatcher<T extends AMEvent<InteractionObject, IInteractionObjectEvents>> extends TargetedEventDispatcher<InteractionObject, T> {\r\n\r\n\t/**\r\n\t * Holds a list of Disposers for DOM events added.\r\n\t */\r\n\tprivate _domEvents: { [key: string]: CounterDisposer } = {};\r\n\r\n\t/**\r\n\t * Adds a DOM event and returns Disposer.\r\n\t *\r\n\t * @return Disposer\r\n\t */\r\n\tprivate _addDOMEvent<E extends Event, Key extends keyof IInteractionObjectEvents, C>(\r\n\t\ttype: string,\r\n\t\tkey: Key,\r\n\t\tlistener: (this: C, key: Key, evt: E) => void,\r\n\t\tcontext: C\r\n\t): IDisposer {\r\n\t\tif (!this._domEvents[type]) {\r\n\t\t\tconst callback = function (e: Event): void {\r\n\t\t\t\tlistener.call(context, key, e as any);\r\n\t\t\t};\r\n\r\n\t\t\tthis.target.element.addEventListener(type, callback, false);\r\n\r\n\t\t\tthis._domEvents[type] = new CounterDisposer(() => {\r\n\t\t\t\tdelete this._domEvents[type];\r\n\r\n\t\t\t\tthis.target.element.removeEventListener(type, callback, false);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn this._domEvents[type].increment();\r\n\t}\r\n\r\n\tprivate _dispatchKeyboardEvent<Key extends \"keydown\" | \"keyup\" | \"keypress\" | \"input\">(key: Key, ev: KeyboardEvent): void {\r\n\t\t// TODO use this.dispatchImmediately ?\r\n\t\tif (this.target.events.isEnabled(key)) {\r\n\t\t\tthis.target.events.dispatchImmediately(key, {\r\n\t\t\t\ttype: key as any,\r\n\t\t\t\ttarget: this.target,\r\n\t\t\t\tevent: ev\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _on<A, B, Key extends keyof T>(once: boolean, type: Key | null, callback: A, context: B, shouldClone: boolean, dispatch: (type: Key, event: T[Key]) => void): EventListener<T> {\r\n\t\tconst info = super._on(once, type, callback, context, shouldClone, dispatch);\r\n\r\n\t\tconst disposers = [info.disposer];\r\n\r\n\t\tswitch (type) {\r\n\t\t\tcase \"hit\":\r\n\t\t\tcase \"doublehit\":\r\n\t\t\tcase \"rightclick\":\r\n\t\t\tcase \"down\":\r\n\t\t\tcase \"up\":\r\n\t\t\t\tthis.target.clickable = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"drag\":\r\n\t\t\tcase \"dragstart\":\r\n\t\t\tcase \"dragstop\":\r\n\t\t\t\tthis.target.draggable = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"track\":\r\n\t\t\t\tthis.target.trackable = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"resize\":\r\n\t\t\t\tthis.target.resizable = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"swipe\":\r\n\t\t\tcase \"swipeleft\":\r\n\t\t\tcase \"swiperight\":\r\n\t\t\t\tthis.target.swipeable = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"wheel\":\r\n\t\t\tcase \"wheelup\":\r\n\t\t\tcase \"wheeldown\":\r\n\t\t\tcase \"wheelleft\":\r\n\t\t\tcase \"wheelright\":\r\n\t\t\t\tthis.target.wheelable = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"over\":\r\n\t\t\tcase \"out\":\r\n\t\t\t\tthis.target.hoverable = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"focus\":\r\n\t\t\tcase \"blur\":\r\n\t\t\tcase \"focusin\":\r\n\t\t\tcase \"focusout\":\r\n\t\t\t\tthis.target.focusable = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"keydown\":\r\n\t\t\t\tdisposers.push(this._addDOMEvent<KeyboardEvent, \"keydown\", this>(<any>type, <any>type, this._dispatchKeyboardEvent, this));\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"keyup\":\r\n\t\t\t\tdisposers.push(this._addDOMEvent<KeyboardEvent, \"keyup\", this>(<any>type, <any>type, this._dispatchKeyboardEvent, this));\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"keypress\":\r\n\t\t\t\tdisposers.push(this._addDOMEvent<KeyboardEvent, \"keypress\", this>(<any>type, <any>type, this._dispatchKeyboardEvent, this));\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"input\":\r\n\t\t\t\tdisposers.push(this._addDOMEvent<KeyboardEvent, \"input\", this>(<any>type, <any>type, this._dispatchKeyboardEvent, this));\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tinfo.disposer = new MultiDisposer(disposers);\r\n\r\n\t\treturn info;\r\n\t}\r\n\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}