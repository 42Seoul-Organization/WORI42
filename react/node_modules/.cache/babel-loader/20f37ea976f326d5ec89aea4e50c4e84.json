{"ast":null,"code":"/**\r\n * Pattern module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { BaseObject } from \"../../Base\";\nimport { getGhostPaper } from \"../Paper\";\nimport { List, ListDisposer } from \"../../utils/List\";\nimport { Animation, AnimationDisposer } from \"../../utils/Animation\";\nimport { registry } from \"../../Registry\";\nimport { InterfaceColorSet } from \"../../utils/InterfaceColorSet\";\nimport * as $iter from \"../../utils/Iterator\";\nimport * as $object from \"../../utils/Object\";\nimport * as $type from \"../../utils/Type\";\n;\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Base class to define patterns.\r\n */\n\nvar Pattern =\n/** @class */\nfunction (_super) {\n  __extends(Pattern, _super); //public propertyValues = new Dictionary<PatternProperties, any>();\n\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Pattern() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * List of elements the pattern consists of.\r\n     */\n\n\n    _this._elements = new List();\n    /**\r\n     * A storage for Filter property/value pairs.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @see {@link PatternProperties}\r\n     */\n\n    _this.properties = {};\n    _this.className = \"Pattern\"; // Set defaults\n\n    _this.width = 10;\n    _this.height = 10;\n    _this.x = 0;\n    _this.y = 0;\n    _this.patternUnits = \"userSpaceOnUse\";\n    var interfaceColors = new InterfaceColorSet();\n    _this.backgroundFill = interfaceColors.getFor(\"background\");\n    _this.backgroundOpacity = 0;\n    _this.fillOpacity = 1;\n    _this.fill = interfaceColors.getFor(\"alternativeBackground\");\n    _this.stroke = interfaceColors.getFor(\"alternativeBackground\");\n    _this.strokeOpacity = 1;\n    _this.strokeWidth = 1;\n    _this.shapeRendering = \"crispEdges\";\n    _this.rotation = 0; // Create main group to store pattern elements inelements\n\n    _this.element = _this.paper.addGroup(\"pattern\");\n    _this.id = \"pattern-\" + registry.getUniqueId();\n\n    _this.element.attr({\n      \"id\": _this.id\n    });\n\n    _this._disposers.push(_this.element); // Make elements disposable\n\n\n    _this._disposers.push(new ListDisposer(_this._elements)); // Request again to trigger getter/setter code\n\n\n    _this.patternUnits = _this.patternUnits;\n    _this.width = _this.width;\n    _this.height = _this.height; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the pattern.\r\n   */\n\n\n  Pattern.prototype.draw = function () {\n    var _this = this;\n\n    var patternElement = this.element;\n\n    if (patternElement) {\n      patternElement.removeChildNodes();\n      var background = this.paper.add(\"rect\");\n      background.attr({\n        \"width\": this.width,\n        \"height\": this.height,\n        \"shape-rendering\": \"crispEdges\",\n        \"fill\": this.backgroundFill.hex,\n        \"fill-opacity\": this.backgroundOpacity,\n        \"stroke\": this.backgroundFill.hex,\n        \"stroke-opacity\": 0\n      });\n      patternElement.add(background);\n      patternElement.attr({\n        \"x\": this.x,\n        \"y\": this.y,\n        \"width\": this.width,\n        \"height\": this.height,\n        \"stroke\": this.stroke.hex,\n        \"fill\": this.fill.hex,\n        \"fill-opacity\": this.fillOpacity,\n        \"stroke-opacity\": this.strokeOpacity,\n        \"stroke-width\": this.strokeWidth,\n        \"shape-rendering\": this.shapeRendering,\n        \"patternUnits\": this.patternUnits,\n        \"stroke-dasharray\": this.strokeDasharray\n      });\n      $iter.each(this._elements.iterator(), function (element) {\n        element.rotation = _this.rotation;\n        element.rotationX = _this.properties[\"rotationX\"];\n        element.rotationY = _this.properties[\"rotationY\"];\n\n        _this.element.add(element);\n      });\n    }\n  };\n  /**\r\n   * Animate pattern properties.\r\n   *\r\n   * @see {@link Animation}\r\n   * @param animationOptions  Animation options\r\n   * @param duration          Duration (ms)\r\n   * @param easing            Easing function\r\n   * @return Animation instance\r\n   */\n\n\n  Pattern.prototype.animate = function (animationOptions, duration, easing) {\n    return new Animation(this, animationOptions, duration, easing).start();\n  };\n  /**\r\n   * Adds an element to the pattern.\r\n   *\r\n   * @param element  Element\r\n   */\n\n\n  Pattern.prototype.addElement = function (element) {\n    this._elements.push(element);\n\n    this._disposers.push(element);\n  };\n  /**\r\n   * Remove an element from the pattern.\r\n   *\r\n   * @param element  Element\r\n   */\n\n\n  Pattern.prototype.removeElement = function (element) {\n    this._elements.removeValue(element);\n\n    this.removeDispose(element);\n  };\n\n  Object.defineProperty(Pattern.prototype, \"elements\", {\n    /**\r\n     * Returns the list of SVG elements comprising the pattern.\r\n     *\r\n     * @return Pattern elements\r\n     */\n    get: function () {\n      return this._elements;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"fillOpacity\", {\n    /**\r\n     * @return Opacity (0-1)\r\n     */\n    get: function () {\n      return this.properties[\"fillOpacity\"];\n    },\n\n    /**\r\n     * Pattern fill opacity. (0-1)\r\n     *\r\n     * @param value  Opacity (0-1)\r\n     */\n    set: function (value) {\n      this.properties[\"fillOpacity\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"fill\", {\n    /**\r\n     * @return Fill color\r\n     */\n    get: function () {\n      return this.properties[\"fill\"];\n    },\n\n    /**\r\n     * Fill color of the pattern.\r\n     *\r\n     * @param value  Fill color\r\n     */\n    set: function (value) {\n      this.properties[\"fill\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"backgroundFill\", {\n    /**\r\n     * @return Background color\r\n     */\n    get: function () {\n      return this.properties[\"backgroundFill\"];\n    },\n\n    /**\r\n     * Pattern background fill color.\r\n     *\r\n     * @param value  Background color\r\n     */\n    set: function (value) {\n      this.properties[\"backgroundFill\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"backgroundOpacity\", {\n    /**\r\n     * @return Background opacity (0-1)\r\n     */\n    get: function () {\n      return this.properties[\"backgroundOpacity\"];\n    },\n\n    /**\r\n     * Pattern backgorund opacity. (0-1)\r\n     *\r\n     * @param value  Background opacity (0-1)\r\n     */\n    set: function (value) {\n      this.properties[\"backgroundOpacity\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"stroke\", {\n    /**\r\n     * @return Color\r\n     */\n    get: function () {\n      return this.properties[\"stroke\"];\n    },\n\n    /**\r\n     * Pattern stroke (border) color.\r\n     *\r\n     * @param value  Color\r\n     */\n    set: function (value) {\n      this.properties[\"stroke\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"strokeOpacity\", {\n    /**\r\n     * @return Opacity (0-1)\r\n     */\n    get: function () {\n      return this.properties[\"strokeOpacity\"];\n    },\n\n    /**\r\n     * Pattern stroke opacity. (0-1)\r\n     *\r\n     * @param value  Opacity (0-1)\r\n     */\n    set: function (value) {\n      this.properties[\"strokeOpacity\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"strokeWidth\", {\n    /**\r\n     * @return Stroke thickness (px)\r\n     */\n    get: function () {\n      return this.properties[\"strokeWidth\"];\n    },\n\n    /**\r\n     * Pattern stroke thickness in pixels.\r\n     *\r\n     * @param value  Stroke thickness (px)\r\n     */\n    set: function (value) {\n      this.properties[\"strokeWidth\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"shapeRendering\", {\n    get: function () {\n      return this.properties[\"shapeRendering\"];\n    },\n\n    /**\r\n     * Shape rendering\r\n     * @param value [description]\r\n     */\n    set: function (value) {\n      this.properties[\"shapeRendering\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"rotation\", {\n    /**\r\n     * @return Rotation\r\n     */\n    get: function () {\n      return this.properties[\"rotation\"];\n    },\n\n    /**\r\n     * Pattern rotation in degrees.\r\n     *\r\n     * @param value  Rotation\r\n     */\n    set: function (value) {\n      this.properties[\"rotation\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"patternUnits\", {\n    /**\r\n     * @return Units\r\n     */\n    get: function () {\n      return this.properties[\"patternUnits\"];\n    },\n\n    /**\r\n     * Pattern measuring units.\r\n     *\r\n     * Available options: \"userSpaceOnUse\" | \"objectBoundingBox\".\r\n     *\r\n     * @param value  Units\r\n     */\n    set: function (value) {\n      this.properties[\"patternUnits\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"width\", {\n    /**\r\n     * @return Width (px)\r\n     */\n    get: function () {\n      return this.properties[\"width\"];\n    },\n\n    /**\r\n     * Pattern width in pixels.\r\n     *\r\n     * @param value  Width (px)\r\n     */\n    set: function (value) {\n      this.properties[\"width\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"height\", {\n    /**\r\n     * @return Height (px)\r\n     */\n    get: function () {\n      return this.properties[\"height\"];\n    },\n\n    /**\r\n     * Pattern height in pixels.\r\n     *\r\n     * @param value Height (px)\r\n     */\n    set: function (value) {\n      this.properties[\"height\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"x\", {\n    /**\r\n     * @return X (px)\r\n     */\n    get: function () {\n      return this.properties[\"x\"];\n    },\n\n    /**\r\n     * X position. (pixels)\r\n     *\r\n     * @param value X (px)\r\n     */\n    set: function (value) {\n      this.properties[\"x\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"y\", {\n    /**\r\n     * @return Y (px)\r\n     */\n    get: function () {\n      return this.properties[\"y\"];\n    },\n\n    /**\r\n     * Y position (px).\r\n     *\r\n     * @param value Y (px)\r\n     */\n    set: function (value) {\n      this.properties[\"y\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"paper\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Paper\r\n     */\n    get: function () {\n      if (this._paper) {\n        return this._paper;\n      }\n\n      return getGhostPaper();\n    },\n\n    /**\r\n     * [[Paper]] instance to draw pattern in.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param paper  Paper\r\n     */\n    set: function (paper) {\n      if (this._paper != paper) {\n        this._paper = paper;\n        this.draw();\n        paper.appendDef(this.element);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies properties from another Pattern instance.\r\n   *\r\n   * @param source  Source pattern\r\n   */\n\n  Pattern.prototype.copyFrom = function (source) {\n    var _this = this;\n\n    _super.prototype.copyFrom.call(this, source);\n\n    $object.each(source.properties, function (key, value) {\n      _this[key] = value;\n    });\n  };\n\n  Object.defineProperty(Pattern.prototype, \"animations\", {\n    /**\r\n     * A list of animations currently running on the patter.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Animation list\r\n     */\n    get: function () {\n      if (!this._animations) {\n        this._animations = [];\n\n        this._disposers.push(new AnimationDisposer(this._animations));\n      }\n\n      return this._animations;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"strokeDasharray\", {\n    /**\r\n     * @return `stroke-dasharray`\r\n     */\n    get: function () {\n      return this.properties[\"strokeDashArray\"];\n    },\n\n    /**\r\n     * A `stroke-dasharray` for the stroke (outline).\r\n     *\r\n     * \"Dasharray\" allows setting rules to make lines dashed, dotted, etc.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray} for more info on `stroke-dasharray`\r\n     * @param value  `stroke-dasharray`\r\n     */\n    set: function (value) {\n      this.properties[\"strokeDashArray\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n  Pattern.prototype.processConfig = function (config) {\n    if (config) {\n      // Set up series\n      if ($type.hasValue(config.elements) && $type.isArray(config.elements)) {\n        for (var i = 0, len = config.elements.length; i < len; i++) {\n          var element = config.elements[i];\n\n          if ($type.hasValue(element[\"type\"])) {\n            var sprite = this.createEntryInstance(element);\n\n            if (sprite instanceof BaseObject) {\n              sprite.config = element;\n            }\n\n            this.addElement($type.hasValue(element[\"typeProperty\"]) ? sprite[element[\"typeProperty\"]] : sprite.element);\n          }\n        }\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n\n  return Pattern;\n}(BaseObject);\n\nexport { Pattern };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Pattern\"] = Pattern;","map":{"version":3,"sources":["../../../../../../src/.internal/core/rendering/fills/Pattern.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Pattern module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../../Base\";\r\nimport { Group } from \"../Group\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { Paper, getGhostPaper } from \"../Paper\";\r\nimport { ShapeRendering } from \"../../defs/ShapeRendering\";\r\nimport { List, ListDisposer } from \"../../utils/List\";\r\nimport { Animation, IAnimatable, IAnimationOptions, AnimationDisposer } from \"../../utils/Animation\";\r\nimport { registry } from \"../../Registry\";\r\nimport { Color } from \"../../utils/Color\";\r\nimport { InterfaceColorSet } from \"../../utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../utils/Iterator\";\r\nimport * as $object from \"../../utils/Object\";\r\nimport * as $type from \"../../utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines available units to measure patterns.\r\n */\r\nexport type PatternUnits = \"userSpaceOnUse\" | \"objectBoundingBox\";\r\n\r\n/**\r\n * Defines properties for [[Pattern]].\r\n */\r\nexport interface PatternProperties {\r\n\tx: number;\r\n\ty: number;\r\n\twidth: number;\r\n\theight: number;\r\n\tbackgroundOpacity: number;\r\n\tbackgroundFill: Color;\r\n\tfillOpacity: number;\r\n\tfill: Color;\r\n\tstroke: Color;\r\n\tstrokeOpacity: number;\r\n\tstrokeWidth: number;\r\n\tshapeRendering: ShapeRendering;\r\n\trotation: number;\r\n\trotationX: number;\r\n\trotationY: number;\r\n\tpatternUnits: PatternUnits;\r\n\tstrokeDashArray:string;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define patterns.\r\n */\r\nexport class Pattern extends BaseObject implements IAnimatable {\r\n\r\n\t/**\r\n\t * List of available animations currently running on a pattern.\r\n\t */\r\n\tprotected _animations: $type.Optional<Array<Animation>>;\r\n\r\n\t/**\r\n\t * An SVG `<group>` element to put sub-elements into.\r\n\t */\r\n\tpublic element: Group;\r\n\r\n\t/**\r\n\t * Reference to [[Paper]] instance.\r\n\t */\r\n\tprotected _paper: $type.Optional<Paper>;\r\n\r\n\t/**\r\n\t * List of elements the pattern consists of.\r\n\t */\r\n\tprotected _elements: List<AMElement> = new List<AMElement>();\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: PatternProperties;\r\n\r\n\t/**\r\n\t * A storage for Filter property/value pairs.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @see {@link PatternProperties}\r\n\t */\r\n\tpublic properties: this[\"_properties\"] = <any>{};\r\n\t//public propertyValues = new Dictionary<PatternProperties, any>();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Pattern\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.width = 10;\r\n\t\tthis.height = 10;\r\n\t\tthis.x = 0;\r\n\t\tthis.y = 0;\r\n\t\tthis.patternUnits = \"userSpaceOnUse\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.backgroundFill = interfaceColors.getFor(\"background\");\r\n\t\tthis.backgroundOpacity = 0;\r\n\r\n\t\tthis.fillOpacity = 1;\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.stroke = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.strokeWidth = 1;\r\n\t\tthis.shapeRendering = \"crispEdges\";\r\n\t\tthis.rotation = 0;\r\n\r\n\t\t// Create main group to store pattern elements inelements\r\n\t\tthis.element = this.paper.addGroup(\"pattern\");\r\n\t\tthis.id = \"pattern-\" + registry.getUniqueId();\r\n\t\tthis.element.attr({ \"id\": this.id });\r\n\t\tthis._disposers.push(this.element);\r\n\r\n\t\t// Make elements disposable\r\n\t\tthis._disposers.push(new ListDisposer(this._elements));\r\n\r\n\t\t// Request again to trigger getter/setter code\r\n\t\tthis.patternUnits = this.patternUnits;\r\n\t\tthis.width = this.width;\r\n\t\tthis.height = this.height;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the pattern.\r\n\t */\r\n\tprotected draw(): void {\r\n\r\n\t\tlet patternElement: Group = this.element;\r\n\t\tif (patternElement) {\r\n\r\n\t\t\tpatternElement.removeChildNodes();\r\n\r\n\t\t\tlet background = this.paper.add(\"rect\");\r\n\t\t\tbackground.attr({ \"width\": this.width, \"height\": this.height, \"shape-rendering\": \"crispEdges\", \"fill\": this.backgroundFill.hex, \"fill-opacity\": this.backgroundOpacity, \"stroke\": this.backgroundFill.hex, \"stroke-opacity\": 0 });\r\n\t\t\tpatternElement.add(background);\r\n\r\n\t\t\tpatternElement.attr({ \"x\": this.x, \"y\": this.y, \"width\": this.width, \"height\": this.height, \"stroke\": this.stroke.hex, \"fill\": this.fill.hex, \"fill-opacity\": this.fillOpacity, \"stroke-opacity\": this.strokeOpacity, \"stroke-width\": this.strokeWidth, \"shape-rendering\": this.shapeRendering, \"patternUnits\": this.patternUnits, \"stroke-dasharray\":this.strokeDasharray });\r\n\r\n\t\t\t$iter.each(this._elements.iterator(), (element) => {\r\n\t\t\t\telement.rotation = this.rotation;\r\n\t\t\t\telement.rotationX = this.properties[\"rotationX\"];\r\n\t\t\t\telement.rotationY = this.properties[\"rotationY\"];\r\n\t\t\t\tthis.element.add(element);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Animate pattern properties.\r\n\t *\r\n\t * @see {@link Animation}\r\n\t * @param animationOptions  Animation options\r\n\t * @param duration          Duration (ms)\r\n\t * @param easing            Easing function\r\n\t * @return Animation instance\r\n\t */\r\n\tpublic animate(animationOptions: IAnimationOptions[] | IAnimationOptions, duration: number, easing?: (value: number) => number): Animation {\r\n\t\treturn new Animation(this, animationOptions, duration, easing).start();\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an element to the pattern.\r\n\t *\r\n\t * @param element  Element\r\n\t */\r\n\tpublic addElement(element: AMElement): void {\r\n\t\tthis._elements.push(element);\r\n\t\tthis._disposers.push(element);\r\n\t}\r\n\r\n\t/**\r\n\t * Remove an element from the pattern.\r\n\t *\r\n\t * @param element  Element\r\n\t */\r\n\tpublic removeElement(element: AMElement): void {\r\n\t\tthis._elements.removeValue(element);\r\n\t\tthis.removeDispose(element);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the list of SVG elements comprising the pattern.\r\n\t *\r\n\t * @return Pattern elements\r\n\t */\r\n\tpublic get elements(): List<AMElement> {\r\n\t\treturn this._elements;\r\n\t}\r\n\r\n\t/**\r\n\t * Pattern fill opacity. (0-1)\r\n\t *\r\n\t * @param value  Opacity (0-1)\r\n\t */\r\n\tpublic set fillOpacity(value: number) {\r\n\t\tthis.properties[\"fillOpacity\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Opacity (0-1)\r\n\t */\r\n\tpublic get fillOpacity(): number {\r\n\t\treturn this.properties[\"fillOpacity\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Fill color of the pattern.\r\n\t *\r\n\t * @param value  Fill color\r\n\t */\r\n\tpublic set fill(value: Color) {\r\n\t\tthis.properties[\"fill\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Fill color\r\n\t */\r\n\tpublic get fill(): Color {\r\n\t\treturn this.properties[\"fill\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Pattern background fill color.\r\n\t *\r\n\t * @param value  Background color\r\n\t */\r\n\tpublic set backgroundFill(value: Color) {\r\n\t\tthis.properties[\"backgroundFill\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Background color\r\n\t */\r\n\tpublic get backgroundFill(): Color {\r\n\t\treturn this.properties[\"backgroundFill\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Pattern backgorund opacity. (0-1)\r\n\t *\r\n\t * @param value  Background opacity (0-1)\r\n\t */\r\n\tpublic set backgroundOpacity(value: number) {\r\n\t\tthis.properties[\"backgroundOpacity\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Background opacity (0-1)\r\n\t */\r\n\tpublic get backgroundOpacity(): number {\r\n\t\treturn this.properties[\"backgroundOpacity\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Pattern stroke (border) color.\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set stroke(value: Color) {\r\n\t\tthis.properties[\"stroke\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get stroke(): Color {\r\n\t\treturn this.properties[\"stroke\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Pattern stroke opacity. (0-1)\r\n\t *\r\n\t * @param value  Opacity (0-1)\r\n\t */\r\n\tpublic set strokeOpacity(value: number) {\r\n\t\tthis.properties[\"strokeOpacity\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Opacity (0-1)\r\n\t */\r\n\tpublic get strokeOpacity(): number {\r\n\t\treturn this.properties[\"strokeOpacity\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Pattern stroke thickness in pixels.\r\n\t *\r\n\t * @param value  Stroke thickness (px)\r\n\t */\r\n\tpublic set strokeWidth(value: number) {\r\n\t\tthis.properties[\"strokeWidth\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Stroke thickness (px)\r\n\t */\r\n\tpublic get strokeWidth(): number {\r\n\t\treturn this.properties[\"strokeWidth\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Shape rendering\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set shapeRendering(value: ShapeRendering) {\r\n\t\tthis.properties[\"shapeRendering\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\tpublic get shapeRendering(): ShapeRendering {\r\n\t\treturn this.properties[\"shapeRendering\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Pattern rotation in degrees.\r\n\t *\r\n\t * @param value  Rotation\r\n\t */\r\n\tpublic set rotation(value: number) {\r\n\t\tthis.properties[\"rotation\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Rotation\r\n\t */\r\n\tpublic get rotation(): number {\r\n\t\treturn this.properties[\"rotation\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Pattern measuring units.\r\n\t *\r\n\t * Available options: \"userSpaceOnUse\" | \"objectBoundingBox\".\r\n\t *\r\n\t * @param value  Units\r\n\t */\r\n\tpublic set patternUnits(value: \"userSpaceOnUse\" | \"objectBoundingBox\") {\r\n\t\tthis.properties[\"patternUnits\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Units\r\n\t */\r\n\tpublic get patternUnits(): \"userSpaceOnUse\" | \"objectBoundingBox\" {\r\n\t\treturn this.properties[\"patternUnits\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Pattern width in pixels.\r\n\t *\r\n\t * @param value  Width (px)\r\n\t */\r\n\tpublic set width(value: number) {\r\n\t\tthis.properties[\"width\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get width(): number {\r\n\t\treturn this.properties[\"width\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Pattern height in pixels.\r\n\t *\r\n\t * @param value Height (px)\r\n\t */\r\n\tpublic set height(value: number) {\r\n\t\tthis.properties[\"height\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Height (px)\r\n\t */\r\n\tpublic get height(): number {\r\n\t\treturn this.properties[\"height\"];\r\n\t}\r\n\r\n\t/**\r\n\t * X position. (pixels)\r\n\t *\r\n\t * @param value X (px)\r\n\t */\r\n\tpublic set x(value: number) {\r\n\t\tthis.properties[\"x\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return X (px)\r\n\t */\r\n\tpublic get x(): number {\r\n\t\treturn this.properties[\"x\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Y position (px).\r\n\t *\r\n\t * @param value Y (px)\r\n\t */\r\n\tpublic set y(value: number) {\r\n\t\tthis.properties[\"y\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y (px)\r\n\t */\r\n\tpublic get y(): number {\r\n\t\treturn this.properties[\"y\"];\r\n\t}\r\n\r\n\t/**\r\n\t * [[Paper]] instance to draw pattern in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param paper  Paper\r\n\t */\r\n\tpublic set paper(paper: Paper) {\r\n\t\tif (this._paper != paper) {\r\n\t\t\tthis._paper = paper;\r\n\t\t\tthis.draw();\r\n\t\t\tpaper.appendDef(this.element);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Paper\r\n\t */\r\n\tpublic get paper(): Paper {\r\n\t\tif (this._paper) {\r\n\t\t\treturn this._paper;\r\n\t\t}\r\n\t\treturn getGhostPaper();\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties from another Pattern instance.\r\n\t *\r\n\t * @param source  Source pattern\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\t$object.each(source.properties, (key, value) => {\r\n\t\t\t(<any>this)[key] = value;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * A list of animations currently running on the patter.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Animation list\r\n\t */\r\n\tpublic get animations(): Array<Animation> {\r\n\t\tif (!this._animations) {\r\n\t\t\tthis._animations = [];\r\n\t\t\tthis._disposers.push(new AnimationDisposer(this._animations));\r\n\t\t}\r\n\t\treturn this._animations;\r\n\t}\r\n\r\n\t/**\r\n\t * A `stroke-dasharray` for the stroke (outline).\r\n\t *\r\n\t * \"Dasharray\" allows setting rules to make lines dashed, dotted, etc.\r\n\t *\r\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray} for more info on `stroke-dasharray`\r\n\t * @param value  `stroke-dasharray`\r\n\t */\r\n\tpublic set strokeDasharray(value: string) {\r\n\t\tthis.properties[\"strokeDashArray\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return `stroke-dasharray`\r\n\t */\r\n\tpublic get strokeDasharray(): string {\r\n\t\treturn this.properties[\"strokeDashArray\"];\r\n\t}\t\t\r\n\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.elements) && $type.isArray(config.elements)) {\r\n\t\t\t\tfor (let i = 0, len = config.elements.length; i < len; i++) {\r\n\t\t\t\t\tlet element = config.elements[i];\r\n\t\t\t\t\tif ($type.hasValue(element[\"type\"])) {\r\n\t\t\t\t\t\tlet sprite = this.createEntryInstance(element);\r\n\t\t\t\t\t\tif (sprite instanceof BaseObject) {\r\n\t\t\t\t\t\t\tsprite.config = element;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.addElement(\r\n\t\t\t\t\t\t\t$type.hasValue(element[\"typeProperty\"])\r\n\t\t\t\t\t\t\t? sprite[element[\"typeProperty\"]]\r\n\t\t\t\t\t\t\t: sprite.element\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Pattern\"] = Pattern;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}