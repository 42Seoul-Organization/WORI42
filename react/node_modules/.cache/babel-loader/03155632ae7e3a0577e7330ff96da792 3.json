{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { CubeGeometry } from '@luma.gl/core';\nimport ColumnLayer from './column-layer';\nvar defaultProps = {\n  cellSize: {\n    type: 'number',\n    min: 0,\n    value: 1000\n  },\n  offset: {\n    type: 'array',\n    min: 0,\n    value: [1, 1]\n  }\n};\n\nvar GridCellLayer = function (_ColumnLayer) {\n  _inherits(GridCellLayer, _ColumnLayer);\n\n  function GridCellLayer() {\n    _classCallCheck(this, GridCellLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GridCellLayer).apply(this, arguments));\n  }\n\n  _createClass(GridCellLayer, [{\n    key: \"getGeometry\",\n    value: function getGeometry(diskResolution) {\n      return new CubeGeometry();\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref) {\n      var uniforms = _ref.uniforms;\n      var _this$props = this.props,\n          elevationScale = _this$props.elevationScale,\n          extruded = _this$props.extruded,\n          offset = _this$props.offset,\n          coverage = _this$props.coverage,\n          cellSize = _this$props.cellSize,\n          angle = _this$props.angle;\n      this.state.model.setUniforms(Object.assign({}, uniforms, {\n        radius: cellSize / 2,\n        angle: angle,\n        offset: offset,\n        extruded: extruded,\n        coverage: coverage,\n        elevationScale: elevationScale,\n        edgeDistance: 1,\n        isWireframe: false\n      })).draw();\n    }\n  }]);\n\n  return GridCellLayer;\n}(ColumnLayer);\n\nexport { GridCellLayer as default };\nGridCellLayer.layerName = 'GridCellLayer';\nGridCellLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/column-layer/grid-cell-layer.js"],"names":["defaultProps","cellSize","type","min","value","offset","GridCellLayer","ColumnLayer","diskResolution","uniforms","elevationScale","extruded","coverage","angle","radius","edgeDistance","isWireframe"],"mappings":";;;;;AAoBA,SAAA,YAAA,QAAA,eAAA;AACA,OAAA,WAAA,MAAA,gBAAA;AAEA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE;AAACC,IAAAA,IAAI,EAAL,QAAA;AAAiBC,IAAAA,GAAG,EAApB,CAAA;AAAyBC,IAAAA,KAAK,EAAE;AAAhC,GADS;AAEnBC,EAAAA,MAAM,EAAE;AAACH,IAAAA,IAAI,EAAL,OAAA;AAAgBC,IAAAA,GAAG,EAAnB,CAAA;AAAwBC,IAAAA,KAAK,EAAE,CAAA,CAAA,EAAA,CAAA;AAA/B;AAFW,CAArB;;IAKqBE,a;;;;;;;;;;;gCACPE,c,EAAgB;AAC1B,aAAO,IAAP,YAAO,EAAP;AACD;;;+BAEgB;AAAA,UAAXC,QAAW,GAAA,IAAA,CAAXA,QAAW;AAAA,UAAA,WAAA,GACuD,KADvD,KAAA;AAAA,UACRC,cADQ,GAAA,WAAA,CAAA,cAAA;AAAA,UACQC,QADR,GAAA,WAAA,CAAA,QAAA;AAAA,UACkBN,MADlB,GAAA,WAAA,CAAA,MAAA;AAAA,UAC0BO,QAD1B,GAAA,WAAA,CAAA,QAAA;AAAA,UACoCX,QADpC,GAAA,WAAA,CAAA,QAAA;AAAA,UAC8CY,KAD9C,GAAA,WAAA,CAAA,KAAA;AAEf,WAAA,KAAA,CAAA,KAAA,CAAA,WAAA,CAEI,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,QAAA,EAA4B;AAC1BC,QAAAA,MAAM,EAAEb,QAAQ,GADU,CAAA;AAE1BY,QAAAA,KAAK,EAFqB,KAAA;AAG1BR,QAAAA,MAAM,EAHoB,MAAA;AAI1BM,QAAAA,QAAQ,EAJkB,QAAA;AAK1BC,QAAAA,QAAQ,EALkB,QAAA;AAM1BF,QAAAA,cAAc,EANY,cAAA;AAO1BK,QAAAA,YAAY,EAPc,CAAA;AAQ1BC,QAAAA,WAAW,EAAE;AARa,OAA5B,CAFJ,EAAA,IAAA;AAcD;;;;EArBwCT,W;;SAAtBD,a;AAwBrBA,aAAa,CAAbA,SAAAA,GAAAA,eAAAA;AACAA,aAAa,CAAbA,YAAAA,GAAAA,YAAAA","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CubeGeometry} from '@luma.gl/core';\nimport ColumnLayer from './column-layer';\n\nconst defaultProps = {\n  cellSize: {type: 'number', min: 0, value: 1000},\n  offset: {type: 'array', min: 0, value: [1, 1]}\n};\n\nexport default class GridCellLayer extends ColumnLayer {\n  getGeometry(diskResolution) {\n    return new CubeGeometry();\n  }\n\n  draw({uniforms}) {\n    const {elevationScale, extruded, offset, coverage, cellSize, angle} = this.props;\n    this.state.model\n      .setUniforms(\n        Object.assign({}, uniforms, {\n          radius: cellSize / 2,\n          angle,\n          offset,\n          extruded,\n          coverage,\n          elevationScale,\n          edgeDistance: 1,\n          isWireframe: false\n        })\n      )\n      .draw();\n  }\n}\n\nGridCellLayer.layerName = 'GridCellLayer';\nGridCellLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}