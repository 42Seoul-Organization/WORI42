{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport * as $array from \"./Array\";\nimport * as $type from \"./Type\";\n/**\r\n * A base class for disposable objects.\r\n *\r\n * @ignore Exclude from docs\r\n */\n\nvar Disposer =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param dispose  Function that disposes object\r\n   */\n  function Disposer(dispose) {\n    this._disposed = false;\n    this._dispose = dispose;\n  }\n  /**\r\n   * Checks if object is disposed.\r\n   *\r\n   * @return Disposed?\r\n   */\n\n\n  Disposer.prototype.isDisposed = function () {\n    return this._disposed;\n  };\n  /**\r\n   * Disposes the object.\r\n   */\n\n\n  Disposer.prototype.dispose = function () {\n    if (!this._disposed) {\n      this._disposed = true;\n\n      this._dispose();\n    }\n  };\n\n  return Disposer;\n}();\n\nexport { Disposer };\n/**\r\n * A collection of related disposers that can be disposed in one go.\r\n *\r\n * @ignore Exclude from docs\r\n */\n\nvar MultiDisposer =\n/** @class */\nfunction (_super) {\n  __extends(MultiDisposer, _super);\n\n  function MultiDisposer(disposers) {\n    return _super.call(this, function () {\n      $array.each(disposers, function (x) {\n        x.dispose();\n      });\n    }) || this;\n  }\n\n  return MultiDisposer;\n}(Disposer);\n\nexport { MultiDisposer };\n/**\r\n * A special kind of Disposer that has attached value set.\r\n *\r\n * If a new value is set using `set()` method, the old disposer value is\r\n * disposed.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nvar MutableValueDisposer =\n/** @class */\nfunction (_super) {\n  __extends(MutableValueDisposer, _super);\n  /**\r\n   * Constructor.\r\n   */\n\n\n  function MutableValueDisposer() {\n    var _this = _super.call(this, function () {\n      if ($type.hasValue(_this._disposer)) {\n        _this._disposer.dispose();\n\n        _this._disposer = undefined;\n      }\n    }) || this;\n\n    return _this;\n  }\n  /**\r\n   * Returns current value.\r\n   *\r\n   * @return Value\r\n   */\n\n\n  MutableValueDisposer.prototype.get = function () {\n    return this._value;\n  };\n  /**\r\n   * Sets value and disposes previous disposer if it was set.\r\n   *\r\n   * @param value     New value\r\n   * @param disposer  Disposer\r\n   */\n\n\n  MutableValueDisposer.prototype.set = function (value, disposer) {\n    if ($type.hasValue(this._disposer)) {\n      this._disposer.dispose();\n    }\n\n    this._disposer = disposer;\n    this._value = value;\n  };\n  /**\r\n   * Resets the disposer value.\r\n   */\n\n\n  MutableValueDisposer.prototype.reset = function () {\n    this.set(undefined, undefined);\n  };\n\n  return MutableValueDisposer;\n}(Disposer);\n\nexport { MutableValueDisposer };\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nvar CounterDisposer =\n/** @class */\nfunction (_super) {\n  __extends(CounterDisposer, _super);\n\n  function CounterDisposer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * [_counter description]\r\n     *\r\n     * @todo Description\r\n     */\n\n\n    _this._counter = 0;\n    return _this;\n  }\n  /**\r\n   * [increment description]\r\n   *\r\n   * @todo Description\r\n   */\n\n\n  CounterDisposer.prototype.increment = function () {\n    var _this = this; // TODO throw an error if it is disposed\n\n\n    ++this._counter; // TODO make this more efficient\n\n    return new Disposer(function () {\n      --_this._counter;\n\n      if (_this._counter === 0) {\n        _this.dispose();\n      }\n    });\n  };\n\n  return CounterDisposer;\n}(Disposer);\n\nexport { CounterDisposer };","map":{"version":3,"sources":["../../../../../src/.internal/core/utils/Disposer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $array from \"./Array\";\r\nimport * as $type from \"./Type\";\r\nimport { Optional } from \"./Type\";\r\n\r\n/**\r\n * Defines interface for disposable objects.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport interface IDisposer {\r\n\tisDisposed(): boolean;\r\n\tdispose(): void;\r\n}\r\n\r\n/**\r\n * A base class for disposable objects.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport class Disposer implements IDisposer {\r\n\r\n\t/**\r\n\t * Is object disposed?\r\n\t */\r\n\tprivate _disposed: boolean;\r\n\r\n\t/**\r\n\t * Method that disposes the object.\r\n\t */\r\n\tprivate _dispose: () => void;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param dispose  Function that disposes object\r\n\t */\r\n\tconstructor(dispose: () => void) {\r\n\t\tthis._disposed = false;\r\n\t\tthis._dispose = dispose;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if object is disposed.\r\n\t *\r\n\t * @return Disposed?\r\n\t */\r\n\tpublic isDisposed(): boolean {\r\n\t\treturn this._disposed;\r\n\t}\r\n\r\n\t/**\r\n\t * Disposes the object.\r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tif (!this._disposed) {\r\n\t\t\tthis._disposed = true;\r\n\t\t\tthis._dispose();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * A collection of related disposers that can be disposed in one go.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport class MultiDisposer extends Disposer {\r\n\tconstructor(disposers: Array<IDisposer>) {\r\n\t\tsuper(() => {\r\n\t\t\t$array.each(disposers, (x) => {\r\n\t\t\t\tx.dispose();\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * A special kind of Disposer that has attached value set.\r\n *\r\n * If a new value is set using `set()` method, the old disposer value is\r\n * disposed.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport class MutableValueDisposer<T extends IDisposer> extends Disposer {\r\n\r\n\t/**\r\n\t * Current disposer.\r\n\t */\r\n\tprivate _disposer: Optional<IDisposer>;\r\n\r\n\t/**\r\n\t * Current value.\r\n\t */\r\n\tprivate _value: Optional<T>;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper(() => {\r\n\t\t\tif ($type.hasValue(this._disposer)) {\r\n\t\t\t\tthis._disposer.dispose();\r\n\t\t\t\tthis._disposer = undefined;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current value.\r\n\t *\r\n\t * @return Value\r\n\t */\r\n\tpublic get(): Optional<T> {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets value and disposes previous disposer if it was set.\r\n\t *\r\n\t * @param value     New value\r\n\t * @param disposer  Disposer\r\n\t */\r\n\tpublic set(value: Optional<T>, disposer: Optional<IDisposer>): void {\r\n\t\tif ($type.hasValue(this._disposer)) {\r\n\t\t\tthis._disposer.dispose();\r\n\t\t}\r\n\r\n\t\tthis._disposer = disposer;\r\n\t\tthis._value = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Resets the disposer value.\r\n\t */\r\n\tpublic reset(): void {\r\n\t\tthis.set(undefined, undefined);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport class CounterDisposer extends Disposer {\r\n\r\n\t/**\r\n\t * [_counter description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprivate _counter: number = 0;\r\n\r\n\t/**\r\n\t * [increment description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic increment() {\r\n\t\t// TODO throw an error if it is disposed\r\n\t\t++this._counter;\r\n\r\n\t\t// TODO make this more efficient\r\n\t\treturn new Disposer(() => {\r\n\t\t\t--this._counter;\r\n\r\n\t\t\tif (this._counter === 0) {\r\n\t\t\t\tthis.dispose();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}