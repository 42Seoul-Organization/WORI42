{"ast":null,"code":"/**\r\n * Polyspline (smoothed line) module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Polyline } from \"./Polyline\";\nimport { registry } from \"../Registry\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Draws a polysline. (smoothed multi-sigment line)\r\n *\r\n * @see {@link IPolysplineEvents} for a list of available events\r\n * @see {@link IPolysplineAdapters} for a list of available Adapters\r\n */\n\nvar Polyspline =\n/** @class */\nfunction (_super) {\n  __extends(Polyspline, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Polyspline() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Polyspline\";\n    _this.tensionX = 0.5;\n    _this.tensionY = 0.5;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Creats and adds an SVG path for the arc.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Polyspline.prototype.makePath = function () {\n    this._distance = 0;\n    var segments = this.segments;\n    var tensionX = this.tensionX;\n    var tensionY = this.tensionY;\n    this.allPoints = [];\n\n    if (segments && segments.length > 0) {\n      var path = \"\";\n      this._realSegments = [];\n\n      for (var i = 0, len = segments.length; i < len; i++) {\n        var points = segments[i];\n        var realPoints = [];\n\n        this._realSegments.push(realPoints);\n\n        if (points.length > 0) {\n          var first = points[0];\n          var last = points[points.length - 1];\n          var closed_1 = false;\n\n          if ($math.round(first.x, 3) == $math.round(last.x) && $math.round(first.y) == $math.round(last.y)) {\n            closed_1 = true;\n          }\n\n          path += $path.moveTo(points[0]);\n\n          for (var p = 0; p < points.length - 1; p++) {\n            var p0 = points[p - 1];\n            var p1 = points[p];\n            var p2 = points[p + 1];\n            var p3 = points[p + 2];\n\n            if (p === 0) {\n              p0 = points[p];\n            } else if (p == points.length - 2) {\n              p3 = points[p + 1];\n            }\n\n            if (!p3) {\n              p3 = p2;\n            }\n\n            if (p === 0) {\n              if (closed_1) {\n                p0 = points[points.length - 2];\n              } else {\n                p0 = points[i];\n              }\n            } else if (p == points.length - 2) {\n              if (closed_1) {\n                p3 = points[1];\n              } else {\n                p3 = points[p + 1];\n              }\n            }\n\n            var controlPointA = $math.getCubicControlPointA(p0, p1, p2, p3, tensionX, tensionY);\n            var controlPointB = $math.getCubicControlPointB(p0, p1, p2, p3, tensionX, tensionY);\n            path += $path.cubicCurveTo(p2, controlPointA, controlPointB); // now split to small segments so that we could have positionToPoint later\n\n            var stepCount = Math.ceil($math.getCubicCurveDistance(p1, p2, controlPointA, controlPointB, 20)) * 1.2;\n            var prevPoint = p1;\n\n            if (stepCount > 0) {\n              // not good for curved charts\n              //this.allPoints[0] = { x: points[0].x, y: points[0].y, angle: $math.getAngle(points[0], points[1]) };\n              //realPoints.push(this.allPoints[0]);\n              for (var s = 0; s <= stepCount; s++) {\n                var point = $math.getPointOnCubicCurve(p1, p2, controlPointA, controlPointB, s / stepCount);\n\n                if (point.x == prevPoint.x && point.y == prevPoint.y) {\n                  continue;\n                }\n\n                realPoints.push(point);\n                var angle = $math.round($math.getAngle(prevPoint, point), 5); //this.allPoints.push({ x: point.x, y: point.y, angle: angle });\n\n                this._distance += $math.getDistance(prevPoint, point);\n                this.allPoints[Math.floor(this._distance)] = {\n                  x: point.x,\n                  y: point.y,\n                  angle: angle\n                };\n                prevPoint = point;\n              }\n            } else {\n              realPoints.push(p0);\n            }\n          }\n        }\n\n        var allPoints = this.allPoints;\n\n        if (allPoints.length > 1) {\n          for (var i_1 = 0; i_1 < allPoints.length; i_1++) {\n            if (!allPoints[i_1]) {\n              if (i_1 > 1) {\n                allPoints[i_1] = allPoints[i_1 - 1];\n              } else {\n                for (var k = 1; k < allPoints.length; k++) {\n                  if (allPoints[k]) {\n                    allPoints[i_1] = allPoints[k];\n                    break;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      this.path = path;\n    }\n  };\n  /**\r\n   * Returns an index of the point that is closest to specified coordinates.\r\n   *\r\n   * @param   point  Reference point\r\n   * @return         Index\r\n   */\n\n\n  Polyspline.prototype.getClosestPointIndex = function (point) {\n    var points = this.allPoints;\n    var index;\n    var closest = Infinity;\n\n    if (points.length > 1) {\n      for (var p = 1; p < points.length; p++) {\n        var distance = $math.getDistance(point, points[p]);\n\n        if (distance < closest) {\n          index = p;\n          closest = distance;\n        }\n      }\n    }\n\n    return index;\n  };\n\n  Object.defineProperty(Polyspline.prototype, \"tensionX\", {\n    /**\r\n     * @return Tension\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"tensionX\");\n    },\n\n    /**\r\n     * Horizontal tension for the spline.\r\n     *\r\n     * Used by the line smoothing algorithm.\r\n     *\r\n     * @default 0.5\r\n     * @param value  Tension\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"tensionX\", value);\n      this.makePath();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Polyspline.prototype, \"tensionY\", {\n    /**\r\n     * @return Tension\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"tensionY\");\n    },\n\n    /**\r\n     * Vertical tension for the spline.\r\n     *\r\n     * Used by the line smoothing algorithm.\r\n     *\r\n     * @default 0.5\r\n     * @param value  Tensions\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"tensionY\", value, true);\n      this.makePath();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts relative position along the line (0-1) into pixel coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @return Coordinates\r\n   */\n\n  Polyspline.prototype.positionToPoint = function (position, extend) {\n    var deltaAngle = 0;\n    var allPoints = this.allPoints;\n    var len = allPoints.length;\n\n    if (!$type.isNumber(position)) {\n      position = 0;\n    }\n\n    if (len > 1) {\n      if (extend && len > 3) {\n        if (position < 0) {\n          if (position < -0.01) {\n            position = -0.01;\n          }\n\n          var f0 = allPoints[0];\n          var f1 = allPoints[1];\n          var x = f0.x - (f0.x - f1.x) * len * position;\n          var y = f0.y - (f0.y - f1.y) * len * position;\n          return {\n            x: x,\n            y: y,\n            angle: $math.getAngle(f0, f1)\n          };\n        } else if (position > 1) {\n          if (position > 1.01) {\n            position = 1.01;\n          }\n\n          var f0 = allPoints[allPoints.length - 2];\n          var f1 = allPoints[allPoints.length - 3];\n          var x = f0.x + (f0.x - f1.x) * len * (position - 1);\n          var y = f0.y + (f0.y - f1.y) * len * (position - 1);\n          return {\n            x: x,\n            y: y,\n            angle: $math.getAngle(f0, {\n              x: x,\n              y: y\n            })\n          };\n        } else if (position == 1) {\n          var point_1 = allPoints[allPoints.length - 1];\n          return {\n            x: point_1.x,\n            y: point_1.y,\n            angle: point_1.angle\n          };\n        }\n      } else {\n        if (position < 0) {\n          position = Math.abs(position);\n          deltaAngle = 180;\n        }\n\n        if (position >= 1) {\n          position = 0.9999999999999;\n        }\n      }\n\n      var point = allPoints[Math.floor(position * len)];\n      return {\n        x: point.x,\n        y: point.y,\n        angle: point.angle + deltaAngle\n      };\n    } else if (len == 1) {\n      var point = allPoints[0];\n      return {\n        x: point.x,\n        y: point.y,\n        angle: point.angle\n      };\n    } else {\n      return {\n        x: 0,\n        y: 0,\n        angle: 0\n      };\n    }\n  };\n\n  return Polyspline;\n}(Polyline);\n\nexport { Polyspline };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Polyspline\"] = Polyspline;","map":{"version":3,"sources":["../../../../../src/.internal/core/elements/Polyspline.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Polyspline (smoothed line) module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Polyline, IPolylineProperties, IPolylineAdapters, IPolylineEvents } from \"./Polyline\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Polyspline]].\r\n */\r\nexport interface IPolysplineProperties extends IPolylineProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension for the spline.\r\n\t *\r\n\t * Used by the line smoothing algorithm.\r\n\t *\r\n\t * @default 0.5\r\n\t */\r\n\ttensionX: number;\r\n\r\n\t/**\r\n\t * Vertical tension for the spline.\r\n\t *\r\n\t * Used by the line smoothing algorithm.\r\n\t *\r\n\t * @default 0.5\r\n\t */\r\n\ttensionY: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Polyspline]].\r\n */\r\nexport interface IPolysplineEvents extends IPolylineEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPolysplineAdapters extends IPolylineAdapters, IPolysplineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a polysline. (smoothed multi-sigment line)\r\n *\r\n * @see {@link IPolysplineEvents} for a list of available events\r\n * @see {@link IPolysplineAdapters} for a list of available Adapters\r\n */\r\nexport class Polyspline extends Polyline {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic _properties!: IPolysplineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic _adapter!: IPolysplineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPolysplineEvents;\r\n\r\n\t/**\r\n\t * Array of points of a spline with 1 px increment. used to get point by position\r\n\t */\r\n\tpublic allPoints: IOrientationPoint[];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Polyspline\";\r\n\r\n\t\tthis.tensionX = 0.5;\r\n\t\tthis.tensionY = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creats and adds an SVG path for the arc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic makePath(): void {\r\n\t\tthis._distance = 0;\r\n\t\tlet segments = this.segments;\r\n\r\n\t\tlet tensionX: number = this.tensionX;\r\n\t\tlet tensionY: number = this.tensionY;\r\n\r\n\t\tthis.allPoints = [];\r\n\r\n\t\tif (segments && segments.length > 0) {\r\n\t\t\tlet path: string = \"\";\r\n\t\t\tthis._realSegments = [];\r\n\r\n\t\t\tfor (let i = 0, len = segments.length; i < len; i++) {\r\n\t\t\t\tlet points: IPoint[] = segments[i];\r\n\t\t\t\tlet realPoints: IPoint[] = [];\r\n\t\t\t\tthis._realSegments.push(realPoints);\r\n\r\n\t\t\t\tif (points.length > 0) {\r\n\r\n\t\t\t\t\tlet first: IPoint = points[0];\r\n\t\t\t\t\tlet last: IPoint = points[points.length - 1];\r\n\r\n\t\t\t\t\tlet closed: boolean = false;\r\n\r\n\t\t\t\t\tif ($math.round(first.x, 3) == $math.round(last.x) && $math.round(first.y) == $math.round(last.y)) {\r\n\t\t\t\t\t\tclosed = true;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpath += $path.moveTo(points[0]);\r\n\r\n\t\t\t\t\tfor (let p = 0; p < points.length - 1; p++) {\r\n\r\n\t\t\t\t\t\tlet p0: IPoint = points[p - 1];\r\n\r\n\t\t\t\t\t\tlet p1: IPoint = points[p];\r\n\r\n\t\t\t\t\t\tlet p2: IPoint = points[p + 1];\r\n\r\n\t\t\t\t\t\tlet p3: IPoint = points[p + 2];\r\n\r\n\t\t\t\t\t\tif (p === 0) {\r\n\t\t\t\t\t\t\tp0 = points[p];\r\n\t\t\t\t\t\t} else if (p == points.length - 2) {\r\n\t\t\t\t\t\t\tp3 = points[p + 1];\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!p3) {\r\n\t\t\t\t\t\t\tp3 = p2;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (p === 0) {\r\n\t\t\t\t\t\t\tif (closed) {\r\n\t\t\t\t\t\t\t\tp0 = points[points.length - 2];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tp0 = points[i];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (p == points.length - 2) {\r\n\t\t\t\t\t\t\tif (closed) {\r\n\t\t\t\t\t\t\t\tp3 = points[1];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tp3 = points[p + 1];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet controlPointA: IPoint = $math.getCubicControlPointA(p0, p1, p2, p3, tensionX, tensionY);\r\n\t\t\t\t\t\tlet controlPointB: IPoint = $math.getCubicControlPointB(p0, p1, p2, p3, tensionX, tensionY);\r\n\r\n\t\t\t\t\t\tpath += $path.cubicCurveTo(p2, controlPointA, controlPointB);\r\n\r\n\t\t\t\t\t\t// now split to small segments so that we could have positionToPoint later\r\n\t\t\t\t\t\tlet stepCount: number = Math.ceil($math.getCubicCurveDistance(p1, p2, controlPointA, controlPointB, 20)) * 1.2;\r\n\t\t\t\t\t\tlet prevPoint: IPoint = p1;\r\n\r\n\r\n\t\t\t\t\t\tif (stepCount > 0) {\r\n\r\n\t\t\t\t\t\t\t// not good for curved charts\r\n\t\t\t\t\t\t\t//this.allPoints[0] = { x: points[0].x, y: points[0].y, angle: $math.getAngle(points[0], points[1]) };\r\n\t\t\t\t\t\t\t//realPoints.push(this.allPoints[0]);\r\n\r\n\r\n\t\t\t\t\t\t\tfor (let s = 0; s <= stepCount; s++) {\r\n\r\n\t\t\t\t\t\t\t\tlet point = $math.getPointOnCubicCurve(p1, p2, controlPointA, controlPointB, s / stepCount);\r\n\r\n\t\t\t\t\t\t\t\tif (point.x == prevPoint.x && point.y == prevPoint.y) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\trealPoints.push(point);\r\n\r\n\t\t\t\t\t\t\t\tlet angle = $math.round($math.getAngle(prevPoint, point), 5);\r\n\r\n\t\t\t\t\t\t\t\t//this.allPoints.push({ x: point.x, y: point.y, angle: angle });\r\n\t\t\t\t\t\t\t\tthis._distance += $math.getDistance(prevPoint, point);\r\n\r\n\t\t\t\t\t\t\t\tthis.allPoints[Math.floor(this._distance)] = { x: point.x, y: point.y, angle: angle };\r\n\t\t\t\t\t\t\t\tprevPoint = point;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\trealPoints.push(p0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet allPoints = this.allPoints;\r\n\t\t\t\tif (allPoints.length > 1) {\r\n\t\t\t\t\tfor (let i = 0; i < allPoints.length; i++) {\r\n\t\t\t\t\t\tif (!allPoints[i]) {\r\n\t\t\t\t\t\t\tif (i > 1) {\r\n\t\t\t\t\t\t\t\tallPoints[i] = allPoints[i - 1];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tfor (let k = 1; k < allPoints.length; k++) {\r\n\t\t\t\t\t\t\t\t\tif (allPoints[k]) {\r\n\t\t\t\t\t\t\t\t\t\tallPoints[i] = allPoints[k];\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an index of the point that is closest to specified coordinates.\r\n\t * \r\n\t * @param   point  Reference point\r\n\t * @return         Index\r\n\t */\r\n\tpublic getClosestPointIndex(point: IPoint): number {\r\n\t\tlet points = this.allPoints;\r\n\r\n\t\tlet index: number;\r\n\r\n\t\tlet closest: number = Infinity;\r\n\t\tif (points.length > 1) {\r\n\t\t\tfor (let p = 1; p < points.length; p++) {\r\n\t\t\t\tlet distance = $math.getDistance(point, points[p]);\r\n\t\t\t\tif (distance < closest) {\r\n\t\t\t\t\tindex = p;\r\n\t\t\t\t\tclosest = distance;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn index;\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension for the spline.\r\n\t *\r\n\t * Used by the line smoothing algorithm.\r\n\t *\r\n\t * @default 0.5\r\n\t * @param value  Tension\r\n\t */\r\n\tpublic set tensionX(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionX\", value);\r\n\t\tthis.makePath();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tension\r\n\t */\r\n\tpublic get tensionX(): number {\r\n\t\treturn this.getPropertyValue(\"tensionX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical tension for the spline.\r\n\t *\r\n\t * Used by the line smoothing algorithm.\r\n\t *\r\n\t * @default 0.5\r\n\t * @param value  Tensions\r\n\t */\r\n\tpublic set tensionY(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionY\", value, true);\r\n\t\tthis.makePath();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tension\r\n\t */\r\n\tpublic get tensionY(): number {\r\n\t\treturn this.getPropertyValue(\"tensionY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinates\r\n\t */\r\n\r\n\tpublic positionToPoint(position: number, extend?: boolean): IOrientationPoint {\r\n\r\n\t\tlet deltaAngle: number = 0;\r\n\r\n\t\tlet allPoints = this.allPoints;\r\n\t\tlet len = allPoints.length;\r\n\r\n\t\tif (!$type.isNumber(position)) {\r\n\t\t\tposition = 0;\r\n\t\t}\r\n\r\n\t\tif (len > 1) {\r\n\r\n\t\t\tif (extend && len > 3) {\r\n\t\t\t\tif (position < 0) {\r\n\r\n\t\t\t\t\tif (position < -0.01) {\r\n\t\t\t\t\t\tposition = -0.01;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet f0 = allPoints[0];\r\n\t\t\t\t\tlet f1 = allPoints[1];\r\n\r\n\t\t\t\t\tlet x = f0.x - (f0.x - f1.x) * len * position;\r\n\t\t\t\t\tlet y = f0.y - (f0.y - f1.y) * len * position;\r\n\r\n\t\t\t\t\treturn { x: x, y: y, angle: $math.getAngle(f0, f1) };\r\n\t\t\t\t}\r\n\t\t\t\telse if (position > 1) {\r\n\r\n\t\t\t\t\tif (position > 1.01) {\r\n\t\t\t\t\t\tposition = 1.01;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet f0 = allPoints[allPoints.length - 2];\r\n\t\t\t\t\tlet f1 = allPoints[allPoints.length - 3];\r\n\r\n\t\t\t\t\tlet x = f0.x + (f0.x - f1.x) * len * (position - 1);\r\n\t\t\t\t\tlet y = f0.y + (f0.y - f1.y) * len * (position - 1);\r\n\r\n\t\t\t\t\treturn { x: x, y: y, angle: $math.getAngle(f0, { x: x, y: y }) };\r\n\t\t\t\t}\r\n\t\t\t\telse if (position == 1) {\r\n\t\t\t\t\tlet point = allPoints[allPoints.length - 1]\r\n\t\t\t\t\treturn { x: point.x, y: point.y, angle: point.angle };\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (position < 0) {\r\n\t\t\t\t\tposition = Math.abs(position);\r\n\t\t\t\t\tdeltaAngle = 180;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (position >= 1) {\r\n\t\t\t\t\tposition = 0.9999999999999;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet point = allPoints[Math.floor(position * len)];\r\n\t\t\treturn { x: point.x, y: point.y, angle: point.angle + deltaAngle };\r\n\t\t}\r\n\t\telse if (len == 1) {\r\n\t\t\tlet point = allPoints[0];\r\n\t\t\treturn { x: point.x, y: point.y, angle: point.angle };\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: 0, y: 0, angle: 0 };\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Polyspline\"] = Polyspline;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}