{"ast":null,"code":"/**\r\n * TreeMap series module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { ColumnSeries, ColumnSeriesDataItem } from \"./ColumnSeries\";\nimport { visualProperties } from \"../../core/Sprite\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $type from \"../../core/utils/Type\";\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\nimport * as $object from \"../../core/utils/Object\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[TreeMapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar TreeMapSeriesDataItem =\n/** @class */\nfunction (_super) {\n  __extends(TreeMapSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function TreeMapSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"TreeMapSeriesDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(TreeMapSeriesDataItem.prototype, \"parentName\", {\n    /**\r\n     * Data for the this particular item.\r\n     *\r\n     * @param value  Item's data\r\n     */\n    //public set dataContext(value: Object) {\n    //\tthis._dataContext = value;\n    //}\n\n    /**\r\n     * @return Item's data\r\n     */\n\n    /*\r\n    public get dataContext(): Object {\r\n       // It's because data of tree series is TreeMapDataItems.\r\n       if (this._dataContext) {\r\n           return (<any>this._dataContext).dataContext;\r\n       }\r\n    }*/\n\n    /**\r\n     * The name of the item's parent item.\r\n     *\r\n     * @return Parent name\r\n     */\n    get: function () {\n      var treeMapDataItem = this.treeMapDataItem;\n\n      if (treeMapDataItem && treeMapDataItem.parent) {\n        return treeMapDataItem.parent.name;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapSeriesDataItem.prototype, \"value\", {\n    /**\r\n     * Item's numeric value.\r\n     *\r\n     * @readonly\r\n     * @return Value\r\n     */\n    get: function () {\n      var treeMapDataItem = this.treeMapDataItem;\n\n      if (treeMapDataItem) {\n        return treeMapDataItem.value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapSeriesDataItem.prototype, \"treeMapDataItem\", {\n    /**\r\n     * A corresponding data item from the tree map.\r\n     *\r\n     * @readonly\r\n     * @return Data item\r\n     */\n    get: function () {\n      return this._dataContext;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Hides the Data Item and related visual elements.\r\n   *\r\n   * @param duration  Animation duration (ms)\r\n   * @param delay     Delay animation (ms)\r\n   * @param toValue   A value to set to `fields` when hiding\r\n   * @param fields    A list of data fields to set value to `toValue`\r\n   */\n\n  TreeMapSeriesDataItem.prototype.hide = function (duration, delay, toValue, fields) {\n    var treeMapDataItem = this.treeMapDataItem;\n\n    if (treeMapDataItem) {\n      treeMapDataItem.hide(duration);\n    }\n\n    return _super.prototype.hide.call(this, duration, delay, toValue, fields);\n  };\n  /**\r\n   * Shows the Data Item and related visual elements.\r\n   *\r\n   * @param duration  Animation duration (ms)\r\n   * @param delay     Delay animation (ms)\r\n   * @param fields    A list of fields to set values of\r\n   */\n\n\n  TreeMapSeriesDataItem.prototype.show = function (duration, delay, fields) {\n    var treeMapDataItem = this.treeMapDataItem;\n\n    if (treeMapDataItem) {\n      treeMapDataItem.show(duration, delay, fields);\n    }\n\n    return _super.prototype.show.call(this, duration, delay, fields);\n  };\n\n  return TreeMapSeriesDataItem;\n}(ColumnSeriesDataItem);\n\nexport { TreeMapSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines Series for a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapSeriesEvents} for a list of available Events\r\n * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\n\nvar TreeMapSeries =\n/** @class */\nfunction (_super) {\n  __extends(TreeMapSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function TreeMapSeries() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"TreeMapSeries\";\n\n    _this.applyTheme();\n\n    _this.fillOpacity = 1;\n    _this.strokeOpacity = 1;\n    _this.minBulletDistance = 0;\n    _this.columns.template.tooltipText = \"{parentName} {name}: {value}\"; //@todo add format number?\n\n    _this.columns.template.configField = \"config\";\n    var interfaceColors = new InterfaceColorSet();\n    _this.stroke = interfaceColors.getFor(\"background\");\n    _this.dataFields.openValueX = \"x0\";\n    _this.dataFields.valueX = \"x1\";\n    _this.dataFields.openValueY = \"y0\";\n    _this.dataFields.valueY = \"y1\";\n    _this.sequencedInterpolation = false;\n    _this.showOnInit = false; // otherwise nodes don't stack nicely to each other\n\n    _this.columns.template.pixelPerfect = false;\n    return _this;\n  }\n  /**\r\n   * Processes data item.\r\n   *\r\n   * @param dataItem     Data item\r\n   * @param dataContext  Raw data\r\n   * @param index        Index of the data item\r\n   */\n\n\n  TreeMapSeries.prototype.processDataItem = function (dataItem, dataContext) {\n    dataContext.seriesDataItem = dataItem; // save a reference here. dataContext is TreeMapDataItem and we need to know dataItem sometimes\n\n    _super.prototype.processDataItem.call(this, dataItem, dataContext);\n  };\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  TreeMapSeries.prototype.createDataItem = function () {\n    return new TreeMapSeriesDataItem();\n  };\n  /**\r\n   * Shows series.\r\n   *\r\n   * @param duration  Duration of fade in (ms)\r\n   * @return Animation\r\n   */\n\n\n  TreeMapSeries.prototype.show = function (duration) {\n    if (this.preventShow) {\n      return;\n    }\n\n    var interpolationDuration = this.defaultState.transitionDuration;\n\n    if ($type.isNumber(duration)) {\n      interpolationDuration = duration;\n    }\n\n    this.dataItems.each(function (dataItem) {\n      //dataItem.treeMapDataItem.setWorkingValue(\"value\", dataItem.treeMapDataItem.values.value.value);\n      dataItem.show(duration);\n    });\n    return _super.prototype.showReal.call(this, interpolationDuration);\n  };\n  /**\r\n   * Hides series.\r\n   *\r\n   * @param duration  Duration of fade out (ms)\r\n   * @return Animation\r\n   */\n\n\n  TreeMapSeries.prototype.hide = function (duration) {\n    var interpolationDuration = this.defaultState.transitionDuration;\n\n    if ($type.isNumber(duration)) {\n      interpolationDuration = duration;\n    }\n\n    var animation = _super.prototype.hideReal.call(this, interpolationDuration);\n\n    this.dataItems.each(function (dataItem) {\n      //dataItem.treeMapDataItem.setWorkingValue(\"value\", 0);\n      dataItem.hide(duration);\n    });\n    return animation;\n  };\n  /**\r\n   * Process values.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  TreeMapSeries.prototype.processValues = function () {// Just overriding so that inherited method does not kick in.\n  };\n  /**\r\n   * Returns relative start location for the data item.\r\n   *\r\n   * @param dataItem  Data item\r\n   * @return Location (0-1)\r\n   */\n\n\n  TreeMapSeries.prototype.getStartLocation = function (dataItem) {\n    return 0;\n  };\n  /**\r\n   * Returns relative end location for the data item.\r\n   *\r\n   * @param dataItem  Data item\r\n   * @return Location (0-1)\r\n   */\n\n\n  TreeMapSeries.prototype.getEndLocation = function (dataItem) {\n    return 1;\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  TreeMapSeries.prototype.dataChangeUpdate = function () {};\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n\n  TreeMapSeries.prototype.processConfig = function (config) {\n    if (config) {\n      // Add empty data fields if the they are not set, so that XYSeries\n      // dataField check does not result in error.\n      if (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\n        config.dataFields = {};\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n  /**\r\n   * Creates elements in related legend container, that mimics the look of this\r\n   * Series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param marker  Legend item container\r\n   */\n\n\n  TreeMapSeries.prototype.createLegendMarker = function (marker) {\n    var w = marker.pixelWidth;\n    var h = marker.pixelHeight;\n    marker.removeChildren();\n    var column = marker.createChild(RoundedRectangle);\n    column.shouldClone = false;\n    $object.copyProperties(this, column, visualProperties); //column.copyFrom(<any>this.columns.template);\n\n    column.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\n\n    column.width = w;\n    column.height = h;\n    var legendDataItem = marker.dataItem;\n    legendDataItem.color = column.fill;\n    legendDataItem.colorOrig = column.fill;\n  };\n\n  TreeMapSeries.prototype.disableUnusedColumns = function (dataItem) {\n    _super.prototype.disableUnusedColumns.call(this, dataItem);\n\n    if (dataItem.column) {\n      dataItem.column.__disabled = false;\n    }\n  };\n\n  return TreeMapSeries;\n}(ColumnSeries);\n\nexport { TreeMapSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"TreeMapSeries\"] = TreeMapSeries;\nregistry.registeredClasses[\"TreeMapSeriesDataItem\"] = TreeMapSeriesDataItem;","map":{"version":3,"sources":["../../../../../src/.internal/charts/series/TreeMapSeries.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * TreeMap series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { TreeMap, TreeMapDataItem } from \"../types/TreeMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { Container } from \"../../core/Container\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Data for the this particular item.\r\n\t *\r\n\t * @param value  Item's data\r\n\t */\r\n\t//public set dataContext(value: Object) {\r\n\t//\tthis._dataContext = value;\r\n\t//}\r\n\r\n\r\n\r\n\t/**\r\n\t * @return Item's data\r\n\t */\r\n\t/*\r\n   public get dataContext(): Object {\r\n\t   // It's because data of tree series is TreeMapDataItems.\r\n\t   if (this._dataContext) {\r\n\t\t   return (<any>this._dataContext).dataContext;\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * The name of the item's parent item.\r\n\t *\r\n\t * @return Parent name\r\n\t */\r\n\tpublic get parentName(): string {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem && treeMapDataItem.parent) {\r\n\t\t\treturn treeMapDataItem.parent.name;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value.\r\n\t *\r\n\t * @readonly\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem) {\r\n\t\t\treturn treeMapDataItem.value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A corresponding data item from the tree map.\r\n\t *\r\n\t * @readonly\r\n\t * @return Data item\r\n\t */\r\n\tpublic get treeMapDataItem(): TreeMapDataItem {\r\n\t\treturn <TreeMapDataItem>this._dataContext;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param toValue   A value to set to `fields` when hiding\r\n\t * @param fields    A list of data fields to set value to `toValue`\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem) {\r\n\t\t\ttreeMapDataItem.hide(duration);\r\n\t\t}\r\n\t\treturn super.hide(duration, delay, toValue, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param fields    A list of fields to set values of\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem) {\r\n\t\t\ttreeMapDataItem.show(duration, delay, fields);\r\n\t\t}\r\n\t\treturn super.show(duration, delay, fields);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value.\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapSeriesAdapters extends IColumnSeriesAdapters, ITreeMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapSeriesEvents} for a list of available Events\r\n * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class TreeMapSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ITreeMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITreeMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITreeMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITreeMapSeriesEvents;\r\n\r\n\t/**\r\n\t * The level in treemap hierarchy series is at.\r\n\t */\r\n\tpublic level: number;\r\n\r\n\t/**\r\n\t * Type of the data item used by series.\r\n\t */\r\n\tpublic _dataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: TreeMap;\r\n\r\n\t/**\r\n\t * Parent data item of a series.\r\n\t */\r\n\tpublic parentDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"TreeMapSeries\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.fillOpacity = 1;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.minBulletDistance = 0;\r\n\t\tthis.columns.template.tooltipText = \"{parentName} {name}: {value}\"; //@todo add format number?\r\n\t\tthis.columns.template.configField = \"config\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"background\");\r\n\t\tthis.dataFields.openValueX = \"x0\";\r\n\t\tthis.dataFields.valueX = \"x1\";\r\n\t\tthis.dataFields.openValueY = \"y0\";\r\n\t\tthis.dataFields.valueY = \"y1\";\r\n\r\n\t\tthis.sequencedInterpolation = false;\r\n\r\n\t\tthis.showOnInit = false;\r\n\r\n\t\t// otherwise nodes don't stack nicely to each other\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param dataItem     Data item\r\n\t * @param dataContext  Raw data\r\n\t * @param index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\t(<TreeMapDataItem>dataContext).seriesDataItem = dataItem; // save a reference here. dataContext is TreeMapDataItem and we need to know dataItem sometimes\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Shows series.\r\n\t *\r\n\t * @param duration  Duration of fade in (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\t\tif(this.preventShow){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t//dataItem.treeMapDataItem.setWorkingValue(\"value\", dataItem.treeMapDataItem.values.value.value);\r\n\t\t\tdataItem.show(duration);\r\n\t\t})\r\n\r\n\t\treturn super.showReal(interpolationDuration);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param duration  Duration of fade out (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet animation = super.hideReal(interpolationDuration);\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t//dataItem.treeMapDataItem.setWorkingValue(\"value\", 0);\r\n\t\t\tdataItem.hide(duration);\r\n\t\t})\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Process values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processValues() {\r\n\r\n\t\t// Just overriding so that inherited method does not kick in.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative start location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getStartLocation(dataItem: this[\"_dataItem\"]): number {\t\t\r\n\t\treturn 0;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Returns relative end location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getEndLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\treturn 1;\r\n\t}\t\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Add empty data fields if the they are not set, so that XYSeries\r\n\t\t\t// dataField check does not result in error.\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tconfig.dataFields = {};\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\t//column.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.fill;\r\n\t\tlegendDataItem.colorOrig = column.fill;\r\n\t}\r\n\r\n\tprotected disableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tsuper.disableUnusedColumns(dataItem);\r\n\t\tif(dataItem.column){\r\n\t\t\tdataItem.column.__disabled = false;\r\n\t\t}\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMapSeries\"] = TreeMapSeries;\r\nregistry.registeredClasses[\"TreeMapSeriesDataItem\"] = TreeMapSeriesDataItem;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}