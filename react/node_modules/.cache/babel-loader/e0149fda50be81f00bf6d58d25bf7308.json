{"ast":null,"code":"/**\r\n * Module that defines everything related to building Funnel slices.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { Sprite } from \"../../core/Sprite\";\nimport { registry } from \"../../core/Registry\";\nimport { percent } from \"../../core/utils/Percent\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Class used to create [[FunnelSlice]] elements.\r\n *\r\n * @see {@link IFunnelSliceEvents} for a list of available events\r\n * @see {@link IFunnelSliceAdapters} for a list of available adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\n\nvar FunnelSlice =\n/** @class */\nfunction (_super) {\n  __extends(FunnelSlice, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function FunnelSlice() {\n    var _this = _super.call(this) || this;\n\n    _this.slice = _this.createChild(Sprite);\n    _this.slice.shouldClone = false;\n\n    _this.slice.setElement(_this.paper.add(\"path\"));\n\n    _this.slice.isMeasured = false;\n    _this.orientation = \"vertical\";\n    _this.bottomWidth = percent(100);\n    _this.topWidth = percent(100);\n    _this.isMeasured = false;\n    _this.width = 10;\n    _this.height = 10;\n    _this.expandDistance = 0;\n    _this.className = \"FunnelSlice\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the element.\r\n   */\n\n\n  FunnelSlice.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    var pt = this.pixelPaddingTop;\n    var pb = this.pixelPaddingBottom;\n    var pr = this.pixelPaddingRight;\n    var pl = this.pixelPaddingLeft;\n    var w = this.pixelWidth - pr - pl;\n    var h = this.pixelHeight - pt - pb;\n    var ed = this.expandDistance;\n    var path = \"\";\n\n    if (this.orientation == \"vertical\") {\n      var tw = $utils.relativeToValue(this.topWidth, w);\n      var bw = $utils.relativeToValue(this.bottomWidth, w);\n      var tl = {\n        x: (w - tw) / 2 + pl,\n        y: pt\n      };\n      var tr = {\n        x: (w + tw) / 2 + pl,\n        y: pt\n      };\n      var br = {\n        x: (w + bw) / 2 + pl,\n        y: pt + h\n      };\n      var bl = {\n        x: (w - bw) / 2 + pl,\n        y: pt + h\n      };\n      var cpr = {\n        x: tr.x + (br.x - tr.x) / 2 + ed * h,\n        y: tr.y + 0.5 * h\n      };\n      var cpl = {\n        x: tl.x + (bl.x - tl.x) / 2 - ed * h,\n        y: tl.y + 0.5 * h\n      };\n      var qp1 = $path.lineTo(br);\n      var qp2 = \"\";\n\n      if (ed != 0) {\n        qp1 = $path.quadraticCurveTo(br, cpr);\n        qp2 = $path.quadraticCurveTo(tl, cpl);\n      }\n\n      path = $path.moveTo(tl) + $path.lineTo(tr) + qp1 + $path.lineTo(bl) + qp2;\n      this.tickPoint = {\n        x: tr.x + (br.x - tr.x) / 2,\n        y: tr.y + (br.y - tr.y) / 2\n      };\n    } else {\n      var tw = $utils.relativeToValue(this.topWidth, h);\n      var bw = $utils.relativeToValue(this.bottomWidth, h);\n      var tt = {\n        x: pl,\n        y: (h - tw) / 2 + pt\n      };\n      var tb = {\n        x: pl,\n        y: (h + tw) / 2 + pt\n      };\n      var bt = {\n        x: pl + w,\n        y: (h - bw) / 2 + pt\n      };\n      var bb = {\n        x: pl + w,\n        y: (h + bw) / 2 + pt\n      };\n      var cpr = {\n        y: tt.y + (bt.y - tt.y) / 2 - ed * w,\n        x: tt.x + 0.5 * w\n      };\n      var cpl = {\n        y: tb.y + (bb.y - tb.y) / 2 + ed * w,\n        x: tb.x + 0.5 * w\n      };\n      var qp1 = $path.lineTo(bt);\n      var qp2 = \"\";\n\n      if (ed != 0) {\n        qp1 = $path.quadraticCurveTo(bt, cpr);\n        qp2 = $path.quadraticCurveTo(tb, cpl);\n      }\n\n      path = $path.moveTo(tb) + $path.lineTo(tt) + qp1 + $path.lineTo(bb) + qp2;\n      this.tickPoint = {\n        y: tb.y + (bb.y - tb.y) / 2,\n        x: tb.x + (bb.x - tb.x) / 2\n      };\n    }\n\n    this.slice.path = path;\n    this.invalidateLayout();\n  };\n\n  FunnelSlice.prototype.getPoint = function (locationX, locationY) {\n    var pt = this.pixelPaddingTop;\n    var pb = this.pixelPaddingBottom;\n    var pr = this.pixelPaddingRight;\n    var pl = this.pixelPaddingLeft;\n    var w = this.pixelWidth - pr - pl;\n    var h = this.pixelHeight - pt - pb;\n\n    if (this.orientation == \"vertical\") {\n      var tw = $utils.relativeToValue(this.topWidth, w);\n      var bw = $utils.relativeToValue(this.bottomWidth, w);\n      var tl = {\n        x: (w - tw) / 2 + pl,\n        y: pt\n      };\n      var tr = {\n        x: (w + tw) / 2 + pl,\n        y: pt\n      };\n      var br = {\n        x: (w + bw) / 2 + pl,\n        y: pt + h\n      };\n      var bl = {\n        x: (w - bw) / 2 + pl,\n        y: pt + h\n      };\n      var mlx = tl.x + (bl.x - tl.x) * locationY;\n      var mrx = tr.x + (br.x - tr.x) * locationY;\n      return {\n        x: mlx + (mrx - mlx) * locationX,\n        y: tr.y + (br.y - tr.y) * locationY\n      };\n    } else {\n      var tw = $utils.relativeToValue(this.topWidth, h);\n      var bw = $utils.relativeToValue(this.bottomWidth, h);\n      var tt = {\n        x: pl,\n        y: (h - tw) / 2 + pt\n      };\n      var tb = {\n        x: pl,\n        y: (h + tw) / 2 + pt\n      };\n      var bt = {\n        x: pl + w,\n        y: (h - bw) / 2 + pt\n      };\n      var bb = {\n        x: pl + w,\n        y: (h + bw) / 2 + pt\n      };\n      var mty = tt.y + (bt.y - tt.y) * locationX;\n      var mby = tb.y + (bb.y - tb.y) * locationX;\n      return {\n        y: mty + (mby - mty) * locationY,\n        x: tt.x + (bt.x - tt.x) * locationX\n      };\n    }\n  };\n\n  Object.defineProperty(FunnelSlice.prototype, \"bottomWidth\", {\n    /**\r\n     * @return bottom width\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"bottomWidth\");\n    },\n\n    /**\r\n     * Bottom width in pixels or percent.\r\n     *\r\n     * IMPORTANT: this setting might be used to set dimensions if you use slice\r\n     * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n     * becomes read-only as it will be automatically reset by series.\r\n     *\r\n     * @param value  Bottom width\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"bottomWidth\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FunnelSlice.prototype, \"topWidth\", {\n    /**\r\n     * @return Top width\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"topWidth\");\n    },\n\n    /**\r\n     * Top width in pixels or percent.\r\n     *\r\n     * IMPORTANT: this setting might be used to set dimensions if you use slice\r\n     * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n     * becomes read-only as it will be automatically reset by series.\r\n     *\r\n     * @param value  Top width\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"topWidth\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FunnelSlice.prototype, \"orientation\", {\n    /**\r\n     * @return Orientation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"orientation\");\n    },\n\n    /**\r\n     * Orientation of the funnel slice: \"horizontal\" or \"vertical\".\r\n     *\r\n     * IMPORTANT: this setting might be used to set orintation if you use slice\r\n     * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n     * becomes read-only as it will be automatically reset by series.\r\n     *\r\n     * @param value  Orientation\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"orientation\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FunnelSlice.prototype, \"expandDistance\", {\n    /**\r\n     * @return expandDistance\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"expandDistance\");\n    },\n\n    /**\r\n     * A relative distance slice's sides should be bent to. It's relative to the\r\n     * height of the slice.\r\n     *\r\n     * Zero (default) will mean the sides will be perfectly straight.\r\n     *\r\n     * Positive value will make them bend outwards, resulting in \"puffed\" slices.\r\n     *\r\n     * Negative values will make them bend inwards.\r\n     *\r\n     * @default 0\r\n     * @param {number}\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"expandDistance\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all parameters from another [[Sprite]].\r\n   *\r\n   * @param source Source Sprite\r\n   */\n\n  FunnelSlice.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    if (this.slice) {\n      this.slice.copyFrom(source.slice);\n    }\n  };\n\n  return FunnelSlice;\n}(Container);\n\nexport { FunnelSlice };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"FunnelSlice\"] = FunnelSlice;","map":{"version":3,"sources":["../../../../../src/.internal/charts/elements/FunnelSlice.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Module that defines everything related to building Funnel slices.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FunnelSlice]].\r\n */\r\nexport interface IFunnelSliceProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Width of the top edge of the slice.\r\n\t */\r\n\ttopWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Width of the bottom edge of the slice.\r\n\t */\r\n\tbottomWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * A relative distance slice's sides should be bent to.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\texpandDistance?: number;\r\n\r\n\t/**\r\n\t * Orientation of the slice.\r\n\t */\r\n\torientation?: Orientation;\r\n}\r\n\r\n/**\r\n * Defines events for [[FunnelSlice]].\r\n */\r\nexport interface IFunnelSliceEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FunnelSlice]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFunnelSliceAdapters extends IContainerAdapters, IFunnelSliceProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to create [[FunnelSlice]] elements.\r\n *\r\n * @see {@link IFunnelSliceEvents} for a list of available events\r\n * @see {@link IFunnelSliceAdapters} for a list of available adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class FunnelSlice extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFunnelSliceProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFunnelSliceAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFunnelSliceEvents;\r\n\r\n\t/**\r\n\t * Main slice element.\r\n\t */\r\n\tpublic slice: Sprite;\r\n\r\n\t/**\r\n\t * Am anchor point the slice tick line is pointing to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @readonly\r\n\t */\r\n\tpublic tickPoint: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.slice = this.createChild(Sprite);\r\n\t\tthis.slice.shouldClone = false;\r\n\t\tthis.slice.setElement(this.paper.add(\"path\"));\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tthis.orientation = \"vertical\";\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.topWidth = percent(100);\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.width = 10;\r\n\t\tthis.height = 10;\r\n\r\n\t\tthis.expandDistance = 0;\r\n\r\n\t\tthis.className = \"FunnelSlice\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t */\r\n\tprotected draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet pt = this.pixelPaddingTop;\r\n\t\tlet pb = this.pixelPaddingBottom;\r\n\t\tlet pr = this.pixelPaddingRight;\r\n\t\tlet pl = this.pixelPaddingLeft;\r\n\r\n\t\tlet w = this.pixelWidth - pr - pl;\r\n\t\tlet h = this.pixelHeight - pt - pb;\r\n\r\n\t\tlet ed = this.expandDistance;\r\n\r\n\t\tlet path = \"\";\r\n\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, w);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, w);\r\n\r\n\t\t\tlet tl = { x: (w - tw) / 2 + pl, y: pt };\r\n\t\t\tlet tr = { x: (w + tw) / 2 + pl, y: pt };\r\n\r\n\t\t\tlet br = { x: (w + bw) / 2 + pl, y: pt + h };\r\n\t\t\tlet bl = { x: (w - bw) / 2 + pl, y: pt + h };\r\n\r\n\t\t\tlet cpr = { x: tr.x + (br.x - tr.x) / 2 + ed * h, y: tr.y + 0.5 * h };\r\n\t\t\tlet cpl = { x: tl.x + (bl.x - tl.x) / 2 - ed * h, y: tl.y + 0.5 * h };\r\n\r\n\t\t\tlet qp1 = $path.lineTo(br);\r\n\t\t\tlet qp2 = \"\";\r\n\r\n\t\t\tif(ed != 0){\r\n\t\t\t\tqp1 = $path.quadraticCurveTo(br, cpr);\r\n\t\t\t\tqp2 = $path.quadraticCurveTo(tl, cpl);\r\n\t\t\t}\r\n\r\n\t\t\tpath = $path.moveTo(tl) + $path.lineTo(tr) + qp1 + $path.lineTo(bl) + qp2;\r\n\r\n\t\t\tthis.tickPoint = { x: tr.x + (br.x - tr.x) / 2, y: tr.y + (br.y - tr.y) / 2 };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, h);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, h);\r\n\r\n\t\t\tlet tt = { x: pl, y: (h - tw) / 2 + pt };\r\n\t\t\tlet tb = { x: pl, y: (h + tw) / 2 + pt };\r\n\r\n\t\t\tlet bt = { x: pl + w, y: (h - bw) / 2 + pt };\r\n\t\t\tlet bb = { x: pl + w, y: (h + bw) / 2 + pt };\r\n\r\n\t\t\tlet cpr = { y: tt.y + (bt.y - tt.y) / 2 - ed * w, x: tt.x + 0.5 * w };\r\n\t\t\tlet cpl = { y: tb.y + (bb.y - tb.y) / 2 + ed * w, x: tb.x + 0.5 * w };\r\n\r\n\t\t\tlet qp1 = $path.lineTo(bt);\r\n\t\t\tlet qp2 = \"\"\r\n\t\t\tif(ed != 0){\r\n\t\t\t\tqp1 = $path.quadraticCurveTo(bt, cpr);\r\n\t\t\t\tqp2 = $path.quadraticCurveTo(tb, cpl);\r\n\t\t\t}\r\n\r\n\t\t\tpath = $path.moveTo(tb) + $path.lineTo(tt) + qp1 + $path.lineTo(bb) + qp2;\r\n\r\n\t\t\tthis.tickPoint = { y: tb.y + (bb.y - tb.y) / 2, x: tb.x + (bb.x - tb.x) / 2 };\r\n\t\t}\r\n\r\n\t\tthis.slice.path = path;\r\n\t\tthis.invalidateLayout();\r\n\t}\r\n\r\n\r\n\tgetPoint(locationX:number, locationY:number):IPoint{\r\n\r\n\t\tlet pt = this.pixelPaddingTop;\r\n\t\tlet pb = this.pixelPaddingBottom;\r\n\t\tlet pr = this.pixelPaddingRight;\r\n\t\tlet pl = this.pixelPaddingLeft;\r\n\r\n\t\tlet w = this.pixelWidth - pr - pl;\r\n\t\tlet h = this.pixelHeight - pt - pb;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, w);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, w);\r\n\r\n\t\t\tlet tl = { x: (w - tw) / 2 + pl, y: pt };\r\n\t\t\tlet tr = { x: (w + tw) / 2 + pl, y: pt };\r\n\r\n\t\t\tlet br = { x: (w + bw) / 2 + pl, y: pt + h };\r\n\t\t\tlet bl = { x: (w - bw) / 2 + pl, y: pt + h };\r\n\r\n\t\t\tlet mlx = tl.x + (bl.x - tl.x) * locationY;\r\n\t\t\tlet mrx = tr.x + (br.x - tr.x) * locationY;\r\n\r\n\t\t\treturn { x: mlx + (mrx - mlx) * locationX, y: tr.y + (br.y - tr.y) * locationY };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, h);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, h);\r\n\r\n\t\t\tlet tt = { x: pl, y: (h - tw) / 2 + pt };\r\n\t\t\tlet tb = { x: pl, y: (h + tw) / 2 + pt };\r\n\r\n\t\t\tlet bt = { x: pl + w, y: (h - bw) / 2 + pt };\r\n\t\t\tlet bb = { x: pl + w, y: (h + bw) / 2 + pt };\r\n\r\n\t\t\tlet mty = tt.y + (bt.y - tt.y) * locationX;\r\n\t\t\tlet mby = tb.y + (bb.y - tb.y) * locationX;\r\n\r\n\t\t\treturn { y: mty + (mby - mty) * locationY, x: tt.x + (bt.x - tt.x) * locationX };\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Bottom width in pixels or percent.\r\n\t *\r\n\t * IMPORTANT: this setting might be used to set dimensions if you use slice\r\n\t * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n\t * becomes read-only as it will be automatically reset by series.\r\n\t *\r\n\t * @param value  Bottom width\r\n\t */\r\n\tpublic set bottomWidth(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"bottomWidth\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return bottom width\r\n\t */\r\n\tpublic get bottomWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Top width in pixels or percent.\r\n\t *\r\n\t * IMPORTANT: this setting might be used to set dimensions if you use slice\r\n\t * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n\t * becomes read-only as it will be automatically reset by series.\r\n\t *\r\n\t * @param value  Top width\r\n\t */\r\n\tpublic set topWidth(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"topWidth\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Top width\r\n\t */\r\n\tpublic get topWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the funnel slice: \"horizontal\" or \"vertical\".\r\n\t *\r\n\t * IMPORTANT: this setting might be used to set orintation if you use slice\r\n\t * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n\t * becomes read-only as it will be automatically reset by series.\r\n\t *\r\n\t * @param value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative distance slice's sides should be bent to. It's relative to the\r\n\t * height of the slice.\r\n\t *\r\n\t * Zero (default) will mean the sides will be perfectly straight.\r\n\t *\r\n\t * Positive value will make them bend outwards, resulting in \"puffed\" slices.\r\n\t *\r\n\t * Negative values will make them bend inwards.\r\n\t *\r\n\t * @default 0\r\n\t * @param {number}\r\n\t */\r\n\tpublic set expandDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"expandDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return expandDistance\r\n\t */\r\n\tpublic get expandDistance(): number {\r\n\t\treturn this.getPropertyValue(\"expandDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Sprite]].\r\n\t *\r\n\t * @param source Source Sprite\r\n\t */\r\n\tpublic copyFrom(source :this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (this.slice) {\r\n\t\t\tthis.slice.copyFrom(source.slice);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelSlice\"] = FunnelSlice;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}