{"ast":null,"code":"/**\r\n * Event Dispatcher module is used for registering listeners and dispatching\r\n * events across amCharts system.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Disposer } from \"./Disposer\";\nimport * as $array from \"./Array\";\nimport * as $async from \"./AsyncPending\";\nimport * as $type from \"./Type\";\n/*export interface IEventDispatcher<T> {\r\n    isDisposed(): boolean;\r\n    dispose(): void;\r\n    hasListeners(): boolean;\r\n    enable(): void;\r\n    disable(): void;\r\n    enableType<Key extends keyof T>(type: Key): void;\r\n    disableType<Key extends keyof T>(type: Key, amount?: number): void;\r\n    isEnabled<Key extends keyof T>(type: Key): boolean;\r\n    has<C, Key extends keyof T>(type: Key, callback?: (this: C, event: T[Key]) => void, context?: C): boolean;\r\n    dispatchImmediately<Key extends keyof T>(type: Key, event: T[Key]): void;\r\n    dispatch<Key extends keyof T>(type: Key, event: T[Key]): void;\r\n    onAll<C, Key extends keyof T>(callback: (this: C, type: Key, event: T[Key]) => void, context?: C): IDisposer;\r\n    on<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): IDisposer;\r\n    once<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): IDisposer;\r\n    off<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): void;\r\n    off<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): void;\r\n    copyFrom(source: this): void;\r\n}*/\n\n/**\r\n * Universal Event Dispatcher.\r\n *\r\n * @important\r\n */\n\nvar EventDispatcher =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor\r\n   */\n  function EventDispatcher() {\n    this._listeners = [];\n    this._killed = [];\n    this._disabled = {};\n    this._iterating = 0;\n    this._enabled = true;\n    this._disposed = false;\n  }\n  /**\r\n   * Returns if this object has been already disposed.\r\n   *\r\n   * @return Disposed?\r\n   */\n\n\n  EventDispatcher.prototype.isDisposed = function () {\n    return this._disposed;\n  };\n  /**\r\n   * Dispose (destroy) this object.\r\n   */\n\n\n  EventDispatcher.prototype.dispose = function () {\n    if (!this._disposed) {\n      this._disposed = true;\n      var a = this._listeners;\n      this._iterating = 1;\n      this._listeners = null;\n      this._disabled = null;\n\n      try {\n        $array.each(a, function (x) {\n          x.disposer.dispose();\n        });\n      } finally {\n        this._killed = null;\n        this._iterating = null;\n      }\n    }\n  };\n  /**\r\n   * Checks if this particular event dispatcher has any listeners set.\r\n   *\r\n   * @return Has listeners?\r\n   */\n\n\n  EventDispatcher.prototype.hasListeners = function () {\n    return this._listeners.length !== 0;\n  };\n  /**\r\n   * Checks if this particular event dispatcher has any particular listeners set.\r\n   *\r\n   * @return Has particular event listeners?\r\n   */\n\n\n  EventDispatcher.prototype.hasListenersByType = function (type) {\n    return $array.any(this._listeners, function (x) {\n      return (x.type === null || x.type === type) && !x.killed;\n    });\n  };\n  /**\r\n   * Enable dispatching of events if they were previously disabled by\r\n   * `disable()`.\r\n   */\n\n\n  EventDispatcher.prototype.enable = function () {\n    this._enabled = true;\n  };\n  /**\r\n   * Disable dispatching of events until re-enabled by `enable()`.\r\n   */\n\n\n  EventDispatcher.prototype.disable = function () {\n    this._enabled = false;\n  };\n  /**\r\n   * Enable dispatching particular event, if it was disabled before by\r\n   * `disableType()`.\r\n   *\r\n   * @param type Event type\r\n   */\n\n\n  EventDispatcher.prototype.enableType = function (type) {\n    delete this._disabled[type];\n  };\n  /**\r\n   * Disable dispatching of events for a certain event type.\r\n   *\r\n   * Optionally, can set how many dispatches to skip before automatically\r\n   * re-enabling the dispatching.\r\n   *\r\n   * @param type    Event type\r\n   * @param amount  Number of event dispatches to skip\r\n   */\n\n\n  EventDispatcher.prototype.disableType = function (type, amount) {\n    if (amount === void 0) {\n      amount = Infinity;\n    }\n\n    this._disabled[type] = amount;\n  };\n  /**\r\n   * Removes listener from dispatcher.\r\n   *\r\n   * Will throw an exception if such listener does not exists.\r\n   *\r\n   * @param listener Listener to remove\r\n   */\n\n\n  EventDispatcher.prototype._removeListener = function (listener) {\n    if (this._iterating === 0) {\n      var index = this._listeners.indexOf(listener);\n\n      if (index === -1) {\n        throw new Error(\"Invalid state: could not remove listener\");\n      }\n\n      this._listeners.splice(index, 1);\n    } else {\n      this._killed.push(listener);\n    }\n  };\n  /**\r\n   * Removes existing listener by certain parameters.\r\n   *\r\n   * @param once         Listener's once setting\r\n   * @param type         Listener's type\r\n   * @param callback     Callback function\r\n   * @param context      Callback context\r\n   */\n\n\n  EventDispatcher.prototype._removeExistingListener = function (once, type, callback, context) {\n    if (this._disposed) {\n      throw new Error(\"EventDispatcher is disposed\");\n    }\n\n    this._eachListener(function (info) {\n      if (info.once === once && // TODO is this correct ?\n      info.type === type && (callback == null || info.callback === callback) && info.context === context) {\n        info.disposer.dispose();\n      }\n    });\n  };\n  /**\r\n   * Checks if dispatching for particular event type is enabled.\r\n   *\r\n   * @param type  Event type\r\n   * @return Enabled?\r\n   */\n\n\n  EventDispatcher.prototype.isEnabled = function (type) {\n    if (this._disposed) {\n      throw new Error(\"EventDispatcher is disposed\");\n    } // TODO is this check correct ?\n\n\n    return this._enabled && this._listeners.length > 0 && this.hasListenersByType(type) && this._disabled[type] == null;\n  };\n  /**\r\n   * Checks if there's already a listener with specific parameters.\r\n   *\r\n   * @param type      Listener's type\r\n   * @param callback  Callback function\r\n   * @param context   Callback context\r\n   * @return Has listener?\r\n   */\n\n\n  EventDispatcher.prototype.has = function (type, callback, context) {\n    var index = $array.findIndex(this._listeners, function (info) {\n      return info.once !== true && // Ignoring \"once\" listeners\n      info.type === type && (callback == null || info.callback === callback) && info.context === context;\n    });\n    return index !== -1;\n  };\n  /**\r\n   * Checks whether event of the particular type should be dispatched.\r\n   *\r\n   * @param type  Event type\r\n   * @return Dispatch?\r\n   */\n\n\n  EventDispatcher.prototype._shouldDispatch = function (type) {\n    if (this._disposed) {\n      throw new Error(\"EventDispatcher is disposed\");\n    }\n\n    var count = this._disabled[type];\n\n    if (!$type.isNumber(count)) {\n      return this._enabled;\n    } else {\n      if (count <= 1) {\n        delete this._disabled[type];\n      } else {\n        --this._disabled[type];\n      }\n\n      return false;\n    }\n  };\n  /**\r\n   * [_eachListener description]\r\n   *\r\n   * All of this extra code is needed when a listener is removed while iterating\r\n   *\r\n   * @todo Description\r\n   * @param fn [description]\r\n   */\n\n\n  EventDispatcher.prototype._eachListener = function (fn) {\n    var _this = this;\n\n    ++this._iterating;\n\n    try {\n      $array.each(this._listeners, fn);\n    } finally {\n      --this._iterating; // TODO should this be inside or outside the finally ?\n\n      if (this._iterating === 0 && this._killed.length !== 0) {\n        // Remove killed listeners\n        $array.each(this._killed, function (killed) {\n          _this._removeListener(killed);\n        });\n        this._killed.length = 0;\n      }\n    }\n  };\n  /**\r\n   * Dispatches an event immediately without waiting for next cycle.\r\n   *\r\n   * @param type   Event type\r\n   * @param event  Event object\r\n   * @todo automatically add in type and target properties if they are missing\r\n   */\n\n\n  EventDispatcher.prototype.dispatchImmediately = function (type, event) {\n    if (this._shouldDispatch(type)) {\n      // TODO check if it's faster to use an object of listeners rather than a single big array\n      // TODO if the function throws, maybe it should keep going ?\n      this._eachListener(function (listener) {\n        if (!listener.killed && (listener.type === null || listener.type === type)) {\n          listener.dispatch(type, event);\n        }\n      });\n    }\n  };\n  /**\r\n   * Shelves the event to be dispatched within next update cycle.\r\n   *\r\n   * @param type   Event type\r\n   * @param event  Event object\r\n   * @todo automatically add in type and target properties if they are missing\r\n   */\n\n\n  EventDispatcher.prototype.dispatch = function (type, event) {\n    if (this._shouldDispatch(type)) {\n      this._eachListener(function (listener) {\n        // TODO check if it's faster to use an object of listeners rather than a single big array\n        if (!listener.killed && (listener.type === null || listener.type === type)) {\n          // TODO if the function throws, maybe it should keep going ?\n          // TODO dispatch during the update cycle, rather than using whenIdle\n          $async.whenIdle(function () {\n            if (!listener.killed) {\n              listener.dispatch(type, event);\n            }\n          });\n        }\n      });\n    }\n  };\n  /**\r\n   * Creates, catalogs and returns an [[EventListener]].\r\n   *\r\n   * Event listener can be disposed.\r\n   *\r\n   * @param once         Listener's once setting\r\n   * @param type         Listener's type\r\n   * @param callback     Callback function\r\n   * @param context      Callback context\r\n   * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n   * @param dispatch\r\n   * @returns An event listener\r\n   */\n\n\n  EventDispatcher.prototype._on = function (once, type, callback, context, shouldClone, dispatch) {\n    var _this = this;\n\n    if (this._disposed) {\n      throw new Error(\"EventDispatcher is disposed\");\n    }\n\n    this._removeExistingListener(once, type, callback, context);\n\n    var info = {\n      type: type,\n      callback: callback,\n      context: context,\n      shouldClone: shouldClone,\n      dispatch: dispatch,\n      killed: false,\n      once: once,\n      disposer: new Disposer(function () {\n        info.killed = true;\n\n        _this._removeListener(info);\n      })\n    };\n\n    this._listeners.push(info);\n\n    return info;\n  };\n  /**\r\n   * Creates an event listener to be invoked on **any** event.\r\n   *\r\n   * @param callback     Callback function\r\n   * @param context      Callback context\r\n   * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n   * @returns A disposable event listener\r\n   * @todo what if `listen` is called on the same function twice ?\r\n   */\n\n\n  EventDispatcher.prototype.onAll = function (callback, context, shouldClone) {\n    if (shouldClone === void 0) {\n      shouldClone = true;\n    }\n\n    return this._on(false, null, callback, context, shouldClone, function (type, event) {\n      return callback.call(context, type, event);\n    }).disposer;\n  };\n  /**\r\n   * Creates an event listener to be invoked on a specific event type.\r\n   *\r\n   * ```TypeScript\r\n   * series.events.on(\"hidden\", (ev) => {\r\n   *   console.log(\"Series hidden: \" + ev.target.name);\r\n   * }, this);\r\n   * ```\r\n   * ```JavaScript\r\n   * series.events.on(\"hidden\", function(ev) {\r\n   *   console.log(\"Series hidden: \" + ev.target.name);\r\n   * }, this);\r\n   * ```\r\n   * ```JSON\r\n   * {\r\n   *   // ...\r\n   *   \"series\": [{\r\n   *     // ...\r\n   *     \"events\": {\r\n   *     \t\"hidden\": function(ev) {\r\n   *     \t  console.log(\"Series hidden: \" + ev.target.name);\r\n   *     \t}\r\n   *     }\r\n   *   }]\r\n   * }\r\n   * ```\r\n   *\r\n   * The above will invoke our custom event handler whenever series we put\r\n   * event on is hidden.\r\n   *\r\n   * @param type         Listener's type\r\n   * @param callback     Callback function\r\n   * @param context      Callback context\r\n   * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n   * @returns A disposable event listener\r\n   * @todo what if `listen` is called on the same function twice ?\r\n   */\n\n\n  EventDispatcher.prototype.on = function (type, callback, context, shouldClone) {\n    if (shouldClone === void 0) {\n      shouldClone = true;\n    }\n\n    return this._on(false, type, callback, context, shouldClone, function (type, event) {\n      return callback.call(context, event);\n    }).disposer;\n  };\n  /**\r\n   * Creates an event listener to be invoked on a specific event type once.\r\n   *\r\n   * Once the event listener is invoked, it is automatically disposed.\r\n   *\r\n   * ```TypeScript\r\n   * series.events.on(\"hidden\", (ev) => {\r\n   *   console.log(\"Series hidden: \" + ev.target.name);\r\n   * }, this);\r\n   * ```\r\n   * ```JavaScript\r\n   * series.events.on(\"hidden\", function(ev) {\r\n   *   console.log(\"Series hidden: \" + ev.target.name);\r\n   * }, this);\r\n   * ```\r\n   * ```JSON\r\n   * {\r\n   *   // ...\r\n   *   \"series\": [{\r\n   *     // ...\r\n   *     \"events\": {\r\n   *     \t\"hidden\": function(ev) {\r\n   *     \t  console.log(\"Series hidden: \" + ev.target.name);\r\n   *     \t}\r\n   *     }\r\n   *   }]\r\n   * }\r\n   * ```\r\n   *\r\n   * The above will invoke our custom event handler the first time series we\r\n   * put event on is hidden.\r\n   *\r\n   * @param type         Listener's type\r\n   * @param callback     Callback function\r\n   * @param context      Callback context\r\n   * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n   * @returns A disposable event listener\r\n   * @todo what if `listen` is called on the same function twice ?\r\n   */\n\n\n  EventDispatcher.prototype.once = function (type, callback, context, shouldClone) {\n    if (shouldClone === void 0) {\n      shouldClone = true;\n    }\n\n    var x = this._on(true, type, callback, context, shouldClone, function (type, event) {\n      x.disposer.dispose();\n      callback.call(context, event);\n    }); // TODO maybe this should return a different Disposer ?\n\n\n    return x.disposer;\n  };\n  /**\r\n   * Removes the event listener with specific parameters.\r\n   *\r\n   * @param type         Listener's type\r\n   * @param callback     Callback function\r\n   * @param context      Callback context\r\n   */\n\n\n  EventDispatcher.prototype.off = function (type, callback, context) {\n    this._removeExistingListener(false, type, callback, context);\n  };\n  /**\r\n   * Copies all dispatcher parameters, including listeners, from another event\r\n   * dispatcher.\r\n   *\r\n   * @param source Source event dispatcher\r\n   */\n\n\n  EventDispatcher.prototype.copyFrom = function (source) {\n    var _this = this;\n\n    if (this._disposed) {\n      throw new Error(\"EventDispatcher is disposed\");\n    }\n\n    if (source === this) {\n      throw new Error(\"Cannot copyFrom the same TargetedEventDispatcher\");\n    }\n\n    $array.each(source._listeners, function (x) {\n      // TODO is this correct ?\n      if (!x.killed && x.shouldClone) {\n        if (x.type === null) {\n          _this.onAll(x.callback, x.context);\n        } else if (x.once) {\n          _this.once(x.type, x.callback, x.context);\n        } else {\n          _this.on(x.type, x.callback, x.context);\n        }\n      }\n    });\n  };\n\n  return EventDispatcher;\n}();\n\nexport { EventDispatcher };\n/**\r\n * A version of the [[EventDispatcher]] that dispatches events for a specific\r\n * target object.\r\n *\r\n * @important\r\n */\n\nvar TargetedEventDispatcher =\n/** @class */\nfunction (_super) {\n  __extends(TargetedEventDispatcher, _super);\n  /**\r\n   * Constructor\r\n   *\r\n   * @param target Event dispatcher target\r\n   */\n\n\n  function TargetedEventDispatcher(target) {\n    var _this = _super.call(this) || this;\n\n    _this.target = target;\n    return _this;\n  }\n  /**\r\n   * Copies all dispatcher parameters, including listeners, from another event\r\n   * dispatcher.\r\n   *\r\n   * @param source Source event dispatcher\r\n   */\n\n\n  TargetedEventDispatcher.prototype.copyFrom = function (source) {\n    var _this = this;\n\n    if (this._disposed) {\n      throw new Error(\"EventDispatcher is disposed\");\n    }\n\n    if (source === this) {\n      throw new Error(\"Cannot copyFrom the same TargetedEventDispatcher\");\n    }\n\n    $array.each(source._listeners, function (x) {\n      // TODO very hacky\n      if (x.context === source.target) {\n        return;\n      } // TODO is this correct ?\n\n\n      if (!x.killed && x.shouldClone) {\n        if (x.type === null) {\n          _this.onAll(x.callback, x.context);\n        } else if (x.once) {\n          _this.once(x.type, x.callback, x.context);\n        } else {\n          _this.on(x.type, x.callback, x.context);\n        }\n      }\n    });\n  };\n\n  return TargetedEventDispatcher;\n}(EventDispatcher);\n\nexport { TargetedEventDispatcher };","map":{"version":3,"sources":["../../../../../src/.internal/core/utils/EventDispatcher.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Event Dispatcher module is used for registering listeners and dispatching\r\n * events across amCharts system.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Disposer, IDisposer } from \"./Disposer\";\r\nimport * as $array from \"./Array\";\r\nimport * as $async from \"./AsyncPending\";\r\nimport * as $type from \"./Type\";\r\n\r\n/**\r\n * Defines a universal type for the event object.\r\n */\r\nexport type AMEvent<Target, T> = {\r\n\t[K in keyof T]: { type: K, target: Target } & T[K];\r\n};\r\n\r\n/**\r\n * A universal interface for event listeners.\r\n */\r\nexport interface EventListener<T> {\r\n\tkilled: boolean;\r\n\tonce: boolean;\r\n\ttype: any;\r\n\tcallback: any;\r\n\tcontext: any;\r\n\tshouldClone: boolean;\r\n\tdispatch: any;\r\n\tdisposer: IDisposer;\r\n}\r\n\r\n/*export interface IEventDispatcher<T> {\r\n\tisDisposed(): boolean;\r\n\tdispose(): void;\r\n\thasListeners(): boolean;\r\n\tenable(): void;\r\n\tdisable(): void;\r\n\tenableType<Key extends keyof T>(type: Key): void;\r\n\tdisableType<Key extends keyof T>(type: Key, amount?: number): void;\r\n\tisEnabled<Key extends keyof T>(type: Key): boolean;\r\n\thas<C, Key extends keyof T>(type: Key, callback?: (this: C, event: T[Key]) => void, context?: C): boolean;\r\n\tdispatchImmediately<Key extends keyof T>(type: Key, event: T[Key]): void;\r\n\tdispatch<Key extends keyof T>(type: Key, event: T[Key]): void;\r\n\tonAll<C, Key extends keyof T>(callback: (this: C, type: Key, event: T[Key]) => void, context?: C): IDisposer;\r\n\ton<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): IDisposer;\r\n\tonce<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): IDisposer;\r\n\toff<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): void;\r\n\toff<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): void;\r\n\tcopyFrom(source: this): void;\r\n}*/\r\n\r\n/**\r\n * Universal Event Dispatcher.\r\n *\r\n * @important\r\n */\r\nexport class EventDispatcher<T> implements IDisposer {\r\n\r\n\tprotected _listeners: Array<EventListener<T>>;\r\n\tprotected _killed: Array<EventListener<T>>;\r\n\tprotected _disabled: { [key in keyof T]?: number };\r\n\tprotected _iterating: number;\r\n\tprotected _enabled: boolean;\r\n\tprotected _disposed: boolean;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tthis._listeners = [];\r\n\t\tthis._killed = [];\r\n\t\tthis._disabled = {};\r\n\t\tthis._iterating = 0;\r\n\t\tthis._enabled = true;\r\n\t\tthis._disposed = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if this object has been already disposed.\r\n\t *\r\n\t * @return Disposed?\r\n\t */\r\n\tpublic isDisposed(): boolean {\r\n\t\treturn this._disposed;\r\n\t}\r\n\r\n\t/**\r\n\t * Dispose (destroy) this object.\r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tif (!this._disposed) {\r\n\t\t\tthis._disposed = true;\r\n\r\n\t\t\tconst a = this._listeners;\r\n\r\n\t\t\tthis._iterating = 1;\r\n\t\t\tthis._listeners = <any>null;\r\n\t\t\tthis._disabled = <any>null;\r\n\r\n\t\t\ttry {\r\n\t\t\t\t$array.each(a, (x) => {\r\n\t\t\t\t\tx.disposer.dispose();\r\n\t\t\t\t});\r\n\r\n\t\t\t} finally {\r\n\t\t\t\tthis._killed = <any>null;\r\n\t\t\t\tthis._iterating = <any>null;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if this particular event dispatcher has any listeners set.\r\n\t *\r\n\t * @return Has listeners?\r\n\t */\r\n\tpublic hasListeners(): boolean {\r\n\t\treturn this._listeners.length !== 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if this particular event dispatcher has any particular listeners set.\r\n\t *\r\n\t * @return Has particular event listeners?\r\n\t */\r\n\tpublic hasListenersByType<Key extends keyof T>(type: Key): boolean {\r\n\t\treturn $array.any(this._listeners, (x) => (x.type === null || x.type === type) && !x.killed);\r\n\t}\r\n\r\n\t/**\r\n\t * Enable dispatching of events if they were previously disabled by\r\n\t * `disable()`.\r\n\t */\r\n\tpublic enable(): void {\r\n\t\tthis._enabled = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Disable dispatching of events until re-enabled by `enable()`.\r\n\t */\r\n\tpublic disable(): void {\r\n\t\tthis._enabled = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Enable dispatching particular event, if it was disabled before by\r\n\t * `disableType()`.\r\n\t *\r\n\t * @param type Event type\r\n\t */\r\n\tpublic enableType<Key extends keyof T>(type: Key): void {\r\n\t\tdelete this._disabled[type];\r\n\t}\r\n\r\n\t/**\r\n\t * Disable dispatching of events for a certain event type.\r\n\t *\r\n\t * Optionally, can set how many dispatches to skip before automatically\r\n\t * re-enabling the dispatching.\r\n\t *\r\n\t * @param type    Event type\r\n\t * @param amount  Number of event dispatches to skip\r\n\t */\r\n\tpublic disableType<Key extends keyof T>(type: Key, amount: number = Infinity): void {\r\n\t\tthis._disabled[type] = amount;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes listener from dispatcher.\r\n\t *\r\n\t * Will throw an exception if such listener does not exists.\r\n\t *\r\n\t * @param listener Listener to remove\r\n\t */\r\n\tprotected _removeListener(listener: EventListener<T>): void {\r\n\t\tif (this._iterating === 0) {\r\n\t\t\tconst index = this._listeners.indexOf(listener);\r\n\r\n\t\t\tif (index === -1) {\r\n\t\t\t\tthrow new Error(\"Invalid state: could not remove listener\");\r\n\t\t\t}\r\n\r\n\t\t\tthis._listeners.splice(index, 1);\r\n\r\n\t\t} else {\r\n\t\t\tthis._killed.push(listener);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes existing listener by certain parameters.\r\n\t *\r\n\t * @param once         Listener's once setting\r\n\t * @param type         Listener's type\r\n\t * @param callback     Callback function\r\n\t * @param context      Callback context\r\n\t */\r\n\tprotected _removeExistingListener<A, B, Key extends keyof T>(once: boolean, type: Key | null, callback?: A, context?: B): void {\r\n\t\tif (this._disposed) {\r\n\t\t\tthrow new Error(\"EventDispatcher is disposed\");\r\n\t\t}\r\n\r\n\t\tthis._eachListener((info) => {\r\n\t\t\tif (info.once === once && // TODO is this correct ?\r\n\t\t\t\tinfo.type === type &&\r\n\t\t\t\t(callback == null || info.callback === callback) &&\r\n\t\t\t\tinfo.context === context) {\r\n\t\t\t\tinfo.disposer.dispose();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if dispatching for particular event type is enabled.\r\n\t *\r\n\t * @param type  Event type\r\n\t * @return Enabled?\r\n\t */\r\n\tpublic isEnabled<Key extends keyof T>(type: Key): boolean {\r\n\t\tif (this._disposed) {\r\n\t\t\tthrow new Error(\"EventDispatcher is disposed\");\r\n\t\t}\r\n\r\n\t\t// TODO is this check correct ?\r\n\t\treturn this._enabled && this._listeners.length > 0 && this.hasListenersByType(type) && this._disabled[type] == null;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if there's already a listener with specific parameters.\r\n\t *\r\n\t * @param type      Listener's type\r\n\t * @param callback  Callback function\r\n\t * @param context   Callback context\r\n\t * @return Has listener?\r\n\t */\r\n\tpublic has<C, Key extends keyof T>(type: Key, callback?: (this: C, event: T[Key]) => void, context?: C): boolean {\r\n\t\tconst index = $array.findIndex(this._listeners, (info) => {\r\n\t\t\treturn info.once !== true && // Ignoring \"once\" listeners\r\n\t\t\t\tinfo.type === type &&\r\n\t\t\t\t(callback == null || info.callback === callback) &&\r\n\t\t\t\tinfo.context === context;\r\n\t\t});\r\n\r\n\t\treturn index !== -1;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether event of the particular type should be dispatched.\r\n\t *\r\n\t * @param type  Event type\r\n\t * @return Dispatch?\r\n\t */\r\n\tprotected _shouldDispatch<Key extends keyof T>(type: Key): boolean {\r\n\t\tif (this._disposed) {\r\n\t\t\tthrow new Error(\"EventDispatcher is disposed\");\r\n\t\t}\r\n\r\n\t\tconst count = this._disabled[type];\r\n\r\n\t\tif (!$type.isNumber(count)) {\r\n\t\t\treturn this._enabled;\r\n\r\n\t\t} else {\r\n\t\t\tif (count <= 1) {\r\n\t\t\t\tdelete this._disabled[type];\r\n\r\n\t\t\t} else {\r\n\t\t\t\t--this._disabled[type];\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [_eachListener description]\r\n\t *\r\n\t * All of this extra code is needed when a listener is removed while iterating\r\n\t *\r\n\t * @todo Description\r\n\t * @param fn [description]\r\n\t */\r\n\tprotected _eachListener(fn: (listener: EventListener<T>) => void): void {\r\n\t\t++this._iterating;\r\n\r\n\t\ttry {\r\n\t\t\t$array.each(this._listeners, fn);\r\n\r\n\t\t} finally {\r\n\t\t\t--this._iterating;\r\n\r\n\t\t\t// TODO should this be inside or outside the finally ?\r\n\t\t\tif (this._iterating === 0 && this._killed.length !== 0) {\r\n\t\t\t\t// Remove killed listeners\r\n\t\t\t\t$array.each(this._killed, (killed) => {\r\n\t\t\t\t\tthis._removeListener(killed);\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis._killed.length = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Dispatches an event immediately without waiting for next cycle.\r\n\t *\r\n\t * @param type   Event type\r\n\t * @param event  Event object\r\n\t * @todo automatically add in type and target properties if they are missing\r\n\t */\r\n\tpublic dispatchImmediately<Key extends keyof T>(type: Key, event: T[Key]): void {\r\n\t\tif (this._shouldDispatch(type)) {\r\n\t\t\t// TODO check if it's faster to use an object of listeners rather than a single big array\r\n\t\t\t// TODO if the function throws, maybe it should keep going ?\r\n\t\t\tthis._eachListener((listener) => {\r\n\t\t\t\tif (!listener.killed && (listener.type === null || listener.type === type)) {\r\n\t\t\t\t\tlistener.dispatch(type, event);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shelves the event to be dispatched within next update cycle.\r\n\t *\r\n\t * @param type   Event type\r\n\t * @param event  Event object\r\n\t * @todo automatically add in type and target properties if they are missing\r\n\t */\r\n\tpublic dispatch<Key extends keyof T>(type: Key, event: T[Key]): void {\r\n\t\tif (this._shouldDispatch(type)) {\r\n\t\t\tthis._eachListener((listener) => {\r\n\t\t\t\t// TODO check if it's faster to use an object of listeners rather than a single big array\r\n\t\t\t\tif (!listener.killed && (listener.type === null || listener.type === type)) {\r\n\t\t\t\t\t// TODO if the function throws, maybe it should keep going ?\r\n\t\t\t\t\t// TODO dispatch during the update cycle, rather than using whenIdle\r\n\t\t\t\t\t$async.whenIdle(() => {\r\n\t\t\t\t\t\tif (!listener.killed) {\r\n\t\t\t\t\t\t\tlistener.dispatch(type, event);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates, catalogs and returns an [[EventListener]].\r\n\t *\r\n\t * Event listener can be disposed.\r\n\t *\r\n\t * @param once         Listener's once setting\r\n\t * @param type         Listener's type\r\n\t * @param callback     Callback function\r\n\t * @param context      Callback context\r\n\t * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n\t * @param dispatch\r\n\t * @returns An event listener\r\n\t */\r\n\tprotected _on<A, B, Key extends keyof T>(once: boolean, type: Key | null, callback: A, context: B, shouldClone: boolean, dispatch: (type: Key, event: T[Key]) => void): EventListener<T> {\r\n\t\tif (this._disposed) {\r\n\t\t\tthrow new Error(\"EventDispatcher is disposed\");\r\n\t\t}\r\n\r\n\t\tthis._removeExistingListener(once, type, callback, context);\r\n\r\n\t\tconst info: EventListener<T> = {\r\n\t\t\ttype: type,\r\n\t\t\tcallback: callback,\r\n\t\t\tcontext: context,\r\n\t\t\tshouldClone: shouldClone,\r\n\t\t\tdispatch: <any>dispatch,\r\n\t\t\tkilled: false,\r\n\t\t\tonce: once,\r\n\t\t\tdisposer: new Disposer(() => {\r\n\t\t\t\tinfo.killed = true;\r\n\t\t\t\tthis._removeListener(info);\r\n\t\t\t})\r\n\t\t};\r\n\r\n\t\tthis._listeners.push(info);\r\n\r\n\t\treturn info;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates an event listener to be invoked on **any** event.\r\n\t *\r\n\t * @param callback     Callback function\r\n\t * @param context      Callback context\r\n\t * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n\t * @returns A disposable event listener\r\n\t * @todo what if `listen` is called on the same function twice ?\r\n\t */\r\n\tpublic onAll<C, Key extends keyof T>(callback: (this: C, type: Key, event: T[Key]) => void, context?: C, shouldClone: boolean = true): IDisposer {\r\n\t\treturn this._on(false, null, callback, context, shouldClone, (type, event) => callback.call(context, type, event)).disposer;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates an event listener to be invoked on a specific event type.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.events.on(\"hidden\", (ev) => {\r\n\t *   console.log(\"Series hidden: \" + ev.target.name);\r\n\t * }, this);\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.events.on(\"hidden\", function(ev) {\r\n\t *   console.log(\"Series hidden: \" + ev.target.name);\r\n\t * }, this);\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"events\": {\r\n\t *     \t\"hidden\": function(ev) {\r\n\t *     \t  console.log(\"Series hidden: \" + ev.target.name);\r\n\t *     \t}\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * The above will invoke our custom event handler whenever series we put\r\n\t * event on is hidden.\r\n\t *\r\n\t * @param type         Listener's type\r\n\t * @param callback     Callback function\r\n\t * @param context      Callback context\r\n\t * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n\t * @returns A disposable event listener\r\n\t * @todo what if `listen` is called on the same function twice ?\r\n\t */\r\n\tpublic on<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C, shouldClone: boolean = true): IDisposer {\r\n\t\treturn this._on(false, type, callback, context, shouldClone, (type, event) => callback.call(context, event)).disposer;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates an event listener to be invoked on a specific event type once.\r\n\t *\r\n\t * Once the event listener is invoked, it is automatically disposed.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.events.on(\"hidden\", (ev) => {\r\n\t *   console.log(\"Series hidden: \" + ev.target.name);\r\n\t * }, this);\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.events.on(\"hidden\", function(ev) {\r\n\t *   console.log(\"Series hidden: \" + ev.target.name);\r\n\t * }, this);\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"events\": {\r\n\t *     \t\"hidden\": function(ev) {\r\n\t *     \t  console.log(\"Series hidden: \" + ev.target.name);\r\n\t *     \t}\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * The above will invoke our custom event handler the first time series we\r\n\t * put event on is hidden.\r\n\t *\r\n\t * @param type         Listener's type\r\n\t * @param callback     Callback function\r\n\t * @param context      Callback context\r\n\t * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n\t * @returns A disposable event listener\r\n\t * @todo what if `listen` is called on the same function twice ?\r\n\t */\r\n\tpublic once<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C, shouldClone: boolean = true): IDisposer {\r\n\t\tconst x = this._on(true, type, callback, context, shouldClone, (type, event) => {\r\n\t\t\tx.disposer.dispose();\r\n\t\t\tcallback.call(context, event)\r\n\t\t});\r\n\r\n\t\t// TODO maybe this should return a different Disposer ?\r\n\t\treturn x.disposer;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes the event listener with specific parameters.\r\n\t *\r\n\t * @param type         Listener's type\r\n\t * @param callback     Callback function\r\n\t * @param context      Callback context\r\n\t */\r\n\tpublic off<C, Key extends keyof T>(type: Key, callback?: (this: C, event: T[Key]) => void, context?: C): void {\r\n\t\tthis._removeExistingListener(false, type, callback, context);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all dispatcher parameters, including listeners, from another event\r\n\t * dispatcher.\r\n\t *\r\n\t * @param source Source event dispatcher\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tif (this._disposed) {\r\n\t\t\tthrow new Error(\"EventDispatcher is disposed\");\r\n\t\t}\r\n\r\n\t\tif (source === this) {\r\n\t\t\tthrow new Error(\"Cannot copyFrom the same TargetedEventDispatcher\");\r\n\t\t}\r\n\r\n\t\t$array.each(source._listeners, (x) => {\r\n\t\t\t// TODO is this correct ?\r\n\t\t\tif (!x.killed && x.shouldClone) {\r\n\t\t\t\tif (x.type === null) {\r\n\t\t\t\t\tthis.onAll(x.callback, x.context);\r\n\r\n\t\t\t\t} else if (x.once) {\r\n\t\t\t\t\tthis.once(x.type, x.callback, x.context);\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.on(x.type, x.callback, x.context);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * A version of the [[EventDispatcher]] that dispatches events for a specific\r\n * target object.\r\n *\r\n * @important\r\n */\r\nexport class TargetedEventDispatcher<Target, T> extends EventDispatcher<T> {\r\n\r\n\t/**\r\n\t * A target object which is originating events using this dispatcher.\r\n\t */\r\n\tpublic target: Target;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t *\r\n\t * @param target Event dispatcher target\r\n\t */\r\n\tconstructor(target: Target) {\r\n\t\tsuper();\r\n\t\tthis.target = target;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all dispatcher parameters, including listeners, from another event\r\n\t * dispatcher.\r\n\t *\r\n\t * @param source Source event dispatcher\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tif (this._disposed) {\r\n\t\t\tthrow new Error(\"EventDispatcher is disposed\");\r\n\t\t}\r\n\r\n\t\tif (source === this) {\r\n\t\t\tthrow new Error(\"Cannot copyFrom the same TargetedEventDispatcher\");\r\n\t\t}\r\n\r\n\t\t$array.each(source._listeners, (x) => {\r\n\t\t\t// TODO very hacky\r\n\t\t\tif (x.context === source.target) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// TODO is this correct ?\r\n\t\t\tif (!x.killed && x.shouldClone) {\r\n\t\t\t\tif (x.type === null) {\r\n\t\t\t\t\tthis.onAll(x.callback, x.context);\r\n\r\n\t\t\t\t} else if (x.once) {\r\n\t\t\t\t\tthis.once(x.type, x.callback, x.context);\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.on(x.type, x.callback, x.context);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}