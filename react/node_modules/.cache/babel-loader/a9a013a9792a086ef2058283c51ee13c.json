{"ast":null,"code":"/**\r\n * Functionality for drawing circles.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Sprite } from \"../Sprite\";\nimport { percent } from \"../utils/Percent\";\nimport { registry } from \"../Registry\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $math from \"../utils/Math\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Used to create a circle\r\n * @see {@link ICircleEvents} for a list of available events\r\n * @see {@link ICircleAdapters} for a list of available Adapters\r\n */\n\nvar Circle =\n/** @class */\nfunction (_super) {\n  __extends(Circle, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Circle() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Circle\";\n    _this.element = _this.paper.add(\"circle\");\n\n    _this.setPercentProperty(\"radius\", percent(100));\n\n    _this.setPropertyValue(\"horizontalCenter\", \"middle\");\n\n    _this.setPropertyValue(\"verticalCenter\", \"middle\");\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the circle.\r\n   */\n\n\n  Circle.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    this.element.attr({\n      \"r\": this.pixelRadius\n    });\n  };\n\n  Object.defineProperty(Circle.prototype, \"radius\", {\n    /**\r\n     * @return Radius\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"radius\");\n    },\n\n    /**\r\n     * Radius of the circle.\r\n     *\r\n     * Can be either absolute (pixels) or relative ([Percent]).\r\n     *\r\n     * @param value  Radius\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"radius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Circle.prototype, \"pixelRadius\", {\n    /**\r\n     * Radius of the circle in pixels.\r\n     *\r\n     * This is a read-only property. To set radius in pixels, use `radius`\r\n     * property.\r\n     *\r\n     * @readonly\r\n     * @return Radius (px)\r\n     */\n    get: function get() {\n      return $utils.relativeToValue(this.radius, $math.min(this.innerWidth / 2, this.innerHeight / 2));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates bounding box.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Circle.prototype.measureElement = function () {\n    var pixelRadius = this.pixelRadius;\n    this._bbox = {\n      x: -pixelRadius,\n      y: -pixelRadius,\n      width: pixelRadius * 2,\n      height: pixelRadius * 2\n    };\n  };\n\n  return Circle;\n}(Sprite);\n\nexport { Circle };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Circle\"] = Circle;","map":{"version":3,"sources":["../../../../../src/.internal/core/elements/Circle.ts"],"names":[],"mappings":"AAAA;;;;AAIA;;;;;;;AAMA,SAAS,MAAT,QAA0E,WAA1E;AACA,SAAS,OAAT,QAAiC,kBAAjC;AACA,SAAS,QAAT,QAAyB,aAAzB;AACA,OAAO,KAAK,MAAZ,MAAwB,gBAAxB;AACA,OAAO,KAAK,KAAZ,MAAuB,eAAvB;AAqCA;;;;;;;AAOA;;;;;;AAKA,IAAA,MAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA4B,EAAA,SAAA,CAAA,MAAA,EAAA,MAAA,CAAA;AAiB3B;;;;;AAGA,WAAA,MAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADR;;AAGC,IAAA,KAAI,CAAC,SAAL,GAAiB,QAAjB;AACA,IAAA,KAAI,CAAC,OAAL,GAAe,KAAI,CAAC,KAAL,CAAW,GAAX,CAAe,QAAf,CAAf;;AAEA,IAAA,KAAI,CAAC,kBAAL,CAAwB,QAAxB,EAAkC,OAAO,CAAC,GAAD,CAAzC;;AACA,IAAA,KAAI,CAAC,gBAAL,CAAsB,kBAAtB,EAA0C,QAA1C;;AACA,IAAA,KAAI,CAAC,gBAAL,CAAsB,gBAAtB,EAAwC,QAAxC;;AACA,IAAA,KAAI,CAAC,UAAL;;;AACA;AAED;;;;;AAGU,EAAA,MAAA,CAAA,SAAA,CAAA,IAAA,GAAV,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,IAAN,CAAU,IAAV,CAAU,IAAV;;AACA,SAAK,OAAL,CAAa,IAAb,CAAkB;AAAE,WAAK,KAAK;AAAZ,KAAlB;AACA,GAHS;;AAYV,EAAA,MAAA,CAAA,cAAA,CAAW,MAAA,CAAA,SAAX,EAAW,QAAX,EAAiB;AAIjB;;;SAGA,eAAA;AACC,aAAO,KAAK,gBAAL,CAAsB,QAAtB,CAAP;AACA,KATgB;;AAPjB;;;;;;;SAOA,aAAkB,KAAlB,EAAyC;AACxC,WAAK,kBAAL,CAAwB,QAAxB,EAAkC,KAAlC,EAAyC,IAAzC,EAA+C,KAA/C,EAAsD,EAAtD,EAA0D,KAA1D;AACA,KAFgB;oBAAA;;AAAA,GAAjB;AAoBA,EAAA,MAAA,CAAA,cAAA,CAAW,MAAA,CAAA,SAAX,EAAW,aAAX,EAAsB;AATtB;;;;;;;;;SASA,eAAA;AACC,aAAO,MAAM,CAAC,eAAP,CAAuB,KAAK,MAA5B,EAAoC,KAAK,CAAC,GAAN,CAAU,KAAK,UAAL,GAAkB,CAA5B,EAA+B,KAAK,WAAL,GAAmB,CAAlD,CAApC,CAAP;AACA,KAFqB;oBAAA;;AAAA,GAAtB;AAIA;;;;;;AAKO,EAAA,MAAA,CAAA,SAAA,CAAA,cAAA,GAAP,YAAA;AACC,QAAI,WAAW,GAAG,KAAK,WAAvB;AACA,SAAK,KAAL,GAAa;AACZ,MAAA,CAAC,EAAE,CAAC,WADQ;AAEZ,MAAA,CAAC,EAAE,CAAC,WAFQ;AAGZ,MAAA,KAAK,EAAE,WAAW,GAAG,CAHT;AAIZ,MAAA,MAAM,EAAE,WAAW,GAAG;AAJV,KAAb;AAMA,GARM;;AAUR,SAAA,MAAA;AAAC,CAtFD,CAA4B,MAA5B,CAAA;;;AAwFA;;;;;;;AAMA,QAAQ,CAAC,iBAAT,CAA2B,QAA3B,IAAuC,MAAvC","sourcesContent":["/**\r\n * Functionality for drawing circles.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../Sprite\";\r\nimport { percent, Percent } from \"../utils/Percent\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $math from \"../utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Circle]].\r\n */\r\nexport interface ICircleProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * Radius of the circle.\r\n\t *\r\n\t * Can be either absolute (pixels) or relative ([Percent]).\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Circle]].\r\n */\r\nexport interface ICircleEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Circle]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICircleAdapters extends ISpriteAdapters, ICircleProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a circle\r\n * @see {@link ICircleEvents} for a list of available events\r\n * @see {@link ICircleAdapters} for a list of available Adapters\r\n */\r\nexport class Circle extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICircleProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICircleAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICircleEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"Circle\";\r\n\t\tthis.element = this.paper.add(\"circle\");\r\n\r\n\t\tthis.setPercentProperty(\"radius\", percent(100));\r\n\t\tthis.setPropertyValue(\"horizontalCenter\", \"middle\");\r\n\t\tthis.setPropertyValue(\"verticalCenter\", \"middle\");\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the circle.\r\n\t */\r\n\tprotected draw(): void {\r\n\t\tsuper.draw();\r\n\t\tthis.element.attr({ \"r\": this.pixelRadius });\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the circle.\r\n\t *\r\n\t * Can be either absolute (pixels) or relative ([Percent]).\r\n\t *\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the circle in pixels.\r\n\t *\r\n\t * This is a read-only property. To set radius in pixels, use `radius`\r\n\t * property.\r\n\t *\r\n\t * @readonly\r\n\t * @return Radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeToValue(this.radius, $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Updates bounding box.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\t\tlet pixelRadius = this.pixelRadius;\r\n\t\tthis._bbox = {\r\n\t\t\tx: -pixelRadius,\r\n\t\t\ty: -pixelRadius,\r\n\t\t\twidth: pixelRadius * 2,\r\n\t\t\theight: pixelRadius * 2\r\n\t\t};\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Circle\"] = Circle;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}