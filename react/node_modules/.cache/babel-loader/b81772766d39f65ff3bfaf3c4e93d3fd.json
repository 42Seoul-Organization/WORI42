{"ast":null,"code":"import * as $math from \"./Math\";\nimport * as $type from \"./Type\";\n/**\r\n * ============================================================================\r\n * UTILITY FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Searches `array` for `value`.\r\n *\r\n * Returns -1 if not found.\r\n *\r\n * @param array  Source array\r\n * @param value  Value to search\r\n * @returns Index\r\n */\n\nexport function indexOf(array, value) {\n  var length = array.length;\n\n  for (var i = 0; i < length; ++i) {\n    // TODO handle NaN\n    if (array[i] === value) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n/**\r\n * Calls `test` for each element in `array`.\r\n *\r\n * If `test` returns `true` then it immediately returns `true`.\r\n *\r\n * If `test` returns `false` for all of the elements in `array` then it returns `false`.\r\n *\r\n * @param array  Source array\r\n * @param test   Function which is called on each element\r\n * @returns Whether `test` returned true or not\r\n */\n\nexport function any(array, test) {\n  var length = array.length;\n\n  for (var i = 0; i < length; ++i) {\n    if (test(array[i])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\r\n * Calls `fn` function for every member of array and returns a new array out\r\n * of all outputs.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n * @returns New array\r\n */\n\nexport function map(array, fn) {\n  var length = array.length;\n  var output = new Array(length);\n\n  for (var i = 0; i < length; ++i) {\n    output[i] = fn(array[i], i);\n  }\n\n  return output;\n}\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\n\nexport function each(array, fn) {\n  var length = array.length;\n\n  for (var i = 0; i < length; ++i) {\n    fn(array[i], i);\n  }\n}\n/**\r\n * Iterates through all items in array in reverse order and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\n\nexport function eachReverse(array, fn) {\n  var i = array.length;\n\n  while (i--) {\n    fn(array[i], i);\n  }\n}\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * If `fn` call evaluates to `false`, further iteration is cancelled.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\n\nexport function eachContinue(array, fn) {\n  var length = array.length;\n\n  for (var i = 0; i < length; ++i) {\n    if (!fn(array[i], i)) {\n      break;\n    }\n  }\n}\n/**\r\n * Shifts an item at `index` towards beginning of the array.\r\n *\r\n * @param array  Source array\r\n * @param index  Target element index\r\n */\n\nexport function shiftLeft(array, index) {\n  var length = array.length;\n\n  for (var i = index; i < length; ++i) {\n    array[i - index] = array[i];\n  }\n\n  array.length = length - index;\n}\n/**\r\n * Returns the last item of the array.\r\n *\r\n * @param array  Source array\r\n * @returns Last item\r\n */\n\nexport function last(array) {\n  var length = array.length;\n  return length ? array[length - 1] : undefined;\n}\n/**\r\n * Returns the first item of the array.\r\n *\r\n * @param array  Source array\r\n * @returns Last item\r\n */\n\nexport function first(array) {\n  return array[0];\n}\n/**\r\n * Inserts `element` into `array` at `index`.\r\n *\r\n * Caps `index` to be between `0` and `array.length`\r\n *\r\n * @param array    Source array\r\n * @param element  Item to insert\r\n * @param array    Index to insert item at\r\n */\n\nexport function insert(array, element, index) {\n  //if (array) {\n  index = $math.fitToRange(index, 0, array.length);\n  array.splice(index, 0, element); //}\n}\n/**\r\n * Removes all copies of `element` from `array` (if they exist) and then\r\n * inserts `element` at `index`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item\r\n * @param array    Index to move item to\r\n */\n\nexport function setIndex(array, element, index) {\n  remove(array, element);\n  insert(array, element, index);\n}\n/**\r\n * Pushes all of the elements from `input` into `array`.\r\n *\r\n * @param array  Output array\r\n * @param input  Input array\r\n */\n\nexport function pushAll(array, input) {\n  var length = input.length;\n\n  for (var i = 0; i < length; ++i) {\n    array.push(input[i]);\n  }\n}\n/**\r\n * Removes `element` from `array`.\r\n *\r\n * If there are multiple copies of `element`, they are all removed.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to remove\r\n */\n\nexport function remove(array, element) {\n  var found = false;\n  var index = array.indexOf(element);\n\n  if (index !== -1) {\n    found = true;\n    array.splice(index, 1);\n    var length_1 = array.length;\n\n    while (index < length_1) {\n      // TODO handle NaN\n      if (array[index] === element) {\n        array.splice(index, 1);\n        --length_1;\n      } else {\n        ++index;\n      }\n    }\n  }\n\n  return found;\n}\n/**\r\n * Adds an `element` to `array`.\r\n *\r\n * If array already contains and item like this, it is removed before adding\r\n * it again.\r\n *\r\n * Optionally `toIndex` can be specified to add element at specific index.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to add\r\n * @param array    Index to move item to\r\n */\n\nexport function move(array, element, toIndex) {\n  // @todo this implementation must be the same as the List.moveValue method\n  // @todo don't do anything if the desired index is the same as the current index\n  var index = indexOf(array, element); // @todo remove all old values rather than only the first ?\n\n  if (index !== -1) {\n    removeIndex(array, index);\n  }\n\n  if (toIndex == null) {\n    array.push(element);\n  } else {\n    insertIndex(array, toIndex, element);\n  }\n}\n/**\r\n * Inserts `element` into `array` at `index`.\r\n *\r\n * If `index` is not provided, it will insert `element` at the end of `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to add\r\n * @param array    Index to add item at\r\n */\n\nexport function add(array, element, index) {\n  // Append to the end if index is not set\n  if (!$type.isNumber(index)) {\n    array.push(element);\n  } // Add to the beginning of array if index is 0\n  else if (index === 0) {\n      array.unshift(element);\n    } // Add to indicated place if index is set\n    else {\n        array.splice(index, 0, element);\n      }\n}\n/**\r\n * Removes `element` from `array` (if it exists) and then inserts `element` at\r\n * `index`.\r\n *\r\n * If `index` is not provided, it will insert `element` at the end of `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to remove\r\n * @param array    Index to move item to\r\n */\n\nexport function replace(array, element, index) {\n  // check if exists\n  var ind = array.indexOf(element); // remove if exists\n\n  if (ind !== -1) {\n    array.splice(ind, 1);\n  } // add to end if index is not set\n\n\n  if (!$type.isNumber(index)) {\n    array.push(element);\n  } // add to indicated place if index is set\n  else {\n      array.splice(index, 0, element);\n    }\n}\n/**\r\n * Wraps `input` in an array, if it isn't already an array.\r\n *\r\n * @param input  Source value\r\n * @return An array\r\n */\n\nexport function toArray(input) {\n  if (Array.isArray(input)) {\n    return input;\n  } else {\n    return [input];\n  }\n}\n/**\r\n * Returns `true` if `element` exists in `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to search for\r\n * @returns Item in array?\r\n */\n\nexport function has(array, element) {\n  return indexOf(array, element) !== -1;\n}\n/**\r\n * Returns a shallow copy of `array`.\r\n *\r\n * @param array  Source array\r\n * @returns Copy of the array\r\n */\n\nexport function copy(array) {\n  var length = array.length; // It's faster to create the array with a pre-defined length\n\n  var output = new Array(length);\n\n  for (var i = 0; i < length; ++i) {\n    // Because the array has a pre-defined length, we have to assign rather than push\n    // This is also faster than pushing\n    output[i] = array[i];\n  }\n\n  return output;\n}\n/**\r\n * Returns a copy of `array` which contains all the elements between `start`\r\n * and `end`. (including `start` and excluding `end`)\r\n *\r\n * If `end` is not provided, it defaults to `array.length`.\r\n *\r\n * @param array  Source array\r\n * @param start  Start index\r\n * @param end    End index\r\n * @returns Part of the array\r\n */\n\nexport function slice(array, start, end) {\n  if (end === void 0) {\n    end = array.length;\n  }\n\n  var output = new Array(end - start);\n\n  for (var i = start; i < end; ++i) {\n    output[i - start] = array[i];\n  }\n\n  return output;\n}\n/**\r\n * Inserts a value into array at specific index.\r\n *\r\n * @param array  Source array\r\n * @param index  Index\r\n * @param value  Value to insert\r\n */\n\nexport function insertIndex(array, index, value) {\n  array.splice(index, 0, value);\n}\n/**\r\n * Removes a value from array at specific index.\r\n *\r\n * @param array  Source array\r\n * @param index  Index\r\n */\n\nexport function removeIndex(array, index) {\n  array.splice(index, 1);\n}\n/**\r\n * Orders an array using specific `ordering` function and returns index of\r\n * the `value`.\r\n *\r\n * @ignore Exclude from docs\r\n * @param array     Source array\r\n * @param ordering  An ordering function\r\n * @param value     Value to search for\r\n * @returns Result of the search\r\n */\n\nexport function getSortedIndex(array, ordering, value) {\n  var start = 0;\n  var end = array.length;\n  var found = false;\n\n  while (start < end) {\n    // TODO is this faster/slower than using Math.floor ?\n    var pivot = start + end >> 1;\n    var order = ordering(value, array[pivot]); // less\n\n    if (order < 0) {\n      end = pivot; // equal\n    } else if (order === 0) {\n      found = true;\n      start = pivot + 1; // more\n    } else {\n      start = pivot + 1;\n    }\n  }\n\n  return {\n    found: found,\n    index: found ? start - 1 : start\n  };\n}\n/**\r\n * Searches the array using custom function and returns index of the item if\r\n * found.\r\n *\r\n * Will call `matches` function on all items of the array. If return value\r\n * evaluates to `true`, index is returned.\r\n *\r\n * Otherwise returns -1.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Index of the item if found\r\n */\n\nexport function findIndex(array, matches) {\n  var length = array.length;\n\n  for (var i = 0; i < length; ++i) {\n    if (matches(array[i], i)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n/**\r\n * Searches the array using custom function and returns item if found.\r\n *\r\n * Will call `matches` function on all items of the array. If return value\r\n * evaluates to `true`, index is returned.\r\n *\r\n * Otherwise returns `undefined`.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Item if found\r\n */\n\nexport function find(array, matches) {\n  var index = findIndex(array, matches);\n\n  if (index !== -1) {\n    return array[index];\n  }\n}\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\n\nexport function shuffle(array) {\n  // https://stackoverflow.com/a/2450976/449477\n  var currentIndex = array.length,\n      temporaryValue,\n      randomIndex; // While there remain elements to shuffle...\n\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1; // And swap it with the current element.\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n}\nexport function keepIf(array, keep) {\n  var length = array.length;\n  var i = 0;\n\n  while (i < length) {\n    if (keep(array[i])) {\n      ++i;\n    } else {\n      array.splice(i, 1);\n      --length;\n    }\n  }\n}","map":{"version":3,"sources":["../../../../../src/.internal/core/utils/Array.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Ordering } from \"./Order\";\r\nimport { Optional } from \"./Type\";\r\nimport * as $math from \"./Math\";\r\nimport * as $type from \"./Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * UTILITY FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Searches `array` for `value`.\r\n *\r\n * Returns -1 if not found.\r\n *\r\n * @param array  Source array\r\n * @param value  Value to search\r\n * @returns Index\r\n */\r\nexport function indexOf<A>(array: ArrayLike<A>, value: A): number {\r\n\tconst length = array.length;\r\n\r\n\tfor (let i = 0; i < length; ++i) {\r\n\t\t// TODO handle NaN\r\n\t\tif (array[i] === value) {\r\n\t\t\treturn i;\r\n\t\t}\r\n\t}\r\n\r\n\treturn -1;\r\n}\r\n\r\n/**\r\n * Calls `test` for each element in `array`.\r\n *\r\n * If `test` returns `true` then it immediately returns `true`.\r\n *\r\n * If `test` returns `false` for all of the elements in `array` then it returns `false`.\r\n *\r\n * @param array  Source array\r\n * @param test   Function which is called on each element\r\n * @returns Whether `test` returned true or not\r\n */\r\nexport function any<A>(array: ArrayLike<A>, test: (value: A) => boolean): boolean {\r\n\tconst length = array.length;\r\n\r\n\tfor (let i = 0; i < length; ++i) {\r\n\t\tif (test(array[i])) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\treturn false;\r\n}\r\n\r\n/**\r\n * Calls `fn` function for every member of array and returns a new array out\r\n * of all outputs.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n * @returns New array\r\n */\r\nexport function map<A, B>(array: ArrayLike<A>, fn: (value: A, index: number) => B): Array<B> {\r\n\tconst length = array.length;\r\n\tconst output = new Array(length);\r\n\r\n\tfor (let i = 0; i < length; ++i) {\r\n\t\toutput[i] = fn(array[i], i);\r\n\t}\r\n\r\n\treturn output;\r\n}\r\n\r\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\r\nexport function each<A>(array: ArrayLike<A>, fn: (value: A, index: number) => void): void {\r\n\tconst length = array.length;\r\n\r\n\tfor (let i = 0; i < length; ++i) {\r\n\t\tfn(array[i], i);\r\n\t}\r\n}\r\n\r\n/**\r\n * Iterates through all items in array in reverse order and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\r\nexport function eachReverse<A>(array: ArrayLike<A>, fn: (value: A, index: number) => void): void {\r\n\tlet i = array.length;\r\n\r\n\twhile (i--) {\r\n\t\tfn(array[i], i);\r\n\t}\r\n}\r\n\r\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * If `fn` call evaluates to `false`, further iteration is cancelled.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\r\nexport function eachContinue<A>(array: ArrayLike<A>, fn: (value: A, index: number) => boolean): void {\r\n\tconst length = array.length;\r\n\r\n\tfor (let i = 0; i < length; ++i) {\r\n\t\tif (!fn(array[i], i)) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Shifts an item at `index` towards beginning of the array.\r\n *\r\n * @param array  Source array\r\n * @param index  Target element index\r\n */\r\nexport function shiftLeft<A>(array: Array<A>, index: number): void {\r\n\tconst length = array.length;\r\n\r\n\tfor (let i = index; i < length; ++i) {\r\n\t\tarray[i - index] = array[i];\r\n\t}\r\n\r\n\tarray.length = length - index;\r\n}\r\n\r\n/**\r\n * Returns the last item of the array.\r\n *\r\n * @param array  Source array\r\n * @returns Last item\r\n */\r\nexport function last<A>(array: Array<A>): Optional<A> {\r\n\tconst length = array.length;\r\n\treturn length ? array[length - 1] : undefined;\r\n}\r\n\r\n/**\r\n * Returns the first item of the array.\r\n *\r\n * @param array  Source array\r\n * @returns Last item\r\n */\r\nexport function first<A>(array: Array<A>): Optional<A> {\r\n\treturn array[0];\r\n}\r\n\r\n/**\r\n * Inserts `element` into `array` at `index`.\r\n *\r\n * Caps `index` to be between `0` and `array.length`\r\n *\r\n * @param array    Source array\r\n * @param element  Item to insert\r\n * @param array    Index to insert item at\r\n */\r\nexport function insert<A>(array: Array<A>, element: A, index: number): void {\r\n\t//if (array) {\r\n\tindex = $math.fitToRange(index, 0, array.length);\r\n\tarray.splice(index, 0, element);\r\n\t//}\r\n}\r\n\r\n/**\r\n * Removes all copies of `element` from `array` (if they exist) and then\r\n * inserts `element` at `index`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item\r\n * @param array    Index to move item to\r\n */\r\nexport function setIndex<A>(array: Array<A>, element: A, index: number): void {\r\n\tremove(array, element);\r\n\tinsert(array, element, index);\r\n}\r\n\r\n\r\n/**\r\n * Pushes all of the elements from `input` into `array`.\r\n *\r\n * @param array  Output array\r\n * @param input  Input array\r\n */\r\nexport function pushAll<A>(array: Array<A>, input: Array<A>) {\r\n\tconst length = input.length;\r\n\r\n\tfor (let i = 0; i < length; ++i) {\r\n\t\tarray.push(input[i]);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Removes `element` from `array`.\r\n *\r\n * If there are multiple copies of `element`, they are all removed.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to remove\r\n */\r\nexport function remove<A>(array: Array<A>, element: A): boolean {\r\n\tlet found: boolean = false;\r\n\tlet index: number = array.indexOf(element);\r\n\r\n\tif (index !== -1) {\r\n\t\tfound = true;\r\n\t\tarray.splice(index, 1);\r\n\r\n\t\tlet length: number = array.length;\r\n\r\n\t\twhile (index < length) {\r\n\t\t\t// TODO handle NaN\r\n\t\t\tif (array[index] === element) {\r\n\t\t\t\tarray.splice(index, 1);\r\n\t\t\t\t--length;\r\n\r\n\t\t\t} else {\r\n\t\t\t\t++index;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn found;\r\n}\r\n\r\n/**\r\n * Adds an `element` to `array`.\r\n *\r\n * If array already contains and item like this, it is removed before adding\r\n * it again.\r\n *\r\n * Optionally `toIndex` can be specified to add element at specific index.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to add\r\n * @param array    Index to move item to\r\n */\r\nexport function move<A>(array: Array<A>, element: A, toIndex?: number): void {\r\n\t// @todo this implementation must be the same as the List.moveValue method\r\n\t// @todo don't do anything if the desired index is the same as the current index\r\n\tlet index = indexOf(array, element);\r\n\r\n\t// @todo remove all old values rather than only the first ?\r\n\tif (index !== -1) {\r\n\t\tremoveIndex(array, index);\r\n\t}\r\n\r\n\tif (toIndex == null) {\r\n\t\tarray.push(element);\r\n\t} else {\r\n\t\tinsertIndex(array, toIndex, element);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Inserts `element` into `array` at `index`.\r\n *\r\n * If `index` is not provided, it will insert `element` at the end of `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to add\r\n * @param array    Index to add item at\r\n */\r\nexport function add<A>(array: Array<A>, element: A, index?: number): void {\r\n\t// Append to the end if index is not set\r\n\tif (!$type.isNumber(index)) {\r\n\t\tarray.push(element);\r\n\t}\r\n\r\n\t// Add to the beginning of array if index is 0\r\n\telse if (index === 0) {\r\n\t\tarray.unshift(element);\r\n\t}\r\n\t// Add to indicated place if index is set\r\n\telse {\r\n\t\tarray.splice(index, 0, element);\r\n\t}\r\n}\r\n\r\n/**\r\n * Removes `element` from `array` (if it exists) and then inserts `element` at\r\n * `index`.\r\n *\r\n * If `index` is not provided, it will insert `element` at the end of `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to remove\r\n * @param array    Index to move item to\r\n */\r\nexport function replace<A>(array: Array<A>, element: A, index?: number): void {\r\n\t// check if exists\r\n\tlet ind: number = array.indexOf(element);\r\n\r\n\t// remove if exists\r\n\tif (ind !== -1) {\r\n\t\tarray.splice(ind, 1);\r\n\t}\r\n\r\n\t// add to end if index is not set\r\n\tif (!$type.isNumber(index)) {\r\n\t\tarray.push(element);\r\n\t}\r\n\t// add to indicated place if index is set\r\n\telse {\r\n\t\tarray.splice(index, 0, element);\r\n\t}\r\n}\r\n\r\n/**\r\n * Wraps `input` in an array, if it isn't already an array.\r\n *\r\n * @param input  Source value\r\n * @return An array\r\n */\r\nexport function toArray<A>(input: Array<A> | A): Array<A> {\r\n\tif (Array.isArray(input)) {\r\n\t\treturn input;\r\n\t}\r\n\telse {\r\n\t\treturn [input];\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns `true` if `element` exists in `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to search for\r\n * @returns Item in array?\r\n */\r\nexport function has<A>(array: ArrayLike<A>, element: A): boolean {\r\n\treturn indexOf(array, element) !== -1;\r\n}\r\n\r\n/**\r\n * Returns a shallow copy of `array`.\r\n *\r\n * @param array  Source array\r\n * @returns Copy of the array\r\n */\r\nexport function copy<A>(array: ArrayLike<A>): Array<A> {\r\n\tconst length = array.length;\r\n\r\n\t// It's faster to create the array with a pre-defined length\r\n\tconst output = new Array(length);\r\n\r\n\tfor (let i = 0; i < length; ++i) {\r\n\t\t// Because the array has a pre-defined length, we have to assign rather than push\r\n\t\t// This is also faster than pushing\r\n\t\toutput[i] = array[i];\r\n\t}\r\n\r\n\treturn output;\r\n}\r\n\r\n\r\n/**\r\n * Returns a copy of `array` which contains all the elements between `start`\r\n * and `end`. (including `start` and excluding `end`)\r\n *\r\n * If `end` is not provided, it defaults to `array.length`.\r\n *\r\n * @param array  Source array\r\n * @param start  Start index\r\n * @param end    End index\r\n * @returns Part of the array\r\n */\r\nexport function slice<A>(array: ArrayLike<A>, start: number, end: number = array.length): Array<A> {\r\n\tconst output = new Array(end - start);\r\n\r\n\tfor (let i = start; i < end; ++i) {\r\n\t\toutput[i - start] = array[i];\r\n\t}\r\n\r\n\treturn output;\r\n}\r\n\r\n/**\r\n * Inserts a value into array at specific index.\r\n *\r\n * @param array  Source array\r\n * @param index  Index\r\n * @param value  Value to insert\r\n */\r\nexport function insertIndex<A>(array: Array<A>, index: number, value: A): void {\r\n\tarray.splice(index, 0, value);\r\n}\r\n\r\n/**\r\n * Removes a value from array at specific index.\r\n *\r\n * @param array  Source array\r\n * @param index  Index\r\n */\r\nexport function removeIndex<A>(array: Array<A>, index: number): void {\r\n\tarray.splice(index, 1);\r\n}\r\n\r\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport interface SortResult {\r\n\tfound: boolean;\r\n\tindex: number\r\n}\r\n\r\n/**\r\n * Orders an array using specific `ordering` function and returns index of\r\n * the `value`.\r\n *\r\n * @ignore Exclude from docs\r\n * @param array     Source array\r\n * @param ordering  An ordering function\r\n * @param value     Value to search for\r\n * @returns Result of the search\r\n */\r\nexport function getSortedIndex<A>(array: ArrayLike<A>, ordering: (left: A, right: A) => Ordering, value: A): SortResult {\r\n\tlet start = 0;\r\n\tlet end   = array.length;\r\n\tlet found = false;\r\n\r\n\twhile (start < end) {\r\n\t\t// TODO is this faster/slower than using Math.floor ?\r\n\t\tconst pivot = (start + end) >> 1;\r\n\r\n\t\tconst order = ordering(value, array[pivot]);\r\n\r\n\t\t// less\r\n\t\tif (order < 0) {\r\n\t\t\tend = pivot;\r\n\r\n\t\t// equal\r\n\t\t} else if (order === 0) {\r\n\t\t\tfound = true;\r\n\t\t\tstart = pivot + 1;\r\n\r\n\t\t// more\r\n\t\t} else {\r\n\t\t\tstart = pivot + 1;\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tfound: found,\r\n\t\tindex: (found ? start - 1 : start)\r\n\t};\r\n}\r\n\r\n/**\r\n * Searches the array using custom function and returns index of the item if\r\n * found.\r\n *\r\n * Will call `matches` function on all items of the array. If return value\r\n * evaluates to `true`, index is returned.\r\n *\r\n * Otherwise returns -1.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Index of the item if found\r\n */\r\nexport function findIndex<A>(array: ArrayLike<A>, matches: (value: A, index: number) => boolean): number {\r\n\tconst length = array.length;\r\n\r\n\tfor (let i = 0; i < length; ++i) {\r\n\t\tif (matches(array[i], i)) {\r\n\t\t\treturn i;\r\n\t\t}\r\n\t}\r\n\r\n\treturn -1;\r\n}\r\n\r\n/**\r\n * Searches the array using custom function and returns item if found.\r\n *\r\n * Will call `matches` function on all items of the array. If return value\r\n * evaluates to `true`, index is returned.\r\n *\r\n * Otherwise returns `undefined`.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Item if found\r\n */\r\nexport function find<A>(array: ArrayLike<A>, matches: (value: A, index: number) => boolean): A | undefined {\r\n\tconst index = findIndex(array, matches);\r\n\r\n\tif (index !== -1) {\r\n\t\treturn array[index];\r\n\t}\r\n}\r\n\r\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\r\nexport function shuffle<A>(array: Array<A>) {\r\n\t// https://stackoverflow.com/a/2450976/449477\r\n\tlet currentIndex = array.length,\r\n\t\ttemporaryValue,\r\n\t\trandomIndex;\r\n\r\n\t// While there remain elements to shuffle...\r\n\twhile (0 !== currentIndex) {\r\n\t\t// Pick a remaining element...\r\n\t\trandomIndex = Math.floor(Math.random() * currentIndex);\r\n\t\tcurrentIndex -= 1;\r\n\r\n\t\t// And swap it with the current element.\r\n\t\ttemporaryValue = array[currentIndex];\r\n\t\tarray[currentIndex] = array[randomIndex];\r\n\t\tarray[randomIndex] = temporaryValue;\r\n\t}\r\n}\r\n\r\n\r\nexport function keepIf<A>(array: Array<A>, keep: (value: A) => boolean): void {\r\n\tlet length = array.length;\r\n\tlet i = 0;\r\n\r\n\twhile (i < length) {\r\n\t\tif (keep(array[i])) {\r\n\t\t\t++i;\r\n\r\n\t\t} else {\r\n\t\t\tarray.splice(i, 1);\r\n\t\t\t--length;\r\n\t\t}\r\n\t}\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}