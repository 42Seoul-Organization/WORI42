{"ast":null,"code":"/**\r\n * A plugin base class.\r\n */\n\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * This is a base class that provides core functionality for plugins.\r\n *\r\n * The easiest way to start off with a new plugin is to extend this class.\r\n *\r\n * It will provide all the mandatory functionality, such as disposers.\r\n *\r\n * @since 4.2.2\r\n */\nvar Plugin =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor\r\n   */\n  function Plugin() {\n    /**\r\n     * Is this object disposed?\r\n     */\n    this._disposed = false;\n    /**\r\n     * List of IDisposer which will be disposed when the BaseObject is disposed.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    this._disposers = []; // Nothing to do here\n  }\n  /**\r\n   * Decorates series with required events and adapters used to hijack its\r\n   * data.\r\n   */\n\n\n  Plugin.prototype.init = function () {// Does nothing\n    // Override it\n  };\n  /**\r\n   * Returns if this element is already disposed.\r\n   *\r\n   * @return Is disposed?\r\n   */\n\n\n  Plugin.prototype.isDisposed = function () {\n    return this._disposed;\n  };\n  /**\r\n   * Disposes this object and related stuff.\r\n   */\n\n\n  Plugin.prototype.dispose = function () {\n    if (!this._disposed) {\n      this._disposed = true;\n      var a = this._disposers;\n      this._disposers = null;\n\n      while (a.length !== 0) {\n        var disposer = a.shift();\n        disposer.dispose();\n      }\n    }\n  };\n\n  return Plugin;\n}();\n\nexport { Plugin };","map":{"version":3,"sources":["../../../../../src/.internal/core/utils/Plugin.ts"],"names":[],"mappings":"AAAA;;;;AA2BA;;;;;;;AAOA;;;;;;;;;AASA,IAAA,MAAA;AAAA;AAAA,YAAA;AAoBC;;;AAGA,WAAA,MAAA,GAAA;AAfA;;;AAGU,SAAA,SAAA,GAAqB,KAArB;AAEV;;;;;;AAKU,SAAA,UAAA,GAA+B,EAA/B,CAKV,CACC;AACA;AAED;;;;;;AAIO,EAAA,MAAA,CAAA,SAAA,CAAA,IAAA,GAAP,YAAA,CACC;AACA;AACA,GAHM;AAKP;;;;;;;AAKO,EAAA,MAAA,CAAA,SAAA,CAAA,UAAA,GAAP,YAAA;AACC,WAAO,KAAK,SAAZ;AACA,GAFM;AAIP;;;;;AAGO,EAAA,MAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACC,QAAI,CAAC,KAAK,SAAV,EAAqB;AACpB,WAAK,SAAL,GAAiB,IAAjB;AAEA,UAAM,CAAC,GAAG,KAAK,UAAf;AAEA,WAAK,UAAL,GAAuB,IAAvB;;AAEA,aAAO,CAAC,CAAC,MAAF,KAAa,CAApB,EAAuB;AACtB,YAAM,QAAQ,GAAG,CAAC,CAAC,KAAF,EAAjB;AACA,QAAA,QAAQ,CAAC,OAAT;AACA;AACD;AACD,GAbM;;AAeR,SAAA,MAAA;AAAC,CA/DD,EAAA","sourcesContent":["/**\r\n * A plugin base class.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Optional } from \"./Type\";\r\nimport { IDisposer } from \"./Disposer\";\r\nimport { Sprite } from \"../Sprite\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\nexport interface IPlugin extends IDisposer {\r\n\ttarget: Optional<Sprite>;\r\n\tinit(): void;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This is a base class that provides core functionality for plugins.\r\n *\r\n * The easiest way to start off with a new plugin is to extend this class.\r\n *\r\n * It will provide all the mandatory functionality, such as disposers.\r\n *\r\n * @since 4.2.2\r\n */\r\nexport class Plugin implements IPlugin {\r\n\r\n\r\n\t/**\r\n\t * A target object plugin is for.\r\n\t */\r\n\tpublic target: Optional<Sprite>;\r\n\r\n\t/**\r\n\t * Is this object disposed?\r\n\t */\r\n\tprotected _disposed: boolean = false;\r\n\r\n\t/**\r\n\t * List of IDisposer which will be disposed when the BaseObject is disposed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _disposers: Array<IDisposer> = [];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\t// Nothing to do here\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates series with required events and adapters used to hijack its\r\n\t * data.\r\n\t */\r\n\tpublic init(): void {\r\n\t\t// Does nothing\r\n\t\t// Override it\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if this element is already disposed.\r\n\t *\r\n\t * @return Is disposed?\r\n\t */\r\n\tpublic isDisposed(): boolean {\r\n\t\treturn this._disposed;\r\n\t}\r\n\r\n\t/**\r\n\t * Disposes this object and related stuff.\r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tif (!this._disposed) {\r\n\t\t\tthis._disposed = true;\r\n\r\n\t\t\tconst a = this._disposers;\r\n\r\n\t\t\tthis._disposers = <any>null;\r\n\r\n\t\t\twhile (a.length !== 0) {\r\n\t\t\t\tconst disposer = a.shift();\r\n\t\t\t\tdisposer.dispose();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}