{"ast":null,"code":"/**\r\n * Rounded rectangle module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Sprite } from \"../Sprite\";\nimport { registry } from \"../Registry\";\nimport * as $math from \"../utils/Math\";\nimport * as $type from \"../utils/Type\";\nimport * as $utils from \"../utils/Utils\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Draws a rectangle with rounded corners.\r\n *\r\n * @see {@link IRoundedRectangleEvents} for a list of available events\r\n * @see {@link IRoundedRectangleAdapters} for a list of available Adapters\r\n */\n\nvar RoundedRectangle =\n/** @class */\nfunction (_super) {\n  __extends(RoundedRectangle, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function RoundedRectangle() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"RoundedRectangle\";\n    _this.element = _this.paper.add(\"path\");\n\n    _this.cornerRadius(3, 3, 3, 3);\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  RoundedRectangle.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    var w = this.innerWidth;\n    var h = this.innerHeight;\n\n    if ($type.isNumber(w) && $type.isNumber(h)) {\n      var minSide = $math.min(w, h) / 2;\n      var cornerRadiusTopLeft = $utils.relativeToValue(this.cornerRadiusTopLeft, minSide);\n      var cornerRadiusTopRight = $utils.relativeToValue(this.cornerRadiusTopRight, minSide);\n      var cornerRadiusBottomRight = $utils.relativeToValue(this.cornerRadiusBottomRight, minSide);\n      var cornerRadiusBottomLeft = $utils.relativeToValue(this.cornerRadiusBottomLeft, minSide);\n      var maxcr = $math.min(Math.abs(w / 2), Math.abs(h / 2));\n      var crtl = $math.fitToRange(cornerRadiusTopLeft, 0, maxcr);\n      var crtr = $math.fitToRange(cornerRadiusTopRight, 0, maxcr);\n      var crbr = $math.fitToRange(cornerRadiusBottomRight, 0, maxcr);\n      var crbl = $math.fitToRange(cornerRadiusBottomLeft, 0, maxcr);\n      var lineT = \"M\" + crtl + \",0 L\" + (w - crtr) + \",0\";\n      var lineB = \" L\" + crbl + \",\" + h;\n      var lineL = \" L0,\" + crtl;\n      var lineR = \" L\" + w + \",\" + (h - crbr);\n      var arcTR = \" a\" + crtr + \",\" + crtr + \" 0 0 1 \" + crtr + \",\" + crtr;\n      var arcBR = \" a\" + crbr + \",\" + crbr + \" 0 0 1 -\" + crbr + \",\" + crbr;\n      var arcBL = \" a\" + crbl + \",\" + crbl + \" 0 0 1 -\" + crbl + \",-\" + crbl;\n      var arcTL = \" a\" + crtl + \",\" + crtl + \" 0 0 1 \" + crtl + \",-\" + crtl;\n      var path = lineT + arcTR + lineR + arcBR + lineB + arcBL + lineL + arcTL + \" Z\";\n      this.path = path;\n    }\n  };\n  /**\r\n   * Sets radius for all four corners at ones.\r\n   *\r\n   * All numbers are in pixels.\r\n   *\r\n   * @param tl  Top-left corner\r\n   * @param tr  Top-right corner\r\n   * @param bl  Bottom-left corner\r\n   * @param br  Bottom-right corner\r\n   */\n\n\n  RoundedRectangle.prototype.cornerRadius = function (tl, tr, bl, br) {\n    this.cornerRadiusTopLeft = tl;\n    this.cornerRadiusTopRight = tr;\n    this.cornerRadiusBottomLeft = bl;\n    this.cornerRadiusBottomRight = br;\n  };\n\n  Object.defineProperty(RoundedRectangle.prototype, \"cornerRadiusTopLeft\", {\n    /**\r\n     * @return Radius (px or Percent)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"cornerRadiusTopLeft\");\n    },\n\n    /**\r\n     * Radius of the top-left corner in pixels.\r\n     *\r\n     * @default 3\r\n     * @param value  Radius (px or Percent)\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"cornerRadiusTopLeft\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RoundedRectangle.prototype, \"cornerRadiusTopRight\", {\n    /**\r\n     * @return Radius (px or Percent)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"cornerRadiusTopRight\");\n    },\n\n    /**\r\n     * Radius of the top-right corner in pixels.\r\n     *\r\n     * @default 3\r\n     * @param value  Radius (px or Percent)\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"cornerRadiusTopRight\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RoundedRectangle.prototype, \"cornerRadiusBottomRight\", {\n    /**\r\n     * @return Radius (px or Percent)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"cornerRadiusBottomRight\");\n    },\n\n    /**\r\n     * Radius of the bottom-right corner in pixels.\r\n     *\r\n     * @default 3\r\n     * @param value  Radius (px or Percent)\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"cornerRadiusBottomRight\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RoundedRectangle.prototype, \"cornerRadiusBottomLeft\", {\n    /**\r\n     * @return Radius (px or Percent)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"cornerRadiusBottomLeft\");\n    },\n\n    /**\r\n     * Radius of the bottom-left corner in pixels.\r\n     *\r\n     * @default 3\r\n     * @param value  Radius (px or Percent)\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"cornerRadiusBottomLeft\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Measures the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  RoundedRectangle.prototype.measureElement = function () {};\n\n  Object.defineProperty(RoundedRectangle.prototype, \"bbox\", {\n    /**\r\n     * Returns bounding box (square) for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    get: function get() {\n      if (this.definedBBox) {\n        return this.definedBBox;\n      }\n\n      if (this.isMeasured) {\n        return {\n          x: 0,\n          y: 0,\n          width: this.innerWidth,\n          height: this.innerHeight\n        };\n      } else {\n        return {\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        };\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return RoundedRectangle;\n}(Sprite);\n\nexport { RoundedRectangle };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"RoundedRectangle\"] = RoundedRectangle;","map":{"version":3,"sources":["../../../../../src/.internal/core/elements/RoundedRectangle.ts"],"names":[],"mappings":"AAAA;;;;AAIA;;;;;;;AAMA,SAAS,MAAT,QAA0E,WAA1E;AACA,SAAS,QAAT,QAAyB,aAAzB;AACA,OAAO,KAAK,KAAZ,MAAuB,eAAvB;AACA,OAAO,KAAK,KAAZ,MAAuB,eAAvB;AACA,OAAO,KAAK,MAAZ,MAAwB,gBAAxB;AA4DA;;;;;;;AAOA;;;;;;;AAMA,IAAA,gBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAsC,EAAA,SAAA,CAAA,gBAAA,EAAA,MAAA,CAAA;AAiBrC;;;;;AAGA,WAAA,gBAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADR;;AAEC,IAAA,KAAI,CAAC,SAAL,GAAiB,kBAAjB;AAEA,IAAA,KAAI,CAAC,OAAL,GAAe,KAAI,CAAC,KAAL,CAAW,GAAX,CAAe,MAAf,CAAf;;AAEA,IAAA,KAAI,CAAC,YAAL,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B;;AAEA,IAAA,KAAI,CAAC,UAAL;;;AACA;AAED;;;;;;;AAKO,EAAA,gBAAA,CAAA,SAAA,CAAA,IAAA,GAAP,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,IAAN,CAAU,IAAV,CAAU,IAAV;;AAEA,QAAI,CAAC,GAAW,KAAK,UAArB;AACA,QAAI,CAAC,GAAW,KAAK,WAArB;;AAEA,QAAI,KAAK,CAAC,QAAN,CAAe,CAAf,KAAqB,KAAK,CAAC,QAAN,CAAe,CAAf,CAAzB,EAA4C;AAE3C,UAAI,OAAO,GAAG,KAAK,CAAC,GAAN,CAAU,CAAV,EAAa,CAAb,IAAkB,CAAhC;AAEA,UAAI,mBAAmB,GAAG,MAAM,CAAC,eAAP,CAAuB,KAAK,mBAA5B,EAAiD,OAAjD,CAA1B;AACA,UAAI,oBAAoB,GAAG,MAAM,CAAC,eAAP,CAAuB,KAAK,oBAA5B,EAAkD,OAAlD,CAA3B;AACA,UAAI,uBAAuB,GAAG,MAAM,CAAC,eAAP,CAAuB,KAAK,uBAA5B,EAAqD,OAArD,CAA9B;AACA,UAAI,sBAAsB,GAAG,MAAM,CAAC,eAAP,CAAuB,KAAK,sBAA5B,EAAoD,OAApD,CAA7B;AAEA,UAAI,KAAK,GAAW,KAAK,CAAC,GAAN,CAAU,IAAI,CAAC,GAAL,CAAS,CAAC,GAAG,CAAb,CAAV,EAA2B,IAAI,CAAC,GAAL,CAAS,CAAC,GAAG,CAAb,CAA3B,CAApB;AACA,UAAI,IAAI,GAAW,KAAK,CAAC,UAAN,CAAiB,mBAAjB,EAAsC,CAAtC,EAAyC,KAAzC,CAAnB;AACA,UAAI,IAAI,GAAW,KAAK,CAAC,UAAN,CAAiB,oBAAjB,EAAuC,CAAvC,EAA0C,KAA1C,CAAnB;AACA,UAAI,IAAI,GAAW,KAAK,CAAC,UAAN,CAAiB,uBAAjB,EAA0C,CAA1C,EAA6C,KAA7C,CAAnB;AACA,UAAI,IAAI,GAAW,KAAK,CAAC,UAAN,CAAiB,sBAAjB,EAAyC,CAAzC,EAA4C,KAA5C,CAAnB;AAEA,UAAI,KAAK,GAAW,MAAM,IAAN,GAAa,MAAb,IAAuB,CAAC,GAAG,IAA3B,IAAmC,IAAvD;AACA,UAAI,KAAK,GAAW,OAAO,IAAP,GAAc,GAAd,GAAoB,CAAxC;AACA,UAAI,KAAK,GAAW,SAAS,IAA7B;AACA,UAAI,KAAK,GAAW,OAAO,CAAP,GAAW,GAAX,IAAkB,CAAC,GAAG,IAAtB,CAApB;AAEA,UAAI,KAAK,GAAW,OAAO,IAAP,GAAc,GAAd,GAAoB,IAApB,GAA2B,SAA3B,GAAuC,IAAvC,GAA8C,GAA9C,GAAoD,IAAxE;AACA,UAAI,KAAK,GAAW,OAAO,IAAP,GAAc,GAAd,GAAoB,IAApB,GAA2B,UAA3B,GAAwC,IAAxC,GAA+C,GAA/C,GAAqD,IAAzE;AACA,UAAI,KAAK,GAAW,OAAO,IAAP,GAAc,GAAd,GAAoB,IAApB,GAA2B,UAA3B,GAAwC,IAAxC,GAA+C,IAA/C,GAAsD,IAA1E;AACA,UAAI,KAAK,GAAW,OAAO,IAAP,GAAc,GAAd,GAAoB,IAApB,GAA2B,SAA3B,GAAuC,IAAvC,GAA8C,IAA9C,GAAqD,IAAzE;AAGA,UAAI,IAAI,GAAW,KAAK,GAAG,KAAR,GAAgB,KAAhB,GAAwB,KAAxB,GAAgC,KAAhC,GAAwC,KAAxC,GAAgD,KAAhD,GAAwD,KAAxD,GAAgE,IAAnF;AAEA,WAAK,IAAL,GAAY,IAAZ;AACA;AACD,GApCM;AAsCP;;;;;;;;;;;;AAUO,EAAA,gBAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,EAApB,EAA0C,EAA1C,EAAgE,EAAhE,EAAsF,EAAtF,EAA0G;AACzG,SAAK,mBAAL,GAA2B,EAA3B;AACA,SAAK,oBAAL,GAA4B,EAA5B;AACA,SAAK,sBAAL,GAA8B,EAA9B;AACA,SAAK,uBAAL,GAA+B,EAA/B;AACA,GALM;;AAaP,EAAA,MAAA,CAAA,cAAA,CAAW,gBAAA,CAAA,SAAX,EAAW,qBAAX,EAA8B;AAI9B;;;SAGA,eAAA;AACC,aAAO,KAAK,gBAAL,CAAsB,qBAAtB,CAAP;AACA,KAT6B;;AAN9B;;;;;;SAMA,aAA+B,KAA/B,EAAsD;AACrD,WAAK,kBAAL,CAAwB,qBAAxB,EAA+C,KAA/C,EAAsD,IAAtD;AACA,KAF6B;oBAAA;;AAAA,GAA9B;AAiBA,EAAA,MAAA,CAAA,cAAA,CAAW,gBAAA,CAAA,SAAX,EAAW,sBAAX,EAA+B;AAI/B;;;SAGA,eAAA;AACC,aAAO,KAAK,gBAAL,CAAsB,sBAAtB,CAAP;AACA,KAT8B;;AAN/B;;;;;;SAMA,aAAgC,KAAhC,EAAuD;AACtD,WAAK,kBAAL,CAAwB,sBAAxB,EAAgD,KAAhD,EAAuD,IAAvD;AACA,KAF8B;oBAAA;;AAAA,GAA/B;AAiBA,EAAA,MAAA,CAAA,cAAA,CAAW,gBAAA,CAAA,SAAX,EAAW,yBAAX,EAAkC;AAIlC;;;SAGA,eAAA;AACC,aAAO,KAAK,gBAAL,CAAsB,yBAAtB,CAAP;AACA,KATiC;;AANlC;;;;;;SAMA,aAAmC,KAAnC,EAA0D;AACzD,WAAK,kBAAL,CAAwB,yBAAxB,EAAmD,KAAnD,EAA0D,IAA1D;AACA,KAFiC;oBAAA;;AAAA,GAAlC;AAiBA,EAAA,MAAA,CAAA,cAAA,CAAW,gBAAA,CAAA,SAAX,EAAW,wBAAX,EAAiC;AAIjC;;;SAGA,eAAA;AACC,aAAO,KAAK,gBAAL,CAAsB,wBAAtB,CAAP;AACA,KATgC;;AANjC;;;;;;SAMA,aAAkC,KAAlC,EAAyD;AACxD,WAAK,kBAAL,CAAwB,wBAAxB,EAAkD,KAAlD,EAAyD,IAAzD;AACA,KAFgC;oBAAA;;AAAA,GAAjC;AAWA;;;;;;AAKO,EAAA,gBAAA,CAAA,SAAA,CAAA,cAAA,GAAP,YAAA,CAEC,CAFM;;AASP,EAAA,MAAA,CAAA,cAAA,CAAW,gBAAA,CAAA,SAAX,EAAW,MAAX,EAAe;AALf;;;;;SAKA,eAAA;AACC,UAAI,KAAK,WAAT,EAAsB;AACrB,eAAO,KAAK,WAAZ;AACA;;AAED,UAAI,KAAK,UAAT,EAAqB;AACpB,eAAO;AACN,UAAA,CAAC,EAAE,CADG;AAEN,UAAA,CAAC,EAAE,CAFG;AAGN,UAAA,KAAK,EAAE,KAAK,UAHN;AAIN,UAAA,MAAM,EAAE,KAAK;AAJP,SAAP;AAMA,OAPD,MAQK;AACJ,eAAO;AAAE,UAAA,CAAC,EAAE,CAAL;AAAQ,UAAA,CAAC,EAAE,CAAX;AAAc,UAAA,KAAK,EAAE,CAArB;AAAwB,UAAA,MAAM,EAAE;AAAhC,SAAP;AACA;AACD,KAhBc;oBAAA;;AAAA,GAAf;AAkBD,SAAA,gBAAA;AAAC,CA/LD,CAAsC,MAAtC,CAAA;;;AAiMA;;;;;;;AAMA,QAAQ,CAAC,iBAAT,CAA2B,kBAA3B,IAAiD,gBAAjD","sourcesContent":["/**\r\n * Rounded rectangle module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../Sprite\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport { Percent } from \"../utils/Percent\";\r\nimport { IRectangle } from \"../defs/IRectangle\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RoundedRectangle]].\r\n */\r\nexport interface IRoundedRectangleProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * Radius of the top-left corner in pixels.\r\n\t *\r\n\t * @default 3\r\n\t */\r\n\tcornerRadiusTopLeft?: number;\r\n\r\n\t/**\r\n\t * Radius of the top-right corner in pixels.\r\n\t *\r\n\t * @default 3\r\n\t */\r\n\tcornerRadiusTopRight?: number;\r\n\r\n\t/**\r\n\t * Radius of the bottom-right corner in pixels.\r\n\t *\r\n\t * @default 3\r\n\t */\r\n\tcornerRadiusBottomRight?: number;\r\n\r\n\t/**\r\n\t * Radius of the bottom-left corner in pixels.\r\n\t *\r\n\t * @default 3\r\n\t */\r\n\tcornerRadiusBottomLeft?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RoundedRectangle]].\r\n */\r\nexport interface IRoundedRectangleEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RoundedRectangle]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRoundedRectangleAdapters extends ISpriteAdapters, IRoundedRectangleProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a rectangle with rounded corners.\r\n *\r\n * @see {@link IRoundedRectangleEvents} for a list of available events\r\n * @see {@link IRoundedRectangleAdapters} for a list of available Adapters\r\n */\r\nexport class RoundedRectangle extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRoundedRectangleProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRoundedRectangleAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRoundedRectangleEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RoundedRectangle\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.cornerRadius(3, 3, 3, 3);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet w: number = this.innerWidth;\r\n\t\tlet h: number = this.innerHeight;\r\n\r\n\t\tif ($type.isNumber(w) && $type.isNumber(h)) {\r\n\r\n\t\t\tlet minSide = $math.min(w, h) / 2;\r\n\r\n\t\t\tlet cornerRadiusTopLeft = $utils.relativeToValue(this.cornerRadiusTopLeft, minSide);\r\n\t\t\tlet cornerRadiusTopRight = $utils.relativeToValue(this.cornerRadiusTopRight, minSide);\r\n\t\t\tlet cornerRadiusBottomRight = $utils.relativeToValue(this.cornerRadiusBottomRight, minSide);\r\n\t\t\tlet cornerRadiusBottomLeft = $utils.relativeToValue(this.cornerRadiusBottomLeft, minSide);\r\n\r\n\t\t\tlet maxcr: number = $math.min(Math.abs(w / 2), Math.abs(h / 2));\r\n\t\t\tlet crtl: number = $math.fitToRange(cornerRadiusTopLeft, 0, maxcr);\r\n\t\t\tlet crtr: number = $math.fitToRange(cornerRadiusTopRight, 0, maxcr);\r\n\t\t\tlet crbr: number = $math.fitToRange(cornerRadiusBottomRight, 0, maxcr);\r\n\t\t\tlet crbl: number = $math.fitToRange(cornerRadiusBottomLeft, 0, maxcr);\r\n\r\n\t\t\tlet lineT: string = \"M\" + crtl + \",0 L\" + (w - crtr) + \",0\";\r\n\t\t\tlet lineB: string = \" L\" + crbl + \",\" + h;\r\n\t\t\tlet lineL: string = \" L0,\" + crtl;\r\n\t\t\tlet lineR: string = \" L\" + w + \",\" + (h - crbr);\r\n\r\n\t\t\tlet arcTR: string = \" a\" + crtr + \",\" + crtr + \" 0 0 1 \" + crtr + \",\" + crtr;\r\n\t\t\tlet arcBR: string = \" a\" + crbr + \",\" + crbr + \" 0 0 1 -\" + crbr + \",\" + crbr;\r\n\t\t\tlet arcBL: string = \" a\" + crbl + \",\" + crbl + \" 0 0 1 -\" + crbl + \",-\" + crbl;\r\n\t\t\tlet arcTL: string = \" a\" + crtl + \",\" + crtl + \" 0 0 1 \" + crtl + \",-\" + crtl;\r\n\r\n\r\n\t\t\tlet path: string = lineT + arcTR + lineR + arcBR + lineB + arcBL + lineL + arcTL + \" Z\";\r\n\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets radius for all four corners at ones.\r\n\t *\r\n\t * All numbers are in pixels.\r\n\t *\r\n\t * @param tl  Top-left corner\r\n\t * @param tr  Top-right corner\r\n\t * @param bl  Bottom-left corner\r\n\t * @param br  Bottom-right corner\r\n\t */\r\n\tpublic cornerRadius(tl: number | Percent, tr: number | Percent, bl: number | Percent, br: number | Percent) {\r\n\t\tthis.cornerRadiusTopLeft = tl;\r\n\t\tthis.cornerRadiusTopRight = tr;\r\n\t\tthis.cornerRadiusBottomLeft = bl;\r\n\t\tthis.cornerRadiusBottomRight = br;\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the top-left corner in pixels.\r\n\t *\r\n\t * @default 3\r\n\t * @param value  Radius (px or Percent)\r\n\t */\r\n\tpublic set cornerRadiusTopLeft(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"cornerRadiusTopLeft\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px or Percent)\r\n\t */\r\n\tpublic get cornerRadiusTopLeft(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"cornerRadiusTopLeft\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the top-right corner in pixels.\r\n\t *\r\n\t * @default 3\r\n\t * @param value  Radius (px or Percent)\r\n\t */\r\n\tpublic set cornerRadiusTopRight(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"cornerRadiusTopRight\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px or Percent)\r\n\t */\r\n\tpublic get cornerRadiusTopRight(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"cornerRadiusTopRight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the bottom-right corner in pixels.\r\n\t *\r\n\t * @default 3\r\n\t * @param value  Radius (px or Percent)\r\n\t */\r\n\tpublic set cornerRadiusBottomRight(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"cornerRadiusBottomRight\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px or Percent)\r\n\t */\r\n\tpublic get cornerRadiusBottomRight(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"cornerRadiusBottomRight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the bottom-left corner in pixels.\r\n\t *\r\n\t * @default 3\r\n\t * @param value  Radius (px or Percent)\r\n\t */\r\n\tpublic set cornerRadiusBottomLeft(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"cornerRadiusBottomLeft\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px or Percent)\r\n\t */\r\n\tpublic get cornerRadiusBottomLeft(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"cornerRadiusBottomLeft\");\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\tif (this.definedBBox) {\r\n\t\t\treturn this.definedBBox;\r\n\t\t}\r\n\r\n\t\tif (this.isMeasured) {\r\n\t\t\treturn {\r\n\t\t\t\tx: 0,\r\n\t\t\t\ty: 0,\r\n\t\t\t\twidth: this.innerWidth,\r\n\t\t\t\theight: this.innerHeight\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: 0, y: 0, width: 0, height: 0 };\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RoundedRectangle\"] = RoundedRectangle;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}