{"ast":null,"code":"/**\r\n * Functionality for drawing simple buttons.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../Container\";\nimport { Label } from \"./Label\";\nimport { RoundedRectangle } from \"../elements/RoundedRectangle\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { registry } from \"../Registry\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Button class is capable of drawing a simple rectangular button with\r\n * optionally rounded corners and an icon in it.\r\n *\r\n * @see {@link IButtonEvents} for a list of available events\r\n * @see {@link IButtonAdapters} for a list of available Adapters\r\n */\n\nvar Button =\n/** @class */\nfunction (_super) {\n  __extends(Button, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Button() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"Button\";\n    _this.tooltipY = 0; // Set defaults\n\n    _this.iconPosition = \"left\";\n    _this.layout = \"horizontal\";\n    _this.contentAlign = \"center\";\n    _this.contentValign = \"middle\";\n\n    _this.padding(8, 16, 8, 16);\n\n    _this.setStateOnChildren = true;\n    var interfaceColors = new InterfaceColorSet(); // Create background\n\n    var background = _this.background;\n    background.fill = interfaceColors.getFor(\"secondaryButton\");\n    background.stroke = interfaceColors.getFor(\"secondaryButtonStroke\");\n    background.fillOpacity = 1;\n    background.strokeOpacity = 1;\n    background.cornerRadius(3, 3, 3, 3); // Create the label element\n\n    _this.label = new Label();\n    _this.label.fill = interfaceColors.getFor(\"secondaryButtonText\");\n    ;\n    _this.label.shouldClone = false; // Create default states\n\n    var hoverState = background.states.create(\"hover\");\n    hoverState.properties.fillOpacity = 1;\n    hoverState.properties.fill = interfaceColors.getFor(\"secondaryButtonHover\");\n    var downState = background.states.create(\"down\");\n    downState.transitionDuration = 100;\n    downState.properties.fill = interfaceColors.getFor(\"secondaryButtonDown\");\n    downState.properties.fillOpacity = 1; // Set up accessibility\n    // A button should be always focusable\n\n    _this.role = \"button\";\n    _this.focusable = true; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(Button.prototype, \"icon\", {\n    /**\r\n     * @return Icon Sprite\r\n     */\n    get: function get() {\n      return this._icon;\n    },\n\n    /**\r\n     * A [[Sprite]] to be used as an icon on button.\r\n     *\r\n     * @param icon Icon Sprite\r\n     */\n    set: function set(icon) {\n      var currentIcon = this._icon;\n\n      if (currentIcon) {\n        //this._icon.dispose();\n        //this.removeDispose(currentIcon);\n        currentIcon.parent = undefined;\n      }\n\n      if (icon) {\n        this._icon = icon;\n        icon.parent = this;\n        icon.interactionsEnabled = false;\n        icon.shouldClone = false;\n        this.iconPosition = this.iconPosition;\n\n        this._disposers.push(icon);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Button.prototype, \"iconPosition\", {\n    /**\r\n     * @return Icon position\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"iconPosition\");\n    },\n\n    /**\r\n     * Icon position: \"left\" or \"right\".\r\n     *\r\n     * @default \"left\"\r\n     * @param position  Icon position\r\n     */\n    set: function set(position) {\n      this.setPropertyValue(\"iconPosition\", position);\n\n      if (this.icon) {\n        if (position == \"left\") {\n          this.icon.toBack();\n        } else {\n          this.icon.toFront();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Button.prototype, \"label\", {\n    /**\r\n     * @return Label element\r\n     */\n    get: function get() {\n      return this._label;\n    },\n\n    /**\r\n     * [[Label]] element to be used for text.\r\n     *\r\n     * @param label element\r\n     */\n    set: function set(label) {\n      if (this._label) {\n        //this._label.dispose();\n        this.removeDispose(this._label);\n      }\n\n      this._label = label;\n\n      if (label) {\n        label.parent = this;\n        label.interactionsEnabled = false;\n\n        this._disposers.push(this._label);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates a background element for the button.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Background element\r\n   */\n\n  Button.prototype.createBackground = function () {\n    return new RoundedRectangle();\n  };\n  /**\r\n   * Copies properties and other attributes.\r\n   *\r\n   * @param source  Source\r\n   */\n\n\n  Button.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    if (source.label) {\n      this.label.copyFrom(source.label);\n    }\n\n    if (source.icon) {\n      this.icon = source.icon.clone();\n    }\n  };\n\n  return Button;\n}(Container);\n\nexport { Button };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Button\"] = Button;","map":{"version":3,"sources":["../../../../../src/.internal/core/elements/Button.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Functionality for drawing simple buttons.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../Container\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { Label } from \"./Label\";\r\nimport { RoundedRectangle } from \"../elements/RoundedRectangle\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Button]].\r\n */\r\nexport interface IButtonProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Icon (if available) position - left or right.\r\n\t */\r\n\ticonPosition?: \"left\" | \"right\";\r\n\r\n\t/**\r\n\t * Icon sprite\r\n\t */\r\n\ticon?: Sprite;\r\n}\r\n\r\n/**\r\n * Defines events for [[Button]].\r\n */\r\nexport interface IButtonEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Button]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IButtonAdapters extends IContainerAdapters, IButtonProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Button class is capable of drawing a simple rectangular button with\r\n * optionally rounded corners and an icon in it.\r\n *\r\n * @see {@link IButtonEvents} for a list of available events\r\n * @see {@link IButtonAdapters} for a list of available Adapters\r\n */\r\nexport class Button extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IButtonProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IButtonAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IButtonEvents;\r\n\r\n\t/**\r\n\t * Icon reference.\r\n\t */\r\n\tprotected _icon: Sprite;\r\n\r\n\t/**\r\n\t * [[Label]] element for button content.\r\n\t */\r\n\tprotected _label: $type.Optional<Label>;\r\n\r\n\t/**\r\n\t * A type for background.\r\n\t */\r\n\tpublic _background: RoundedRectangle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Button\";\r\n\r\n\t\tthis.tooltipY = 0;\r\n\r\n\t\t// Set defaults\r\n\t\tthis.iconPosition = \"left\";\r\n\t\tthis.layout = \"horizontal\";\r\n\t\tthis.contentAlign = \"center\";\r\n\t\tthis.contentValign = \"middle\";\r\n\t\tthis.padding(8, 16, 8, 16);\r\n\t\tthis.setStateOnChildren = true;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create background\r\n\t\tlet background = this.background;\r\n\t\tbackground.fill = interfaceColors.getFor(\"secondaryButton\");\r\n\t\tbackground.stroke = interfaceColors.getFor(\"secondaryButtonStroke\");\r\n\t\tbackground.fillOpacity = 1;\r\n\t\tbackground.strokeOpacity = 1;\r\n\t\tbackground.cornerRadius(3, 3, 3, 3);\r\n\r\n\t\t// Create the label element\r\n\t\tthis.label = new Label();\r\n\t\tthis.label.fill = interfaceColors.getFor(\"secondaryButtonText\");;\r\n\t\tthis.label.shouldClone = false;\r\n\r\n\t\t// Create default states\r\n\t\tlet hoverState = background.states.create(\"hover\");\r\n\t\thoverState.properties.fillOpacity = 1;\r\n\t\thoverState.properties.fill = interfaceColors.getFor(\"secondaryButtonHover\");\r\n\r\n\t\tlet downState = background.states.create(\"down\");\r\n\t\tdownState.transitionDuration = 100;\r\n\t\tdownState.properties.fill = interfaceColors.getFor(\"secondaryButtonDown\");\r\n\t\tdownState.properties.fillOpacity = 1;\r\n\t\t// Set up accessibility\r\n\t\t// A button should be always focusable\r\n\t\tthis.role = \"button\";\r\n\t\tthis.focusable = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Sprite]] to be used as an icon on button.\r\n\t *\r\n\t * @param icon Icon Sprite\r\n\t */\r\n\tpublic set icon(icon: Sprite) {\r\n\t\tlet currentIcon = this._icon;\r\n\t\tif (currentIcon) {\r\n\t\t\t//this._icon.dispose();\r\n\t\t\t//this.removeDispose(currentIcon);\r\n\t\t\tcurrentIcon.parent = undefined;\r\n\t\t}\r\n\t\tif (icon) {\r\n\t\t\tthis._icon = icon;\r\n\t\t\ticon.parent = this;\r\n\t\t\ticon.interactionsEnabled = false;\r\n\t\t\ticon.shouldClone = false;\r\n\t\t\tthis.iconPosition = this.iconPosition;\r\n\t\t\tthis._disposers.push(icon);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Icon Sprite\r\n\t */\r\n\tpublic get icon(): Sprite {\r\n\t\treturn this._icon;\r\n\t}\r\n\r\n\t/**\r\n\t * Icon position: \"left\" or \"right\".\r\n\t *\r\n\t * @default \"left\"\r\n\t * @param position  Icon position\r\n\t */\r\n\tpublic set iconPosition(position: \"left\" | \"right\") {\r\n\t\tthis.setPropertyValue(\"iconPosition\", position);\r\n\r\n\t\tif (this.icon) {\r\n\t\t\tif (position == \"left\") {\r\n\t\t\t\tthis.icon.toBack();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.icon.toFront();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Icon position\r\n\t */\r\n\tpublic get iconPosition(): \"left\" | \"right\" {\r\n\t\treturn this.getPropertyValue(\"iconPosition\");\r\n\t}\r\n\r\n\t/**\r\n\t * [[Label]] element to be used for text.\r\n\t *\r\n\t * @param label element\r\n\t */\r\n\tpublic set label(label: $type.Optional<Label>) {\r\n\t\tif (this._label) {\r\n\t\t\t//this._label.dispose();\r\n\t\t\tthis.removeDispose(this._label);\r\n\t\t}\r\n\t\tthis._label = label;\r\n\t\tif (label) {\r\n\t\t\tlabel.parent = this;\r\n\t\t\tlabel.interactionsEnabled = false;\r\n\t\t\tthis._disposers.push(this._label);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Label element\r\n\t */\r\n\tpublic get label(): $type.Optional<Label> {\r\n\t\treturn this._label;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a background element for the button.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Background element\r\n\t */\r\n\tpublic createBackground(): this[\"_background\"] {\r\n\t\treturn new RoundedRectangle();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties and other attributes.\r\n\t *\r\n\t * @param source  Source\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (source.label) {\r\n\t\t\tthis.label.copyFrom(source.label)\r\n\t\t}\r\n\t\tif (source.icon) {\r\n\t\t\tthis.icon = source.icon.clone();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Button\"] = Button;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}