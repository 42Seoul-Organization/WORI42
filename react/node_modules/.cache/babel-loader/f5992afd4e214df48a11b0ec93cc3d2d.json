{"ast":null,"code":"/**\r\n * Functionality for drawing simple NavigationBar.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Component } from \"../../core/Component\";\nimport { DataItem } from \"../../core/DataItem\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { TextLink } from \"../../core/elements/TextLink\";\nimport { Triangle } from \"../../core/elements/Triangle\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { percent } from \"../../core/utils/Percent\";\nimport * as $iter from \"../../core/utils/Iterator\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[NavigationBar]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar NavigationBarDataItem =\n/** @class */\nfunction (_super) {\n  __extends(NavigationBarDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function NavigationBarDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"NavigationBarDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(NavigationBarDataItem.prototype, \"name\", {\n    /**\r\n     * @return Name\r\n     */\n    get: function () {\n      return this.properties[\"name\"];\n    },\n\n    /**\r\n     * Name of the navigation bar item.\r\n     *\r\n     * @param value  Name\r\n     */\n    set: function (value) {\n      this.setProperty(\"name\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return NavigationBarDataItem;\n}(DataItem);\n\nexport { NavigationBarDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * NavigationBar class can be used to create a multi-level breadcrumb-style\r\n * navigation control.\r\n *\r\n * @see {@link INavigationBarEvents} for a list of available events\r\n * @see {@link INavigationBarAdapters} for a list of available Adapters\r\n * @todo Implement better\r\n * @important\r\n */\n\nvar NavigationBar =\n/** @class */\nfunction (_super) {\n  __extends(NavigationBar, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function NavigationBar() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"NavigationBar\";\n    var interfaceColors = new InterfaceColorSet();\n    var textLink = new TextLink();\n    textLink.valign = \"middle\";\n    textLink.paddingTop = 8;\n    textLink.paddingBottom = 8;\n    _this.paddingBottom = 2;\n    _this.links = new ListTemplate(textLink);\n\n    _this._disposers.push(new ListDisposer(_this.links));\n\n    _this._disposers.push(textLink);\n\n    _this._linksIterator = new $iter.ListIterator(_this.links, function () {\n      return _this.links.create();\n    });\n    _this._linksIterator.createNewItems = true;\n    var triangle = new Triangle();\n    triangle.direction = \"right\";\n    triangle.width = 8;\n    triangle.height = 12;\n    triangle.fill = interfaceColors.getFor(\"alternativeBackground\");\n    triangle.fillOpacity = 0.5;\n    triangle.valign = \"middle\";\n    triangle.marginLeft = 10;\n    triangle.marginRight = 10;\n    _this.separators = new ListTemplate(triangle);\n\n    _this._disposers.push(new ListDisposer(_this.separators));\n\n    _this._disposers.push(triangle);\n\n    var activeLink = new TextLink();\n    _this.activeLink = activeLink;\n    activeLink.copyFrom(textLink);\n    activeLink.valign = \"middle\";\n    activeLink.fontWeight = \"bold\";\n    _this.width = percent(100);\n    _this.layout = \"grid\";\n    _this.dataFields.name = \"name\"; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Completely redraws the navigation bar.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  NavigationBar.prototype.validateDataElements = function () {\n    this.removeChildren();\n\n    this._linksIterator.reset();\n\n    _super.prototype.validateDataElements.call(this); //@todo: dispose\n\n  };\n  /**\r\n   * Creates a visual element for a data item (nav item).\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n\n  NavigationBar.prototype.validateDataElement = function (dataItem) {\n    _super.prototype.validateDataElement.call(this, dataItem);\n\n    var textLink;\n\n    if (dataItem.index < this.dataItems.length - 1) {\n      textLink = this._linksIterator.getLast();\n      textLink.parent = this;\n      var separator = this.separators.create();\n      separator.parent = this;\n      separator.valign = \"middle\";\n    } else {\n      textLink = this.activeLink;\n      textLink.events.copyFrom(this.links.template.events);\n      textLink.hide(0);\n      textLink.show();\n      textLink.parent = this;\n    }\n\n    textLink.dataItem = dataItem;\n    textLink.text = dataItem.name;\n    textLink.validate();\n  };\n\n  return NavigationBar;\n}(Component);\n\nexport { NavigationBar };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"NavigationBar\"] = NavigationBar;\nregistry.registeredClasses[\"NavigationBarDataItem\"] = NavigationBarDataItem;","map":{"version":3,"sources":["../../../../../src/.internal/charts/elements/NavigationBar.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Functionality for drawing simple NavigationBar.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentAdapters, IComponentEvents, IComponentDataFields } from \"../../core/Component\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { TextLink } from \"../../core/elements/TextLink\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[NavigationBar]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class NavigationBarDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: NavigationBar;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBarDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Name of the navigation bar item.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setProperty(\"name\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties[\"name\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * Name of nav var item.\r\n\t */\r\n\tname?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarProperties extends IComponentProperties {\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[NavigationBar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface INavigationBarAdapters extends IComponentAdapters, INavigationBarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * NavigationBar class can be used to create a multi-level breadcrumb-style\r\n * navigation control.\r\n *\r\n * @see {@link INavigationBarEvents} for a list of available events\r\n * @see {@link INavigationBarAdapters} for a list of available Adapters\r\n * @todo Implement better\r\n * @important\r\n */\r\nexport class NavigationBar extends Component {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: INavigationBarDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: INavigationBarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: INavigationBarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: INavigationBarEvents;\r\n\r\n\t/**\r\n\t * A list of breadcrumbs (links) in the nav bar.\r\n\t */\r\n\tpublic links: ListTemplate<TextLink>;\r\n\r\n\t/**\r\n\t * [_linksIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _linksIterator: $iter.ListIterator<TextLink>;\r\n\r\n\t/**\r\n\t * [_separatorsIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _separatorsIterator: $iter.ListIterator<Sprite>;\r\n\r\n\t/**\r\n\t * A reference to the link which is currently active.\r\n\t */\r\n\tpublic activeLink: TextLink;\r\n\r\n\t/**\r\n\t * A list of elements used as nav bar item separators.\r\n\t */\r\n\tpublic separators: ListTemplate<Triangle>;\r\n\r\n\t/**\r\n\t * Identifies the type of the [[DataItem]] used in this element.\r\n\t */\r\n\tpublic _dataItem!: NavigationBarDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet textLink = new TextLink();\r\n\t\ttextLink.valign = \"middle\";\r\n\t\ttextLink.paddingTop = 8;\r\n\t\ttextLink.paddingBottom = 8;\r\n\r\n\t\tthis.paddingBottom = 2;\r\n\r\n\t\tthis.links = new ListTemplate<TextLink>(textLink);\r\n\t\tthis._disposers.push(new ListDisposer(this.links));\r\n\t\tthis._disposers.push(textLink);\r\n\r\n\t\tthis._linksIterator = new $iter.ListIterator<TextLink>(this.links, () => this.links.create());\r\n\t\tthis._linksIterator.createNewItems = true;\r\n\r\n\t\tlet triangle = new Triangle();\r\n\t\ttriangle.direction = \"right\";\r\n\t\ttriangle.width = 8;\r\n\t\ttriangle.height = 12;\r\n\t\ttriangle.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\ttriangle.fillOpacity = 0.5;\r\n\t\ttriangle.valign = \"middle\";\r\n\t\ttriangle.marginLeft = 10;\r\n\t\ttriangle.marginRight = 10;\r\n\r\n\t\tthis.separators = new ListTemplate<Triangle>(triangle);\r\n\t\tthis._disposers.push(new ListDisposer(this.separators));\r\n\t\tthis._disposers.push(triangle);\r\n\r\n\t\tlet activeLink = new TextLink();\r\n\t\tthis.activeLink = activeLink;\r\n\t\tactiveLink.copyFrom(textLink);\r\n\t\tactiveLink.valign = \"middle\";\r\n\t\tactiveLink.fontWeight = \"bold\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.dataFields.name = \"name\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Completely redraws the navigation bar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tthis.removeChildren();\r\n\t\tthis._linksIterator.reset();\r\n\t\tsuper.validateDataElements();\r\n\t\t//@todo: dispose\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a visual element for a data item (nav item).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tlet textLink: TextLink;\r\n\t\tif (dataItem.index < this.dataItems.length - 1) {\r\n\t\t\ttextLink = this._linksIterator.getLast();\r\n\t\t\ttextLink.parent = this;\r\n\t\t\tlet separator = this.separators.create();\r\n\t\t\tseparator.parent = this;\r\n\t\t\tseparator.valign = \"middle\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttextLink = this.activeLink;\r\n\t\t\ttextLink.events.copyFrom(this.links.template.events);\r\n\t\t\ttextLink.hide(0);\r\n\t\t\ttextLink.show();\r\n\t\t\ttextLink.parent = this;\r\n\t\t}\r\n\t\ttextLink.dataItem = dataItem;\r\n\t\ttextLink.text = dataItem.name;\r\n\t\ttextLink.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NavigationBar\"] = NavigationBar;\r\nregistry.registeredClasses[\"NavigationBarDataItem\"] = NavigationBarDataItem;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}